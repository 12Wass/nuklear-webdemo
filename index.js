// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;


// === Body ===

var ASM_CONSTS = [function() { return !!(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement) }];

function _emscripten_asm_const_i(code) {
 return ASM_CONSTS[code]();
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 52640;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,198,0,0,0,198,0,0,128,70,0,0,128,70,32,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,64,65,0,0,152,65,0,0,0,0,0,0,0,0,0,0,80,65,0,0,0,0,0,0,224,64,0,0,128,65,0,0,128,64,0,0,0,65,0,0,248,65,0,0,0,0,0,0,184,65,0,0,184,65,0,0,48,65,0,0,48,65,0,0,168,65,0,0,0,0,0,0,16,65,0,0,184,65,0,0,160,64,0,0,48,65,0,0,92,66,0,0,144,65,0,0,184,65,0,0,16,65,0,0,48,65,0,0,160,64,0,0,146,66,0,0,0,0,0,0,136,65,0,0,136,65,0,0,16,65,0,0,16,65,0,0,92,66,0,0,0,0,0,0,136,65,0,0,136,65,0,0,16,65,0,0,16,65,75,81,0,0,88,82,0,0,0,0,0,0,6,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,8,0,0,0,1,0,0,0,11,0,0,0,16,0,0,0,3,0,0,0,18,0,0,0,0,0,0,0,1,0,0,0,231,3,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,122,83,0,0,130,83,0,0,136,83,0,0,140,83,0,0,145,83,0,0,20,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,8,0,0,0,0,1,0,255,255,16,0,127,0,0,0,255,7,0,0,255,255,0,0,255,255,16,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,32,0,0,0,1,0,0,0,2,0,0,0,196,97,0,0,206,97,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,60,0,0,0,10,0,0,0,1,0,0,0,40,0,0,0,10,0,0,0,1,0,0,0,0,0,160,65,0,0,200,66,0,0,150,67,0,0,62,67,5,0,0,0,0,0,32,64,40,0,0,0,0,0,0,64,10,0,0,0,10,0,0,0,0,0,200,66,0,0,72,66,0,8,0,0,0,16,0,0,0,0,240,66,0,0,22,67,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,65,20,0,0,0,40,0,0,0,10,0,0,0,90,0,0,0,22,102,0,0,27,102,0,0,34,102,0,0,42,102,0,0,49,102,0,0,154,153,25,62,154,153,89,63,0,0,208,65,0,0,80,65,0,0,240,65,0,0,112,65,0,0,200,65,0,0,32,65,0,0,160,65,0,0,32,66,0,0,64,65,0,0,0,65,0,0,176,65,0,0,224,65,0,0,160,64,157,102,0,0,165,102,0,0,174,102,0,0,180,102,0,0,185,102,0,0,189,102,0,0,194,102,0,0,199,102,0,0,206,102,0,0,216,102,0,0,225,102,0,0,234,102,0,0,243,102,0,0,247,102,0,0,251,102,0,0,255,102,0,0,3,103,0,0,7,103,0,0,11,103,0,0,31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,0,0,240,66,0,0,22,67,255,255,255,255,255,255,255,255,40,0,0,0,10,0,0,0,0,0,160,65,0,0,200,66,0,0,92,67,0,0,180,66,205,204,76,62,154,153,25,63,205,204,76,62,0,0,200,66,0,0,72,67,0,0,72,66,1,0,0,0,64,1,0,0,200,0,0,0,231,106,0,0,237,106,0,0,245,106,0,0,0,0,200,66,0,0,200,66,0,0,200,66,0,0,200,66,0,0,200,66,0,0,200,66,144,118,0,0,164,3,0,0,5,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,140,201,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,3,0,0,28,4,0,0,5,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,148,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,114,0,46,47,110,117,107,108,101,97,114,46,104,0,110,107,95,115,116,114,108,101,110,0,110,107,95,115,116,114,116,111,105,0,110,107,95,115,116,114,116,111,100,0,110,32,62,61,32,48,0,110,107,95,115,116,114,105,99,109,112,110,0,112,116,114,0,105,109,103,0,110,107,95,105,109,97,103,101,95,105,115,95,115,117,98,105,109,97,103,101,0,114,101,115,117,108,116,0,110,107,95,116,114,105,97,110,103,108,101,95,102,114,111,109,95,100,105,114,101,99,116,105,111,110,0,99,0,110,107,95,117,116,102,95,100,101,99,111,100,101,0,117,0,110,107,95,117,116,102,95,108,101,110,0,98,117,102,102,101,114,0,117,110,105,99,111,100,101,0,108,101,110,0,98,0,110,107,95,98,117,102,102,101,114,95,105,110,105,116,0,97,0,105,110,105,116,105,97,108,95,115,105,122,101,0,110,107,95,98,117,102,102,101,114,95,105,110,105,116,95,102,105,120,101,100,0,109,0,115,105,122,101,0,110,107,95,98,117,102,102,101,114,95,109,97,114,107,0,110,107,95,98,117,102,102,101,114,95,114,101,115,101,116,0,110,107,95,98,117,102,102,101,114,95,99,108,101,97,114,0,110,107,95,98,117,102,102,101,114,95,102,114,101,101,0,98,45,62,112,111,111,108,46,102,114,101,101,0,115,0,110,107,95,98,117,102,102,101,114,95,109,101,109,111,114,121,0,110,107,95,98,117,102,102,101,114,95,116,111,116,97,108,0,110,107,95,115,116,114,95,97,112,112,101,110,100,95,116,101,120,116,95,99,104,97,114,0,110,107,95,115,116,114,95,105,110,115,101,114,116,95,97,116,95,99,104,97,114,0,108,101,110,32,62,61,32,48,0,40,40,105,110,116,41,112,111,115,32,43,32,40,105,110,116,41,108,101,110,32,43,32,40,40,105,110,116,41,99,111,112,121,108,101,110,32,45,32,49,41,41,32,62,61,32,48,0,40,40,105,110,116,41,112,111,115,32,43,32,40,40,105,110,116,41,99,111,112,121,108,101,110,32,45,32,49,41,41,32,62,61,32,48,0,110,107,95,115,116,114,95,105,110,115,101,114,116,95,97,116,95,114,117,110,101,0,99,115,116,114,0,110,107,95,115,116,114,95,105,110,115,101,114,116,95,116,101,120,116,95,117,116,102,56,0,116,101,120,116,0,110,107,95,115,116,114,95,105,110,115,101,114,116,95,116,101,120,116,95,114,117,110,101,115,0,110,107,95,115,116,114,95,114,101,109,111,118,101,95,99,104,97,114,115,0,40,40,105,110,116,41,115,45,62,98,117,102,102,101,114,46,97,108,108,111,99,97,116,101,100,32,45,32,40,105,110,116,41,108,101,110,41,32,62,61,32,48,0,110,107,95,115,116,114,95,100,101,108,101,116,101,95,99,104,97,114,115,0,110,107,95,115,116,114,95,100,101,108,101,116,101,95,114,117,110,101,115,0,115,45,62,108,101,110,32,62,61,32,112,111,115,32,43,32,108,101,110,0,110,107,95,115,116,114,95,97,116,95,114,117,110,101,0,110,107,95,115,116,114,95,97,116,95,99,111,110,115,116,0,110,107,95,115,116,114,95,103,101,116,95,99,111,110,115,116,0,110,107,95,115,116,114,95,108,101,110,0,110,107,95,115,116,114,95,108,101,110,95,99,104,97,114,0,110,107,95,112,117,115,104,95,115,99,105,115,115,111,114,0,110,107,95,115,116,114,111,107,101,95,108,105,110,101,0,110,107,95,115,116,114,111,107,101,95,99,117,114,118,101,0,110,107,95,115,116,114,111,107,101,95,114,101,99,116,0,110,107,95,102,105,108,108,95,114,101,99,116,0,110,107,95,102,105,108,108,95,114,101,99,116,95,109,117,108,116,105,95,99,111,108,111,114,0,110,107,95,102,105,108,108,95,99,105,114,99,108,101,0,110,107,95,102,105,108,108,95,116,114,105,97,110,103,108,101,0,110,107,95,100,114,97,119,95,105,109,97,103,101,0,110,107,95,100,114,97,119,95,116,101,120,116,0,102,111,110,116,0,108,105,115,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,105,110,105,116,0,99,97,110,118,97,115,0,110,107,95,100,114,97,119,95,108,105,115,116,95,115,101,116,117,112,0,99,111,110,102,105,103,0,99,109,100,115,0,118,101,114,116,105,99,101,115,0,101,108,101,109,101,110,116,115,0,110,107,95,95,100,114,97,119,95,108,105,115,116,95,98,101,103,105,110,0,110,107,95,95,100,114,97,119,95,108,105,115,116,95,101,110,100,0,110,107,95,95,100,114,97,119,95,108,105,115,116,95,110,101,120,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,99,108,101,97,114,0,110,107,95,100,114,97,119,95,108,105,115,116,95,115,116,114,111,107,101,95,112,111,108,121,95,108,105,110,101,0,118,116,120,32,38,38,32,105,100,115,0,110,111,114,109,97,108,115,0,110,107,95,100,114,97,119,95,108,105,115,116,95,102,105,108,108,95,112,111,108,121,95,99,111,110,118,101,120,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,99,108,101,97,114,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,108,105,110,101,95,116,111,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,97,114,99,95,116,111,95,102,97,115,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,97,114,99,95,116,111,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,114,101,99,116,95,116,111,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,99,117,114,118,101,95,116,111,0,108,105,115,116,45,62,112,97,116,104,95,99,111,117,110,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,102,105,108,108,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,115,116,114,111,107,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,115,116,114,111,107,101,95,108,105,110,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,102,105,108,108,95,114,101,99,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,115,116,114,111,107,101,95,114,101,99,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,102,105,108,108,95,114,101,99,116,95,109,117,108,116,105,95,99,111,108,111,114,0,110,107,95,100,114,97,119,95,108,105,115,116,95,102,105,108,108,95,116,114,105,97,110,103,108,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,115,116,114,111,107,101,95,116,114,105,97,110,103,108,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,102,105,108,108,95,99,105,114,99,108,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,115,116,114,111,107,101,95,99,105,114,99,108,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,115,116,114,111,107,101,95,99,117,114,118,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,97,100,100,95,105,109,97,103,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,97,100,100,95,116,101,120,116,0,99,116,120,0,110,107,95,99,111,110,118,101,114,116,0,99,111,110,102,105,103,45,62,118,101,114,116,101,120,95,108,97,121,111,117,116,0,99,111,110,102,105,103,45,62,118,101,114,116,101,120,95,115,105,122,101,0,110,107,95,102,111,110,116,95,102,105,110,100,95,103,108,121,112,104,0,102,111,110,116,45,62,103,108,121,112,104,115,0,102,111,110,116,45,62,105,110,102,111,46,114,97,110,103,101,115,0,97,116,108,97,115,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,105,110,105,116,95,100,101,102,97,117,108,116,0,97,108,108,111,99,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,98,101,103,105,110,0,97,116,108,97,115,45,62,116,101,109,112,111,114,97,114,121,46,97,108,108,111,99,32,38,38,32,97,116,108,97,115,45,62,116,101,109,112,111,114,97,114,121,46,102,114,101,101,0,97,116,108,97,115,45,62,112,101,114,109,97,110,101,110,116,46,97,108,108,111,99,32,38,38,32,97,116,108,97,115,45,62,112,101,114,109,97,110,101,110,116,46,102,114,101,101,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,97,100,100,0,97,116,108,97,115,45,62,112,101,114,109,97,110,101,110,116,46,97,108,108,111,99,0,97,116,108,97,115,45,62,112,101,114,109,97,110,101,110,116,46,102,114,101,101,0,97,116,108,97,115,45,62,116,101,109,112,111,114,97,114,121,46,97,108,108,111,99,0,97,116,108,97,115,45,62,116,101,109,112,111,114,97,114,121,46,102,114,101,101,0,99,111,110,102,105,103,45,62,116,116,102,95,98,108,111,98,0,99,111,110,102,105,103,45,62,116,116,102,95,115,105,122,101,0,99,111,110,102,105,103,45,62,115,105,122,101,32,62,32,48,46,48,102,0,97,116,108,97,115,45,62,102,111,110,116,95,110,117,109,0,99,102,103,45,62,116,116,102,95,98,108,111,98,0,109,101,109,111,114,121,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,97,100,100,95,99,111,109,112,114,101,115,115,101,100,0,99,111,109,112,114,101,115,115,101,100,95,100,97,116,97,0,99,111,109,112,114,101,115,115,101,100,95,115,105,122,101,0,100,101,99,111,109,112,114,101,115,115,101,100,95,100,97,116,97,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,97,100,100,95,99,111,109,112,114,101,115,115,101,100,95,98,97,115,101,56,53,0,100,97,116,97,95,98,97,115,101,56,53,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,97,100,100,95,100,101,102,97,117,108,116,0,55,93,41,35,35,35,35,35,35,35,104,86,48,113,115,39,47,35,35,35,91,41,44,35,35,47,108,58,36,35,81,54,62,35,35,53,91,110,52,50,62,99,45,84,72,96,45,62,62,35,47,101,62,49,49,78,78,86,61,66,118,40,42,58,46,70,63,117,117,35,40,103,82,85,46,111,48,88,71,72,96,36,118,104,76,71,49,104,120,116,57,63,87,96,35,44,53,76,115,67,112,35,45,105,62,46,114,36,60,36,54,112,68,62,76,98,39,59,57,67,114,99,54,116,103,88,109,75,86,101,85,50,99,68,52,69,111,51,82,47,50,42,62,93,98,40,77,67,59,36,106,80,102,89,46,59,104,94,96,73,87,77,57,60,76,104,50,84,108,83,43,102,45,115,36,111,54,81,60,66,87,72,96,89,105,85,46,120,102,76,113,36,78,59,36,48,105,82,47,71,88,58,85,40,106,99,87,50,112,47,87,42,113,63,45,113,109,110,85,67,73,59,106,72,83,65,105,70,87,77,46,82,42,107,85,64,67,61,71,72,63,97,57,119,112,56,102,36,101,46,45,52,94,81,103,49,41,81,45,71,76,40,108,102,40,114,47,55,71,114,82,103,119,86,37,77,83,61,67,35,96,56,78,68,62,81,111,35,116,39,88,35,40,118,35,89,57,119,48,35,49,68,36,67,73,102,59,87,39,35,112,87,85,80,88,79,117,120,88,117,85,40,72,57,77,40,49,60,113,45,85,69,51,49,35,94,45,86,39,56,73,82,85,111,55,81,102,46,47,76,62,61,75,101,36,36,39,53,70,37,41,93,48,94,35,48,88,64,85,46,97,60,114,58,81,76,116,70,115,76,99,76,54,35,35,108,79,106,41,35,46,89,53,60,45,82,38,75,103,76,119,113,74,102,76,103,78,38,59,81,63,103,73,94,35,68,89,50,117,76,105,64,94,114,77,108,57,116,61,99,87,113,54,35,35,119,101,103,62,36,70,66,106,86,81,84,83,68,103,69,75,110,73,83,55,69,77,57,62,90,89,57,119,48,35,76,59,62,62,35,77,120,38,52,77,118,116,47,47,76,91,77,107,65,35,87,64,108,75,46,78,39,91,48,35,55,82,76,95,38,35,119,43,70,37,72,116,71,57,77,35,88,76,96,78,38,46,44,71,77,52,80,103,59,45,60,110,76,69,78,104,118,120,62,45,86,115,77,46,77,48,114,74,102,76,72,50,101,84,77,96,42,111,74,77,72,82,67,96,78,107,102,105,109,77,50,74,44,87,45,106,88,83,58,41,114,48,119,75,35,64,70,103,101,36,85,62,96,119,39,78,55,71,35,36,35,102,66,35,36,69,94,36,35,58,57,58,104,107,43,101,79,101,45,45,54,120,41,70,55,42,69,37,63,55,54,37,94,71,77,72,101,80,87,45,90,53,108,39,38,71,105,70,35,36,57,53,54,58,114,83,63,100,65,35,102,105,75,58,41,89,114,43,96,38,35,48,106,64,39,68,98,71,38,35,94,36,80,71,46,76,108,43,68,78,97,60,88,67,77,75,69,86,42,78,41,76,78,47,78,42,98,61,37,81,54,112,105,97,45,88,103,56,73,36,60,77,82,38,44,86,100,74,101,36,60,40,55,71,59,67,107,108,39,38,104,70,59,59,36,60,95,61,88,40,98,46,82,83,37,37,41,35,35,35,77,80,66,117,117,69,49,86,58,118,38,99,88,38,35,50,109,35,40,38,99,86,93,96,107,57,79,104,76,77,98,110,37,115,36,71,50,44,66,36,66,102,68,51,88,42,115,112,53,35,108,44,36,82,35,93,120,95,88,49,120,75,88,37,98,53,85,42,91,114,53,105,77,102,85,111,57,85,96,78,57,57,104,71,41,116,109,43,47,85,115,57,112,71,41,88,80,117,96,60,48,115,45,41,87,84,116,40,103,67,82,120,73,103,40,37,54,115,102,104,61,107,116,77,75,110,51,106,41,60,54,60,98,53,83,107,95,47,48,40,94,93,65,97,78,35,40,112,47,76,62,38,86,90,62,49,105,37,104,49,83,57,117,53,111,64,89,97,97,87,36,101,43,98,60,84,87,70,110,47,90,58,79,104,40,67,120,50,36,108,78,69,111,78,94,101,41,35,67,70,89,64,64,73,59,66,79,81,42,115,82,119,90,116,90,120,82,99,85,55,117,87,54,67,88,111,119,48,105,40,63,36,81,91,99,106,79,100,91,80,52,100,41,93,62,82,79,80,79,112,120,84,79,55,83,116,119,105,49,58,58,105,66,49,113,41,67,95,61,100,86,50,54,74,59,50,44,93,55,111,112,36,93,117,81,114,64,95,86,55,36,113,94,37,108,81,119,116,117,72,89,93,61,68,88,44,110,51,76,35,48,80,72,68,79,52,102,57,62,100,67,64,79,62,72,66,117,75,80,112,80,42,69,44,78,43,98,51,76,35,108,112,82,47,77,114,84,69,72,46,73,65,81,107,46,97,62,68,91,46,101,59,109,99,46,120,93,73,112,46,80,72,94,39,47,97,113,85,79,47,36,49,87,120,76,111,87,48,91,105,76,65,60,81,84,59,53,72,75,68,43,64,113,81,39,78,81,40,51,95,80,76,104,69,52,56,82,46,113,65,80,83,119,81,48,47,87,75,63,90,44,91,120,63,45,74,59,106,81,84,87,65,48,88,64,75,74,40,95,89,56,78,45,58,47,77,55,52,58,47,45,90,112,75,114,85,115,115,63,100,35,100,90,113,93,68,65,98,107,85,42,74,113,107,76,43,110,119,88,64,64,52,55,96,53,62,119,61,52,104,40,57,46,96,71,67,82,85,120,72,80,101,82,96,53,77,106,111,108,40,100,85,87,120,90,97,40,62,83,84,114,80,107,114,74,105,87,120,96,53,85,55,70,35,46,103,42,106,114,111,104,71,103,96,99,103,58,108,83,84,118,69,89,47,69,86,95,55,72,52,81,57,91,90,37,99,110,118,59,74,81,89,90,53,113,46,108,55,90,101,97,115,58,72,79,73,90,79,66,63,71,60,78,97,108,100,36,113,115,93,64,93,76,60,74,55,98,82,42,62,103,118,58,91,55,77,73,50,107,41,46,39,50,40,36,53,70,78,80,38,69,81,40,44,41,85,93,87,93,43,102,104,49,56,46,118,115,97,105,48,48,41,59,68,51,64,52,107,117,53,80,63,68,80,56,97,74,116,43,59,113,85,77,93,61,43,98,39,56,64,59,109,86,105,66,75,120,48,68,69,91,45,97,117,71,108,56,58,80,74,38,68,106,43,77,54,79,67,93,79,94,40,40,35,35,93,96,48,105,41,100,114,84,59,45,55,88,96,61,45,72,51,91,105,103,85,110,80,71,45,78,90,108,111,46,35,107,64,104,35,61,79,114,107,36,109,62,97,62,36,45,63,84,109,36,85,86,40,63,35,80,54,89,89,35,39,47,35,35,35,120,101,55,113,46,55,51,114,73,51,42,112,80,47,36,49,62,115,57,41,87,44,74,114,77,55,83,78,93,39,47,52,67,35,118,36,85,96,48,35,86,46,91,48,62,120,81,115,72,36,102,69,109,80,77,103,89,50,117,55,75,104,40,71,37,115,105,73,102,76,83,111,83,43,77,75,50,101,84,77,36,61,53,44,77,56,112,96,65,46,59,95,82,37,35,117,91,75,35,36,120,52,65,71,56,46,107,75,47,72,83,66,61,61,45,39,73,101,47,81,84,116,71,63,45,46,42,94,78,45,52,66,47,90,77,95,51,89,108,81,67,55,40,112,55,113,41,38,93,40,96,54,95,99,41,36,47,42,74,76,40,76,45,94,40,93,36,119,73,77,96,100,80,116,79,100,71,65,44,85,51,58,119,50,77,45,48,60,113,45,93,76,95,63,94,41,49,118,119,39,46,44,77,82,115,113,86,114,46,76,59,97,78,38,35,47,69,103,74,41,80,66,99,91,45,102,62,43,87,111,109,88,50,117,55,108,113,77,50,105,69,117,109,77,84,99,115,70,63,45,97,84,61,90,45,57,55,85,69,110,88,103,108,69,110,49,75,45,98,110,69,79,96,103,117,70,116,40,99,37,61,59,65,109,95,81,115,64,106,76,111,111,73,38,78,88,59,93,48,35,106,52,35,70,49,52,59,103,108,56,45,71,81,112,103,119,104,114,113,56,39,61,108,95,102,45,98,52,57,39,85,79,113,107,76,117,55,45,35,35,111,68,89,50,76,40,116,101,43,77,99,104,38,103,76,89,116,74,44,77,69,116,74,102,76,104,39,120,39,77,61,36,67,83,45,90,90,37,80,93,56,98,90,62,35,83,63,89,89,35,37,81,38,113,39,51,94,70,119,38,63,68,41,85,68,78,114,111,99,77,51,65,55,54,47,47,111,76,63,35,104,55,103,108,56,53,91,113,87,47,78,68,79,107,37,49,54,105,106,59,43,58,49,97,39,105,78,73,100,98,45,111,117,56,46,80,42,119,44,118,53,35,69,73,36,84,87,83,62,80,111,116,45,82,42,72,39,45,83,69,112,65,58,103,41,102,43,79,36,37,37,96,107,65,35,71,61,56,82,77,109,71,49,38,79,96,62,116,111,56,98,67,93,84,38,36,44,110,46,76,111,79,62,50,57,115,112,51,100,116,45,53,50,85,37,86,77,35,113,55,39,68,72,112,103,43,35,90,57,37,72,91,75,60,76,37,97,50,69,45,103,114,87,86,77,51,64,50,61,45,107,50,50,116,76,93,52,36,35,35,54,87,101,39,56,85,74,67,75,69,91,100,95,61,37,119,73,59,39,54,88,45,71,115,76,88,52,106,94,83,103,74,36,35,35,82,42,119,44,118,80,51,119,75,35,105,105,87,38,35,42,104,94,68,38,82,63,106,112,55,43,47,117,38,35,40,65,80,35,35,88,85,56,99,36,102,83,89,87,45,74,57,53,95,45,68,112,91,103,57,119,99,79,38,35,77,45,104,49,79,99,74,108,99,45,42,118,112,119,48,120,85,88,38,35,79,81,70,75,78,88,64,81,73,39,73,111,80,112,55,110,98,44,81,85,47,47,77,81,38,90,68,107,75,80,41,88,60,87,83,86,76,40,54,56,117,86,108,38,35,99,39,91,48,35,40,115,49,88,38,120,109,36,89,37,66,55,42,75,58,101,68,65,51,50,51,106,57,57,56,71,88,98,65,35,112,119,77,115,45,106,103,68,36,57,81,73,83,66,45,65,95,40,97,78,52,120,111,70,77,94,64,67,53,56,68,48,43,81,43,113,51,110,48,35,51,85,49,73,110,68,106,70,54,56,50,45,83,106,77,88,74,75,41,40,104,36,104,120,117,97,95,75,93,117,108,57,50,37,39,66,79,85,38,35,66,82,82,104,45,115,108,103,56,75,68,108,114,58,37,76,55,49,75,97,58,46,65,59,37,89,85,76,106,68,80,109,76,60,76,89,115,56,105,35,88,119,74,79,89,97,75,80,75,99,49,104,58,39,57,75,101,44,103,41,98,41,44,55,56,61,73,51,57,66,59,120,105,89,36,98,103,71,119,45,38,46,90,105,57,73,110,88,68,117,89,97,37,71,42,102,50,66,113,55,109,110,57,94,35,112,49,118,118,37,35,40,87,105,45,59,47,90,53,104,111,59,35,50,58,59,37,100,38,35,120,57,118,54,56,67,53,103,63,110,116,88,48,88,41,112,84,96,59,37,112,66,51,113,55,109,103,71,78,41,51,37,40,80,56,110,84,100,53,76,55,71,101,65,45,71,76,64,43,37,74,51,117,50,58,40,89,102,62,101,116,96,101,59,41,102,35,75,109,56,38,43,68,67,36,73,52,54,62,35,75,114,93,93,117,45,91,61,57,57,116,116,115,49,46,113,98,35,113,55,50,103,49,87,74,79,56,49,113,43,101,78,39,48,51,39,101,77,62,38,49,88,120,89,45,99,97,69,110,79,106,37,50,110,56,41,41,44,63,73,76,82,53,94,46,73,98,110,60,45,88,45,77,113,55,91,97,56,50,76,113,58,70,38,35,99,101,43,83,57,119,115,67,75,42,120,96,53,54,57,69,56,101,119,39,72,101,93,104,58,115,73,91,50,76,77,36,91,103,117,107,97,51,90,82,100,54,58,116,37,73,71,58,59,36,37,89,105,74,58,78,113,61,63,101,65,119,59,47,58,110,110,68,113,48,40,67,89,99,77,112,71,41,113,76,78,52,36,35,35,38,74,60,106,36,85,112,75,60,81,52,97,49,93,77,117,112,87,94,45,115,106,95,36,37,91,72,75,37,39,70,35,35,35,35,81,82,90,74,58,58,89,51,69,71,108,52,39,64,37,70,107,105,65,79,103,35,112,91,35,35,79,96,103,117,107,84,102,66,72,97,103,76,60,76,72,119,37,113,38,79,86,48,35,35,70,61,54,47,58,99,104,73,109,48,64,101,67,80,56,88,93,58,107,70,73,37,104,108,56,104,103,79,64,82,99,66,104,83,45,64,81,98,36,37,43,109,61,104,80,68,76,103,42,37,75,56,108,110,40,119,99,102,51,47,39,68,87,45,36,46,108,82,63,110,91,110,67,72,45,101,88,79,79,78,84,74,108,104,58,46,82,89,70,37,51,39,112,54,115,113,58,85,73,77,65,57,52,53,38,94,72,70,83,56,55,64,36,69,80,50,105,71,60,45,108,67,79,36,37,99,96,117,75,71,68,51,114,67,36,120,48,66,76,56,97,70,110,45,45,96,107,101,37,35,72,77,80,39,118,104,49,47,82,38,79,95,74,57,39,117,109,44,46,60,116,120,91,64,37,119,115,74,107,38,98,85,84,50,96,48,117,77,118,55,103,103,35,113,112,47,105,106,46,76,53,54,39,104,108,59,46,115,53,67,85,114,120,106,79,77,55,45,35,35,46,108,43,65,117,39,65,38,79,58,45,84,55,50,76,93,80,96,38,61,59,99,116,112,39,88,83,99,88,42,114,85,46,62,45,88,84,116,44,37,79,86,85,52,41,83,49,43,82,45,35,100,103,48,47,78,110,63,75,117,49,94,48,102,36,66,42,80,58,82,111,119,119,109,45,96,48,80,75,106,89,68,68,77,39,51,93,100,51,57,86,90,72,69,108,52,44,46,106,39,93,80,107,45,77,46,104,94,38,58,48,70,65,67,109,36,109,97,113,45,38,115,103,119,48,116,55,47,54,40,94,120,116,107,37,76,117,72,56,56,70,106,45,101,107,109,62,71,65,35,95,62,53,54,56,120,54,40,79,70,82,108,45,73,90,112,96,38,98,44,95,80,39,36,77,60,74,110,113,55,57,86,115,74,87,47,109,87,83,42,80,85,105,113,55,54,59,93,47,78,77,95,62,104,76,98,120,102,99,36,109,106,96,44,79,59,38,37,87,50,109,96,90,104,58,47,41,85,101,116,119,58,97,74,37,93,75,57,104,58,84,99,70,93,117,95,45,83,106,57,44,86,75,51,77,46,42,39,38,48,68,91,67,97,93,74,57,103,112,56,44,107,65,87,93,37,40,63,65,37,82,36,102,60,45,62,90,116,115,39,94,107,110,61,45,94,64,99,52,37,45,112,89,54,113,73,37,74,37,49,73,71,120,102,76,85,57,67,80,56,99,98,80,108,88,118,41,59,67,61,98,41,44,60,50,109,79,118,80,56,117,112,44,85,86,102,51,56,51,57,97,99,65,87,65,87,45,87,63,35,97,111,47,94,35,37,75,89,111,56,102,82,85,76,78,100,50,46,62,37,109,93,85,75,58,110,37,114,36,39,115,119,93,74,59,53,112,65,111,79,95,35,50,109,79,51,110,44,39,61,72,53,40,101,116,72,103,42,96,43,82,76,103,118,62,61,52,85,56,103,117,68,36,73,37,68,58,87,62,45,114,53,86,42,37,106,42,87,58,75,118,101,106,46,76,112,36,60,77,45,83,71,90,39,58,43,81,95,107,43,117,118,79,83,76,105,69,111,40,60,97,68,47,75,60,67,67,99,96,39,76,120,62,39,63,59,43,43,79,39,62,40,41,106,76,82,45,94,117,54,56,80,72,109,56,90,70,87,101,43,101,106,56,104,58,57,114,54,76,42,48,47,47,99,38,105,72,38,82,56,112,82,98,65,35,75,106,109,37,117,112,86,49,103,58,97,95,35,85,114,55,70,117,65,35,40,116,82,104,35,46,89,53,75,43,64,63,51,60,45,56,109,48,36,80,69,110,59,74,58,114,104,54,63,73,54,117,71,60,45,96,119,77,85,39,105,114,99,112,48,76,97,69,95,79,116,108,77,98,38,49,35,54,84,46,35,70,68,75,117,35,49,76,119,37,117,37,43,71,77,43,88,39,101,63,89,76,102,106,77,91,86,79,48,77,98,117,70,112,55,59,62,81,38,35,87,73,111,41,48,64,70,37,113,55,99,35,52,88,65,88,78,45,85,38,86,66,60,72,70,70,42,113,76,40,36,47,86,44,59,40,107,88,90,101,106,87,79,96,60,91,53,63,63,101,119,89,40,42,57,61,37,119,68,99,59,44,117,60,39,57,116,51,87,45,40,72,49,116,104,51,43,71,93,117,99,81,93,107,76,115,55,100,102,40,36,47,42,74,76,93,64,42,116,55,66,117,95,71,51,95,55,109,112,55,60,105,97,81,106,79,64,46,107,76,103,59,120,51,66,48,108,113,112,55,72,102,44,94,90,101,55,45,35,35,64,47,99,53,56,77,111,40,51,59,107,110,112,48,37,41,65,55,63,45,87,43,101,73,39,111,56,41,98,60,110,75,110,119,39,72,111,56,67,61,89,62,112,113,66,62,48,105,101,38,106,104,90,91,63,105,76,82,64,64,95,65,118,65,45,105,81,67,40,61,107,115,82,90,82,86,112,55,96,46,61,43,78,112,66,67,37,114,104,38,51,93,82,58,56,88,68,109,69,53,94,86,56,79,40,120,60,60,97,71,47,49,78,36,35,70,88,36,48,86,53,89,54,120,39,97,69,114,73,51,73,36,55,120,37,69,96,118,60,45,66,89,44,41,37,45,63,80,115,102,42,108,63,37,67,51,46,109,77,40,61,47,77,48,58,74,120,71,39,63,55,87,104,72,37,111,39,97,60,45,56,48,103,48,78,66,120,111,79,40,71,72,60,100,77,93,110,46,43,37,113,64,106,72,63,102,46,85,115,74,50,71,103,115,38,52,60,45,101,52,55,38,75,108,43,102,47,47,57,64,96,98,43,63,46,84,101,78,95,38,66,56,83,115,63,118,59,94,84,114,107,59,102,35,89,118,74,107,108,38,119,36,93,62,45,43,107,63,39,40,60,83,58,54,56,116,113,42,87,111,68,102,90,117,39,59,109,77,63,56,88,91,109,97,56,87,37,42,96,45,61,59,68,46,40,110,99,55,47,59,41,103,58,84,49,61,94,74,36,38,66,82,86,40,45,108,84,109,78,66,54,120,113,66,91,64,48,42,111,46,101,114,77,42,60,83,87,70,93,117,50,61,115,116,45,42,40,54,118,62,94,93,40,72,46,97,82,69,90,83,105,44,35,49,58,91,73,88,97,90,70,79,109,60,45,117,105,35,113,85,113,50,36,35,35,82,105,59,117,55,53,79,75,35,40,82,116,97,87,45,75,45,70,96,83,43,99,70,93,117,78,96,45,75,77,81,37,114,80,47,88,114,105,46,76,82,99,66,35,35,61,89,76,51,66,103,77,47,51,77,68,63,64,102,38,49,39,66,87,45,41,74,117,60,76,50,53,103,108,56,117,104,86,109,49,104,76,36,35,35,42,56,35,35,35,39,65,51,47,76,107,75,87,43,40,94,114,87,88,63,53,87,95,56,103,41,97,40,109,38,75,56,80,62,35,98,109,109,87,67,77,107,107,38,35,84,82,96,67,44,53,100,62,103,41,70,59,116,44,52,58,64,95,108,56,71,47,53,104,52,118,85,100,37,38,37,57,53,48,58,86,88,68,39,81,100,87,111,89,45,70,36,66,116,85,119,109,102,101,36,89,113,76,39,56,40,80,87,88,40,80,63,94,64,80,111,51,36,35,35,96,77,83,115,63,68,87,66,90,47,83,62,43,52,37,62,102,88,44,86,87,118,47,119,39,75,68,96,76,80,53,73,98,72,59,114,84,86,62,110,51,99,69,75,56,85,35,98,88,93,108,45,47,86,43,94,108,106,51,59,118,108,77,98,38,91,53,89,81,56,35,112,101,107,88,57,74,80,51,88,85,67,55,50,76,44,44,63,43,78,105,38,99,111,55,65,112,110,79,42,53,78,75,44,40,40,87,45,105,58,36,44,107,112,39,85,68,65,79,40,71,48,83,113,55,77,86,106,74,115,98,73,117,41,39,90,44,42,91,62,98,114,53,102,88,94,58,70,80,65,87,114,45,109,50,75,103,76,60,76,85,78,48,57,56,107,84,70,38,35,108,118,111,53,56,61,47,118,106,68,111,59,46,59,41,75,97,42,104,76,82,35,47,107,61,114,75,98,120,117,86,96,62,81,95,110,78,54,39,56,117,84,71,38,35,49,84,53,103,41,117,76,118,58,56,55,51,85,112,84,76,103,72,43,35,70,103,112,72,39,95,111,49,55,56,48,80,104,56,75,109,120,81,74,56,35,72,55,50,76,52,64,55,54,56,64,84,109,38,81,104,52,67,66,47,53,79,118,109,65,38,44,81,38,81,98,85,111,105,36,97,95,37,51,77,48,49,72,41,52,120,55,73,94,38,75,81,86,103,116,70,110,86,43,59,91,80,99,62,91,109,52,107,47,47,44,93,49,63,35,96,86,89,91,74,114,42,51,38,38,115,108,82,102,76,105,86,90,74,58,93,63,61,75,51,83,119,61,91,36,61,117,82,66,63,51,120,107,52,56,64,97,101,103,60,90,39,60,36,35,52,72,41,54,44,62,101,48,106,84,54,39,78,35,40,113,37,46,79,61,63,50,83,93,117,42,40,109,60,45,86,56,74,39,40,49,41,71,93,91,54,56,104,87,36,53,39,113,91,71,67,38,53,106,96,84,69,63,109,39,101,115,70,71,78,82,77,41,106,44,102,102,90,63,45,113,120,56,59,45,62,103,52,116,42,58,67,73,80,47,91,81,97,112,55,47,57,39,35,40,49,115,97,111,55,119,45,46,113,78,85,100,107,74,41,116,67,70,38,35,66,94,59,120,71,118,110,50,114,57,70,69,80,70,70,70,99,76,64,46,105,70,78,107,84,118,101,36,109,37,35,81,118,81,83,56,85,64,41,50,90,43,51,75,58,65,75,77,53,105,115,90,56,56,43,100,75,81,41,87,54,62,74,37,67,76,60,75,69,62,96,46,100,42,40,66,96,45,110,56,68,57,111,75,60,85,112,93,99,36,88,36,40,44,41,77,56,90,116,55,47,91,114,100,107,113,84,103,108,45,48,99,117,71,77,118,39,63,62,45,88,86,49,113,91,39,45,53,107,39,99,65,90,54,57,101,59,68,95,63,36,90,80,80,38,115,94,43,55,93,41,36,42,36,35,64,81,89,105,57,44,53,80,38,35,57,114,43,36,37,67,69,61,54,56,62,75,56,114,48,61,100,83,67,37,37,40,64,112,55,46,109,55,106,105,108,81,48,50,39,48,45,86,87,65,103,60,97,47,39,39,51,117,46,61,52,76,36,89,41,54,107,47,75,58,95,91,51,61,38,106,118,76,60,76,48,67,47,50,39,118,58,94,59,45,68,73,66,87,44,66,52,69,54,56,58,107,90,59,37,63,56,40,81,56,66,72,61,107,79,54,53,66,87,63,120,83,71,38,35,64,117,85,44,68,83,42,44,63,46,43,40,111,40,35,49,118,67,83,56,35,67,72,70,62,84,108,71,87,39,98,41,84,113,55,86,84,57,113,94,42,94,36,36,46,58,38,78,64,64,36,38,41,87,72,116,80,109,42,53,95,114,79,48,38,101,37,75,38,35,45,51,48,106,40,69,52,35,39,90,98,46,111,47,40,84,112,109,36,62,75,39,102,64,91,80,118,70,108,44,104,102,73,78,84,78,85,54,117,39,48,112,97,111,55,37,88,85,112,57,93,53,46,62,37,104,96,56,95,61,86,89,98,120,117,101,108,46,78,84,83,115,74,102,76,97,99,70,117,51,66,39,108,81,83,117,47,109,54,45,79,113,101,109,56,84,43,111,69,45,45,36,48,97,47,107,93,117,106,57,69,119,115,71,62,37,118,101,82,42,104,118,94,66,70,112,81,106,58,75,39,35,83,74,44,115,66,45,39,35,93,40,106,46,76,103,57,50,114,84,119,45,42,110,37,64,47,59,51,57,114,114,74,70,44,108,35,113,86,37,79,114,116,66,101,67,54,47,44,59,113,66,51,101,98,78,87,91,63,44,72,113,106,50,76,46,49,78,80,38,71,106,85,82,61,49,68,56,81,97,83,51,85,112,38,64,42,57,119,80,63,43,108,111,55,98,63,64,37,39,107,52,96,112,48,90,36,50,50,37,75,51,43,105,67,90,106,63,88,74,78,52,78,109,38,43,89,70,93,117,64,45,87,36,85,37,86,69,81,47,44,44,62,62,35,41,68,60,104,35,96,41,104,48,58,60,81,54,57,48,57,117,97,43,38,86,85,37,110,50,58,99,71,51,70,74,45,37,64,66,106,45,68,103,76,114,96,72,119,38,72,65,75,106,75,106,115,101,75,60,47,120,75,84,42,41,66,44,78,57,88,51,93,107,114,99,49,50,116,39,112,103,84,86,40,76,118,45,116,76,91,120,103,95,37,61,77,95,113,55,97,94,120,63,55,85,98,100,62,35,37,56,99,89,35,89,90,63,61,44,96,87,100,120,117,47,97,101,38,35,119,54,41,82,56,57,116,73,35,54,64,115,39,40,54,66,102,55,97,38,63,83,61,94,90,73,95,107,83,38,97,105,96,38,61,116,69,55,50,76,95,68,44,59,94,82,41,55,91,36,115,60,69,104,35,99,38,41,113,46,77,88,73,37,35,118,57,82,79,97,53,70,90,79,37,115,70,55,113,55,78,119,98,38,35,112,116,85,74,58,97,113,74,101,36,83,108,54,56,37,46,68,35,35,35,69,67,62,60,63,45,97,70,38,35,82,78,81,118,62,111,56,108,75,78,37,53,47,36,40,118,100,102,113,55,43,101,98,65,35,117,49,112,93,111,118,85,75,87,38,89,37,113,93,39,62,36,49,64,45,91,120,102,110,36,55,90,84,112,55,109,77,44,71,44,75,111,55,97,38,71,117,37,71,91,82,77,120,74,115,91,48,77,77,37,119,99,105,46,76,70,68,75,41,40,60,99,96,81,56,78,41,106,69,73,70,42,43,63,80,50,97,56,103,37,41,36,113,93,111,50,97,72,56,67,38,60,83,105,98,67,47,113,44,40,101,58,118,59,45,98,35,54,91,36,78,116,68,90,56,52,74,101,50,75,78,118,66,35,36,80,53,63,116,81,51,110,116,40,48,100,61,106,46,76,81,102,46,47,76,108,51,51,43,40,59,113,51,76,45,119,61,56,100,88,36,35,87,70,38,117,73,74,64,45,98,102,73,62,37,58,95,105,50,66,53,67,115,82,56,38,57,90,38,35,61,109,80,69,110,109,48,102,96,60,38,99,41,81,76,53,117,74,35,37,117,37,108,74,106,43,68,45,114,59,66,111,70,38,35,52,68,111,83,57,55,104,53,103,41,69,35,111,58,38,83,52,119,101,68,70,44,57,94,72,111,101,96,104,42,76,43,95,97,42,78,114,76,87,45,49,112,71,95,38,50,85,100,66,56,54,101,37,66,47,58,61,62,41,78,52,120,101,87,46,42,119,102,116,45,59,36,39,53,56,45,69,83,113,114,60,98,63,85,73,40,95,37,64,91,80,52,54,62,35,85,96,39,54,65,81,93,109,38,54,47,96,90,62,35,83,63,89,89,35,86,99,59,114,55,85,50,38,51,50,54,100,61,119,38,72,35,35,35,35,63,84,90,96,42,52,63,38,46,77,75,63,76,80,56,86,120,103,62,36,91,81,88,99,37,81,74,118,57,50,46,40,68,98,42,66,41,103,98,42,66,77,57,100,77,42,104,74,77,65,111,42,99,38,35,98,48,118,61,80,106,101,114,93,36,103,71,38,74,88,68,102,45,62,39,83,116,118,85,55,53,48,53,108,57,36,65,70,118,103,89,82,73,94,38,60,94,98,54,56,63,106,35,113,57,81,88,52,83,77,39,82,79,35,38,115,76,49,73,77,46,114,74,102,76,85,65,106,50,50,49,93,100,35,35,68,87,61,109,56,51,117,53,59,39,98,89,120,44,42,83,108,48,104,76,40,87,59,59,36,100,111,66,38,79,47,84,81,58,40,90,94,120,66,100,76,106,76,60,76,110,105,59,39,39,88,46,96,36,35,56,43,49,71,68,58,107,36,89,85,87,115,98,110,56,111,103,104,54,114,120,90,50,90,57,93,37,110,100,43,62,86,35,42,56,85,95,55,50,76,104,43,50,81,56,67,106,48,105,58,54,104,112,38,36,67,47,58,112,40,72,75,62,84,56,89,91,103,72,81,52,96,52,41,39,36,65,98,40,78,111,102,37,86,39,56,104,76,38,35,60,78,69,100,116,103,40,110,39,61,83,49,65,40,81,49,47,73,38,52,40,91,37,100,77,96,44,73,117,39,49,58,95,104,76,62,83,102,68,48,55,38,54,68,60,102,112,56,100,72,77,55,47,103,43,116,108,80,78,57,74,42,114,75,97,80,99,116,38,63,39,117,66,67,101,109,94,106,110,37,57,95,75,41,60,44,67,53,75,51,115,61,53,103,38,71,109,74,98,42,91,83,89,113,55,75,59,84,82,76,71,67,115,77,45,36,36,59,83,37], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([58,89,64,114,55,65,75,48,112,112,114,112,76,60,76,114,104,44,113,55,101,47,37,75,87,75,58,53,48,73,94,43,109,39,118,105,96,51,63,37,90,112,43,60,45,100,43,36,76,45,83,118,58,64,46,111,49,57,110,36,115,48,38,51,57,59,107,110,59,83,37,66,83,113,42,36,51,87,111,74,83,67,76,119,101,86,91,97,90,39,77,81,73,106,79,60,55,59,88,45,88,59,38,43,100,77,76,118,117,35,94,85,115,71,69,67,57,87,69,99,91,88,40,119,73,55,35,50,46,40,70,48,106,86,42,101,90,102,60,45,81,118,51,74,45,99,43,74,53,65,108,114,66,35,36,112,40,72,54,56,76,118,69,65,39,113,51,110,48,35,109,44,91,96,42,56,70,116,41,70,99,89,103,69,117,100,93,67,87,102,109,54,56,44,40,97,76,65,36,64,69,70,84,103,76,88,111,66,113,47,85,80,108,112,55,58,100,91,47,59,114,95,105,120,61,58,84,70,96,83,53,72,45,98,60,76,73,38,72,89,40,75,61,104,35,41,93,76,107,36,75,49,52,108,86,102,109,58,120,36,72,60,51,94,81,108,60,77,96,36,79,104,97,112,66,110,107,117,112,39,68,35,76,36,80,98,95,96,78,42,103,93,50,101,59,88,47,68,116,103,44,98,115,106,38,75,35,50,91,45,58,105,89,114,39,95,119,103,72,41,78,85,73,82,56,97,49,110,35,83,63,89,101,106,39,104,56,94,53,56,85,98,90,100,43,94,70,75,68,42,84,64,59,54,65,55,97,81,67,91,75,56,100,45,40,118,54,71,73,36,120,58,84,60,38,39,71,112,53,85,102,62,64,77,46,42,74,58,59,36,45,114,118,50,57,39,77,93,56,113,77,118,45,116,76,112,44,39,56,56,54,105,97,67,61,72,98,42,89,74,111,75,74,44,40,106,37,75,61,72,96,75,46,118,57,72,103,103,113,66,73,105,90,117,39,81,118,66,84,46,35,61,41,48,117,107,114,117,86,38,46,41,51,61,40,94,49,96,111,42,80,106,52,60,45,60,97,78,40,40,94,55,40,39,35,90,48,119,75,35,53,71,88,64,55,117,93,91,96,42,83,94,52,51,57,51,51,65,52,114,108,93,91,96,42,79,52,67,103,76,69,108,93,118,36,49,81,51,65,101,70,51,55,100,98,88,107,44,46,41,118,106,35,120,39,100,96,59,113,103,98,81,82,37,70,87,44,50,40,63,76,79,61,115,37,83,99,54,56,37,78,80,39,35,35,65,111,116,108,56,120,61,66,69,35,106,49,85,68,40,91,51,36,77,40,93,85,73,50,76,88,51,82,112,75,78,64,59,47,35,102,39,102,47,38,95,109,116,38,70,41,88,100,70,60,57,116,52,41,81,97,46,42,107,84,76,119,81,39,40,84,84,66,57,46,120,72,39,62,35,77,74,43,103,76,113,57,45,35,35,64,72,117,90,80,78,48,93,117,58,104,55,46,84,46,46,71,58,59,36,47,85,115,106,40,84,55,96,81,56,116,84,55,50,76,110,89,108,60,45,113,120,56,59,45,72,86,55,81,45,38,88,100,120,37,49,97,44,104,67,61,48,117,43,72,108,115,86,62,110,117,73,81,76,45,53,60,78,63,41,78,66,83,41,81,78,42,95,73,44,63,38,41,50,39,73,77,37,76,51,73,41,88,40,40,101,47,100,108,50,38,56,39,60,77,58,94,35,77,42,81,43,91,84,46,88,114,105,46,76,89,83,51,118,37,102,70,96,54,56,104,59,98,45,88,91,47,69,110,39,67,82,46,113,55,69,41,112,39,47,107,108,101,50,72,77,44,117,59,94,37,79,75,67,45,78,43,76,108,37,70,57,67,70,60,78,102,39,94,35,116,50,76,44,59,50,55,87,58,48,79,64,54,35,35,85,54,87,55,58,36,114,74,102,76,87,72,106,36,35,41,119,111,113,66,101,102,73,90,46,80,75,60,98,42,116,55,101,100,59,112,42,95,109,59,52,69,120,75,35,104,64,38,93,62,95,62,64,107,88,81,116,77,97,99,102,68,46,109,45,86,65,98,56,59,73,82,101,77,51,36,119,102,48,39,39,104,114,97,42,115,111,53,54,56,39,73,112,38,118,82,115,56,52,57,39,77,82,89,83,112,37,58,116,58,104,53,113,83,103,119,112,69,114,36,66,62,81,44,59,115,40,67,35,36,41,96,115,118,81,117,70,36,35,35,45,68,44,35,35,44,103,54,56,64,50,91,84,59,46,88,83,100,78,57,81,101,41,114,112,116,46,95,75,45,35,53,119,70,41,115,80,39,35,35,112,35,67,48,99,37,45,71,98,37,104,100,43,60,45,106,39,65,105,42,120,38,38,72,77,107,84,93,67,39,79,83,108,35,35,53,82,71,91,74,88,97,72,78,59,100,39,117,65,35,120,46,95,85,59,46,96,80,85,64,40,90,51,100,116,52,114,49,53,50,64,58,118,44,39,82,46,83,106,39,119,35,48,60,45,59,107,80,73,41,70,102,74,38,35,65,89,74,38,35,47,47,41,62,45,107,61,109,61,42,88,110,75,36,62,61,41,55,50,76,93,48,73,37,62,46,71,54,57,48,97,58,36,35,35,60,44,41,59,63,59,55,50,35,63,120,57,43,100,59,94,86,39,57,59,106,89,64,59,41,98,114,35,113,94,89,81,112,120,58,88,35,84,101,36,90,94,39,61,45,61,98,71,104,76,102,58,68,54,38,98,78,119,90,57,45,90,68,35,110,94,57,72,104,76,77,114,53,71,59,39,93,100,38,54,39,119,89,109,84,70,109,76,60,76,68,41,70,94,37,91,116,67,39,56,59,43,57,69,35,67,36,103,37,35,53,89,62,113,57,119,73,62,80,40,57,109,73,91,62,107,67,45,101,107,76,67,47,82,38,67,72,43,115,39,66,59,75,45,77,54,36,69,66,37,105,115,48,48,58,43,65,52,91,55,120,107,115,46,76,114,78,107,48,38,69,41,119,73,76,89,70,64,50,76,39,48,78,98,36,43,112,118,60,40,50,46,55,54,56,47,70,114,89,38,104,36,94,51,105,38,64,43,71,37,74,84,39,60,45,44,118,96,51,59,95,41,73,57,77,94,65,69,93,67,78,63,67,108,50,65,90,103,43,37,52,105,84,112,84,51,60,110,45,38,37,72,37,98,60,70,68,106,50,77,60,104,72,61,38,69,104,60,50,76,101,110,36,98,42,97,84,88,61,45,56,81,120,78,41,107,49,49,73,77,49,99,94,106,37,57,115,60,76,60,78,70,83,111,41,66,63,43,60,45,40,71,120,115,70,44,94,45,69,104,64,36,52,100,88,104,78,36,43,35,114,120,75,56,39,106,101,39,68,55,107,96,101,59,41,50,112,89,119,80,65,39,95,112,57,38,64,94,49,56,109,108,49,94,91,64,103,52,116,42,91,74,79,97,42,91,61,81,112,55,40,113,74,95,111,79,76,94,40,39,55,102,66,38,72,113,45,58,115,102,44,115,78,106,56,120,113,94,62,36,85,52,79,93,71,75,120,39,109,57,41,98,64,112,55,89,115,118,75,51,119,94,89,82,45,67,100,81,42,58,73,114,60,40,36,117,38,41,35,40,38,63,76,57,82,103,51,72,41,52,102,105,69,112,94,105,73,57,79,56,75,110,84,106,44,93,72,63,68,42,114,55,39,77,59,80,119,90,57,75,48,69,94,107,38,45,99,112,73,59,46,112,47,54,95,118,119,111,70,77,86,60,45,62,35,37,88,105,46,76,120,86,110,114,85,40,52,38,56,47,80,43,58,104,76,83,75,106,36,35,85,37,93,52,57,116,39,73,58,114,103,77,105,39,70,76,64,97,58,48,89,45,117,65,91,51,57,39,44,40,118,98,109,97,42,104,85,37,60,45,83,82,70,96,84,116,58,53,52,50,82,95,86,86,36,112,64,91,112,56,68,86,91,65,44,63,49,56,51,57,70,87,100,70,60,84,100,100,70,60,57,65,104,45,54,38,57,116,87,111,68,108,104,93,38,49,83,112,71,77,113,62,84,105,49,79,42,72,38,35,40,65,76,56,91,95,80,37,46,77,62,118,94,45,41,41,113,79,84,42,70,53,67,113,48,96,89,101,37,43,36,66,54,105,58,55,64,48,73,88,60,78,43,84,43,48,77,108,77,66,80,81,42,86,106,62,83,115,68,60,85,52,74,72,89,56,107,68,50,41,50,102,85,47,77,35,36,101,46,41,84,52,44,95,61,56,104,76,105,109,91,38,41,59,63,85,107,75,39,45,120,63,39,40,58,115,105,73,102,76,60,36,112,70,77,96,105,60,63,37,87,40,109,71,68,72,77,37,62,105,87,80,44,35,35,80,96,37,47,76,60,101,88,105,58,64,90,57,67,46,55,111,61,64,40,112,88,100,65,79,47,78,76,81,56,108,80,108,43,72,80,79,81,97,56,119,68,56,61,94,71,108,80,97,56,84,75,73,49,67,106,104,115,67,84,83,76,74,77,39,47,87,108,62,45,83,40,113,119,37,115,102,47,64,37,35,66,54,59,47,85,55,75,93,117,90,98,105,94,79,99,94,50,110,60,98,104,80,109,85,107,77,119,62,37,116,60,41,39,109,69,86,69,39,39,110,96,87,110,74,114,97,36,94,84,75,118,88,53,66,62,59,95,97,83,69,75,39,44,40,104,119,97,48,58,105,52,71,63,46,66,99,105,46,40,88,91,63,98,42,40,36,44,61,45,110,60,46,81,37,96,40,88,61,63,43,64,65,109,42,74,115,48,38,61,51,98,104,56,75,93,109,76,60,76,111,78,115,39,54,44,39,56,53,96,48,63,116,47,39,95,85,53,57,64,93,100,100,70,60,35,76,100,70,60,101,87,100,70,60,79,117,78,47,52,53,114,89,60,45,76,64,38,35,43,102,109,62,54,57,61,76,98,44,79,99,90,86,47,41,59,84,84,109,56,86,73,59,63,37,79,116,74,60,40,98,52,109,113,55,77,54,58,117,63,75,82,100,70,60,103,82,64,50,76,61,70,78,85,45,60,98,91,40,57,99,47,77,76,51,109,59,90,91,36,111,70,51,103,41,71,65,87,113,112,65,82,99,61,60,82,79,117,55,99,76,53,108,59,45,91,65,93,37,47,43,102,115,100,59,108,35,83,97,102,84,47,102,42,87,93,48,61,79,39,36,40,84,98,60,91,41,42,64,101,55,55,53,82,45,58,89,111,98,37,103,42,62,108,42,58,120,80,63,89,98,46,53,41,37,119,95,73,63,55,117,107,53,74,67,43,70,83,40,109,35,105,39,107,46,39,97,48,105,41,57,60,55,98,39,102,115,39,53,57,104,113,36,42,53,85,104,118,35,35,112,105,94,56,43,104,73,69,66,70,96,110,118,111,96,59,39,108,48,46,94,83,49,60,45,119,85,75,50,47,67,111,104,53,56,75,75,104,76,106,77,61,83,79,42,114,102,79,96,43,113,67,96,87,45,79,110,46,61,65,74,53,54,62,62,105,50,64,50,76,72,54,65,58,38,53,113,96,63,57,73,51,64,64,39,48,52,38,112,50,47,76,86,97,42,84,45,52,60,45,105,51,59,77,57,85,118,90,100,43,78,55,62,98,42,101,73,119,103,58,67,67,41,99,60,62,110,79,38,35,60,73,71,101,59,95,95,46,116,104,106,90,108,60,37,119,40,87,107,50,120,109,112,52,81,64,73,35,73,57,44,68,70,93,117,55,45,80,61,46,45,95,58,89,74,93,97,83,64,86,63,54,42,67,40,41,100,79,112,55,58,87,76,44,98,38,51,82,103,47,46,99,109,77,57,38,114,94,62,36,40,62,46,90,45,73,38,74,40,81,48,72,100,53,81,37,55,67,111,45,98,96,45,99,60,78,40,54,114,64,105,112,43,65,117,114,75,60,109,56,54,81,73,116,104,42,35,118,59,45,79,66,113,105,43,76,55,119,68,69,45,73,114,56,75,91,39,109,43,68,68,83,76,119,75,38,47,46,63,45,86,37,85,95,37,51,58,113,75,78,117,36,95,98,42,66,45,107,112,55,78,97,68,39,81,100,87,81,80,75,89,113,91,64,62,80,41,104,73,59,42,95,70,93,117,96,82,98,91,46,106,56,95,81,47,60,38,62,117,117,43,86,115,72,36,115,77,57,84,65,37,63,41,40,118,109,74,56,48,41,44,80,55,69,62,41,116,106,68,37,50,76,61,45,116,35,102,75,91,37,96,118,61,81,56,60,70,102,78,107,103,103,94,111,73,98,97,104,42,35,56,47,81,116,36,70,38,58,75,42,45,40,78,47,39,43,49,118,77,66,44,117,40,41,45,97,46,86,85,85,42,35,91,101,37,103,65,65,79,40,83,62,87,108,65,50,41,59,83,97,62,103,88,109,56,89,66,96,49,100,64,75,35,110,93,55,54,45,97,36,85,44,109,70,60,102,88,93,105,100,113,100,41,60,51,44,93,74,55,74,109,87,52,96,54,93,117,107,115,61,52,45,55,50,76,40,106,69,107,43,58,98,74,48,77,94,113,45,56,68,109,95,90,63,48,111,108,80,49,67,57,83,97,38,72,91,100,38,99,36,111,111,81,85,106,93,69,120,100,42,51,90,77,64,45,87,71,87,50,37,115,39,44,66,45,95,77,37,62,37,85,108,58,35,47,39,120,111,70,77,57,81,88,45,36,46,81,78,39,62,91,37,36,90,36,117,70,54,112,65,54,75,105,50,79,53,58,56,119,42,118,80,49,60,45,49,96,91,71,44,41,45,109,35,62,48,96,80,38,35,101,98,35,46,51,105,41,114,116,66,54,49,40,111,39,36,63,88,51,66,60,47,82,57,48,59,101,90,93,37,78,99,113,59,45,84,108,93,35,70,62,50,81,102,116,94,97,101,95,53,116,75,76,57,77,85,101,57,98,42,115,76,69,81,57,53,67,38,96,61,71,63,64,77,106,61,119,104,42,39,51,69,62,61,45,60,41,71,116,42,73,119,41,39,81,71,58,96,64,73,119,79,102,55,38,93,49,105,39,83,48,49,66,43,69,118,47,78,97,99,35,57,83,59,61,59,89,81,112,103,95,54,85,96,42,107,86,89,51,57,120,75,44,91,47,54,65,106,55,58,39,49,66,109,45,95,49,69,89,102,97,49,43,111,38,111,52,104,112,55,75,78,95,81,40,79,108,73,111,64,83,37,59,106,86,100,110,48,39,49,60,86,99,53,50,61,117,96,51,94,111,45,110,49,39,103,52,118,53,56,72,106,38,54,95,116,55,36,35,35,63,77,41,99,60,36,98,103,81,95,39,83,89,40,40,45,120,107,65,35,89,40,44,112,39,72,57,114,73,86,89,45,98,44,39,37,98,67,80,70,55,46,74,60,85,112,94,44,40,100,85,49,86,89,42,53,35,87,107,84,85,62,104,49,57,119,44,87,81,104,76,73,41,51,83,35,102,36,50,40,101,98,44,106,114,42,98,59,51,86,119,93,42,55,78,72,37,36,99,52,86,115,44,101,68,57,62,88,87,56,63,78,93,111,43,40,42,112,103,67,37,47,55,50,76,86,45,117,60,72,112,44,51,64,101,94,57,85,66,49,74,43,97,107,57,45,84,78,47,109,104,75,80,103,43,65,74,89,100,36,77,108,118,65,70,95,106,67,75,42,46,79,45,94,40,54,51,97,100,77,84,45,62,87,37,105,101,119,83,56,87,54,109,50,114,116,67,112,111,39,82,83,49,82,56,52,61,64,112,97,84,75,116,41,62,61,37,38,49,91,41,42,118,112,39,117,43,120,44,86,114,119,78,59,38,93,107,117,79,57,74,68,98,103,61,112,79,36,74,42,46,106,86,101,59,117,39,109,48,100,114,57,108,44,60,42,119,77,75,42,79,101,61,103,56,108,86,95,75,69,66,70,107,79,39,111,85,93,94,61,91,45,55,57,50,35,111,107,44,41,105,93,108,82,56,113,81,50,111,65,56,119,99,82,67,90,94,55,119,47,78,106,104,59,63,46,115,116,88,63,81,49,62,83,49,113,52,66,110,36,41,75,49,60,45,114,71,100,79,39,36,87,114,46,76,99,46,67,71,41,36,47,42,74,76,52,116,78,82,47,44,83,86,79,51,44,97,85,119,39,68,74,78,58,41,83,115,59,119,71,110,57,65,51,50,105,106,119,37,70,76,43,90,48,70,110,46,85,57,59,114,101,83,113,41,98,109,73,51,50,85,61,61,53,65,76,117,71,38,35,86,102,49,51,57,56,47,112,86,111,49,42,99,45,40,97,89,49,54,56,111,60,96,74,115,83,98,107,45,44,49,78,59,36,62,48,58,79,85,97,115,40,51,58,56,90,57,55,50,76,83,102,70,56,101,98,61,99,45,59,62,83,80,119,55,46,54,104,110,51,109,96,57,94,88,107,110,40,114,46,113,83,91,48,59,84,37,38,81,99,61,43,83,84,82,120,88,39,113,49,66,78,107,51,38,42,101,117,50,59,38,56,113,36,38,120,62,81,35,81,55,94,84,102,43,54,60,40,100,37,90,86,109,106,50,98,68,105,37,46,51,76,50,110,43,52,87,39,36,80,105,68,68,71,41,103,44,114,37,43,63,44,36,64,63,117,111,117,53,116,83,101,50,97,78,95,65,81,85,42,60,104,96,101,45,71,73,55,41,63,79,75,50,65,46,100,55,95,99,41,63,119,81,53,65,83,64,68,76,51,114,35,55,102,83,107,103,108,54,45,43,43,68,58,39,65,44,117,113,55,83,118,108,66,36,112,99,112,72,39,113,51,110,48,35,95,37,100,89,35,120,67,112,114,45,108,60,70,48,78,82,64,45,35,35,70,69,86,54,78,84,70,54,35,35,36,108,56,52,78,49,119,63,65,79,62,39,73,65,79,85,82,81,35,35,86,94,70,118,45,88,70,98,71,77,55,70,108,40,78,60,51,68,104,76,71,70,37,113,46,49,114,67,36,35,58,84,95,95,38,80,105,54,56,37,48,120,105,95,38,91,113,70,74,40,55,55,106,95,38,74,87,111,70,46,86,55,51,53,38,84,44,91,82,42,58,120,70,82,42,75,53,62,62,35,96,98,87,45,63,52,78,101,95,38,54,78,101,95,38,54,78,101,95,38,110,96,107,114,45,35,71,74,99,77,54,88,59,117,77,54,88,59,117,77,40,46,97,46,46,94,50,84,107,76,37,111,82,40,35,59,117,46,84,37,102,65,114,37,52,116,74,56,38,62,60,49,61,71,72,90,95,43,109,57,47,35,72,49,70,94,82,35,83,67,35,42,78,61,66,65,57,40,68,63,118,91,85,105,70,89,62,62,94,56,112,44,75,75,70,46,87,93,76,50,57,117,76,107,76,108,117,47,43,52,84,60,88,111,73,66,38,104,120,61,84,49,80,99,68,97,66,38,59,72,72,43,45,65,70,114,63,40,109,57,72,90,86,41,70,75,83,56,74,67,119,59,83,68,61,54,91,94,47,68,90,85,76,96,69,85,68,102,93,71,71,108,71,38,62,119,36,41,70,46,47,94,110,51,43,114,108,111,43,68,66,59,53,115,73,89,71,78,107,43,105,49,116,45,54,57,74,103,45,45,48,112,97,111,55,83,109,35,75,41,112,100,72,87,38,59,76,117,68,78,72,64,72,62,35,47,88,45,84,73,40,59,80,62,35,44,71,99,62,35,48,83,117,62,35,52,96,49,63,35,56,108,67,63,35,60,120,85,63,35,64,46,105,63,35,68,58,37,64,35,72,70,55,64,35,76,82,73,64,35,80,95,91,64,35,84,107,110,64,35,88,119,42,65,35,93,45,61,65,35,97,57,79,65,35,100,60,70,38,35,42,59,71,35,35,46,71,89,35,35,50,83,108,35,35,54,96,40,36,35,58,108,58,36,35,62,120,76,36,35,66,46,96,36,35,70,58,114,36,35,74,70,46,37,35,78,82,64,37,35,82,95,82,37,35,86,107,101,37,35,90,119,119,37,35,95,45,52,38,35,51,94,82,104,37,83,102,108,114,45,107,39,77,83,46,111,63,46,53,47,115,87,101,108,47,119,112,69,77,48,37,51,39,47,49,41,75,94,102,49,45,100,62,71,50,49,38,118,40,51,53,62,86,96,51,57,86,55,65,52,61,111,110,120,52,65,49,79,89,53,69,73,48,59,54,73,98,103,114,54,77,36,72,83,55,81,60,41,53,56,67,53,119,44,59,87,111,65,42,35,91,37,84,42,35,96,49,103,42,35,100,61,35,43,35,104,73,53,43,35,108,85,71,43,35,112,98,89,43,35,116,110,108,43,35,120,36,41,44,35,38,49,59,44,35,42,61,77,44,35,46,73,96,44,35,50,85,114,44,35,54,98,46,45,35,59,119,91,72,35,105,81,116,65,35,109,94,48,66,35,113,106,66,66,35,117,118,84,66,35,35,45,104,66,35,39,57,36,67,35,43,69,54,67,35,47,81,72,67,35,51,94,90,67,35,55,106,109,67,35,59,118,41,68,35,63,44,60,68,35,67,56,78,68,35,71,68,97,68,35,75,80,115,68,35,79,93,47,69,35,103,49,65,53,35,75,65,42,49,35,103,67,49,55,35,77,71,100,59,35,56,40,48,50,35,76,45,100,51,35,114,87,77,52,35,72,103,97,49,35,44,60,119,48,35,84,46,106,60,35,79,35,39,50,35,67,89,78,49,35,113,97,94,58,35,95,52,109,51,35,111,64,47,61,35,101,71,56,61,35,116,56,74,53,35,96,43,55,56,35,52,117,73,45,35,109,51,66,50,35,83,66,91,56,35,81,48,64,56,35,105,91,42,57,35,105,79,110,56,35,49,78,109,59,35,94,115,78,57,35,113,104,60,57,35,58,61,120,45,35,80,59,75,50,35,36,37,88,57,35,98,67,43,46,35,82,103,59,60,35,109,78,61,46,35,77,84,70,46,35,82,90,79,46,35,50,63,41,52,35,89,35,40,47,35,91,41,49,47,35,98,59,76,47,35,100,65,85,47,35,48,83,118,59,35,108,89,36,48,35,110,96,45,48,35,115,102,54,48,35,40,70,50,52,35,119,114,72,48,35,37,47,101,48,35,84,109,68,60,35,37,74,83,77,70,111,118,101,58,67,84,66,69,88,73,58,60,101,104,50,103,41,66,44,51,104,50,94,71,51,105,59,35,100,51,106,68,62,41,52,107,77,89,68,52,108,86,117,96,52,109,96,58,38,53,110,105,85,65,53,64,40,65,53,66,65,49,93,80,66,66,58,120,108,66,67,67,61,50,67,68,76,88,77,67,69,85,116,105,67,102,38,48,103,50,39,116,78,63,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,71,84,52,67,80,45,113,101,107,67,96,46,57,107,69,103,94,43,70,36,107,119,86,105,70,74,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,75,84,66,38,53,111,44,94,60,45,50,56,90,73,39,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,79,63,59,120,112,59,55,113,45,35,108,76,89,73,58,120,118,68,61,35,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,98,97,107,101,0,119,105,100,116,104,0,104,101,105,103,104,116,0,116,109,112,0,97,116,108,97,115,45,62,103,108,121,112,104,115,0,97,116,108,97,115,45,62,112,105,120,101,108,0,46,46,45,32,32,32,32,32,32,32,32,32,45,88,88,88,88,88,88,88,45,32,32,32,32,88,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,88,32,32,32,32,32,32,32,32,32,32,32,45,88,88,88,88,88,88,88,32,32,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,88,88,88,88,88,88,46,46,45,32,32,32,32,32,32,32,32,32,45,88,46,46,46,46,46,88,45,32,32,32,88,46,88,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,32,32,32,32,45,88,46,46,46,46,46,88,32,32,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,46,46,46,46,46,88,45,45,45,32,32,32,32,32,32,32,32,32,45,88,88,88,46,88,88,88,45,32,32,88,46,46,46,88,32,32,45,32,32,32,32,32,32,32,32,32,88,46,46,46,88,32,32,32,32,32,32,32,32,32,45,88,46,46,46,46,88,32,32,32,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,88,46,46,46,46,88,88,32,32,32,32,32,32,32,32,32,32,32,45,32,32,88,46,88,32,32,45,32,88,46,46,46,46,46,88,32,45,32,32,32,32,32,32,32,32,88,46,46,46,46,46,88,32,32,32,32,32,32,32,32,45,88,46,46,46,88,32,32,32,32,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,32,88,46,46,46,88,88,88,32,32,32,32,32,32,32,32,32,32,45,32,32,88,46,88,32,32,45,88,46,46,46,46,46,46,46,88,45,32,32,32,32,32,32,32,88,46,46,46,46,46,46,46,88,32,32,32,32,32,32,32,45,88,46,46,88,46,88,32,32,32,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,88,46,88,46,46,88,88,46,88,32,32,32,32,32,32,32,32,32,45,32,32,88,46,88,32,32,45,88,88,88,88,46,88,88,88,88,45,32,32,32,32,32,32,32,88,88,88,88,46,88,88,88,88,32,32,32,32,32,32,32,45,88,46,88,32,88,46,88,32,32,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,46,88,32,88,46,88,88,46,46,88,32,32,32,32,32,32,32,32,45,32,32,88,46,88,32,32,45,32,32,32,88,46,88,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,32,32,32,32,45,88,88,32,32,32,88,46,88,32,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,32,88,46,88,32,32,32,88,88,88,46,46,46,88,32,32,32,32,32,32,32,45,32,32,88,46,88,32,32,45,32,32,32,88,46,88,32,32,32,45,32,32,32,32,88,88,32,32,32,32,88,46,88,32,32,32,32,88,88,32,32,32,32,45,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,88,46,46,46,46,88,32,32,32,32,32,32,45,32,32,88,46,88,32,32,45,32,32,32,88,46,88,32,32,32,45,32,32,32,88,46,88,32,32,32,32,88,46,88,32,32,32,32,88,46,88,32,32,32,45,32,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,32,88,46,46,46,46,46,88,32,32,32,32,32,45,32,32,88,46,88,32,32,45,32,32,32,88,46,88,32,32,32,45,32,32,88,46,46,88,32,32,32,32,88,46,88,32,32,32,32,88,46,46,88,32,32,45,32,32,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,45,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,32,32,88,46,46,46,46,46,46,88,32,32,32,32,45,32,32,88,46,88,32,32,45,32,32,32,88,46,88,32,32,32,45,32,88,46,46,46,88,88,88,88,88,88,46,88,88,88,88,88,88,46,46,46,88,32,45,32,32,32,32,32,32,32,32,32,88,46,88,32,32,32,88,88,45,88,88,32,32,32,88,46,88,32,32,32,32,32,32,32,32,32,88,46,46,46,46,46,46,46,88,32,32,32,45,32,32,88,46,88,32,32,45,32,32,32,88,46,88,32,32,32,45,88,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,88,45,32,32,32,32,32,32,32,32,32,32,88,46,88,32,88,46,88,45,88,46,88,32,88,46,88,32,32,32,32,32,32,32,32,32,32,88,46,46,46,46,46,46,46,46,88,32,32,45,32,32,88,46,88,32,32,45,32,32,32,88,46,88,32,32,32,45,32,88,46,46,46,88,88,88,88,88,88,46,88,88,88,88,88,88,46,46,46,88,32,45,32,32,32,32,32,32,32,32,32,32,32,88,46,88,46,46,88,45,88,46,46,88,46,88,32,32,32,32,32,32,32,32,32,32,32,88,46,46,46,46,46,46,46,46,46,88,32,45,88,88,88,46,88,88,88,45,32,32,32,88,46,88,32,32,32,45,32,32,88,46,46,88,32,32,32,32,88,46,88,32,32,32,32,88,46,46,88,32,32,45,32,32,32,32,32,32,32,32,32,32,32,32,88,46,46,46,88,45,88,46,46,46,88,32,32,32,32,32,32,32,32,32,32,32,32,88,46,46,46,46,46,46,46,46,46,46,88,45,88,46,46,46,46,46,88,45,32,32,32,88,46,88,32,32,32,45,32,32,32,88,46,88,32,32,32,32,88,46,88,32,32,32,32,88,46,88,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,88,46,46,46,46,88,45,88,46,46,46,46,88,32,32,32,32,32,32,32,32,32,32,32,88,46,46,46,46,46,46,88,88,88,88,88,45,88,88,88,88,88,88,88,45,32,32,32,88,46,88,32,32,32,45,32,32,32,32,88,88,32,32,32,32,88,46,88,32,32,32,32,88,88,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,46,46,46,46,46,88,45,88,46,46,46,46,46,88,32,32,32,32,32,32,32,32,32,32,88,46,46,46,88,46,46,88,32,32,32,32,45,45,45,45,45,45,45,45,45,32,32,32,88,46,88,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,88,88,88,88,88,88,45,88,88,88,88,88,88,88,32,32,32,32,32,32,32,32,32,32,88,46,46,88,32,88,46,46,88,32,32,32,45,32,32,32,32,32,32,32,45,88,88,88,88,46,88,88,88,88,45,32,32,32,32,32,32,32,88,88,88,88,46,88,88,88,88,32,32,32,32,32,32,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,88,46,88,32,32,88,46,46,88,32,32,32,45,32,32,32,32,32,32,32,45,88,46,46,46,46,46,46,46,88,45,32,32,32,32,32,32,32,88,46,46,46,46,46,46,46,88,32,32,32,32,32,32,32,45,32,32,32,32,88,88,32,32,32,32,32,32,32,32,32,32,32,88,88,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,88,88,32,32,32,32,88,46,46,88,32,32,45,32,32,32,32,32,32,32,45,32,88,46,46,46,46,46,88,32,45,32,32,32,32,32,32,32,32,88,46,46,46,46,46,88,32,32,32,32,32,32,32,32,45,32,32,32,88,46,88,32,32,32,32,32,32,32,32,32,32,32,88,46,88,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,88,46,46,88,32,32,32,32,32,32,32,32,32,32,45,32,32,88,46,46,46,88,32,32,45,32,32,32,32,32,32,32,32,32,88,46,46,46,88,32,32,32,32,32,32,32,32,32,45,32,32,88,46,46,88,32,32,32,32,32,32,32,32,32,32,32,88,46,46,88,32,32,45,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,88,88,32,32,32,32,32,32,32,32,32,32,32,45,32,32,32,88,46,88,32,32,32,45,32,32,32,32,32,32,32,32,32,32,88,46,88,32,32,32,32,32,32,32,32,32,32,45,32,88,46,46,46,88,88,88,88,88,88,88,88,88,88,88,88,88,46,46,46,88,32,45,32,32,32,32,32,32,32,32,32,32,32,45,45,45,45,45,45,45,45,45,45,45,45,32,32,32,32,32,32,32,32,45,32,32,32,32,88,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,88,32,32,32,32,32,32,32,32,32,32,32,45,88,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,88,45,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,32,88,46,46,46,88,88,88,88,88,88,88,88,88,88,88,88,88,46,46,46,88,32,45,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,45,32,32,88,46,46,88,32,32,32,32,32,32,32,32,32,32,32,88,46,46,88,32,32,45,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,45,32,32,32,88,46,88,32,32,32,32,32,32,32,32,32,32,32,88,46,88,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,45,32,32,32,32,88,88,32,32,32,32,32,32,32,32,32,32,32,88,88,32,32,32,32,45,32,32,32,32,32,32,32,32,32,32,32,0,105,109,103,95,114,103,98,97,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,101,110,100,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,99,108,101,97,110,117,112,0,110,107,95,102,111,110,116,95,97,116,108,97,115,95,99,108,101,97,114,0,110,107,95,105,110,112,117,116,95,98,101,103,105,110,0,110,107,95,105,110,112,117,116,95,101,110,100,0,110,107,95,105,110,112,117,116,95,109,111,116,105,111,110,0,110,107,95,105,110,112,117,116,95,107,101,121,0,110,107,95,105,110,112,117,116,95,98,117,116,116,111,110,0,110,107,95,105,110,112,117,116,95,115,99,114,111,108,108,0,110,107,95,105,110,112,117,116,95,103,108,121,112,104,0,110,107,95,105,110,112,117,116,95,117,110,105,99,111,100,101,0,115,116,97,116,101,0,110,107,95,116,101,120,116,101,100,105,116,95,116,101,120,116,0,110,107,95,116,101,120,116,101,100,105,116,95,115,101,108,101,99,116,95,97,108,108,0,110,107,95,115,116,121,108,101,95,102,114,111,109,95,116,97,98,108,101,0,175,175,175,255,45,45,45,255,40,40,40,255,65,65,65,255,50,50,50,255,40,40,40,255,35,35,35,255,100,100,100,255,120,120,120,255,45,45,45,255,45,45,45,255,35,35,35,255,38,38,38,255,100,100,100,255,120,120,120,255,150,150,150,255,38,38,38,255,38,38,38,255,175,175,175,255,45,45,45,255,120,120,120,255,45,45,45,255,255,0,0,255,40,40,40,255,100,100,100,255,120,120,120,255,150,150,150,255,40,40,40,255,110,107,95,115,116,121,108,101,95,115,101,116,95,102,111,110,116,0,116,121,112,101,95,115,116,97,99,107,45,62,104,101,97,100,32,60,32,40,105,110,116,41,40,115,105,122,101,111,102,40,116,121,112,101,95,115,116,97,99,107,45,62,101,108,101,109,101,110,116,115,41,47,115,105,122,101,111,102,40,116,121,112,101,95,115,116,97,99,107,45,62,101,108,101,109,101,110,116,115,41,91,48,93,41,0,110,107,95,115,116,121,108,101,95,112,117,115,104,95,102,108,111,97,116,0,110,107,95,115,116,121,108,101,95,112,117,115,104,95,118,101,99,50,0,116,121,112,101,95,115,116,97,99,107,45,62,104,101,97,100,32,62,32,48,0,110,107,95,115,116,121,108,101,95,112,111,112,95,102,108,111,97,116,0,110,107,95,115,116,121,108,101,95,112,111,112,95,118,101,99,50,0,110,107,95,105,110,105,116,0,110,107,95,102,114,101,101,0,110,107,95,99,108,101,97,114,0,110,107,95,95,98,101,103,105,110,0,110,107,95,95,110,101,120,116,0,110,107,95,98,101,103,105,110,95,116,105,116,108,101,100,0,110,97,109,101,0,116,105,116,108,101,0,99,116,120,45,62,115,116,121,108,101,46,102,111,110,116,32,38,38,32,99,116,120,45,62,115,116,121,108,101,46,102,111,110,116,45,62,119,105,100,116,104,32,38,38,32,34,105,102,32,116,104,105,115,32,116,114,105,103,103,101,114,115,32,121,111,117,32,102,111,114,103,111,116,32,116,111,32,97,100,100,32,97,32,102,111,110,116,34,0,33,99,116,120,45,62,99,117,114,114,101,110,116,32,38,38,32,34,105,102,32,116,104,105,115,32,116,114,105,103,103,101,114,115,32,121,111,117,32,109,105,115,115,101,100,32,97,32,96,110,107,95,101,110,100,96,32,99,97,108,108,34,0,119,105,110,0,119,105,110,45,62,115,101,113,32,33,61,32,99,116,120,45,62,115,101,113,0,110,107,95,101,110,100,0,99,116,120,45,62,99,117,114,114,101,110,116,32,38,38,32,34,105,102,32,116,104,105,115,32,116,114,105,103,103,101,114,115,32,121,111,117,32,102,111,114,103,111,116,32,116,111,32,99,97,108,108,32,96,110,107,95,98,101,103,105,110,96,34,0,99,116,120,45,62,99,117,114,114,101,110,116,45,62,108,97,121,111,117,116,0,110,107,95,119,105,110,100,111,119,95,103,101,116,95,98,111,117,110,100,115,0,99,116,120,45,62,99,117,114,114,101,110,116,0,110,107,95,119,105,110,100,111,119,95,103,101,116,95,99,111,110,116,101,110,116,95,114,101,103,105,111,110,0,110,107,95,119,105,110,100,111,119,95,103,101,116,95,99,97,110,118,97,115,0,110,107,95,119,105,110,100,111,119,95,103,101,116,95,112,97,110,101,108,0,110,107,95,119,105,110,100,111,119,95,105,115,95,104,111,118,101,114,101,100,0,110,107,95,119,105,110,100,111,119,95,105,115,95,99,108,111,115,101,100,0,110,107,95,109,101,110,117,98,97,114,95,98,101,103,105,110,0,108,97,121,111,117,116,45,62,97,116,95,121,32,61,61,32,108,97,121,111,117,116,45,62,98,111,117,110,100,115,46,121,0,110,107,95,109,101,110,117,98,97,114,95,101,110,100,0,110,107,95,108,97,121,111,117,116,95,114,111,119,95,98,101,103,105,110,0,110,107,95,108,97,121,111,117,116,95,114,111,119,95,112,117,115,104,0,110,107,95,108,97,121,111,117,116,95,114,111,119,95,101,110,100,0,110,107,95,108,97,121,111,117,116,95,114,111,119,0,110,107,95,108,97,121,111,117,116,95,115,112,97,99,101,95,98,101,103,105,110,0,110,107,95,108,97,121,111,117,116,95,115,112,97,99,101,95,101,110,100,0,110,107,95,108,97,121,111,117,116,95,115,112,97,99,101,95,112,117,115,104,0,110,107,95,108,97,121,111,117,116,95,115,112,97,99,101,95,98,111,117,110,100,115,0,110,107,95,108,97,121,111,117,116,95,115,112,97,99,101,95,116,111,95,115,99,114,101,101,110,0,110,107,95,108,97,121,111,117,116,95,115,112,97,99,101,95,114,101,99,116,95,116,111,95,115,99,114,101,101,110,0,110,107,95,108,97,121,111,117,116,95,115,112,97,99,101,95,114,101,99,116,95,116,111,95,108,111,99,97,108,0,110,107,95,116,114,101,101,95,115,116,97,116,101,95,112,111,112,0,108,97,121,111,117,116,45,62,114,111,119,46,116,114,101,101,95,100,101,112,116,104,0,110,107,95,119,105,100,103,101,116,95,98,111,117,110,100,115,0,110,107,95,119,105,100,103,101,116,95,119,105,100,116,104,0,110,107,95,119,105,100,103,101,116,0,33,40,108,97,121,111,117,116,45,62,102,108,97,103,115,32,38,32,78,75,95,87,73,78,68,79,87,95,77,73,78,73,77,73,90,69,68,41,0,33,40,108,97,121,111,117,116,45,62,102,108,97,103,115,32,38,32,78,75,95,87,73,78,68,79,87,95,72,73,68,68,69,78,41,0,33,40,108,97,121,111,117,116,45,62,102,108,97,103,115,32,38,32,78,75,95,87,73,78,68,79,87,95,67,76,79,83,69,68,41,0,110,107,95,119,105,100,103,101,116,95,102,105,116,116,105,110,103,0,110,107,95,115,112,97,99,105,110,103,0,110,107,95,116,101,120,116,95,99,111,108,111,114,101,100,0,110,107,95,116,101,120,116,95,119,114,97,112,95,99,111,108,111,114,101,100,0,110,107,95,116,101,120,116,0,110,107,95,116,101,120,116,95,119,114,97,112,0,255,255,255,255,110,107,95,98,117,116,116,111,110,95,115,101,116,95,98,101,104,97,118,105,111,114,0,110,107,95,98,117,116,116,111,110,95,116,101,120,116,95,115,116,121,108,101,100,0,115,116,121,108,101,0,110,107,95,98,117,116,116,111,110,95,116,101,120,116,0,110,107,95,98,117,116,116,111,110,95,99,111,108,111,114,0,110,107,95,98,117,116,116,111,110,95,115,121,109,98,111,108,95,115,116,121,108,101,100,0,110,107,95,98,117,116,116,111,110,95,115,121,109,98,111,108,0,110,107,95,98,117,116,116,111,110,95,115,121,109,98,111,108,95,116,101,120,116,95,115,116,121,108,101,100,0,110,107,95,98,117,116,116,111,110,95,115,121,109,98,111,108,95,116,101,120,116,0,110,107,95,115,101,108,101,99,116,97,98,108,101,95,116,101,120,116,0,118,97,108,117,101,0,110,107,95,99,104,101,99,107,95,116,101,120,116,0,110,107,95,99,104,101,99,107,98,111,120,95,116,101,120,116,0,97,99,116,105,118,101,0,110,107,95,111,112,116,105,111,110,95,116,101,120,116,0,110,107,95,115,108,105,100,101,114,95,102,108,111,97,116,0,110,107,95,112,114,111,103,114,101,115,115,0,99,117,114,0,110,107,95,101,100,105,116,95,115,116,114,105,110,103,0,110,107,95,101,100,105,116,95,98,117,102,102,101,114,0,101,100,105,116,0,110,107,95,112,114,111,112,101,114,116,121,95,105,110,116,0,118,97,108,0,110,107,95,112,114,111,112,101,114,116,121,95,102,108,111,97,116,0,110,107,95,112,114,111,112,101,114,116,121,105,0,110,107,95,99,111,108,111,114,95,112,105,99,107,0,99,111,108,111,114,0,110,107,95,99,104,97,114,116,95,98,101,103,105,110,95,99,111,108,111,114,101,100,0,110,107,95,99,104,97,114,116,95,97,100,100,95,115,108,111,116,95,99,111,108,111,114,101,100,0,99,116,120,45,62,99,117,114,114,101,110,116,45,62,108,97,121,111,117,116,45,62,99,104,97,114,116,46,115,108,111,116,32,60,32,52,0,110,107,95,99,104,97,114,116,95,112,117,115,104,95,115,108,111,116,0,115,108,111,116,32,62,61,32,48,32,38,38,32,115,108,111,116,32,60,32,52,0,115,108,111,116,32,60,32,99,116,120,45,62,99,117,114,114,101,110,116,45,62,108,97,121,111,117,116,45,62,99,104,97,114,116,46,115,108,111,116,0,110,107,95,99,104,97,114,116,95,101,110,100,0,110,107,95,103,114,111,117,112,95,115,99,114,111,108,108,101,100,95,101,110,100,0,119,105,110,45,62,108,97,121,111,117,116,0,103,45,62,112,97,114,101,110,116,0,110,107,95,103,114,111,117,112,95,98,101,103,105,110,0,120,95,111,102,102,115,101,116,0,121,95,111,102,102,115,101,116,0,110,107,95,112,111,112,117,112,95,98,101,103,105,110,0,33,40,112,97,110,101,108,45,62,116,121,112,101,32,38,32,78,75,95,80,65,78,69,76,95,83,69,84,95,80,79,80,85,80,41,32,38,38,32,34,112,111,112,117,112,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,32,104,97,118,101,32,112,111,112,117,112,115,34,0,110,107,95,112,111,112,117,112,95,99,108,111,115,101,0,112,111,112], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([117,112,45,62,112,97,114,101,110,116,0,112,111,112,117,112,45,62,108,97,121,111,117,116,45,62,116,121,112,101,32,38,32,78,75,95,80,65,78,69,76,95,83,69,84,95,80,79,80,85,80,0,110,107,95,112,111,112,117,112,95,101,110,100,0,110,107,95,116,111,111,108,116,105,112,95,98,101,103,105,110,0,95,95,35,35,84,111,111,108,116,105,112,35,35,95,95,0,110,107,95,116,111,111,108,116,105,112,95,101,110,100,0,110,107,95,116,111,111,108,116,105,112,0,110,107,95,99,111,110,116,101,120,116,117,97,108,95,98,101,103,105,110,0,110,107,95,99,111,110,116,101,120,116,117,97,108,95,105,116,101,109,95,116,101,120,116,0,110,107,95,99,111,110,116,101,120,116,117,97,108,95,99,108,111,115,101,0,110,107,95,99,111,110,116,101,120,116,117,97,108,95,101,110,100,0,112,97,110,101,108,45,62,116,121,112,101,32,38,32,78,75,95,80,65,78,69,76,95,83,69,84,95,80,79,80,85,80,0,110,107,95,99,111,109,98,111,95,98,101,103,105,110,95,116,101,120,116,0,115,101,108,101,99,116,101,100,0,110,107,95,99,111,109,98,111,95,98,101,103,105,110,95,99,111,108,111,114,0,110,107,95,99,111,109,98,111,0,105,116,101,109,115,0,110,107,95,109,101,110,117,95,98,101,103,105,110,95,116,101,120,116,0,35,118,101,114,115,105,111,110,32,49,48,48,10,117,110,105,102,111,114,109,32,109,97,116,52,32,80,114,111,106,77,116,120,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,80,111,115,105,116,105,111,110,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,84,101,120,67,111,111,114,100,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,67,111,108,111,114,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,70,114,97,103,95,85,86,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,70,114,97,103,95,67,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,70,114,97,103,95,85,86,32,61,32,84,101,120,67,111,111,114,100,59,10,32,32,32,70,114,97,103,95,67,111,108,111,114,32,61,32,67,111,108,111,114,59,10,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,80,114,111,106,77,116,120,32,42,32,118,101,99,52,40,80,111,115,105,116,105,111,110,46,120,121,44,32,48,44,32,49,41,59,10,125,10,0,35,118,101,114,115,105,111,110,32,49,48,48,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,84,101,120,116,117,114,101,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,70,114,97,103,95,85,86,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,70,114,97,103,95,67,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,123,10,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,70,114,97,103,95,67,111,108,111,114,32,42,32,116,101,120,116,117,114,101,50,68,40,84,101,120,116,117,114,101,44,32,70,114,97,103,95,85,86,41,59,10,125,10,0,115,116,97,116,117,115,32,61,61,32,71,76,95,84,82,85,69,0,46,47,110,117,107,108,101,97,114,95,103,108,102,119,95,103,108,51,46,104,0,110,107,95,103,108,102,119,51,95,100,101,118,105,99,101,95,99,114,101,97,116,101,0,84,101,120,116,117,114,101,0,80,114,111,106,77,116,120,0,80,111,115,105,116,105,111,110,0,84,101,120,67,111,111,114,100,0,67,111,108,111,114,0,68,101,102,97,117,108,116,0,87,104,105,116,101,0,82,101,100,0,66,108,117,101,0,68,97,114,107,0,68,101,109,111,0,98,117,116,116,111,110,0,98,117,116,116,111,110,32,112,114,101,115,115,101,100,10,0,101,97,115,121,0,104,97,114,100,0,67,111,109,112,114,101,115,115,105,111,110,58,0,98,97,99,107,103,114,111,117,110,100,58,0,35,82,58,0,35,71,58,0,35,66,58,0,35,65,58,0,71,85,73,32,115,107,105,110,58,0,69,114,114,111,114,32,37,100,58,32,37,115,10,0,114,101,116,117,114,110,32,33,33,40,100,111,99,117,109,101,110,116,46,102,117,108,108,115,99,114,101,101,110,69,108,101,109,101,110,116,32,124,124,32,100,111,99,117,109,101,110,116,46,109,111,122,70,117,108,108,83,99,114,101,101,110,69,108,101,109,101,110,116,32,124,124,32,100,111,99,117,109,101,110,116,46,119,101,98,107,105,116,70,117,108,108,115,99,114,101,101,110,69,108,101,109,101,110,116,32,124,124,32,100,111,99,117,109,101,110,116,46,109,115,70,117,108,108,115,99,114,101,101,110,69,108,101,109,101,110,116,41,0,83,117,99,99,101,115,115,102,117,108,108,121,32,116,114,97,110,115,105,116,105,111,110,101,100,32,116,111,32,102,117,108,108,115,99,114,101,101,110,32,109,111,100,101,33,10,0,69,120,105,116,101,100,32,102,117,108,108,115,99,114,101,101,110,46,32,84,101,115,116,32,115,117,99,99,101,101,100,101,100,46,10,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,119,105,110,100,111,119,46,32,84,101,115,116,32,102,97,105,108,101,100,46,10,0,71,76,70,87,32,114,101,115,105,122,105,110,103,32,116,101,115,116,32,45,32,119,105,110,100,111,119,101,100,0,110,107,95,122,101,114,111,0,105,0,110,107,95,117,116,102,95,100,101,99,111,100,101,95,98,121,116,101,0,192,128,224,240,248,128,0,192,224,240,110,107,95,117,116,102,95,118,97,108,105,100,97,116,101,0,110,107,95,98,117,102,102,101,114,95,97,108,108,111,99,0,98,45,62,116,121,112,101,32,61,61,32,78,75,95,66,85,70,70,69,82,95,68,89,78,65,77,73,67,0,98,45,62,112,111,111,108,46,97,108,108,111,99,32,38,38,32,98,45,62,112,111,111,108,46,102,114,101,101,0,110,107,95,98,117,102,102,101,114,95,114,101,97,108,108,111,99,0,116,101,109,112,0,110,107,95,99,111,109,109,97,110,100,95,98,117,102,102,101,114,95,112,117,115,104,0,98,45,62,98,97,115,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,97,108,108,111,99,95,118,101,114,116,105,99,101,115,0,110,107,95,100,114,97,119,95,108,105,115,116,95,97,108,108,111,99,95,101,108,101,109,101,110,116,115,0,48,32,38,38,32,34,119,114,111,110,103,32,101,108,101,109,101,110,116,32,97,116,116,114,105,98,117,116,101,34,0,110,107,95,100,114,97,119,95,118,101,114,116,101,120,0,102,111,114,109,97,116,32,60,32,78,75,95,70,79,82,77,65,84,95,67,79,76,79,82,95,66,69,71,73,78,0,110,107,95,100,114,97,119,95,118,101,114,116,101,120,95,101,108,101,109,101,110,116,0,48,32,38,38,32,34,105,110,118,97,108,105,100,32,118,101,114,116,101,120,32,108,97,121,111,117,116,32,102,111,114,109,97,116,34,0,102,111,114,109,97,116,32,62,61,32,78,75,95,70,79,82,77,65,84,95,67,79,76,79,82,95,66,69,71,73,78,0,110,107,95,100,114,97,119,95,118,101,114,116,101,120,95,99,111,108,111,114,0,102,111,114,109,97,116,32,60,61,32,78,75,95,70,79,82,77,65,84,95,67,79,76,79,82,95,69,78,68,0,48,32,38,38,32,34,73,110,118,97,108,105,100,32,118,101,114,116,101,120,32,108,97,121,111,117,116,32,99,111,108,111,114,32,102,111,114,109,97,116,34,0,110,107,95,100,114,97,119,95,108,105,115,116,95,97,100,100,95,99,108,105,112,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,117,115,104,95,99,111,109,109,97,110,100,0,108,105,115,116,45,62,99,109,100,95,99,111,117,110,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,99,111,109,109,97,110,100,95,108,97,115,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,117,115,104,95,105,109,97,103,101,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,97,116,104,95,108,97,115,116,0,110,107,95,100,114,97,119,95,108,105,115,116,95,112,117,115,104,95,114,101,99,116,95,117,118,0,114,97,110,103,101,0,110,107,95,114,97,110,103,101,95,99,111,117,110,116,0,98,117,102,0,110,107,95,95,100,111,117,116,32,61,61,32,111,117,116,112,117,116,32,43,32,111,108,101,110,0,110,107,95,100,101,99,111,109,112,114,101,115,115,0,48,0,110,107,95,95,100,111,117,116,32,60,61,32,111,117,116,112,117,116,32,43,32,111,108,101,110,0,110,107,95,95,100,111,117,116,32,43,32,108,101,110,103,116,104,32,60,61,32,110,107,95,95,98,97,114,114,105,101,114,0,110,107,95,95,109,97,116,99,104,0,110,107,95,95,108,105,116,0,99,111,110,102,105,103,95,108,105,115,116,0,110,107,95,102,111,110,116,95,98,97,107,101,114,95,109,101,109,111,114,121,0,103,108,121,112,104,95,99,111,117,110,116,0,116,32,62,61,32,102,0,110,107,95,114,97,110,103,101,95,103,108,121,112,104,95,99,111,117,110,116,0,105,109,97,103,101,95,109,101,109,111,114,121,0,110,107,95,102,111,110,116,95,98,97,107,101,95,112,97,99,107,0,99,111,117,110,116,0,114,101,99,116,95,110,32,61,61,32,116,111,116,97,108,95,103,108,121,112,104,95,99,111,117,110,116,0,99,104,97,114,95,110,32,61,61,32,116,111,116,97,108,95,103,108,121,112,104,95,99,111,117,110,116,0,114,97,110,103,101,95,110,32,61,61,32,116,111,116,97,108,95,114,97,110,103,101,95,99,111,117,110,116,0,99,109,97,112,0,108,111,99,97,0,104,101,97,100,0,103,108,121,102,0,104,104,101,97,0,104,109,116,120,0,107,101,114,110,0,109,97,120,112,0,119,105,100,116,104,32,60,61,32,48,120,102,102,102,102,32,38,38,32,104,101,105,103,104,116,32,60,61,32,48,120,102,102,102,102,0,110,107,95,114,112,95,105,110,105,116,95,116,97,114,103,101,116,0,104,95,111,118,101,114,115,97,109,112,108,101,32,60,61,32,56,0,110,107,95,116,116,95,80,97,99,107,83,101,116,79,118,101,114,115,97,109,112,108,105,110,103,0,118,95,111,118,101,114,115,97,109,112,108,101,32,60,61,32,56,0,119,105,100,116,104,32,37,32,99,45,62,97,108,105,103,110,32,61,61,32,48,0,110,107,95,114,112,95,95,115,107,121,108,105,110,101,95,102,105,110,100,95,98,101,115,116,95,112,111,115,0,120,112,111,115,32,62,61,32,48,0,110,111,100,101,45,62,110,101,120,116,45,62,120,32,62,32,120,112,111,115,32,38,38,32,110,111,100,101,45,62,120,32,60,61,32,120,112,111,115,0,121,32,60,61,32,98,101,115,116,95,121,0,102,105,114,115,116,45,62,120,32,60,61,32,120,48,0,110,107,95,114,112,95,95,115,107,121,108,105,110,101,95,102,105,110,100,95,109,105,110,95,121,0,110,111,100,101,45,62,110,101,120,116,45,62,120,32,62,32,120,48,0,110,111,100,101,45,62,120,32,60,61,32,120,48,0,110,107,95,116,116,95,70,105,110,100,71,108,121,112,104,73,110,100,101,120,0,117,110,105,99,111,100,101,95,99,111,100,101,112,111,105,110,116,32,60,61,32,110,107,95,116,116,85,83,72,79,82,84,40,100,97,116,97,32,43,32,101,110,100,67,111,117,110,116,32,43,32,50,42,105,116,101,109,41,0,110,107,95,102,111,110,116,95,98,97,107,101,0,98,97,107,101,114,0,102,111,110,116,95,99,111,117,110,116,0,103,108,121,112,104,115,95,99,111,117,110,116,0,110,107,95,116,116,95,71,101,116,71,108,121,112,104,83,104,97,112,101,0,110,107,95,116,116,95,82,97,115,116,101,114,105,122,101,0,122,45,62,100,105,114,101,99,116,105,111,110,0,110,107,95,116,116,95,95,114,97,115,116,101,114,105,122,101,95,115,111,114,116,101,100,95,101,100,103,101,115,0,122,45,62,101,121,32,62,61,32,115,99,97,110,95,121,95,116,111,112,0,101,45,62,101,121,32,62,61,32,121,95,116,111,112,0,110,107,95,116,116,95,95,102,105,108,108,95,97,99,116,105,118,101,95,101,100,103,101,115,95,110,101,119,0,101,45,62,115,121,32,60,61,32,121,95,98,111,116,116,111,109,32,38,38,32,101,45,62,101,121,32,62,61,32,121,95,116,111,112,0,120,32,62,61,32,48,32,38,38,32,120,32,60,32,108,101,110,0,121,48,32,60,32,121,49,0,110,107,95,116,116,95,95,104,97,110,100,108,101,95,99,108,105,112,112,101,100,95,101,100,103,101,0,101,45,62,115,121,32,60,61,32,101,45,62,101,121,0,120,49,32,60,61,32,120,43,49,0,120,49,32,62,61,32,120,0,120,49,32,60,61,32,120,0,120,49,32,62,61,32,120,43,49,0,120,49,32,62,61,32,120,32,38,38,32,120,49,32,60,61,32,120,43,49,0,120,48,32,62,61,32,120,32,38,38,32,120,48,32,60,61,32,120,43,49,32,38,38,32,120,49,32,62,61,32,120,32,38,38,32,120,49,32,60,61,32,120,43,49,0,112,105,120,101,108,115,91,105,93,32,61,61,32,48,0,110,107,95,116,116,95,95,104,95,112,114,101,102,105,108,116,101,114,0,112,105,120,101,108,115,91,105,42,115,116,114,105,100,101,95,105,110,95,98,121,116,101,115,93,32,61,61,32,48,0,110,107,95,116,116,95,95,118,95,112,114,101,102,105,108,116,101,114,0,105,109,103,95,109,101,109,111,114,121,0,110,107,95,102,111,110,116,95,98,97,107,101,95,99,117,115,116,111,109,95,100,97,116,97,0,105,109,103,95,119,105,100,116,104,0,105,109,103,95,104,101,105,103,104,116,0,116,101,120,116,117,114,101,95,100,97,116,97,95,109,97,115,107,0,111,117,116,95,109,101,109,111,114,121,0,110,107,95,102,111,110,116,95,98,97,107,101,95,99,111,110,118,101,114,116,0,105,110,95,109,101,109,111,114,121,0,110,107,95,102,111,110,116,95,105,110,105,116,0,103,108,121,112,104,115,0,98,97,107,101,100,95,102,111,110,116,0,110,107,95,102,111,110,116,95,116,101,120,116,95,119,105,100,116,104,0,103,108,121,112,104,0,110,107,95,102,111,110,116,95,113,117,101,114,121,95,102,111,110,116,95,103,108,121,112,104,0,110,107,95,115,101,116,117,112,0,110,107,95,115,116,97,114,116,95,98,117,102,102,101,114,0,110,107,95,102,105,110,105,115,104,95,98,117,102,102,101,114,0,105,116,101,114,32,33,61,32,105,116,101,114,45,62,110,101,120,116,0,110,107,95,102,105,110,100,95,119,105,110,100,111,119,0,101,108,101,109,0,110,107,95,99,114,101,97,116,101,95,112,97,103,101,95,101,108,101,109,101,110,116,0,112,111,111,108,45,62,112,97,103,101,115,0,110,107,95,112,111,111,108,95,97,108,108,111,99,0,112,111,111,108,45,62,112,97,103,101,115,45,62,115,105,122,101,32,60,32,112,111,111,108,45,62,99,97,112,97,99,105,116,121,0,110,107,95,105,110,115,101,114,116,95,119,105,110,100,111,119,0,105,116,101,114,32,33,61,32,119,105,110,0,99,109,100,98,117,102,0,110,107,95,99,111,109,109,97,110,100,95,98,117,102,102,101,114,95,105,110,105,116,0,110,107,95,115,116,97,114,116,0,110,107,95,112,97,110,101,108,95,98,101,103,105,110,0,110,107,95,112,97,110,101,108,95,101,110,100,0,33,108,97,121,111,117,116,45,62,114,111,119,46,116,114,101,101,95,100,101,112,116,104,0,111,117,116,0,110,107,95,100,111,95,115,99,114,111,108,108,98,97,114,118,0,110,107,95,100,111,95,115,99,114,111,108,108,98,97,114,104,0,110,107,95,99,111,109,109,97,110,100,95,98,117,102,102,101,114,95,114,101,115,101,116,0,110,107,95,102,105,110,105,115,104,0,110,107,95,114,111,119,95,108,97,121,111,117,116,0,110,107,95,112,97,110,101,108,95,108,97,121,111,117,116,0,110,107,95,116,114,101,101,95,115,116,97,116,101,95,98,97,115,101,0,110,107,95,108,97,121,111,117,116,95,112,101,101,107,0,110,107,95,108,97,121,111,117,116,95,119,105,100,103,101,116,95,115,112,97,99,101,0,98,111,117,110,100,115,0,108,97,121,111,117,116,45,62,114,111,119,46,114,97,116,105,111,0,110,107,95,112,97,110,101,108,95,97,108,108,111,99,95,115,112,97,99,101,0,111,0,110,107,95,119,105,100,103,101,116,95,116,101,120,116,0,116,0,110,107,95,119,105,100,103,101,116,95,116,101,120,116,95,119,114,97,112,0,110,107,95,115,116,114,102,109,116,0,98,117,102,95,115,105,122,101,0,110,107,95,100,111,95,98,117,116,116,111,110,95,116,101,120,116,0,115,116,114,105,110,103,0,110,107,95,100,111,95,98,117,116,116,111,110,0,110,107,95,100,111,95,98,117,116,116,111,110,95,115,121,109,98,111,108,0,110,107,95,100,111,95,98,117,116,116,111,110,95,116,101,120,116,95,115,121,109,98,111,108,0,110,107,95,100,111,95,115,101,108,101,99,116,97,98,108,101,0,110,107,95,100,111,95,116,111,103,103,108,101,0,110,107,95,100,111,95,115,108,105,100,101,114,0,110,107,95,100,111,95,112,114,111,103,114,101,115,115,0,110,107,95,100,111,95,101,100,105,116,0,10,0,32,32,32,32,0,115,101,108,101,99,116,95,98,101,103,105,110,95,112,116,114,0,115,101,108,101,99,116,95,101,110,100,95,112,116,114,0,99,117,114,115,111,114,95,112,116,114,0,110,107,95,101,100,105,116,95,100,114,97,119,95,116,101,120,116,0,110,107,95,112,114,111,112,101,114,116,121,0,110,107,95,100,116,111,97,0,110,107,95,100,111,95,99,111,108,111,114,95,112,105,99,107,101,114,0,110,107,95,99,111,108,111,114,95,112,105,99,107,101,114,95,98,101,104,97,118,105,111,114,0,109,97,116,114,105,120,0,104,117,101,95,98,97,114,0,0,0,0,255,255,255,255,255,110,107,95,100,114,97,119,95,99,111,108,111,114,95,112,105,99,107,101,114,0,255,0,0,255,255,255,0,255,0,255,0,255,0,255,255,255,0,0,255,255,255,0,255,255,255,0,0,255,110,107,95,99,104,97,114,116,95,112,117,115,104,95,108,105,110,101,0,110,107,95,99,104,97,114,116,95,112,117,115,104,95,99,111,108,117,109,110,0,110,107,95,117,110,105,102,121,0,99,108,105,112,0,110,107,95,97,100,100,95,118,97,108,117,101,0,116,98,108,0,110,107,95,115,116,97,114,116,95,112,111,112,117,112,0,110,107,95,102,105,110,105,115,104,95,112,111,112,117,112,0,110,107,95,110,111,110,98,108,111,99,107,95,98,101,103,105,110,0,33,40,112,97,110,101,108,45,62,116,121,112,101,32,38,32,78,75,95,80,65,78,69,76,95,83,69,84,95,80,79,80,85,80,41,0,112,111,112,117,112,45,62,108,97,121,111,117,116,0,110,107,95,99,111,109,98,111,95,98,101,103,105,110,0,120,0,95,0,43,0,45,0,110,107,95,109,101,110,117,95,98,101,103,105,110,0,78,111,100,101,69,100,105,116,0,108,105,110,107,105,110,103,32,102,97,105,108,101,100,10,0,83,104,111,119,32,71,114,105,100,0,72,105,100,101,32,71,114,105,100,0,78,101,119,0,83,111,117,114,99,101,0,67,111,109,98,105,110,101,0,40,110,107,95,115,105,122,101,41,101,100,105,116,111,114,45,62,108,105,110,107,95,99,111,117,110,116,32,60,32,76,69,78,40,101,100,105,116,111,114,45,62,108,105,110,107,115,41,0,46,47,110,111,100,101,95,101,100,105,116,111,114,46,99,0,110,111,100,101,95,101,100,105,116,111,114,95,108,105,110,107,0,40,110,107,95,115,105,122,101,41,101,100,105,116,111,114,45,62,110,111,100,101,95,99,111,117,110,116,32,60,32,76,69,78,40,101,100,105,116,111,114,45,62,110,111,100,101,95,98,117,102,41,0,110,111,100,101,95,101,100,105,116,111,114,95,97,100,100,0,79,118,101,114,118,105,101,119,0,77,69,78,85,0,72,105,100,101,0,65,98,111,117,116,0,99,104,101,99,107,0,78,117,107,108,101,97,114,0,66,121,32,77,105,99,104,97,32,77,101,116,116,107,101,0,110,117,107,108,101,97,114,32,105,115,32,108,105,99,101,110,115,101,100,32,117,110,100,101,114,32,116,104,101,32,112,117,98,108,105,99,32,100,111,109,97,105,110,32,76,105,99,101,110,115,101,46,0,87,105,110,100,111,119,0,46,47,111,118,101,114,118,105,101,119,46,99,58,55,56,0,84,105,116,108,101,98,97,114,0,77,101,110,117,0,66,111,114,100,101,114,0,82,101,115,105,122,97,98,108,101,0,77,111,118,97,98,108,101,0,78,111,32,83,99,114,111,108,108,98,97,114,0,77,105,110,105,109,105,122,97,98,108,101,0,87,105,100,103,101,116,115,0,46,47,111,118,101,114,118,105,101,119,46,99,58,57,48,0,84,101,120,116,0,46,47,111,118,101,114,118,105,101,119,46,99,58,57,53,0,76,97,98,101,108,32,97,108,105,103,110,101,100,32,108,101,102,116,0,76,97,98,101,108,32,97,108,105,103,110,101,100,32,99,101,110,116,101,114,101,100,0,76,97,98,101,108,32,97,108,105,103,110,101,100,32,114,105,103,104,116,0,66,108,117,101,32,116,101,120,116,0,89,101,108,108,111,119,32,116,101,120,116,0,84,101,120,116,32,119,105,116,104,111,117,116,32,47,48,0,84,104,105,115,32,105,115,32,97,32,118,101,114,121,32,108,111,110,103,32,108,105,110,101,32,116,111,32,104,111,112,101,102,117,108,108,121,32,103,101,116,32,116,104,105,115,32,116,101,120,116,32,116,111,32,98,101,32,119,114,97,112,112,101,100,32,105,110,116,111,32,109,117,108,116,105,112,108,101,32,108,105,110,101,115,32,116,111,32,115,104,111,119,32,108,105,110,101,32,119,114,97,112,112,105,110,103,0,84,104,105,115,32,105,115,32,97,110,111,116,104,101,114,32,108,111,110,103,32,116,101,120,116,32,116,111,32,115,104,111,119,32,100,121,110,97,109,105,99,32,119,105,110,100,111,119,32,99,104,97,110,103,101,115,32,111,110,32,109,117,108,116,105,108,105,110,101,32,116,101,120,116,0,66,117,116,116,111,110,0,46,47,111,118,101,114,118,105,101,119,46,99,58,49,49,51,0,66,117,116,116,111,110,32,112,114,101,115,115,101,100,33,10,0,82,101,112,101,97,116,101,114,0,82,101,112,101,97,116,101,114,32,105,115,32,98,101,105,110,103,32,112,114,101,115,115,101,100,33,10,0,112,114,101,118,0,110,101,120,116,0,66,97,115,105,99,0,46,47,111,118,101,114,118,105,101,119,46,99,58,49,52,49,0,67,104,101,99,107,98,111,120,0,111,112,116,105,111,110,65,0,111,112,116,105,111,110,66,0,111,112,116,105,111,110,67,0,83,108,105,100,101,114,32,105,110,116,0,83,108,105,100,101,114,32,102,108,111,97,116,0,80,114,111,103,114,101,115,115,98,97,114,0,80,114,111,112,101,114,116,121,32,102,108,111,97,116,58,0,70,108,111,97,116,58,0,80,114,111,112,101,114,116,121,32,105,110,116,58,0,73,110,116,58,0,80,114,111,112,101,114,116,121,32,110,101,103,58,0,78,101,103,58,0,82,97,110,103,101,58,0,35,109,105,110,58,0,35,102,108,111,97,116,58,0,35,109,97,120,58,0,35,110,101,103,58,0,83,101,108,101,99,116,97,98,108,101,0,46,47,111,118,101,114,118,105,101,119,46,99,58,49,57,57,0,76,105,115,116,0,46,47,111,118,101,114,118,105,101,119,46,99,58,50,48,49,0,78,111,116,32,83,101,108,101,99,116,97,98,108,101,0,71,114,105,100,0,46,47,111,118,101,114,118,105,101,119,46,99,58,50,49,50,0,90,0,67,111,109,98,111,0,46,47,111,118,101,114,118,105,101,119,46,99,58,50,51,49,0,130,50,50,255,130,180,50,255,70,105,115,116,0,80,105,115,116,111,108,0,83,104,111,116,103,117,110,0,80,108,97,115,109,97,0,66,70,71,0,82,58,0,71,58,0,66,58,0,65,58,0,82,71,66,0,72,83,86,0,35,72,58,0,35,83,58,0,35,86,58,0,37,122,100,0,37,46,50,102,44,32,37,46,50,102,44,32,37,46,50,102,0,35,88,58,0,35,89,58,0,35,90,58,0,37,46,49,102,0,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0,35,77,58,0,37,48,50,100,45,37,48,50,100,45,37,48,50,100,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,111,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,83,85,78,0,77,79,78,0,84,85,69,0,87,69,68,0,84,72,85,0,70,82,73,0,83,65,84,0,37,115,32,37,100,0,37,100,0,73,110,112,117,116,0,46,47,111,118,101,114,118,105,101,119,46,99,58,52,54,54,0,68,101,102,97,117,108,116,58,0,72,101,120,58,0,79,99,116,97,108,58,0,66,105,110,97,114,121,58,0,80,97,115,115,119,111,114,100,58,0,70,105,101,108,100,58,0,66,111,120,58,0,83,117,98,109,105,116,0,67,104,97,114,116,0,46,47,111,118,101,114,118,105,101,119,46,99,58,53,50,55,0,86,97,108,117,101,58,32,37,46,50,102,0,83,101,108,101,99,116,101,100,32,118,97,108,117,101,58,32,37,46,50,102,0,80,111,112,117,112,0,46,47,111,118,101,114,118,105,101,119,46,99,58,54,51,50,0,255,0,0,255,82,105,103,104,116,32,99,108,105,99,107,32,109,101,32,102,111,114,32,109,101,110,117,0,85,110,115,101,108,101,99,116,0,83,101,108,101,99,116,0,82,105,103,104,116,32,67,108,105,99,107,32,104,101,114,101,58,0,35,114,0,35,103,0,35,98,0,35,97,0,80,111,112,117,112,58,0,69,114,114,111,114,0,65,32,116,101,114,114,105,98,108,101,32,101,114,114,111,114,32,97,115,32,111,99,99,117,114,101,100,0,79,75,0,67,97,110,99,101,108,0,72,111,118,101,114,32,109,101,32,102,111,114,32,116,111,111,108,116,105,112,0,84,104,105,115,32,105,115,32,97,32,116,111,111,108,116,105,112,0,76,97,121,111,117,116,0,46,47,111,118,101,114,118,105,101,119,46,99,58,55,49,57,0,87,105,100,103,101,116,0,46,47,111,118,101,114,118,105,101,119,46,99,58,55,50,49,0,68,121,110,97,109,105,99,32,102,105,120,101,100,32,99,111,108,117,109,110,32,108,97,121,111,117,116,32,119,105,116,104,32,103,101,110,101,114,97,116,101,100,32,112,111,115,105,116,105,111,110,32,97,110,100,32,115,105,122,101,58,0,115,116,97,116,105,99,32,102,105,120,101,100,32,99,111,108,117,109,110,32,108,97,121,111,117,116,32,119,105,116,104,32,103,101,110,101,114,97,116,101,100,32,112,111,115,105,116,105,111,110,32,97,110,100,32,115,105,122,101,58,0,68,121,110,97,109,105,99,32,97,114,114,97,121,45,98,97,115,101,100,32,99,117,115,116,111,109,32,99,111,108,117,109,110,32,108,97,121,111,117,116,32,119,105,116,104,32,103,101,110,101,114,97,116,101,100,32,112,111,115,105,116,105,111,110,32,97,110,100,32,99,117,115,116,111,109,32,115,105,122,101,58,0,83,116,97,116,105,99,32,97,114,114,97,121,45,98,97,115,101,100,32,99,117,115,116,111,109,32,99,111,108,117,109,110,32,108,97,121,111,117,116,32,119,105,116,104,32,103,101,110,101,114,97,116,101,100,32,112,111,115,105,116,105,111,110,32,97,110,100,32,99,117,115,116,111,109,32,115,105,122,101,58,0,68,121,110,97,109,105,99,32,105,109,109,101,100,105,97,116,101,32,109,111,100,101,32,99,117,115,116,111,109,32,99,111,108,117,109,110,32,108,97,121,111,117,116,32,119,105,116,104,32,103,101,110,101,114,97,116,101,100,32,112,111,115,105,116,105,111,110,32,97,110,100,32,99,117,115,116,111,109,32,115,105,122,101,58,0,83,116,97,116,105,99,32,105,109,109,101,100,105,97,116,101,32,109,111,100,101,32,99,117,115,116,111,109,32,99,111,108,117,109,110,32,108,97,121,111,117,116,32,119,105,116,104,32,103,101,110,101,114,97,116,101,100,32,112,111,115,105,116,105,111,110,32,97,110,100,32,99,117,115,116,111,109,32,115,105,122,101,58,0,83,116,97,116,105,99,32,102,114,101,101,32,115,112,97,99,101,32,119,105,116,104,32,99,117,115,116,111,109,32,112,111,115,105,116,105,111,110,32,97,110,100,32,99,117,115,116,111,109,32,115,105,122,101,58,0,71,114,111,117,112,0,46,47,111,118,101,114,118,105,101,119,46,99,58,55,57,49,0,115,105,122,101,58,0,35,87,105,100,116,104,58,0,35,72,101,105,103,104,116,58,0,83,101,108,101,99,116,101,100,0,85,110,115,101,108,101,99,116,101,100,0,78,111,116,101,98,111,111,107,0,46,47,111,118,101,114,118,105,101,119,46,99,58,56,51,48,0,76,105,110,101,115,0,67,111,108,117,109,110,115,0,77,105,120,101,100,0,83,105,109,112,108,101,0,46,47,111,118,101,114,118,105,101,119,46,99,58,57,49,50,0,71,114,111,117,112,95,87,105,116,104,111,117,116,95,66,111,114,100,101,114,0,48,120,37,48,50,120,0,37,115,58,32,115,99,114,111,108,108,97,98,108,101,32,114,101,103,105,111,110,0,71,114,111,117,112,95,87,105,116,104,95,66,111,114,100,101,114,0,37,48,56,100,0,67,111,109,112,108,101,120,0,46,47,111,118,101,114,118,105,101,119,46,99,58,57,51,56,0,71,114,111,117,112,95,108,101,102,116,0,71,114,111,117,112,95,116,111,112,0,35,70,70,65,65,0,35,70,70,66,66,0,35,70,70,67,67,0,35,70,70,68,68,0,35,70,70,69,69,0,35,70,70,70,70,0,71,114,111,117,112,95,98,117,116,116,111,109,0,71,114,111,117,112,95,114,105,103,104,116,95,116,111,112,0,71,114,111,117,112,95,114,105,103,104,116,95,99,101,110,116,101,114,0,71,114,111,117,112,95,114,105,103,104,116,95,98,111,116,116,111,109,0,83,112,108,105,116,116,101,114,0,46,47,111,118,101,114,118,105,101,119,46,99,58,49,48,48,53,0,85,115,101,32,115,108,105,100,101,114,32,97,110,100,32,115,112,105,110,110,101,114,32,116,111,32,99,104,97,110,103,101,32,116,105,108,101,32,115,105,122,101,0,68,114,97,103,32,116,104,101,32,115,112,97,99,101,32,98,101,116,119,101,101,110,32,116,105,108,101,115,32,116,111,32,99,104,97,110,103,101,32,116,105,108,101,32,114,97,116,105,111,0,86,101,114,116,105,99,97,108,0,46,47,111,118,101,114,118,105,101,119,46,99,58,49,48,49,50,0,108,101,102,116,58,0,109,105,100,100,108,101,58,0,114,105,103,104,116,58,0,108,101,102,116,0,99,101,110,116,101,114,0,114,105,103,104,116,0,72,111,114,105,122,111,110,116,97,108,0,46,47,111,118,101,114,118,105,101,119,46,99,58,49,48,57,57,0,116,111,112,58,0,98,111,116,116,111,109,58,0,116,111,112,0,109,105,100,100,108,101,0,98,111,116,116,111,109,0,67,97,108,99,117,108,97,116,111,114,0,55,56,57,52,53,54,49,50,51,0,43,45,42,47,0,37,46,50,102,0,67,0,61,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

   
  Module["_i64Add"] = _i64Add;

  
  
  function _emscripten_get_now() { abort() }
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        var argArray = [arg];
        browserIterationFunc = function() {
          Runtime.dynCall('vi', func, argArray);
        };
      } else {
        browserIterationFunc = function() {
          Runtime.dynCall('v', func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x61:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [GLFW.active.id, charCode]);
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        Runtime.dynCall('viiiii', GLFW.active.keyFunc, [GLFW.active.id, key, event.keyCode, status, GLFW.getModBits(GLFW.active)]);
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Runtime.dynCall('vidd', GLFW.active.cursorPosFunc, [GLFW.active.id, Browser.mouseX, Browser.mouseY]);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.cursorEnterFunc, [GLFW.active.id, 1]);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.cursorEnterFunc, [GLFW.active.id, 0]);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        Runtime.dynCall('viiii', GLFW.active.mouseButtonFunc, [GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active)]);
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Runtime.dynCall('vidd', GLFW.active.scrollFunc, [GLFW.active.id, sx, sy]);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requestiong fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Runtime.dynCall('viii', GLFW.active.windowSizeFunc, [GLFW.active.id, GLFW.active.width, GLFW.active.height]);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        Runtime.dynCall('viii', GLFW.active.framebufferSizeFunc, [GLFW.active.id, GLFW.active.width, GLFW.active.height]);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        Module.printErr('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        Runtime.dynCall('viii', win.windowSizeFunc, [win.id, width, height]);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Runtime.dynCall('vi', win.windowCloseFunc, [win.id]);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwSetCursorPos(winid, x, y) {
      GLFW.setCursorPos(winid, x, y);
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.pause();
      Browser.mainLoop.func = null;
    }

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _glfwGetFramebufferSize(winid, width, height) {
      var ww = 0;
      var wh = 0;
  
      var win = GLFW.WindowFromId(winid);
      if (win) {
        ww = win.width;
        wh = win.height;
      }
  
      setValue(width, ww, 'i32');
      setValue(height, wh, 'i32');
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
  Module["_sbrk"] = _sbrk;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___uremdi3"] = ___uremdi3;

  function _glfwSetInputMode(winid, mode, value) {
      GLFW.setInputMode(winid, mode, value);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glfwGetMouseButton(winid, button) {
      return GLFW.getMouseButton(winid, button);
    }

  function _glfwGetWindowSize(winid, width, height) {
      GLFW.getWindowSize(winid, width, height);
    }

   
  Module["_memset"] = _memset;

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxAttributeLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glfwPollEvents() {}

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glfwMakeContextCurrent(winid) {}

  function ___lock() {}

  function ___unlock() {}

  function _glfwSetClipboardString(win, string) {}

  function _glEnable(x0) { GLctx['enable'](x0) }

  var _emscripten_asm_const_int=true;

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _glfwTerminate() {
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, !!transpose, view);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["___udivdi3"] = ___udivdi3;

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  function _glfwGetClipboardString(win) {}

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
var GLctx; GL.init();
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didii(x) { Module["printErr"]("Invalid function pointer called with signature 'didii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidiii(x) { Module["printErr"]("Invalid function pointer called with signature 'vidiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_didii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_didii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_vidd": nullFunc_vidd, "nullFunc_ii": nullFunc_ii, "nullFunc_didii": nullFunc_didii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "nullFunc_vidiii": nullFunc_vidiii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_vidd": invoke_vidd, "invoke_ii": invoke_ii, "invoke_didii": invoke_didii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_vidiii": invoke_vidiii, "_glUseProgram": _glUseProgram, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_glDeleteShader": _glDeleteShader, "_glVertexAttribPointer": _glVertexAttribPointer, "_glfwCreateWindow": _glfwCreateWindow, "_glShaderSource": _glShaderSource, "_glGetProgramiv": _glGetProgramiv, "_glLinkProgram": _glLinkProgram, "_glfwPollEvents": _glfwPollEvents, "_glfwSetClipboardString": _glfwSetClipboardString, "_glScissor": _glScissor, "_glGetUniformLocation": _glGetUniformLocation, "_glUniformMatrix4fv": _glUniformMatrix4fv, "___unlock": ___unlock, "___setErrNo": ___setErrNo, "_glfwGetClipboardString": _glfwGetClipboardString, "_glfwGetWindowSize": _glfwGetWindowSize, "_glfwSetInputMode": _glfwSetInputMode, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_glBlendEquation": _glBlendEquation, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glBindBuffer": _glBindBuffer, "_glCreateProgram": _glCreateProgram, "_glfwGetFramebufferSize": _glfwGetFramebufferSize, "_glViewport": _glViewport, "_localtime_r": _localtime_r, "_tzset": _tzset, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glClearColor": _glClearColor, "_glBlendFunc": _glBlendFunc, "_glDeleteTextures": _glDeleteTextures, "_glGetAttribLocation": _glGetAttribLocation, "_glClear": _glClear, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "_glfwSetCharCallback": _glfwSetCharCallback, "_glBindTexture": _glBindTexture, "_glUniform1i": _glUniform1i, "_glfwGetCursorPos": _glfwGetCursorPos, "_localtime": _localtime, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_glfwSetCursorPos": _glfwSetCursorPos, "_glfwGetKey": _glfwGetKey, "_glCreateShader": _glCreateShader, "_glfwGetMouseButton": _glfwGetMouseButton, "_glEnable": _glEnable, "_abort": _abort, "_glGenTextures": _glGenTextures, "_glDrawElements": _glDrawElements, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwInit": _glfwInit, "_glActiveTexture": _glActiveTexture, "_glTexParameteri": _glTexParameteri, "_glfwSwapBuffers": _glfwSwapBuffers, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_get_now": _emscripten_get_now, "_glfwWindowHint": _glfwWindowHint, "_glGenBuffers": _glGenBuffers, "_glAttachShader": _glAttachShader, "_glfwTerminate": _glfwTerminate, "_glBufferSubData": _glBufferSubData, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_glDisable": _glDisable, "_time": _time, "_glDetachShader": _glDetachShader, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glGetShaderiv": _glGetShaderiv, "_glTexImage2D": _glTexImage2D, "___syscall140": ___syscall140, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_didii=env.nullFunc_didii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_vidiii=env.nullFunc_vidiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_vidd=env.invoke_vidd;
  var invoke_ii=env.invoke_ii;
  var invoke_didii=env.invoke_didii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_vidiii=env.invoke_vidiii;
  var _glUseProgram=env._glUseProgram;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _glDeleteShader=env._glDeleteShader;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _glShaderSource=env._glShaderSource;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glLinkProgram=env._glLinkProgram;
  var _glfwPollEvents=env._glfwPollEvents;
  var _glfwSetClipboardString=env._glfwSetClipboardString;
  var _glScissor=env._glScissor;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var ___unlock=env.___unlock;
  var ___setErrNo=env.___setErrNo;
  var _glfwGetClipboardString=env._glfwGetClipboardString;
  var _glfwGetWindowSize=env._glfwGetWindowSize;
  var _glfwSetInputMode=env._glfwSetInputMode;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glBlendEquation=env._glBlendEquation;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _glBindBuffer=env._glBindBuffer;
  var _glCreateProgram=env._glCreateProgram;
  var _glfwGetFramebufferSize=env._glfwGetFramebufferSize;
  var _glViewport=env._glViewport;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _glClearColor=env._glClearColor;
  var _glBlendFunc=env._glBlendFunc;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glClear=env._glClear;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var _glBindTexture=env._glBindTexture;
  var _glUniform1i=env._glUniform1i;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _localtime=env._localtime;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _glfwSetCursorPos=env._glfwSetCursorPos;
  var _glfwGetKey=env._glfwGetKey;
  var _glCreateShader=env._glCreateShader;
  var _glfwGetMouseButton=env._glfwGetMouseButton;
  var _glEnable=env._glEnable;
  var _abort=env._abort;
  var _glGenTextures=env._glGenTextures;
  var _glDrawElements=env._glDrawElements;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwInit=env._glfwInit;
  var _glActiveTexture=env._glActiveTexture;
  var _glTexParameteri=env._glTexParameteri;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glfwWindowHint=env._glfwWindowHint;
  var _glGenBuffers=env._glGenBuffers;
  var _glAttachShader=env._glAttachShader;
  var _glfwTerminate=env._glfwTerminate;
  var _glBufferSubData=env._glBufferSubData;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _glDisable=env._glDisable;
  var _time=env._time;
  var _glDetachShader=env._glDetachShader;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glTexImage2D=env._glTexImage2D;
  var ___syscall140=env.___syscall140;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _nk_rect($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $10 = $5;
 HEAPF32[$9>>2] = $10;
 $11 = $6;
 $12 = ((($9)) + 4|0);
 HEAPF32[$12>>2] = $11;
 $13 = $7;
 $14 = ((($9)) + 8|0);
 HEAPF32[$14>>2] = $13;
 $15 = $8;
 $16 = ((($9)) + 12|0);
 HEAPF32[$16>>2] = $15;
 ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$9+12>>2]|0;
 STACKTOP = sp;return;
}
function _nk_vec2($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $1;
 $4 = $2;
 $6 = $3;
 HEAPF32[$5>>2] = $6;
 $7 = $4;
 $8 = ((($5)) + 4|0);
 HEAPF32[$8>>2] = $7;
 ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function _nk_strlen($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1316|0),(1320|0),3484,(1332|0));
  // unreachable;
 }
 while(1) {
  $5 = $1;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = $1;
   $8 = ((($7)) + 1|0);
   $1 = $8;
   $9 = HEAP8[$7>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)!=(0);
   $14 = $11;
  } else {
   $14 = 0;
  }
  $12 = $2;
  if (!($14)) {
   break;
  }
  $13 = (($12) + 1)|0;
  $2 = $13;
 }
 STACKTOP = sp;return ($12|0);
}
function _nk_strtoi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 1;
 $8 = $3;
 $6 = $8;
 $7 = 0;
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((1316|0),(1320|0),3496,(1342|0));
  // unreachable;
 }
 $11 = $3;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $2 = 0;
  $52 = $2;
  STACKTOP = sp;return ($52|0);
 }
 while(1) {
  $13 = $6;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(32);
  $17 = $6;
  if (!($16)) {
   break;
  }
  $18 = ((($17)) + 1|0);
  $6 = $18;
 }
 $19 = HEAP8[$17>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)==(45);
 if ($21) {
  $5 = -1;
  $22 = $6;
  $23 = ((($22)) + 1|0);
  $6 = $23;
 }
 while(1) {
  $24 = $6;
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($26|0)!=(0);
  if (!($27)) {
   break;
  }
  $28 = $6;
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)>=(48);
  if (!($31)) {
   break;
  }
  $32 = $6;
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  $35 = ($34|0)<=(57);
  if (!($35)) {
   break;
  }
  $36 = $7;
  $37 = ($36*10)|0;
  $38 = $6;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = (($40) - 48)|0;
  $42 = (($37) + ($41))|0;
  $7 = $42;
  $43 = $6;
  $44 = ((($43)) + 1|0);
  $6 = $44;
 }
 $45 = $4;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $6;
  $48 = $4;
  HEAP32[$48>>2] = $47;
 }
 $49 = $5;
 $50 = $7;
 $51 = Math_imul($49, $50)|0;
 $2 = $51;
 $52 = $2;
 STACKTOP = sp;return ($52|0);
}
function _nk_strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $6 = 1.0;
 $13 = $3;
 $7 = $13;
 $8 = 0.0;
 $9 = 0.0;
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1316|0),(1320|0),3523,(1352|0));
  // unreachable;
 }
 $16 = $3;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $2 = 0.0;
  $129 = $2;
  STACKTOP = sp;return (+$129);
 }
 while(1) {
  $18 = $7;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(32);
  $22 = $7;
  if (!($21)) {
   break;
  }
  $23 = ((($22)) + 1|0);
  $7 = $23;
 }
 $24 = HEAP8[$22>>0]|0;
 $25 = $24 << 24 >> 24;
 $26 = ($25|0)==(45);
 if ($26) {
  $6 = -1.0;
  $27 = $7;
  $28 = ((($27)) + 1|0);
  $7 = $28;
 }
 while(1) {
  $29 = $7;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   break;
  }
  $33 = $7;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 << 24 >> 24;
  $36 = ($35|0)!=(46);
  if (!($36)) {
   break;
  }
  $37 = $7;
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)!=(101);
  if (!($40)) {
   break;
  }
  $41 = $8;
  $42 = $41 * 10.0;
  $43 = $7;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = (($45) - 48)|0;
  $47 = (+($46|0));
  $48 = $42 + $47;
  $8 = $48;
  $49 = $7;
  $50 = ((($49)) + 1|0);
  $7 = $50;
 }
 $51 = $7;
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 << 24 >> 24;
 $54 = ($53|0)==(46);
 L19: do {
  if ($54) {
   $55 = $7;
   $56 = ((($55)) + 1|0);
   $7 = $56;
   $5 = 0.10000000000000001;
   while(1) {
    $57 = $7;
    $58 = HEAP8[$57>>0]|0;
    $59 = $58 << 24 >> 24;
    $60 = ($59|0)!=(0);
    if (!($60)) {
     break L19;
    }
    $61 = $7;
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = ($63|0)!=(101);
    if (!($64)) {
     break L19;
    }
    $65 = $8;
    $66 = $7;
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $69 = (($68) - 48)|0;
    $70 = (+($69|0));
    $71 = $5;
    $72 = $70 * $71;
    $73 = $65 + $72;
    $8 = $73;
    $74 = $5;
    $75 = $74 * 0.10000000000000001;
    $5 = $75;
    $76 = $7;
    $77 = ((($76)) + 1|0);
    $7 = $77;
   }
  }
 } while(0);
 $78 = $7;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79 << 24 >> 24;
 $81 = ($80|0)==(101);
 do {
  if ($81) {
   $82 = $7;
   $83 = ((($82)) + 1|0);
   $7 = $83;
   $84 = $7;
   $85 = HEAP8[$84>>0]|0;
   $86 = $85 << 24 >> 24;
   $87 = ($86|0)==(45);
   if ($87) {
    $12 = 1;
    $88 = $7;
    $89 = ((($88)) + 1|0);
    $7 = $89;
   } else {
    $90 = $7;
    $91 = HEAP8[$90>>0]|0;
    $92 = $91 << 24 >> 24;
    $93 = ($92|0)==(43);
    $12 = 0;
    if ($93) {
     $94 = $7;
     $95 = ((($94)) + 1|0);
     $7 = $95;
    }
   }
   $11 = 0;
   while(1) {
    $96 = $7;
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)!=(0);
    if (!($98)) {
     break;
    }
    $99 = $11;
    $100 = ($99*10)|0;
    $101 = $7;
    $102 = HEAP8[$101>>0]|0;
    $103 = $102 << 24 >> 24;
    $104 = (($103) - 48)|0;
    $105 = (($100) + ($104))|0;
    $11 = $105;
    $106 = $7;
    $107 = ((($106)) + 1|0);
    $7 = $107;
   }
   $5 = 1.0;
   $10 = 0;
   while(1) {
    $108 = $10;
    $109 = $11;
    $110 = ($108|0)<($109|0);
    if (!($110)) {
     break;
    }
    $111 = $5;
    $112 = $111 * 10.0;
    $5 = $112;
    $113 = $10;
    $114 = (($113) + 1)|0;
    $10 = $114;
   }
   $115 = $12;
   $116 = ($115|0)!=(0);
   $117 = $5;
   $118 = $8;
   if ($116) {
    $119 = $118 / $117;
    $8 = $119;
    break;
   } else {
    $120 = $118 * $117;
    $8 = $120;
    break;
   }
  }
 } while(0);
 $121 = $8;
 $122 = $6;
 $123 = $121 * $122;
 $9 = $123;
 $124 = $4;
 $125 = ($124|0)!=(0|0);
 if ($125) {
  $126 = $7;
  $127 = $4;
  HEAP32[$127>>2] = $126;
 }
 $128 = $9;
 $2 = $128;
 $129 = $2;
 STACKTOP = sp;return (+$129);
}
function _nk_strtof($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (+_nk_strtod($6,$7));
 $5 = $8;
 $9 = $5;
 $10 = $9;
 $4 = $10;
 $11 = $4;
 STACKTOP = sp;return (+$11);
}
function _nk_stricmpn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $6;
 $11 = ($10|0)>=(0);
 if (!($11)) {
  ___assert_fail((1362|0),(1320|0),3609,(1369|0));
  // unreachable;
 }
 L4: while(1) {
  $12 = $4;
  $13 = ((($12)) + 1|0);
  $4 = $13;
  $14 = HEAP8[$12>>0]|0;
  $15 = $14 << 24 >> 24;
  $7 = $15;
  $16 = $5;
  $17 = ((($16)) + 1|0);
  $5 = $17;
  $18 = HEAP8[$16>>0]|0;
  $19 = $18 << 24 >> 24;
  $8 = $19;
  $20 = $6;
  $21 = (($20) + -1)|0;
  $6 = $21;
  $22 = ($20|0)!=(0);
  if (!($22)) {
   label = 5;
   break;
  }
  $23 = $7;
  $24 = $8;
  $25 = (($23) - ($24))|0;
  $9 = $25;
  $26 = $9;
  $27 = ($26|0)!=(0);
  do {
   if ($27) {
    $28 = $7;
    $29 = ($28|0)<=(90);
    $30 = $7;
    $31 = ($30|0)>=(65);
    $or$cond = $29 & $31;
    if ($or$cond) {
     $32 = $9;
     $33 = (($32) + 32)|0;
     $9 = $33;
     $34 = $9;
     $35 = ($34|0)!=(0);
     if (!($35)) {
      break;
     }
    }
    $36 = $8;
    $37 = ($36|0)<=(90);
    $38 = $8;
    $39 = ($38|0)>=(65);
    $or$cond3 = $37 & $39;
    if (!($or$cond3)) {
     label = 11;
     break L4;
    }
    $40 = $9;
    $41 = (($40) - 32)|0;
    $9 = $41;
    $42 = $9;
    $43 = ($42|0)!=(0);
    if ($43) {
     label = 11;
     break L4;
    }
   }
  } while(0);
  $49 = $7;
  $50 = ($49|0)!=(0);
  if (!($50)) {
   label = 13;
   break;
  }
 }
 if ((label|0) == 5) {
  $3 = 0;
  $51 = $3;
  STACKTOP = sp;return ($51|0);
 }
 else if ((label|0) == 11) {
  $44 = $9;
  $45 = ($44|0)>=(0);
  $46 = $45&1;
  $47 = $46 << 1;
  $48 = (($47) - 1)|0;
  $3 = $48;
  $51 = $3;
  STACKTOP = sp;return ($51|0);
 }
 else if ((label|0) == 13) {
  $3 = 0;
  $51 = $3;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _nk_murmur_hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 36|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 ;HEAP32[$7>>2]=0|0;
 $17 = $4;
 $8 = $17;
 $18 = $5;
 $19 = (($18|0) / 4)&-1;
 $9 = $19;
 $20 = $6;
 $10 = $20;
 $11 = -862048943;
 $12 = 461845907;
 $21 = $4;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  $3 = 0;
  $115 = $3;
  STACKTOP = sp;return ($115|0);
 }
 $23 = $8;
 $24 = $9;
 $25 = $24<<2;
 $26 = (($23) + ($25)|0);
 HEAP32[$7>>2] = $26;
 $27 = HEAP32[$7>>2]|0;
 $14 = $27;
 $28 = $9;
 $29 = (0 - ($28))|0;
 $16 = $29;
 while(1) {
  $30 = $16;
  $31 = ($30|0)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $16;
  $33 = $14;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $15 = $35;
  $36 = $15;
  $37 = Math_imul($36, -862048943)|0;
  $15 = $37;
  $38 = $15;
  $39 = $38 << 15;
  $40 = $15;
  $41 = $40 >>> 17;
  $42 = $39 | $41;
  $15 = $42;
  $43 = $15;
  $44 = Math_imul($43, 461845907)|0;
  $15 = $44;
  $45 = $15;
  $46 = $10;
  $47 = $46 ^ $45;
  $10 = $47;
  $48 = $10;
  $49 = $48 << 13;
  $50 = $10;
  $51 = $50 >>> 19;
  $52 = $49 | $51;
  $10 = $52;
  $53 = $10;
  $54 = ($53*5)|0;
  $55 = (($54) + -430675100)|0;
  $10 = $55;
  $56 = $16;
  $57 = (($56) + 1)|0;
  $16 = $57;
 }
 $58 = $8;
 $59 = $9;
 $60 = $59<<2;
 $61 = (($58) + ($60)|0);
 $13 = $61;
 $15 = 0;
 $62 = $5;
 $63 = $62 & 3;
 switch ($63|0) {
 case 3:  {
  $64 = $13;
  $65 = ((($64)) + 2|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $67 << 16;
  $69 = $15;
  $70 = $69 ^ $68;
  $15 = $70;
  label = 8;
  break;
 }
 case 2:  {
  label = 8;
  break;
 }
 case 1:  {
  label = 9;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 8) {
  $71 = $13;
  $72 = ((($71)) + 1|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 << 8;
  $76 = $15;
  $77 = $76 ^ $75;
  $15 = $77;
  label = 9;
 }
 if ((label|0) == 9) {
  $78 = $13;
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = $15;
  $82 = $81 ^ $80;
  $15 = $82;
  $83 = $15;
  $84 = Math_imul($83, -862048943)|0;
  $15 = $84;
  $85 = $15;
  $86 = $85 << 15;
  $87 = $15;
  $88 = $87 >>> 17;
  $89 = $86 | $88;
  $15 = $89;
  $90 = $15;
  $91 = Math_imul($90, 461845907)|0;
  $15 = $91;
  $92 = $15;
  $93 = $10;
  $94 = $93 ^ $92;
  $10 = $94;
 }
 $95 = $5;
 $96 = $10;
 $97 = $96 ^ $95;
 $10 = $97;
 $98 = $10;
 $99 = $98 >>> 16;
 $100 = $10;
 $101 = $100 ^ $99;
 $10 = $101;
 $102 = $10;
 $103 = Math_imul($102, -2048144789)|0;
 $10 = $103;
 $104 = $10;
 $105 = $104 >>> 13;
 $106 = $10;
 $107 = $106 ^ $105;
 $10 = $107;
 $108 = $10;
 $109 = Math_imul($108, -1028477387)|0;
 $10 = $109;
 $110 = $10;
 $111 = $110 >>> 16;
 $112 = $10;
 $113 = $112 ^ $111;
 $10 = $113;
 $114 = $10;
 $3 = $114;
 $115 = $3;
 STACKTOP = sp;return ($115|0);
}
function _nk_rgba($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp + 16|0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $10 = $5;
 $11 = ($10|0)<(255);
 $12 = $5;
 $13 = $11 ? $12 : 255;
 $14 = ($13|0)<(0);
 if ($14) {
  $20 = 0;
 } else {
  $15 = $5;
  $16 = ($15|0)<(255);
  $17 = $5;
  $18 = $16 ? $17 : 255;
  $20 = $18;
 }
 $19 = $20&255;
 HEAP8[$9>>0] = $19;
 $21 = $6;
 $22 = ($21|0)<(255);
 $23 = $6;
 $24 = $22 ? $23 : 255;
 $25 = ($24|0)<(0);
 if ($25) {
  $31 = 0;
 } else {
  $26 = $6;
  $27 = ($26|0)<(255);
  $28 = $6;
  $29 = $27 ? $28 : 255;
  $31 = $29;
 }
 $30 = $31&255;
 $32 = ((($9)) + 1|0);
 HEAP8[$32>>0] = $30;
 $33 = $7;
 $34 = ($33|0)<(255);
 $35 = $7;
 $36 = $34 ? $35 : 255;
 $37 = ($36|0)<(0);
 if ($37) {
  $43 = 0;
 } else {
  $38 = $7;
  $39 = ($38|0)<(255);
  $40 = $7;
  $41 = $39 ? $40 : 255;
  $43 = $41;
 }
 $42 = $43&255;
 $44 = ((($9)) + 2|0);
 HEAP8[$44>>0] = $42;
 $45 = $8;
 $46 = ($45|0)<(255);
 $47 = $8;
 $48 = $46 ? $47 : 255;
 $49 = ($48|0)<(0);
 if ($49) {
  $55 = 0;
 } else {
  $50 = $8;
  $51 = ($50|0)<(255);
  $52 = $8;
  $53 = $51 ? $52 : 255;
  $55 = $53;
 }
 $54 = $55&255;
 $56 = ((($9)) + 3|0);
 HEAP8[$56>>0] = $54;
 ;HEAP8[$0>>0]=HEAP8[$9>>0]|0;HEAP8[$0+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$9+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_rgb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp + 12|0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $8 = $4;
 $9 = ($8|0)<(255);
 $10 = $4;
 $11 = $9 ? $10 : 255;
 $12 = ($11|0)<(0);
 if ($12) {
  $18 = 0;
 } else {
  $13 = $4;
  $14 = ($13|0)<(255);
  $15 = $4;
  $16 = $14 ? $15 : 255;
  $18 = $16;
 }
 $17 = $18&255;
 HEAP8[$7>>0] = $17;
 $19 = $5;
 $20 = ($19|0)<(255);
 $21 = $5;
 $22 = $20 ? $21 : 255;
 $23 = ($22|0)<(0);
 if ($23) {
  $29 = 0;
 } else {
  $24 = $5;
  $25 = ($24|0)<(255);
  $26 = $5;
  $27 = $25 ? $26 : 255;
  $29 = $27;
 }
 $28 = $29&255;
 $30 = ((($7)) + 1|0);
 HEAP8[$30>>0] = $28;
 $31 = $6;
 $32 = ($31|0)<(255);
 $33 = $6;
 $34 = $32 ? $33 : 255;
 $35 = ($34|0)<(0);
 if ($35) {
  $41 = 0;
 } else {
  $36 = $6;
  $37 = ($36|0)<(255);
  $38 = $6;
  $39 = $37 ? $38 : 255;
  $41 = $39;
 }
 $40 = $41&255;
 $42 = ((($7)) + 2|0);
 HEAP8[$42>>0] = $40;
 $43 = ((($7)) + 3|0);
 HEAP8[$43>>0] = -1;
 ;HEAP8[$0>>0]=HEAP8[$7>>0]|0;HEAP8[$0+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$7+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_rgba_f($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp + 16|0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $10 = $5;
 $11 = 1.0 < $10;
 $12 = $5;
 $13 = $11 ? 1.0 : $12;
 $14 = 0.0 < $13;
 if ($14) {
  $15 = $5;
  $16 = 1.0 < $15;
  $17 = $5;
  $18 = $16 ? 1.0 : $17;
  $20 = $18;
 } else {
  $20 = 0.0;
 }
 $19 = $20 * 255.0;
 $21 = (~~(($19))&255);
 HEAP8[$9>>0] = $21;
 $22 = $6;
 $23 = 1.0 < $22;
 $24 = $6;
 $25 = $23 ? 1.0 : $24;
 $26 = 0.0 < $25;
 if ($26) {
  $27 = $6;
  $28 = 1.0 < $27;
  $29 = $6;
  $30 = $28 ? 1.0 : $29;
  $32 = $30;
 } else {
  $32 = 0.0;
 }
 $31 = $32 * 255.0;
 $33 = (~~(($31))&255);
 $34 = ((($9)) + 1|0);
 HEAP8[$34>>0] = $33;
 $35 = $7;
 $36 = 1.0 < $35;
 $37 = $7;
 $38 = $36 ? 1.0 : $37;
 $39 = 0.0 < $38;
 if ($39) {
  $40 = $7;
  $41 = 1.0 < $40;
  $42 = $7;
  $43 = $41 ? 1.0 : $42;
  $45 = $43;
 } else {
  $45 = 0.0;
 }
 $44 = $45 * 255.0;
 $46 = (~~(($44))&255);
 $47 = ((($9)) + 2|0);
 HEAP8[$47>>0] = $46;
 $48 = $8;
 $49 = 1.0 < $48;
 $50 = $8;
 $51 = $49 ? 1.0 : $50;
 $52 = 0.0 < $51;
 if ($52) {
  $53 = $8;
  $54 = 1.0 < $53;
  $55 = $8;
  $56 = $54 ? 1.0 : $55;
  $58 = $56;
 } else {
  $58 = 0.0;
 }
 $57 = $58 * 255.0;
 $59 = (~~(($57))&255);
 $60 = ((($9)) + 3|0);
 HEAP8[$60>>0] = $59;
 ;HEAP8[$0>>0]=HEAP8[$9>>0]|0;HEAP8[$0+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$9+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_rgba_fv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 $4 = +HEAPF32[$3>>2];
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $2;
 $9 = ((($8)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = ((($11)) + 12|0);
 $13 = +HEAPF32[$12>>2];
 _nk_rgba_f($0,$4,$7,$10,$13);
 STACKTOP = sp;return;
}
function _nk_rgb_f($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp + 12|0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $8 = $4;
 $9 = 1.0 < $8;
 $10 = $4;
 $11 = $9 ? 1.0 : $10;
 $12 = 0.0 < $11;
 if ($12) {
  $13 = $4;
  $14 = 1.0 < $13;
  $15 = $4;
  $16 = $14 ? 1.0 : $15;
  $18 = $16;
 } else {
  $18 = 0.0;
 }
 $17 = $18 * 255.0;
 $19 = (~~(($17))&255);
 HEAP8[$7>>0] = $19;
 $20 = $5;
 $21 = 1.0 < $20;
 $22 = $5;
 $23 = $21 ? 1.0 : $22;
 $24 = 0.0 < $23;
 if ($24) {
  $25 = $5;
  $26 = 1.0 < $25;
  $27 = $5;
  $28 = $26 ? 1.0 : $27;
  $30 = $28;
 } else {
  $30 = 0.0;
 }
 $29 = $30 * 255.0;
 $31 = (~~(($29))&255);
 $32 = ((($7)) + 1|0);
 HEAP8[$32>>0] = $31;
 $33 = $6;
 $34 = 1.0 < $33;
 $35 = $6;
 $36 = $34 ? 1.0 : $35;
 $37 = 0.0 < $36;
 if ($37) {
  $38 = $6;
  $39 = 1.0 < $38;
  $40 = $6;
  $41 = $39 ? 1.0 : $40;
  $43 = $41;
 } else {
  $43 = 0.0;
 }
 $42 = $43 * 255.0;
 $44 = (~~(($42))&255);
 $45 = ((($7)) + 2|0);
 HEAP8[$45>>0] = $44;
 $46 = ((($7)) + 3|0);
 HEAP8[$46>>0] = -1;
 ;HEAP8[$0>>0]=HEAP8[$7>>0]|0;HEAP8[$0+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$7+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_hsva($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $7 = 0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $13 = $5;
 $14 = ($13|0)<(255);
 $15 = $5;
 $16 = $14 ? $15 : 255;
 $17 = ($16|0)<(0);
 if ($17) {
  $23 = 0;
 } else {
  $18 = $5;
  $19 = ($18|0)<(255);
  $20 = $5;
  $21 = $19 ? $20 : 255;
  $23 = $21;
 }
 $22 = (+($23|0));
 $24 = $22 / 255.0;
 $9 = $24;
 $25 = $6;
 $26 = ($25|0)<(255);
 $27 = $6;
 $28 = $26 ? $27 : 255;
 $29 = ($28|0)<(0);
 if ($29) {
  $35 = 0;
 } else {
  $30 = $6;
  $31 = ($30|0)<(255);
  $32 = $6;
  $33 = $31 ? $32 : 255;
  $35 = $33;
 }
 $34 = (+($35|0));
 $36 = $34 / 255.0;
 $10 = $36;
 $37 = $7;
 $38 = ($37|0)<(255);
 $39 = $7;
 $40 = $38 ? $39 : 255;
 $41 = ($40|0)<(0);
 if ($41) {
  $47 = 0;
 } else {
  $42 = $7;
  $43 = ($42|0)<(255);
  $44 = $7;
  $45 = $43 ? $44 : 255;
  $47 = $45;
 }
 $46 = (+($47|0));
 $48 = $46 / 255.0;
 $11 = $48;
 $49 = $8;
 $50 = ($49|0)<(255);
 $51 = $8;
 $52 = $50 ? $51 : 255;
 $53 = ($52|0)<(0);
 if ($53) {
  $59 = 0;
  $58 = (+($59|0));
  $60 = $58 / 255.0;
  $12 = $60;
  $61 = $9;
  $62 = $10;
  $63 = $11;
  $64 = $12;
  _nk_hsva_f($0,$61,$62,$63,$64);
  STACKTOP = sp;return;
 }
 $54 = $8;
 $55 = ($54|0)<(255);
 $56 = $8;
 $57 = $55 ? $56 : 255;
 $59 = $57;
 $58 = (+($59|0));
 $60 = $58 / 255.0;
 $12 = $60;
 $61 = $9;
 $62 = $10;
 $63 = $11;
 $64 = $12;
 _nk_hsva_f($0,$61,$62,$63,$64);
 STACKTOP = sp;return;
}
function _nk_hsv_f($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = $6;
 _nk_hsva_f($0,$7,$8,$9,1.0);
 STACKTOP = sp;return;
}
function _nk_hsva_f($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp + 24|0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
 $15 = $6;
 $16 = $15 <= 0.0;
 if ($16) {
  $17 = $7;
  HEAPF32[$9>>2] = $17;
  $18 = $7;
  $19 = ((($9)) + 4|0);
  HEAPF32[$19>>2] = $18;
  $20 = $7;
  $21 = ((($9)) + 8|0);
  HEAPF32[$21>>2] = $20;
  $22 = +HEAPF32[$9>>2];
  $23 = ((($9)) + 4|0);
  $24 = +HEAPF32[$23>>2];
  $25 = ((($9)) + 8|0);
  $26 = +HEAPF32[$25>>2];
  _nk_rgb_f($0,$22,$24,$26);
  STACKTOP = sp;return;
 }
 $27 = $5;
 $28 = $27 / 0.1666666716337204;
 $5 = $28;
 $29 = $5;
 $30 = (~~(($29)));
 $14 = $30;
 $31 = $5;
 $32 = $14;
 $33 = (+($32|0));
 $34 = $31 - $33;
 $13 = $34;
 $35 = $7;
 $36 = $6;
 $37 = 1.0 - $36;
 $38 = $35 * $37;
 $10 = $38;
 $39 = $7;
 $40 = $6;
 $41 = $13;
 $42 = $40 * $41;
 $43 = 1.0 - $42;
 $44 = $39 * $43;
 $11 = $44;
 $45 = $7;
 $46 = $6;
 $47 = $13;
 $48 = 1.0 - $47;
 $49 = $46 * $48;
 $50 = 1.0 - $49;
 $51 = $45 * $50;
 $12 = $51;
 $52 = $14;
 switch ($52|0) {
 case 5:  {
  $78 = $7;
  HEAPF32[$9>>2] = $78;
  $79 = $10;
  $80 = ((($9)) + 4|0);
  HEAPF32[$80>>2] = $79;
  $81 = $11;
  $82 = ((($9)) + 8|0);
  HEAPF32[$82>>2] = $81;
  break;
 }
 case 1:  {
  $58 = $11;
  HEAPF32[$9>>2] = $58;
  $59 = $7;
  $60 = ((($9)) + 4|0);
  HEAPF32[$60>>2] = $59;
  $61 = $10;
  $62 = ((($9)) + 8|0);
  HEAPF32[$62>>2] = $61;
  break;
 }
 case 2:  {
  $63 = $10;
  HEAPF32[$9>>2] = $63;
  $64 = $7;
  $65 = ((($9)) + 4|0);
  HEAPF32[$65>>2] = $64;
  $66 = $12;
  $67 = ((($9)) + 8|0);
  HEAPF32[$67>>2] = $66;
  break;
 }
 case 3:  {
  $68 = $10;
  HEAPF32[$9>>2] = $68;
  $69 = $11;
  $70 = ((($9)) + 4|0);
  HEAPF32[$70>>2] = $69;
  $71 = $7;
  $72 = ((($9)) + 8|0);
  HEAPF32[$72>>2] = $71;
  break;
 }
 case 4:  {
  $73 = $12;
  HEAPF32[$9>>2] = $73;
  $74 = $10;
  $75 = ((($9)) + 4|0);
  HEAPF32[$75>>2] = $74;
  $76 = $7;
  $77 = ((($9)) + 8|0);
  HEAPF32[$77>>2] = $76;
  break;
 }
 default: {
  $53 = $7;
  HEAPF32[$9>>2] = $53;
  $54 = $12;
  $55 = ((($9)) + 4|0);
  HEAPF32[$55>>2] = $54;
  $56 = $10;
  $57 = ((($9)) + 8|0);
  HEAPF32[$57>>2] = $56;
 }
 }
 $83 = +HEAPF32[$9>>2];
 $84 = ((($9)) + 4|0);
 $85 = +HEAPF32[$84>>2];
 $86 = ((($9)) + 8|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $8;
 _nk_rgba_f($0,$83,$85,$87,$88);
 STACKTOP = sp;return;
}
function _nk_hsva_bv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $2;
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $2;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 _nk_hsva($0,$5,$9,$13,$17);
 STACKTOP = sp;return;
}
function _nk_hsva_fv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 $4 = +HEAPF32[$3>>2];
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $2;
 $9 = ((($8)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = ((($11)) + 12|0);
 $13 = +HEAPF32[$12>>2];
 _nk_hsva_f($0,$4,$7,$10,$13);
 STACKTOP = sp;return;
}
function _nk_color_u32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $1 = $3;
 $4 = ((($0)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $1;
 $9 = $8 | $7;
 $1 = $9;
 $10 = ((($0)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 16;
 $14 = $1;
 $15 = $14 | $13;
 $1 = $15;
 $16 = ((($0)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 24;
 $20 = $1;
 $21 = $20 | $19;
 $1 = $21;
 $22 = $1;
 STACKTOP = sp;return ($22|0);
}
function _nk_color_f($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = HEAP8[$4>>0]|0;
 $10 = (+($9&255));
 $11 = $10 * 0.0039215688593685627;
 $12 = $5;
 HEAPF32[$12>>2] = $11;
 $13 = ((($4)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = (+($14&255));
 $16 = $15 * 0.0039215688593685627;
 $17 = $6;
 HEAPF32[$17>>2] = $16;
 $18 = ((($4)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = (+($19&255));
 $21 = $20 * 0.0039215688593685627;
 $22 = $7;
 HEAPF32[$22>>2] = $21;
 $23 = ((($4)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = (+($24&255));
 $26 = $25 * 0.0039215688593685627;
 $27 = $8;
 HEAPF32[$27>>2] = $26;
 STACKTOP = sp;return;
}
function _nk_color_fv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = $2;
 $9 = ((($8)) + 12|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _nk_color_f($3,$5,$7,$9,$$byval_copy);
 STACKTOP = sp;return;
}
function _nk_color_hsva_f($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 48|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = 0.0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$4+3>>0]|0;
 _nk_color_f($11,$12,$13,$14,$$byval_copy);
 $17 = +HEAPF32[$12>>2];
 $18 = +HEAPF32[$13>>2];
 $19 = $17 < $18;
 if ($19) {
  $20 = +HEAPF32[$12>>2];
  $15 = $20;
  $21 = +HEAPF32[$13>>2];
  HEAPF32[$12>>2] = $21;
  $22 = $15;
  HEAPF32[$13>>2] = $22;
  $10 = -1.0;
 }
 $23 = +HEAPF32[$11>>2];
 $24 = +HEAPF32[$12>>2];
 $25 = $23 < $24;
 if ($25) {
  $26 = +HEAPF32[$11>>2];
  $16 = $26;
  $27 = +HEAPF32[$12>>2];
  HEAPF32[$11>>2] = $27;
  $28 = $16;
  HEAPF32[$12>>2] = $28;
  $29 = $10;
  $30 = -0.3333333432674408 - $29;
  $10 = $30;
 }
 $31 = +HEAPF32[$11>>2];
 $32 = +HEAPF32[$12>>2];
 $33 = +HEAPF32[$13>>2];
 $34 = $32 < $33;
 $35 = +HEAPF32[$12>>2];
 $36 = +HEAPF32[$13>>2];
 $37 = $34 ? $35 : $36;
 $38 = $31 - $37;
 $9 = $38;
 $39 = $10;
 $40 = +HEAPF32[$12>>2];
 $41 = +HEAPF32[$13>>2];
 $42 = $40 - $41;
 $43 = $9;
 $44 = 6.0 * $43;
 $45 = $44 + 9.9999996826552254E-21;
 $46 = $42 / $45;
 $47 = $39 + $46;
 $48 = $47 < 0.0;
 $49 = $10;
 $50 = +HEAPF32[$12>>2];
 $51 = +HEAPF32[$13>>2];
 $52 = $50 - $51;
 $53 = $9;
 $54 = 6.0 * $53;
 $55 = $54 + 9.9999996826552254E-21;
 $56 = $52 / $55;
 $57 = $49 + $56;
 $58 = -$57;
 $59 = $48 ? $58 : $57;
 $60 = $5;
 HEAPF32[$60>>2] = $59;
 $61 = $9;
 $62 = +HEAPF32[$11>>2];
 $63 = $62 + 9.9999996826552254E-21;
 $64 = $61 / $63;
 $65 = $6;
 HEAPF32[$65>>2] = $64;
 $66 = +HEAPF32[$11>>2];
 $67 = $7;
 HEAPF32[$67>>2] = $66;
 $68 = ((($4)) + 3|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = (+($69&255));
 $71 = $70 / 255.0;
 $72 = $8;
 HEAPF32[$72>>2] = $71;
 STACKTOP = sp;return;
}
function _nk_color_hsv_fv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = $2;
 $8 = ((($7)) + 8|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _nk_color_hsva_f($4,$6,$8,$3,$$byval_copy);
 STACKTOP = sp;return;
}
function _nk_color_hsva_fv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = $2;
 $9 = ((($8)) + 12|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _nk_color_hsva_f($3,$5,$7,$9,$$byval_copy);
 STACKTOP = sp;return;
}
function _nk_color_hsva_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $12 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$4+3>>0]|0;
 _nk_color_hsva_f($9,$10,$11,$12,$$byval_copy);
 $13 = +HEAPF32[$9>>2];
 $14 = $13 * 255.0;
 $15 = (~~(($14))&255);
 $16 = $15&255;
 $17 = $5;
 HEAP32[$17>>2] = $16;
 $18 = +HEAPF32[$10>>2];
 $19 = $18 * 255.0;
 $20 = (~~(($19))&255);
 $21 = $20&255;
 $22 = $6;
 HEAP32[$22>>2] = $21;
 $23 = +HEAPF32[$11>>2];
 $24 = $23 * 255.0;
 $25 = (~~(($24))&255);
 $26 = $25&255;
 $27 = $7;
 HEAP32[$27>>2] = $26;
 $28 = +HEAPF32[$12>>2];
 $29 = $28 * 255.0;
 $30 = (~~(($29))&255);
 $31 = $30&255;
 $32 = $8;
 HEAP32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function _nk_color_hsva_bv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $3 = sp;
 $2 = $0;
 $4 = ((($3)) + 4|0);
 $5 = ((($3)) + 8|0);
 $6 = ((($3)) + 12|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _nk_color_hsva_i($3,$4,$5,$6,$$byval_copy);
 $7 = HEAP32[$3>>2]|0;
 $8 = $7&255;
 $9 = $2;
 HEAP8[$9>>0] = $8;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11&255;
 $13 = $2;
 $14 = ((($13)) + 1|0);
 HEAP8[$14>>0] = $12;
 $15 = ((($3)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&255;
 $18 = $2;
 $19 = ((($18)) + 2|0);
 HEAP8[$19>>0] = $17;
 $20 = ((($3)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21&255;
 $23 = $2;
 $24 = ((($23)) + 3|0);
 HEAP8[$24>>0] = $22;
 STACKTOP = sp;return;
}
function _nk_handle_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $1;
 ;HEAP32[$3>>2]=0|0;
 $4 = $2;
 HEAP32[$3>>2] = $4;
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;
 STACKTOP = sp;return;
}
function _nk_handle_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $1;
 _nk_zero($3,4);
 $4 = $2;
 HEAP32[$3>>2] = $4;
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;
 STACKTOP = sp;return;
}
function _nk_zero($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = $3;
  _nk_memset($6,0,$7);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((1381|0),(1320|0),3476,(21792|0));
  // unreachable;
 }
}
function _nk_image_is_subimage($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1385|0),(1320|0),4961,(1389|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $15 = 0;
  $14 = $15 ^ 1;
  $16 = $14&1;
  STACKTOP = sp;return ($16|0);
 }
 $9 = $1;
 $10 = ((($9)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($12|0)==(0);
 $15 = $13;
 $14 = $15 ^ 1;
 $16 = $14&1;
 STACKTOP = sp;return ($16|0);
}
function _nk_triangle_from_direction($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0;
 var $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $14 = sp + 64|0;
 $15 = sp + 56|0;
 $16 = sp + 48|0;
 $17 = sp + 40|0;
 $18 = sp + 32|0;
 $19 = sp + 24|0;
 $20 = sp + 16|0;
 $21 = sp + 8|0;
 $22 = sp;
 $5 = $0;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $23 = $5;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((1410|0),(1320|0),4984,(1417|0));
  // unreachable;
 }
 $25 = $6;
 $26 = 2.0 * $25;
 $27 = ((($1)) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $26 < $28;
 if ($29) {
  $30 = ((($1)) + 8|0);
  $31 = +HEAPF32[$30>>2];
  $35 = $31;
 } else {
  $32 = $6;
  $33 = 2.0 * $32;
  $35 = $33;
 }
 $34 = ((($1)) + 8|0);
 HEAPF32[$34>>2] = $35;
 $36 = $7;
 $37 = 2.0 * $36;
 $38 = ((($1)) + 12|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $37 < $39;
 if ($40) {
  $41 = ((($1)) + 12|0);
  $42 = +HEAPF32[$41>>2];
  $46 = $42;
 } else {
  $43 = $7;
  $44 = 2.0 * $43;
  $46 = $44;
 }
 $45 = ((($1)) + 12|0);
 HEAPF32[$45>>2] = $46;
 $47 = ((($1)) + 8|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $6;
 $50 = 2.0 * $49;
 $51 = $48 - $50;
 $52 = ((($1)) + 8|0);
 HEAPF32[$52>>2] = $51;
 $53 = ((($1)) + 12|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $7;
 $56 = 2.0 * $55;
 $57 = $54 - $56;
 $58 = ((($1)) + 12|0);
 HEAPF32[$58>>2] = $57;
 $59 = +HEAPF32[$1>>2];
 $60 = $6;
 $61 = $59 + $60;
 HEAPF32[$1>>2] = $61;
 $62 = ((($1)) + 4|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $7;
 $65 = $63 + $64;
 $66 = ((($1)) + 4|0);
 HEAPF32[$66>>2] = $65;
 $67 = ((($1)) + 8|0);
 $68 = +HEAPF32[$67>>2];
 $69 = $68 / 2.0;
 $9 = $69;
 $70 = ((($1)) + 12|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $71 / 2.0;
 $10 = $72;
 $73 = $8;
 $74 = ($73|0)==(0);
 if ($74) {
  $75 = $5;
  $76 = +HEAPF32[$1>>2];
  $77 = $9;
  $78 = $76 + $77;
  $79 = ((($1)) + 4|0);
  $80 = +HEAPF32[$79>>2];
  _nk_vec2($11,$78,$80);
  ;HEAP32[$75>>2]=HEAP32[$11>>2]|0;HEAP32[$75+4>>2]=HEAP32[$11+4>>2]|0;
  $81 = $5;
  $82 = ((($81)) + 8|0);
  $83 = +HEAPF32[$1>>2];
  $84 = ((($1)) + 8|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $83 + $85;
  $87 = ((($1)) + 4|0);
  $88 = +HEAPF32[$87>>2];
  $89 = ((($1)) + 12|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $88 + $90;
  _nk_vec2($12,$86,$91);
  ;HEAP32[$82>>2]=HEAP32[$12>>2]|0;HEAP32[$82+4>>2]=HEAP32[$12+4>>2]|0;
  $92 = $5;
  $93 = ((($92)) + 16|0);
  $94 = +HEAPF32[$1>>2];
  $95 = ((($1)) + 4|0);
  $96 = +HEAPF32[$95>>2];
  $97 = ((($1)) + 12|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $96 + $98;
  _nk_vec2($13,$94,$99);
  ;HEAP32[$93>>2]=HEAP32[$13>>2]|0;HEAP32[$93+4>>2]=HEAP32[$13+4>>2]|0;
  STACKTOP = sp;return;
 }
 $100 = $8;
 $101 = ($100|0)==(1);
 if ($101) {
  $102 = $5;
  $103 = +HEAPF32[$1>>2];
  $104 = ((($1)) + 4|0);
  $105 = +HEAPF32[$104>>2];
  _nk_vec2($14,$103,$105);
  ;HEAP32[$102>>2]=HEAP32[$14>>2]|0;HEAP32[$102+4>>2]=HEAP32[$14+4>>2]|0;
  $106 = $5;
  $107 = ((($106)) + 8|0);
  $108 = +HEAPF32[$1>>2];
  $109 = ((($1)) + 8|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $108 + $110;
  $112 = ((($1)) + 4|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $10;
  $115 = $113 + $114;
  _nk_vec2($15,$111,$115);
  ;HEAP32[$107>>2]=HEAP32[$15>>2]|0;HEAP32[$107+4>>2]=HEAP32[$15+4>>2]|0;
  $116 = $5;
  $117 = ((($116)) + 16|0);
  $118 = +HEAPF32[$1>>2];
  $119 = ((($1)) + 4|0);
  $120 = +HEAPF32[$119>>2];
  $121 = ((($1)) + 12|0);
  $122 = +HEAPF32[$121>>2];
  $123 = $120 + $122;
  _nk_vec2($16,$118,$123);
  ;HEAP32[$117>>2]=HEAP32[$16>>2]|0;HEAP32[$117+4>>2]=HEAP32[$16+4>>2]|0;
  STACKTOP = sp;return;
 }
 $124 = $8;
 $125 = ($124|0)==(2);
 $126 = $5;
 $127 = +HEAPF32[$1>>2];
 $128 = ((($1)) + 4|0);
 $129 = +HEAPF32[$128>>2];
 if ($125) {
  _nk_vec2($17,$127,$129);
  ;HEAP32[$126>>2]=HEAP32[$17>>2]|0;HEAP32[$126+4>>2]=HEAP32[$17+4>>2]|0;
  $130 = $5;
  $131 = ((($130)) + 8|0);
  $132 = +HEAPF32[$1>>2];
  $133 = ((($1)) + 8|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $132 + $134;
  $136 = ((($1)) + 4|0);
  $137 = +HEAPF32[$136>>2];
  _nk_vec2($18,$135,$137);
  ;HEAP32[$131>>2]=HEAP32[$18>>2]|0;HEAP32[$131+4>>2]=HEAP32[$18+4>>2]|0;
  $138 = $5;
  $139 = ((($138)) + 16|0);
  $140 = +HEAPF32[$1>>2];
  $141 = $9;
  $142 = $140 + $141;
  $143 = ((($1)) + 4|0);
  $144 = +HEAPF32[$143>>2];
  $145 = ((($1)) + 12|0);
  $146 = +HEAPF32[$145>>2];
  $147 = $144 + $146;
  _nk_vec2($19,$142,$147);
  ;HEAP32[$139>>2]=HEAP32[$19>>2]|0;HEAP32[$139+4>>2]=HEAP32[$19+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $148 = $10;
  $149 = $129 + $148;
  _nk_vec2($20,$127,$149);
  ;HEAP32[$126>>2]=HEAP32[$20>>2]|0;HEAP32[$126+4>>2]=HEAP32[$20+4>>2]|0;
  $150 = $5;
  $151 = ((($150)) + 8|0);
  $152 = +HEAPF32[$1>>2];
  $153 = ((($1)) + 8|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $152 + $154;
  $156 = ((($1)) + 4|0);
  $157 = +HEAPF32[$156>>2];
  _nk_vec2($21,$155,$157);
  ;HEAP32[$151>>2]=HEAP32[$21>>2]|0;HEAP32[$151+4>>2]=HEAP32[$21+4>>2]|0;
  $158 = $5;
  $159 = ((($158)) + 16|0);
  $160 = +HEAPF32[$1>>2];
  $161 = ((($1)) + 8|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $160 + $162;
  $164 = ((($1)) + 4|0);
  $165 = +HEAPF32[$164>>2];
  $166 = ((($1)) + 12|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $165 + $167;
  _nk_vec2($22,$163,$168);
  ;HEAP32[$159>>2]=HEAP32[$22>>2]|0;HEAP32[$159+4>>2]=HEAP32[$22+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _nk_utf_decode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$10>>2] = 0;
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((1444|0),(1320|0),5167,(1446|0));
  // unreachable;
 }
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1460|0),(1320|0),5168,(1446|0));
  // unreachable;
 }
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 $18 = $5;
 $19 = ($18|0)!=(0|0);
 $or$cond = $17 & $19;
 if (!($or$cond)) {
  $3 = 0;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 $20 = $6;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $3 = 0;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 $22 = $5;
 HEAP32[$22>>2] = 65533;
 $23 = $4;
 $24 = HEAP8[$23>>0]|0;
 $25 = (_nk_utf_decode_byte($24,$9)|0);
 $11 = $25;
 $26 = HEAP32[$9>>2]|0;
 $27 = (1)<=($26|0);
 $28 = HEAP32[$9>>2]|0;
 $29 = ($28|0)<=(4);
 $or$cond3 = $27 & $29;
 if (!($or$cond3)) {
  $3 = 1;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 $7 = 1;
 $8 = 1;
 while(1) {
  $30 = $7;
  $31 = $6;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $8;
  $34 = HEAP32[$9>>2]|0;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $11;
  $37 = $36 << 6;
  $38 = $7;
  $39 = $4;
  $40 = (($39) + ($38)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = (_nk_utf_decode_byte($41,$10)|0);
  $43 = $37 | $42;
  $11 = $43;
  $44 = HEAP32[$10>>2]|0;
  $45 = ($44|0)!=(0);
  if ($45) {
   label = 15;
   break;
  }
  $47 = $7;
  $48 = (($47) + 1)|0;
  $7 = $48;
  $49 = $8;
  $50 = (($49) + 1)|0;
  $8 = $50;
 }
 if ((label|0) == 15) {
  $46 = $8;
  $3 = $46;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 $51 = $8;
 $52 = HEAP32[$9>>2]|0;
 $53 = ($51|0)<($52|0);
 if ($53) {
  $3 = 0;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 } else {
  $54 = $11;
  $55 = $5;
  HEAP32[$55>>2] = $54;
  $56 = $5;
  $57 = HEAP32[$9>>2]|0;
  (_nk_utf_validate($56,$57)|0);
  $58 = HEAP32[$9>>2]|0;
  $3 = $58;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _nk_utf_decode_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((21800|0),(1320|0),5152,(21802|0));
  // unreachable;
 }
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $2 = 0;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 $9 = $4;
 HEAP32[$9>>2] = 0;
 while(1) {
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)<(5);
  if (!($12)) {
   label = 10;
   break;
  }
  $13 = $3;
  $14 = $13&255;
  $15 = $4;
  $16 = HEAP32[$15>>2]|0;
  $17 = (21821 + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $14 & $19;
  $21 = $4;
  $22 = HEAP32[$21>>2]|0;
  $23 = (21826 + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($20|0)==($25|0);
  if ($26) {
   label = 8;
   break;
  }
  $38 = $4;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$38>>2] = $40;
 }
 if ((label|0) == 8) {
  $27 = $3;
  $28 = $27 << 24 >> 24;
  $29 = $4;
  $30 = HEAP32[$29>>2]|0;
  $31 = (21821 + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $33 ^ -1;
  $35 = $28 & $34;
  $36 = $35&255;
  $37 = $36&255;
  $2 = $37;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 10) {
  $2 = 0;
  $41 = $2;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _nk_utf_validate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((1460|0),(1320|0),5140,(21831|0));
  // unreachable;
 }
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $2 = 0;
  $36 = $2;
  STACKTOP = sp;return ($36|0);
 }
 $9 = $4;
 $10 = (308 + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)<=($13>>>0);
 if ($14) {
  $15 = $3;
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = (328 + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)<=($19>>>0);
  if ($20) {
   $21 = $3;
   $22 = HEAP32[$21>>2]|0;
   $23 = (55296)<=($22>>>0);
   if ($23) {
    $24 = $3;
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25>>>0)<=(57343);
    if ($26) {
     label = 9;
    }
   }
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $27 = $3;
  HEAP32[$27>>2] = 65533;
 }
 $4 = 1;
 while(1) {
  $28 = $3;
  $29 = HEAP32[$28>>2]|0;
  $30 = $4;
  $31 = (328 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29>>>0)>($32>>>0);
  $34 = $4;
  if (!($33)) {
   break;
  }
  $35 = (($34) + 1)|0;
  $4 = $35;
 }
 $2 = $34;
 $36 = $2;
 STACKTOP = sp;return ($36|0);
}
function _nk_utf_encode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 HEAP32[$4>>2] = $0;
 $5 = $1;
 $6 = $2;
 $9 = (_nk_utf_validate($4,0)|0);
 $7 = $9;
 $10 = $6;
 $11 = $7;
 $12 = ($10|0)>=($11|0);
 $13 = $7;
 $14 = ($13|0)!=(0);
 $or$cond = $12 & $14;
 $or$cond$not = $or$cond ^ 1;
 $15 = $7;
 $16 = ($15|0)>(4);
 $or$cond3 = $or$cond$not | $16;
 if ($or$cond3) {
  $3 = 0;
  $34 = $3;
  STACKTOP = sp;return ($34|0);
 }
 $17 = $7;
 $18 = (($17) - 1)|0;
 $8 = $18;
 while(1) {
  $19 = $8;
  $20 = ($19|0)!=(0);
  $21 = HEAP32[$4>>2]|0;
  if (!($20)) {
   break;
  }
  $22 = (_nk_utf_encode_byte($21,0)|0);
  $23 = $8;
  $24 = $5;
  $25 = (($24) + ($23)|0);
  HEAP8[$25>>0] = $22;
  $26 = HEAP32[$4>>2]|0;
  $27 = $26 >>> 6;
  HEAP32[$4>>2] = $27;
  $28 = $8;
  $29 = (($28) + -1)|0;
  $8 = $29;
 }
 $30 = $7;
 $31 = (_nk_utf_encode_byte($21,$30)|0);
 $32 = $5;
 HEAP8[$32>>0] = $31;
 $33 = $7;
 $3 = $33;
 $34 = $3;
 STACKTOP = sp;return ($34|0);
}
function _nk_utf_encode_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (21826 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $2;
 $9 = $8&255;
 $10 = $9&255;
 $11 = $3;
 $12 = (21821 + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 ^ -1;
 $16 = $10 & $15;
 $17 = $7 | $16;
 $18 = $17&255;
 STACKTOP = sp;return ($18|0);
}
function _nk_utf_len($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $6 = 0;
 $9 = 0;
 $11 = $3;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((1316|0),(1320|0),5222,(1462|0));
  // unreachable;
 }
 $13 = $3;
 $14 = ($13|0)!=(0|0);
 $15 = $4;
 $16 = ($15|0)!=(0);
 $or$cond = $14 & $16;
 if (!($or$cond)) {
  $2 = 0;
  $39 = $2;
  STACKTOP = sp;return ($39|0);
 }
 $17 = $3;
 $5 = $17;
 $18 = $4;
 $7 = $18;
 $19 = $5;
 $20 = $7;
 $21 = (_nk_utf_decode($19,$10,$20)|0);
 $8 = $21;
 while(1) {
  $22 = $8;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $9;
   $25 = $4;
   $26 = ($24|0)<($25|0);
   $40 = $26;
  } else {
   $40 = 0;
  }
  $27 = $6;
  if (!($40)) {
   break;
  }
  $28 = (($27) + 1)|0;
  $6 = $28;
  $29 = $9;
  $30 = $8;
  $31 = (($29) + ($30))|0;
  $9 = $31;
  $32 = $5;
  $33 = $9;
  $34 = (($32) + ($33)|0);
  $35 = $7;
  $36 = $9;
  $37 = (($35) - ($36))|0;
  $38 = (_nk_utf_decode($34,$10,$37)|0);
  $8 = $38;
 }
 $2 = $27;
 $39 = $2;
 STACKTOP = sp;return ($39|0);
}
function _nk_buffer_init_default($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 8;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 9;
 $5 = $1;
 _nk_buffer_init($5,$2,4096);
 STACKTOP = sp;return;
}
function _nk_malloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = (_malloc($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _nk_mfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 _free($3);
 STACKTOP = sp;return;
}
function _nk_buffer_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((1492|0),(1320|0),5300,(1494|0));
  // unreachable;
 }
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1509|0),(1320|0),5301,(1494|0));
  // unreachable;
 }
 $10 = $5;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  ___assert_fail((1511|0),(1320|0),5302,(1494|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 $16 = $5;
 $17 = ($16|0)!=(0);
 $or$cond3 = $or$cond & $17;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $18 = $3;
 _nk_zero($18,60);
 $19 = $3;
 $20 = ((($19)) + 28|0);
 HEAP32[$20>>2] = 1;
 $21 = $4;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_iiii[$23 & 15]($$byval_copy,0,$25)|0);
 $27 = $3;
 $28 = ((($27)) + 32|0);
 HEAP32[$28>>2] = $26;
 $29 = $5;
 $30 = $3;
 $31 = ((($30)) + 32|0);
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $29;
 $33 = $5;
 $34 = $3;
 $35 = ((($34)) + 56|0);
 HEAP32[$35>>2] = $33;
 $36 = $3;
 $37 = ((($36)) + 40|0);
 HEAPF32[$37>>2] = 2.0;
 $38 = $3;
 $39 = ((($38)) + 16|0);
 $40 = $4;
 ;HEAP32[$39>>2]=HEAP32[$40>>2]|0;HEAP32[$39+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$40+8>>2]|0;
 STACKTOP = sp;return;
}
function _nk_buffer_init_fixed($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((1492|0),(1320|0),5317,(1524|0));
  // unreachable;
 }
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1545|0),(1320|0),5318,(1524|0));
  // unreachable;
 }
 $10 = $5;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  ___assert_fail((1547|0),(1320|0),5319,(1524|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 $16 = $5;
 $17 = ($16|0)!=(0);
 $or$cond3 = $or$cond & $17;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $18 = $3;
 _nk_zero($18,60);
 $19 = $3;
 $20 = ((($19)) + 28|0);
 HEAP32[$20>>2] = 0;
 $21 = $4;
 $22 = $3;
 $23 = ((($22)) + 32|0);
 HEAP32[$23>>2] = $21;
 $24 = $5;
 $25 = $3;
 $26 = ((($25)) + 32|0);
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $24;
 $28 = $5;
 $29 = $3;
 $30 = ((($29)) + 56|0);
 HEAP32[$30>>2] = $28;
 STACKTOP = sp;return;
}
function _nk_buffer_alloc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 12|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1492|0),(1320|0),5407,(21847|0));
  // unreachable;
 }
 $16 = $7;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  ___assert_fail((1547|0),(1320|0),5408,(21847|0));
  // unreachable;
 }
 $18 = $5;
 $19 = ($18|0)!=(0|0);
 $20 = $7;
 $21 = ($20|0)!=(0);
 $or$cond = $19 & $21;
 if (!($or$cond)) {
  $4 = 0;
  $178 = $4;
  STACKTOP = sp;return ($178|0);
 }
 $22 = $7;
 $23 = $5;
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($22))|0;
 HEAP32[$24>>2] = $26;
 $27 = $6;
 $28 = ($27|0)==(0);
 $29 = $5;
 $30 = ((($29)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $5;
 if ($28) {
  $33 = ((($32)) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($31) + ($34)|0);
  $11 = $35;
 } else {
  $36 = ((($32)) + 56|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $7;
  $39 = (($37) - ($38))|0;
  $40 = (($31) + ($39)|0);
  $11 = $40;
 }
 $41 = $11;
 $42 = $8;
 $43 = $6;
 $44 = (_nk_buffer_align($41,$42,$10,$43)|0);
 $12 = $44;
 $45 = $6;
 $46 = ($45|0)==(0);
 $47 = $5;
 if ($46) {
  $48 = ((($47)) + 44|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $7;
  $51 = (($49) + ($50))|0;
  $52 = HEAP32[$10>>2]|0;
  $53 = (($51) + ($52))|0;
  $54 = $5;
  $55 = ((($54)) + 56|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53>>>0)>($56>>>0);
  $58 = $57&1;
  $9 = $58;
 } else {
  $59 = ((($47)) + 56|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $7;
  $62 = HEAP32[$10>>2]|0;
  $63 = (($61) + ($62))|0;
  $64 = (($60) - ($63))|0;
  $65 = $5;
  $66 = ((($65)) + 44|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64>>>0)<=($67>>>0);
  $69 = $68&1;
  $9 = $69;
 }
 $70 = $9;
 $71 = ($70|0)!=(0);
 do {
  if ($71) {
   $72 = $5;
   $73 = ((($72)) + 28|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(1);
   if (!($75)) {
    ___assert_fail((21863|0),(1320|0),5425,(21847|0));
    // unreachable;
   }
   $76 = $5;
   $77 = ((($76)) + 16|0);
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)!=(0|0);
   if (!($80)) {
    ___assert_fail((21892|0),(1320|0),5426,(21847|0));
    // unreachable;
   }
   $81 = $5;
   $82 = ((($81)) + 16|0);
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)!=(0|0);
   if (!($85)) {
    ___assert_fail((21892|0),(1320|0),5426,(21847|0));
    // unreachable;
   }
   $86 = $5;
   $87 = ((($86)) + 28|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)!=(1);
   if (!($89)) {
    $90 = $5;
    $91 = ((($90)) + 16|0);
    $92 = ((($91)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)!=(0|0);
    if ($94) {
     $95 = $5;
     $96 = ((($95)) + 16|0);
     $97 = ((($96)) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)!=(0|0);
     if ($99) {
      $100 = $5;
      $101 = ((($100)) + 32|0);
      $102 = ((($101)) + 4|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (+($103>>>0));
      $105 = $5;
      $106 = ((($105)) + 40|0);
      $107 = +HEAPF32[$106>>2];
      $108 = $104 * $107;
      $109 = (~~(($108))>>>0);
      $13 = $109;
      $110 = $13;
      $111 = $5;
      $112 = ((($111)) + 44|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $7;
      $115 = (($113) + ($114))|0;
      $116 = (_nk_round_up_pow2($115)|0);
      $117 = ($110>>>0)<($116>>>0);
      if ($117) {
       $118 = $5;
       $119 = ((($118)) + 44|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $7;
       $122 = (($120) + ($121))|0;
       $123 = (_nk_round_up_pow2($122)|0);
       $125 = $123;
      } else {
       $124 = $13;
       $125 = $124;
      }
      $13 = $125;
      $126 = $5;
      $127 = $13;
      $128 = $5;
      $129 = ((($128)) + 32|0);
      $130 = ((($129)) + 4|0);
      $131 = (_nk_buffer_realloc($126,$127,$130)|0);
      $132 = $5;
      $133 = ((($132)) + 32|0);
      HEAP32[$133>>2] = $131;
      $134 = $5;
      $135 = ((($134)) + 32|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)!=(0|0);
      if (!($137)) {
       $4 = 0;
       $178 = $4;
       STACKTOP = sp;return ($178|0);
      }
      $138 = $6;
      $139 = ($138|0)==(0);
      $140 = $5;
      $141 = ((($140)) + 32|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = $5;
      if ($139) {
       $144 = ((($143)) + 44|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (($142) + ($145)|0);
       $11 = $146;
      } else {
       $147 = ((($143)) + 56|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = $7;
       $150 = (($148) - ($149))|0;
       $151 = (($142) + ($150)|0);
       $11 = $151;
      }
      $152 = $11;
      $153 = $8;
      $154 = $6;
      $155 = (_nk_buffer_align($152,$153,$10,$154)|0);
      $12 = $155;
      break;
     }
    }
   }
   $4 = 0;
   $178 = $4;
   STACKTOP = sp;return ($178|0);
  }
 } while(0);
 $156 = $6;
 $157 = ($156|0)==(0);
 $158 = $7;
 $159 = HEAP32[$10>>2]|0;
 $160 = (($158) + ($159))|0;
 $161 = $5;
 if ($157) {
  $162 = ((($161)) + 44|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + ($160))|0;
  HEAP32[$162>>2] = $164;
 } else {
  $165 = ((($161)) + 56|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) - ($160))|0;
  HEAP32[$165>>2] = $167;
 }
 $168 = HEAP32[$10>>2]|0;
 $169 = $5;
 $170 = ((($169)) + 48|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = (($171) + ($168))|0;
 HEAP32[$170>>2] = $172;
 $173 = $5;
 $174 = ((($173)) + 52|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = (($175) + 1)|0;
 HEAP32[$174>>2] = $176;
 $177 = $12;
 $4 = $177;
 $178 = $4;
 STACKTOP = sp;return ($178|0);
}
function _nk_memcopy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $7 = $9;
 $10 = $4;
 $8 = $10;
 $11 = $5;
 $12 = ($11|0)==(0);
 if ($12) {
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $13 = $7;
 $14 = $8;
 $15 = ($13|0)==($14|0);
 if ($15) {
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $16 = $7;
 $17 = $8;
 $18 = ($16>>>0)<($17>>>0);
 if ($18) {
  $19 = $8;
  $20 = $19;
  $6 = $20;
  $21 = $6;
  $22 = $7;
  $23 = $22;
  $24 = $21 | $23;
  $25 = $24 & 3;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $6;
   $28 = $7;
   $29 = $28;
   $30 = $27 ^ $29;
   $31 = $30 & 3;
   $32 = ($31|0)!=(0);
   $33 = $5;
   $34 = ($33>>>0)<(4);
   $or$cond = $32 | $34;
   if ($or$cond) {
    $35 = $5;
    $6 = $35;
   } else {
    $36 = $6;
    $37 = $36 & 3;
    $38 = (4 - ($37))|0;
    $6 = $38;
   }
   $39 = $6;
   $40 = $5;
   $41 = (($40) - ($39))|0;
   $5 = $41;
   while(1) {
    $42 = $8;
    $43 = ((($42)) + 1|0);
    $8 = $43;
    $44 = HEAP8[$42>>0]|0;
    $45 = $7;
    $46 = ((($45)) + 1|0);
    $7 = $46;
    HEAP8[$45>>0] = $44;
    $47 = $6;
    $48 = (($47) + -1)|0;
    $6 = $48;
    $49 = ($48|0)!=(0);
    if (!($49)) {
     break;
    }
   }
  }
  $50 = $5;
  $51 = (($50>>>0) / 4)&-1;
  $6 = $51;
  $52 = $6;
  $53 = ($52|0)!=(0);
  if ($53) {
   while(1) {
    $54 = $8;
    $55 = HEAP32[$54>>2]|0;
    $56 = $7;
    HEAP32[$56>>2] = $55;
    $57 = $8;
    $58 = ((($57)) + 4|0);
    $8 = $58;
    $59 = $7;
    $60 = ((($59)) + 4|0);
    $7 = $60;
    $61 = $6;
    $62 = (($61) + -1)|0;
    $6 = $62;
    $63 = ($62|0)!=(0);
    if (!($63)) {
     break;
    }
   }
  }
  $64 = $5;
  $65 = $64 & 3;
  $6 = $65;
  $66 = $6;
  $67 = ($66|0)!=(0);
  if (!($67)) {
   $138 = $3;
   STACKTOP = sp;return ($138|0);
  }
  while(1) {
   $68 = $8;
   $69 = ((($68)) + 1|0);
   $8 = $69;
   $70 = HEAP8[$68>>0]|0;
   $71 = $7;
   $72 = ((($71)) + 1|0);
   $7 = $72;
   HEAP8[$71>>0] = $70;
   $73 = $6;
   $74 = (($73) + -1)|0;
   $6 = $74;
   $75 = ($74|0)!=(0);
   if (!($75)) {
    break;
   }
  }
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 } else {
  $76 = $5;
  $77 = $8;
  $78 = (($77) + ($76)|0);
  $8 = $78;
  $79 = $5;
  $80 = $7;
  $81 = (($80) + ($79)|0);
  $7 = $81;
  $82 = $8;
  $83 = $82;
  $6 = $83;
  $84 = $6;
  $85 = $7;
  $86 = $85;
  $87 = $84 | $86;
  $88 = $87 & 3;
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = $6;
   $91 = $7;
   $92 = $91;
   $93 = $90 ^ $92;
   $94 = $93 & 3;
   $95 = ($94|0)!=(0);
   $96 = $5;
   $97 = ($96>>>0)<=(4);
   $or$cond3 = $95 | $97;
   if ($or$cond3) {
    $98 = $5;
    $6 = $98;
   } else {
    $99 = $6;
    $100 = $99 & 3;
    $6 = $100;
   }
   $101 = $6;
   $102 = $5;
   $103 = (($102) - ($101))|0;
   $5 = $103;
   while(1) {
    $104 = $8;
    $105 = ((($104)) + -1|0);
    $8 = $105;
    $106 = HEAP8[$105>>0]|0;
    $107 = $7;
    $108 = ((($107)) + -1|0);
    $7 = $108;
    HEAP8[$108>>0] = $106;
    $109 = $6;
    $110 = (($109) + -1)|0;
    $6 = $110;
    $111 = ($110|0)!=(0);
    if (!($111)) {
     break;
    }
   }
  }
  $112 = $5;
  $113 = (($112>>>0) / 4)&-1;
  $6 = $113;
  $114 = $6;
  $115 = ($114|0)!=(0);
  if ($115) {
   while(1) {
    $116 = $8;
    $117 = ((($116)) + -4|0);
    $8 = $117;
    $118 = $7;
    $119 = ((($118)) + -4|0);
    $7 = $119;
    $120 = $8;
    $121 = HEAP32[$120>>2]|0;
    $122 = $7;
    HEAP32[$122>>2] = $121;
    $123 = $6;
    $124 = (($123) + -1)|0;
    $6 = $124;
    $125 = ($124|0)!=(0);
    if (!($125)) {
     break;
    }
   }
  }
  $126 = $5;
  $127 = $126 & 3;
  $6 = $127;
  $128 = $6;
  $129 = ($128|0)!=(0);
  if (!($129)) {
   $138 = $3;
   STACKTOP = sp;return ($138|0);
  }
  while(1) {
   $130 = $8;
   $131 = ((($130)) + -1|0);
   $8 = $131;
   $132 = HEAP8[$131>>0]|0;
   $133 = $7;
   $134 = ((($133)) + -1|0);
   $7 = $134;
   HEAP8[$134>>0] = $132;
   $135 = $6;
   $136 = (($135) + -1)|0;
   $6 = $136;
   $137 = ($136|0)!=(0);
   if (!($137)) {
    break;
   }
  }
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 return (0)|0;
}
function _nk_buffer_mark($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((1473|0),(1320|0),5463,(1552|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = $2;
 $10 = (($9) + ($8<<3)|0);
 HEAP32[$10>>2] = 1;
 $11 = $3;
 $12 = ($11|0)==(1);
 $13 = $2;
 if ($12) {
  $14 = ((($13)) + 56|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $3;
  $17 = $2;
  $18 = (($17) + ($16<<3)|0);
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $15;
  STACKTOP = sp;return;
 } else {
  $20 = ((($13)) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = $2;
  $24 = (($23) + ($22<<3)|0);
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $21;
  STACKTOP = sp;return;
 }
}
function _nk_buffer_reset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((1473|0),(1320|0),5474,(1567|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = ($8|0)==(1);
 $10 = $2;
 if ($9) {
  $11 = ((($10)) + 32|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $3;
  $15 = $2;
  $16 = (($15) + ($14<<3)|0);
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($13) - ($18))|0;
  $20 = $2;
  $21 = ((($20)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) - ($19))|0;
  HEAP32[$21>>2] = $23;
  $24 = $3;
  $25 = $2;
  $26 = (($25) + ($24<<3)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $3;
   $30 = $2;
   $31 = (($30) + ($29<<3)|0);
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $2;
   $35 = ((($34)) + 56|0);
   HEAP32[$35>>2] = $33;
  } else {
   $36 = $2;
   $37 = ((($36)) + 32|0);
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $2;
   $41 = ((($40)) + 56|0);
   HEAP32[$41>>2] = $39;
  }
  $42 = $3;
  $43 = $2;
  $44 = (($43) + ($42<<3)|0);
  HEAP32[$44>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $45 = ((($10)) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $3;
  $48 = $2;
  $49 = (($48) + ($47<<3)|0);
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($46) - ($51))|0;
  $53 = $2;
  $54 = ((($53)) + 48|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) - ($52))|0;
  HEAP32[$54>>2] = $56;
  $57 = $3;
  $58 = $2;
  $59 = (($58) + ($57<<3)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $3;
   $63 = $2;
   $64 = (($63) + ($62<<3)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $2;
   $68 = ((($67)) + 44|0);
   HEAP32[$68>>2] = $66;
  } else {
   $69 = $2;
   $70 = ((($69)) + 44|0);
   HEAP32[$70>>2] = 0;
  }
  $71 = $3;
  $72 = $2;
  $73 = (($72) + ($71<<3)|0);
  HEAP32[$73>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _nk_buffer_clear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1492|0),(1320|0),5496,(1583|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 32|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = ((($12)) + 56|0);
 HEAP32[$13>>2] = $11;
 $14 = $1;
 $15 = ((($14)) + 52|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 48|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_buffer_free($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1492|0),(1320|0),5507,(1599|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = ((($14)) + 16|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $1;
 $20 = ((($19)) + 16|0);
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((1614|0),(1320|0),5511,(1599|0));
  // unreachable;
 }
 $24 = $1;
 $25 = ((($24)) + 16|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $1;
 $29 = ((($28)) + 16|0);
 $30 = $1;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$29>>2]|0;
 FUNCTION_TABLE_vii[$27 & 31]($$byval_copy,$32);
 STACKTOP = sp;return;
}
function _nk_buffer_memory($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1473|0),(1320|0),5531,(1629|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $1 = 0;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _nk_buffer_total($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1473|0),(1320|0),5547,(1646|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 32|0);
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _nk_str_init_fixed($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _nk_buffer_init_fixed($6,$7,$8);
 $9 = $3;
 $10 = ((($9)) + 60|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_str_append_text_char($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1627|0),(1320|0),5590,(1662|0));
  // unreachable;
 }
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((1316|0),(1320|0),5591,(1662|0));
  // unreachable;
 }
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 $16 = $6;
 $17 = ($16|0)!=(0);
 $or$cond3 = $or$cond & $17;
 if (!($or$cond3)) {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 $18 = $4;
 $19 = $6;
 $20 = $19;
 $21 = (_nk_buffer_alloc($18,0,$20,0)|0);
 $7 = $21;
 $22 = $7;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $7;
  $25 = $5;
  $26 = $6;
  $27 = $26;
  (_nk_memcopy($24,$25,$27)|0);
  $28 = $5;
  $29 = $6;
  $30 = (_nk_utf_len($28,$29)|0);
  $31 = $4;
  $32 = ((($31)) + 60|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30))|0;
  HEAP32[$32>>2] = $34;
  $35 = $6;
  $3 = $35;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 } else {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _nk_str_insert_at_char($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1627|0),(1320|0),5681,(1686|0));
  // unreachable;
 }
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((1316|0),(1320|0),5682,(1686|0));
  // unreachable;
 }
 $18 = $8;
 $19 = ($18|0)>=(0);
 if (!($19)) {
  ___assert_fail((1708|0),(1320|0),5683,(1686|0));
  // unreachable;
 }
 $20 = $5;
 $21 = ($20|0)!=(0|0);
 $22 = $7;
 $23 = ($22|0)!=(0|0);
 $or$cond = $21 & $23;
 $24 = $8;
 $25 = ($24|0)!=(0);
 $or$cond3 = $or$cond & $25;
 if ($or$cond3) {
  $26 = $6;
  $27 = $5;
  $28 = ((($27)) + 44|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26>>>0)>($29>>>0);
  if (!($30)) {
   $31 = $5;
   $32 = ((($31)) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $8;
   $35 = (($33) + ($34))|0;
   $36 = $5;
   $37 = ((($36)) + 32|0);
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($35>>>0)>=($39>>>0);
   if ($40) {
    $41 = $5;
    $42 = ((($41)) + 28|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(0);
    if ($44) {
     $4 = 0;
     $118 = $4;
     STACKTOP = sp;return ($118|0);
    }
   }
   $45 = $5;
   $46 = ((($45)) + 44|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $6;
   $49 = (($47) - ($48))|0;
   $13 = $49;
   $50 = $13;
   $51 = ($50|0)!=(0);
   $52 = $5;
   if (!($51)) {
    $53 = $7;
    $54 = $8;
    (_nk_str_append_text_char($52,$53,$54)|0);
    $4 = 1;
    $118 = $4;
    STACKTOP = sp;return ($118|0);
   }
   $55 = $8;
   $56 = $55;
   $57 = (_nk_buffer_alloc($52,0,$56,0)|0);
   $10 = $57;
   $58 = $10;
   $59 = ($58|0)!=(0|0);
   if (!($59)) {
    $4 = 0;
    $118 = $4;
    STACKTOP = sp;return ($118|0);
   }
   $60 = $6;
   $61 = $8;
   $62 = (($60) + ($61))|0;
   $63 = $13;
   $64 = (($63) - 1)|0;
   $65 = (($62) + ($64))|0;
   $66 = ($65|0)>=(0);
   if (!($66)) {
    ___assert_fail((1717|0),(1320|0),5697,(1686|0));
    // unreachable;
   }
   $67 = $6;
   $68 = $13;
   $69 = (($68) - 1)|0;
   $70 = (($67) + ($69))|0;
   $71 = ($70|0)>=(0);
   if (!($71)) {
    ___assert_fail((1765|0),(1320|0),5698,(1686|0));
    // unreachable;
   }
   $72 = $5;
   $73 = ((($72)) + 32|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $6;
   $76 = $8;
   $77 = (($75) + ($76))|0;
   $78 = $13;
   $79 = (($78) - 1)|0;
   $80 = (($77) + ($79))|0;
   $81 = (($74) + ($80)|0);
   $12 = $81;
   $82 = $5;
   $83 = ((($82)) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $6;
   $86 = $13;
   $87 = (($86) - 1)|0;
   $88 = (($85) + ($87))|0;
   $89 = (($84) + ($88)|0);
   $11 = $89;
   $9 = 0;
   while(1) {
    $90 = $9;
    $91 = $13;
    $92 = ($90|0)<($91|0);
    if (!($92)) {
     break;
    }
    $93 = $11;
    $94 = ((($93)) + -1|0);
    $11 = $94;
    $95 = HEAP8[$93>>0]|0;
    $96 = $12;
    $97 = ((($96)) + -1|0);
    $12 = $97;
    HEAP8[$96>>0] = $95;
    $98 = $9;
    $99 = (($98) + 1)|0;
    $9 = $99;
   }
   $100 = $5;
   $101 = ((($100)) + 32|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $6;
   $104 = (($102) + ($103)|0);
   $10 = $104;
   $105 = $10;
   $106 = $7;
   $107 = $8;
   $108 = $107;
   (_nk_memcopy($105,$106,$108)|0);
   $109 = $5;
   $110 = ((($109)) + 32|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = ((($112)) + 44|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (_nk_utf_len($111,$114)|0);
   $116 = $5;
   $117 = ((($116)) + 60|0);
   HEAP32[$117>>2] = $115;
   $4 = 1;
   $118 = $4;
   STACKTOP = sp;return ($118|0);
  }
 }
 $4 = 0;
 $118 = $4;
 STACKTOP = sp;return ($118|0);
}
function _nk_str_insert_at_rune($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((1316|0),(1320|0),5716,(1802|0));
  // unreachable;
 }
 $15 = $7;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((1824|0),(1320|0),5717,(1802|0));
  // unreachable;
 }
 $17 = $8;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  ___assert_fail((1488|0),(1320|0),5718,(1802|0));
  // unreachable;
 }
 $19 = $5;
 $20 = ($19|0)!=(0|0);
 $21 = $7;
 $22 = ($21|0)!=(0|0);
 $or$cond = $20 & $22;
 $23 = $8;
 $24 = ($23|0)!=(0);
 $or$cond3 = $or$cond & $24;
 if (!($or$cond3)) {
  $4 = 0;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 $25 = $5;
 $26 = $6;
 $27 = (_nk_str_at_rune($25,$26,$10,$9)|0);
 $11 = $27;
 $28 = $5;
 $29 = ((($28)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 $32 = $5;
 if (!($31)) {
  $33 = $7;
  $34 = $8;
  $35 = (_nk_str_append_text_char($32,$33,$34)|0);
  $4 = $35;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 $36 = (_nk_str_get_const($32)|0);
 $12 = $36;
 $37 = $11;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $5;
  $40 = $11;
  $41 = $12;
  $42 = $40;
  $43 = $41;
  $44 = (($42) - ($43))|0;
  $45 = $7;
  $46 = $8;
  $47 = (_nk_str_insert_at_char($39,$44,$45,$46)|0);
  $4 = $47;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 } else {
  $4 = 0;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _nk_str_at_rune($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1316|0),(1320|0),5902,(2006|0));
  // unreachable;
 }
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((1480|0),(1320|0),5903,(2006|0));
  // unreachable;
 }
 $18 = $8;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((1488|0),(1320|0),5904,(2006|0));
  // unreachable;
 }
 $20 = $5;
 $21 = ($20|0)!=(0|0);
 $22 = $7;
 $23 = ($22|0)!=(0|0);
 $or$cond = $21 & $23;
 $24 = $8;
 $25 = ($24|0)!=(0|0);
 $or$cond3 = $or$cond & $25;
 if (!($or$cond3)) {
  $4 = 0;
  $66 = $4;
  STACKTOP = sp;return ($66|0);
 }
 $26 = $6;
 $27 = ($26|0)<(0);
 if ($27) {
  $28 = $7;
  HEAP32[$28>>2] = 0;
  $29 = $8;
  HEAP32[$29>>2] = 0;
  $4 = 0;
  $66 = $4;
  STACKTOP = sp;return ($66|0);
 }
 $30 = $5;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $12 = $32;
 $33 = $5;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $13 = $35;
 $36 = $12;
 $37 = $7;
 $38 = $13;
 $39 = (_nk_utf_decode($36,$37,$38)|0);
 $11 = $39;
 while(1) {
  $40 = $11;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   break;
  }
  $42 = $9;
  $43 = $6;
  $44 = ($42|0)==($43|0);
  if ($44) {
   label = 14;
   break;
  }
  $47 = $9;
  $48 = (($47) + 1)|0;
  $9 = $48;
  $49 = $10;
  $50 = $11;
  $51 = (($49) + ($50))|0;
  $10 = $51;
  $52 = $12;
  $53 = $10;
  $54 = (($52) + ($53)|0);
  $55 = $7;
  $56 = $13;
  $57 = $10;
  $58 = (($56) - ($57))|0;
  $59 = (_nk_utf_decode($54,$55,$58)|0);
  $11 = $59;
 }
 if ((label|0) == 14) {
  $45 = $11;
  $46 = $8;
  HEAP32[$46>>2] = $45;
 }
 $60 = $9;
 $61 = $6;
 $62 = ($60|0)!=($61|0);
 if ($62) {
  $4 = 0;
  $66 = $4;
  STACKTOP = sp;return ($66|0);
 } else {
  $63 = $12;
  $64 = $10;
  $65 = (($63) + ($64)|0);
  $4 = $65;
  $66 = $4;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _nk_str_get_const($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1627|0),(1320|0),5995,(2037|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $2;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $2;
    $16 = ((($15)) + 32|0);
    $17 = HEAP32[$16>>2]|0;
    $1 = $17;
    $18 = $1;
    STACKTOP = sp;return ($18|0);
   }
  }
 }
 $1 = 0;
 $18 = $1;
 STACKTOP = sp;return ($18|0);
}
function _nk_str_insert_text_char($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_nk_str_insert_text_utf8($8,$9,$10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _nk_str_insert_text_utf8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((1316|0),(1320|0),5747,(1829|0));
  // unreachable;
 }
 $14 = $7;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1853|0),(1320|0),5748,(1829|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ($16|0)!=(0|0);
 $18 = $7;
 $19 = ($18|0)!=(0|0);
 $or$cond = $17 & $19;
 $20 = $8;
 $21 = ($20|0)!=(0);
 $or$cond3 = $or$cond & $21;
 if (!($or$cond3)) {
  $4 = 0;
  $38 = $4;
  STACKTOP = sp;return ($38|0);
 }
 $9 = 0;
 while(1) {
  $22 = $9;
  $23 = $8;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $7;
  $26 = $10;
  $27 = (($25) + ($26)|0);
  $28 = (_nk_utf_decode($27,$11,4)|0);
  $29 = $10;
  $30 = (($29) + ($28))|0;
  $10 = $30;
  $31 = $9;
  $32 = (($31) + 1)|0;
  $9 = $32;
 }
 $33 = $5;
 $34 = $6;
 $35 = $7;
 $36 = $10;
 (_nk_str_insert_at_rune($33,$34,$35,$36)|0);
 $37 = $8;
 $4 = $37;
 $38 = $4;
 STACKTOP = sp;return ($38|0);
}
function _nk_str_insert_text_runes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp + 28|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((1316|0),(1320|0),5783,(1858|0));
  // unreachable;
 }
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 $or$cond = $15 & $17;
 $18 = $8;
 $19 = ($18|0)!=(0);
 $or$cond3 = $or$cond & $19;
 if (!($or$cond3)) {
  $4 = 0;
  $38 = $4;
  STACKTOP = sp;return ($38|0);
 }
 $9 = 0;
 while(1) {
  $20 = $9;
  $21 = $8;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $9;
  $24 = $7;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_nk_utf_encode($26,$11,4)|0);
  $10 = $27;
  $28 = $10;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   break;
  }
  $30 = $5;
  $31 = $6;
  $32 = $9;
  $33 = (($31) + ($32))|0;
  $34 = $10;
  (_nk_str_insert_at_rune($30,$33,$11,$34)|0);
  $35 = $9;
  $36 = (($35) + 1)|0;
  $9 = $36;
 }
 $37 = $8;
 $4 = $37;
 $38 = $4;
 STACKTOP = sp;return ($38|0);
}
function _nk_str_remove_chars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((1627|0),(1320|0),5812,(1883|0));
  // unreachable;
 }
 $6 = $3;
 $7 = ($6|0)>=(0);
 if (!($7)) {
  ___assert_fail((1708|0),(1320|0),5813,(1883|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)==(0|0);
 $10 = $3;
 $11 = ($10|0)<(0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $12 = $3;
 $13 = $2;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12>>>0)>($15>>>0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $2;
 $18 = ((($17)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 $21 = (($19) - ($20))|0;
 $22 = ($21|0)>=(0);
 if (!($22)) {
  ___assert_fail((1903|0),(1320|0),5815,(1883|0));
  // unreachable;
 }
 $23 = $3;
 $24 = $2;
 $25 = ((($24)) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($23))|0;
 HEAP32[$25>>2] = $27;
 $28 = $2;
 $29 = ((($28)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $2;
 $32 = ((($31)) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_nk_utf_len($30,$33)|0);
 $35 = $2;
 $36 = ((($35)) + 60|0);
 HEAP32[$36>>2] = $34;
 STACKTOP = sp;return;
}
function _nk_str_delete_chars($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1627|0),(1320|0),5845,(1946|0));
  // unreachable;
 }
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 $12 = $5;
 $13 = ($12|0)!=(0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $14 = $4;
 $15 = $3;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>($17>>>0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = $4;
 $20 = $5;
 $21 = (($19) + ($20))|0;
 $22 = $3;
 $23 = ((($22)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21>>>0)>($24>>>0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = $4;
 $27 = $5;
 $28 = (($26) + ($27))|0;
 $29 = $3;
 $30 = ((($29)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28>>>0)<($31>>>0);
 $33 = $3;
 do {
  if ($32) {
   $34 = ((($33)) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $4;
   $37 = (($35) + ($36)|0);
   $6 = $37;
   $38 = $3;
   $39 = ((($38)) + 32|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $4;
   $42 = $5;
   $43 = (($41) + ($42))|0;
   $44 = (($40) + ($43)|0);
   $7 = $44;
   $45 = $6;
   $46 = $7;
   $47 = $3;
   $48 = ((($47)) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $4;
   $51 = $5;
   $52 = (($50) + ($51))|0;
   $53 = (($49) - ($52))|0;
   (_nk_memcopy($45,$46,$53)|0);
   $54 = $3;
   $55 = ((($54)) + 44|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $5;
   $58 = (($56) - ($57))|0;
   $59 = ($58|0)>=(0);
   if ($59) {
    $60 = $5;
    $61 = $3;
    $62 = ((($61)) + 44|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) - ($60))|0;
    HEAP32[$62>>2] = $64;
    break;
   } else {
    ___assert_fail((1903|0),(1320|0),5854,(1946|0));
    // unreachable;
   }
  } else {
   $65 = $5;
   _nk_str_remove_chars($33,$65);
  }
 } while(0);
 $66 = $3;
 $67 = ((($66)) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $3;
 $70 = ((($69)) + 44|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (_nk_utf_len($68,$71)|0);
 $73 = $3;
 $74 = ((($73)) + 60|0);
 HEAP32[$74>>2] = $72;
 STACKTOP = sp;return;
}
function _nk_str_delete_runes($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 12|0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((1627|0),(1320|0),5869,(1966|0));
  // unreachable;
 }
 $13 = $3;
 $14 = ((($13)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = $5;
 $18 = (($16) + ($17))|0;
 $19 = ($15|0)>=($18|0);
 if (!($19)) {
  ___assert_fail((1986|0),(1320|0),5870,(1966|0));
  // unreachable;
 }
 $20 = $3;
 $21 = ((($20)) + 60|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $4;
 $24 = $5;
 $25 = (($23) + ($24))|0;
 $26 = ($22|0)<($25|0);
 if ($26) {
  $27 = $3;
  $28 = ((($27)) + 60|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $4;
  $31 = (($29) - ($30))|0;
  $32 = $3;
  $33 = ((($32)) + 60|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31|0)<($34|0);
  $36 = $3;
  $37 = ((($36)) + 60|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $4;
  $40 = (($38) - ($39))|0;
  $41 = $35 ? $40 : $38;
  $42 = ($41|0)<(0);
  if ($42) {
   $58 = 0;
  } else {
   $43 = $3;
   $44 = ((($43)) + 60|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $4;
   $47 = (($45) - ($46))|0;
   $48 = $3;
   $49 = ((($48)) + 60|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($47|0)<($50|0);
   $52 = $3;
   $53 = ((($52)) + 60|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $4;
   $56 = (($54) - ($55))|0;
   $57 = $51 ? $56 : $54;
   $58 = $57;
  }
  $5 = $58;
 }
 $59 = $5;
 $60 = ($59|0)!=(0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $3;
 $62 = ((($61)) + 32|0);
 $63 = HEAP32[$62>>2]|0;
 $6 = $63;
 $64 = $3;
 $65 = $4;
 $66 = (_nk_str_at_rune($64,$65,$7,$10)|0);
 $8 = $66;
 $67 = $8;
 $68 = ($67|0)!=(0|0);
 if (!($68)) {
  STACKTOP = sp;return;
 }
 $69 = $8;
 $70 = $3;
 $71 = ((($70)) + 32|0);
 HEAP32[$71>>2] = $69;
 $72 = $3;
 $73 = $5;
 $74 = (_nk_str_at_rune($72,$73,$7,$10)|0);
 $9 = $74;
 $75 = $6;
 $76 = $3;
 $77 = ((($76)) + 32|0);
 HEAP32[$77>>2] = $75;
 $78 = $9;
 $79 = ($78|0)!=(0|0);
 if (!($79)) {
  STACKTOP = sp;return;
 }
 $80 = $3;
 $81 = $8;
 $82 = $6;
 $83 = $81;
 $84 = $82;
 $85 = (($83) - ($84))|0;
 $86 = $9;
 $87 = $8;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 _nk_str_delete_chars($80,$85,$90);
 STACKTOP = sp;return;
}
function _nk_str_at_const($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1316|0),(1320|0),5947,(2021|0));
  // unreachable;
 }
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((1480|0),(1320|0),5948,(2021|0));
  // unreachable;
 }
 $18 = $8;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((1488|0),(1320|0),5949,(2021|0));
  // unreachable;
 }
 $20 = $5;
 $21 = ($20|0)!=(0|0);
 $22 = $7;
 $23 = ($22|0)!=(0|0);
 $or$cond = $21 & $23;
 $24 = $8;
 $25 = ($24|0)!=(0|0);
 $or$cond3 = $or$cond & $25;
 if (!($or$cond3)) {
  $4 = 0;
  $66 = $4;
  STACKTOP = sp;return ($66|0);
 }
 $26 = $6;
 $27 = ($26|0)<(0);
 if ($27) {
  $28 = $7;
  HEAP32[$28>>2] = 0;
  $29 = $8;
  HEAP32[$29>>2] = 0;
  $4 = 0;
  $66 = $4;
  STACKTOP = sp;return ($66|0);
 }
 $30 = $5;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $12 = $32;
 $33 = $5;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $13 = $35;
 $36 = $12;
 $37 = $7;
 $38 = $13;
 $39 = (_nk_utf_decode($36,$37,$38)|0);
 $11 = $39;
 while(1) {
  $40 = $11;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   break;
  }
  $42 = $9;
  $43 = $6;
  $44 = ($42|0)==($43|0);
  if ($44) {
   label = 14;
   break;
  }
  $47 = $9;
  $48 = (($47) + 1)|0;
  $9 = $48;
  $49 = $10;
  $50 = $11;
  $51 = (($49) + ($50))|0;
  $10 = $51;
  $52 = $12;
  $53 = $10;
  $54 = (($52) + ($53)|0);
  $55 = $7;
  $56 = $13;
  $57 = $10;
  $58 = (($56) - ($57))|0;
  $59 = (_nk_utf_decode($54,$55,$58)|0);
  $11 = $59;
 }
 if ((label|0) == 14) {
  $45 = $11;
  $46 = $8;
  HEAP32[$46>>2] = $45;
 }
 $60 = $9;
 $61 = $6;
 $62 = ($60|0)!=($61|0);
 if ($62) {
  $4 = 0;
  $66 = $4;
  STACKTOP = sp;return ($66|0);
 } else {
  $63 = $12;
  $64 = $10;
  $65 = (($63) + ($64)|0);
  $4 = $65;
  $66 = $4;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _nk_str_rune_at($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = 0;
 $6 = $2;
 $7 = $3;
 (_nk_str_at_const($6,$7,$5,$4)|0);
 $8 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _nk_str_len($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1627|0),(1320|0),6003,(2054|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $2;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $2;
    $16 = ((($15)) + 60|0);
    $17 = HEAP32[$16>>2]|0;
    $1 = $17;
    $18 = $1;
    STACKTOP = sp;return ($18|0);
   }
  }
 }
 $1 = 0;
 $18 = $1;
 STACKTOP = sp;return ($18|0);
}
function _nk_str_len_char($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1627|0),(1320|0),6011,(2065|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $2;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $2;
    $16 = ((($15)) + 44|0);
    $17 = HEAP32[$16>>2]|0;
    $1 = $17;
    $18 = $1;
    STACKTOP = sp;return ($18|0);
   }
  }
 }
 $1 = 0;
 $18 = $1;
 STACKTOP = sp;return ($18|0);
}
function _nk_push_scissor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((1492|0),(1320|0),6105,(2081|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = +HEAPF32[$1>>2];
 $9 = $2;
 $10 = ((($9)) + 4|0);
 HEAPF32[$10>>2] = $8;
 $11 = ((($1)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 4|0);
 HEAPF32[$15>>2] = $12;
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $2;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 8|0);
 HEAPF32[$20>>2] = $17;
 $21 = ((($1)) + 12|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $2;
 $24 = ((($23)) + 4|0);
 $25 = ((($24)) + 12|0);
 HEAPF32[$25>>2] = $22;
 $26 = $2;
 $27 = (_nk_command_buffer_push($26,1,16)|0);
 $3 = $27;
 $28 = $3;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = +HEAPF32[$1>>2];
 $31 = (~~(($30)));
 $32 = $3;
 $33 = ((($32)) + 8|0);
 HEAP16[$33>>1] = $31;
 $34 = ((($1)) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = (~~(($35)));
 $37 = $3;
 $38 = ((($37)) + 10|0);
 HEAP16[$38>>1] = $36;
 $39 = ((($1)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = 0.0 < $40;
 if ($41) {
  $42 = ((($1)) + 8|0);
  $43 = +HEAPF32[$42>>2];
  $45 = $43;
 } else {
  $45 = 0.0;
 }
 $44 = (~~(($45))&65535);
 $46 = $3;
 $47 = ((($46)) + 12|0);
 HEAP16[$47>>1] = $44;
 $48 = ((($1)) + 12|0);
 $49 = +HEAPF32[$48>>2];
 $50 = 0.0 < $49;
 if ($50) {
  $51 = ((($1)) + 12|0);
  $52 = +HEAPF32[$51>>2];
  $54 = $52;
 } else {
  $54 = 0.0;
 }
 $53 = (~~(($54))&65535);
 $55 = $3;
 $56 = ((($55)) + 14|0);
 HEAP16[$56>>1] = $53;
 STACKTOP = sp;return;
}
function _nk_command_buffer_push($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((1492|0),(1320|0),6077,(21945|0));
  // unreachable;
 }
 $13 = $4;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((21968|0),(1320|0),6078,(21945|0));
  // unreachable;
 }
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $3 = 0;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $20 = $6;
 $21 = (_nk_buffer_alloc($19,0,$20,4)|0);
 $7 = $21;
 $22 = $7;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $7;
  $25 = $4;
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $24;
  $30 = $28;
  $31 = (($29) - ($30))|0;
  $32 = $4;
  $33 = ((($32)) + 36|0);
  HEAP32[$33>>2] = $31;
  $34 = $7;
  $35 = $6;
  $36 = (($34) + ($35)|0);
  $9 = $36;
  $37 = $9;
  $38 = ((($37)) + 3|0);
  $39 = $38;
  $40 = $39 & -4;
  $41 = $40;
  $10 = $41;
  $42 = $10;
  $43 = $9;
  $44 = $42;
  $45 = $43;
  $46 = (($44) - ($45))|0;
  $8 = $46;
  $47 = $5;
  $48 = $7;
  HEAP32[$48>>2] = $47;
  $49 = $4;
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 44|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $8;
  $54 = (($52) + ($53))|0;
  $55 = $7;
  $56 = ((($55)) + 4|0);
  HEAP32[$56>>2] = $54;
  $57 = $7;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $4;
  $61 = ((($60)) + 32|0);
  HEAP32[$61>>2] = $59;
  $62 = $7;
  $3 = $62;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 } else {
  $3 = 0;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _nk_stroke_line($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = $6|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $7;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1492|0),(1320|0),6127,(2097|0));
  // unreachable;
 }
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $7;
 $19 = (_nk_command_buffer_push($18,2,24)|0);
 $13 = $19;
 $20 = $13;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $12;
 $23 = (~~(($22))&65535);
 $24 = $13;
 $25 = ((($24)) + 8|0);
 HEAP16[$25>>1] = $23;
 $26 = $8;
 $27 = (~~(($26)));
 $28 = $13;
 $29 = ((($28)) + 10|0);
 HEAP16[$29>>1] = $27;
 $30 = $9;
 $31 = (~~(($30)));
 $32 = $13;
 $33 = ((($32)) + 10|0);
 $34 = ((($33)) + 2|0);
 HEAP16[$34>>1] = $31;
 $35 = $10;
 $36 = (~~(($35)));
 $37 = $13;
 $38 = ((($37)) + 14|0);
 HEAP16[$38>>1] = $36;
 $39 = $11;
 $40 = (~~(($39)));
 $41 = $13;
 $42 = ((($41)) + 14|0);
 $43 = ((($42)) + 2|0);
 HEAP16[$43>>1] = $40;
 $44 = $13;
 $45 = ((($44)) + 18|0);
 ;HEAP8[$45>>0]=HEAP8[$6>>0]|0;HEAP8[$45+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$45+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$45+3>>0]=HEAP8[$6+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_stroke_curve($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = $10|0;
 var $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $22 = $11;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((1492|0),(1320|0),6146,(2112|0));
  // unreachable;
 }
 $24 = $11;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = ((($10)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==(0);
 if ($29) {
  STACKTOP = sp;return;
 }
 $30 = $11;
 $31 = (_nk_command_buffer_push($30,3,32)|0);
 $21 = $31;
 $32 = $21;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $20;
 $35 = (~~(($34))&65535);
 $36 = $21;
 $37 = ((($36)) + 8|0);
 HEAP16[$37>>1] = $35;
 $38 = $12;
 $39 = (~~(($38)));
 $40 = $21;
 $41 = ((($40)) + 10|0);
 HEAP16[$41>>1] = $39;
 $42 = $13;
 $43 = (~~(($42)));
 $44 = $21;
 $45 = ((($44)) + 10|0);
 $46 = ((($45)) + 2|0);
 HEAP16[$46>>1] = $43;
 $47 = $14;
 $48 = (~~(($47)));
 $49 = $21;
 $50 = ((($49)) + 18|0);
 HEAP16[$50>>1] = $48;
 $51 = $15;
 $52 = (~~(($51)));
 $53 = $21;
 $54 = ((($53)) + 18|0);
 $55 = ((($54)) + 2|0);
 HEAP16[$55>>1] = $52;
 $56 = $16;
 $57 = (~~(($56)));
 $58 = $21;
 $59 = ((($58)) + 18|0);
 $60 = ((($59)) + 4|0);
 HEAP16[$60>>1] = $57;
 $61 = $17;
 $62 = (~~(($61)));
 $63 = $21;
 $64 = ((($63)) + 18|0);
 $65 = ((($64)) + 4|0);
 $66 = ((($65)) + 2|0);
 HEAP16[$66>>1] = $62;
 $67 = $18;
 $68 = (~~(($67)));
 $69 = $21;
 $70 = ((($69)) + 14|0);
 HEAP16[$70>>1] = $68;
 $71 = $19;
 $72 = (~~(($71)));
 $73 = $21;
 $74 = ((($73)) + 14|0);
 $75 = ((($74)) + 2|0);
 HEAP16[$75>>1] = $72;
 $76 = $21;
 $77 = ((($76)) + 26|0);
 ;HEAP8[$77>>0]=HEAP8[$10>>0]|0;HEAP8[$77+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$77+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$77+3>>0]=HEAP8[$10+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_stroke_rect($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((1492|0),(1320|0),6169,(2128|0));
  // unreachable;
 }
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = ((($1)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $19 == 0.0;
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = ((($1)) + 12|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $22 == 0.0;
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = $5;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $5;
  $29 = ((($28)) + 4|0);
  $9 = $29;
  $30 = $9;
  $31 = +HEAPF32[$30>>2];
  $32 = +HEAPF32[$1>>2];
  $33 = ((($1)) + 8|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $32 + $34;
  $36 = $31 > $35;
  if ($36) {
   STACKTOP = sp;return;
  }
  $37 = $9;
  $38 = +HEAPF32[$37>>2];
  $39 = $9;
  $40 = ((($39)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $38 + $41;
  $43 = +HEAPF32[$1>>2];
  $44 = $42 < $43;
  if ($44) {
   STACKTOP = sp;return;
  }
  $45 = $9;
  $46 = ((($45)) + 4|0);
  $47 = +HEAPF32[$46>>2];
  $48 = ((($1)) + 4|0);
  $49 = +HEAPF32[$48>>2];
  $50 = ((($1)) + 12|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $49 + $51;
  $53 = $47 > $52;
  if ($53) {
   STACKTOP = sp;return;
  }
  $54 = $9;
  $55 = ((($54)) + 4|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $9;
  $58 = ((($57)) + 12|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $56 + $59;
  $61 = ((($1)) + 4|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $60 < $62;
  if ($63) {
   STACKTOP = sp;return;
  }
 }
 $64 = $5;
 $65 = (_nk_command_buffer_push($64,4,24)|0);
 $8 = $65;
 $66 = $8;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = $6;
 $69 = (~~(($68))&65535);
 $70 = $8;
 $71 = ((($70)) + 8|0);
 HEAP16[$71>>1] = $69;
 $72 = $7;
 $73 = (~~(($72))&65535);
 $74 = $8;
 $75 = ((($74)) + 10|0);
 HEAP16[$75>>1] = $73;
 $76 = +HEAPF32[$1>>2];
 $77 = (~~(($76)));
 $78 = $8;
 $79 = ((($78)) + 12|0);
 HEAP16[$79>>1] = $77;
 $80 = ((($1)) + 4|0);
 $81 = +HEAPF32[$80>>2];
 $82 = (~~(($81)));
 $83 = $8;
 $84 = ((($83)) + 14|0);
 HEAP16[$84>>1] = $82;
 $85 = ((($1)) + 8|0);
 $86 = +HEAPF32[$85>>2];
 $87 = 0.0 < $86;
 if ($87) {
  $88 = ((($1)) + 8|0);
  $89 = +HEAPF32[$88>>2];
  $91 = $89;
 } else {
  $91 = 0.0;
 }
 $90 = (~~(($91))&65535);
 $92 = $8;
 $93 = ((($92)) + 16|0);
 HEAP16[$93>>1] = $90;
 $94 = ((($1)) + 12|0);
 $95 = +HEAPF32[$94>>2];
 $96 = 0.0 < $95;
 if ($96) {
  $97 = ((($1)) + 12|0);
  $98 = +HEAPF32[$97>>2];
  $100 = $98;
 } else {
  $100 = 0.0;
 }
 $99 = (~~(($100))&65535);
 $101 = $8;
 $102 = ((($101)) + 18|0);
 HEAP16[$102>>1] = $99;
 $103 = $8;
 $104 = ((($103)) + 20|0);
 ;HEAP8[$104>>0]=HEAP8[$4>>0]|0;HEAP8[$104+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$104+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$104+3>>0]=HEAP8[$4+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_fill_rect($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $2;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1492|0),(1320|0),6194,(2143|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ((($3)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = ((($1)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 == 0.0;
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = ((($1)) + 12|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 == 0.0;
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = $4;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $4;
  $27 = ((($26)) + 4|0);
  $7 = $27;
  $28 = $7;
  $29 = +HEAPF32[$28>>2];
  $30 = +HEAPF32[$1>>2];
  $31 = ((($1)) + 8|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $30 + $32;
  $34 = $29 > $33;
  if ($34) {
   STACKTOP = sp;return;
  }
  $35 = $7;
  $36 = +HEAPF32[$35>>2];
  $37 = $7;
  $38 = ((($37)) + 8|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $36 + $39;
  $41 = +HEAPF32[$1>>2];
  $42 = $40 < $41;
  if ($42) {
   STACKTOP = sp;return;
  }
  $43 = $7;
  $44 = ((($43)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = ((($1)) + 4|0);
  $47 = +HEAPF32[$46>>2];
  $48 = ((($1)) + 12|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $47 + $49;
  $51 = $45 > $50;
  if ($51) {
   STACKTOP = sp;return;
  }
  $52 = $7;
  $53 = ((($52)) + 4|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $7;
  $56 = ((($55)) + 12|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $54 + $57;
  $59 = ((($1)) + 4|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $58 < $60;
  if ($61) {
   STACKTOP = sp;return;
  }
 }
 $62 = $4;
 $63 = (_nk_command_buffer_push($62,5,24)|0);
 $6 = $63;
 $64 = $6;
 $65 = ($64|0)!=(0|0);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $5;
 $67 = (~~(($66))&65535);
 $68 = $6;
 $69 = ((($68)) + 8|0);
 HEAP16[$69>>1] = $67;
 $70 = +HEAPF32[$1>>2];
 $71 = (~~(($70)));
 $72 = $6;
 $73 = ((($72)) + 10|0);
 HEAP16[$73>>1] = $71;
 $74 = ((($1)) + 4|0);
 $75 = +HEAPF32[$74>>2];
 $76 = (~~(($75)));
 $77 = $6;
 $78 = ((($77)) + 12|0);
 HEAP16[$78>>1] = $76;
 $79 = ((($1)) + 8|0);
 $80 = +HEAPF32[$79>>2];
 $81 = 0.0 < $80;
 if ($81) {
  $82 = ((($1)) + 8|0);
  $83 = +HEAPF32[$82>>2];
  $85 = $83;
 } else {
  $85 = 0.0;
 }
 $84 = (~~(($85))&65535);
 $86 = $6;
 $87 = ((($86)) + 14|0);
 HEAP16[$87>>1] = $84;
 $88 = ((($1)) + 12|0);
 $89 = +HEAPF32[$88>>2];
 $90 = 0.0 < $89;
 if ($90) {
  $91 = ((($1)) + 12|0);
  $92 = +HEAPF32[$91>>2];
  $94 = $92;
 } else {
  $94 = 0.0;
 }
 $93 = (~~(($94))&65535);
 $95 = $6;
 $96 = ((($95)) + 16|0);
 HEAP16[$96>>1] = $93;
 $97 = $6;
 $98 = ((($97)) + 18|0);
 ;HEAP8[$98>>0]=HEAP8[$3>>0]|0;HEAP8[$98+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$98+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$98+3>>0]=HEAP8[$3+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_fill_rect_multi_color($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0;
 var $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = $0;
 $9 = $6;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((1492|0),(1320|0),6219,(2156|0));
  // unreachable;
 }
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = ((($1)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14 == 0.0;
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = ((($1)) + 12|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 == 0.0;
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = $6;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $6;
  $24 = ((($23)) + 4|0);
  $8 = $24;
  $25 = $8;
  $26 = +HEAPF32[$25>>2];
  $27 = +HEAPF32[$1>>2];
  $28 = ((($1)) + 8|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $27 + $29;
  $31 = $26 > $30;
  if ($31) {
   STACKTOP = sp;return;
  }
  $32 = $8;
  $33 = +HEAPF32[$32>>2];
  $34 = $8;
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 + $36;
  $38 = +HEAPF32[$1>>2];
  $39 = $37 < $38;
  if ($39) {
   STACKTOP = sp;return;
  }
  $40 = $8;
  $41 = ((($40)) + 4|0);
  $42 = +HEAPF32[$41>>2];
  $43 = ((($1)) + 4|0);
  $44 = +HEAPF32[$43>>2];
  $45 = ((($1)) + 12|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $44 + $46;
  $48 = $42 > $47;
  if ($48) {
   STACKTOP = sp;return;
  }
  $49 = $8;
  $50 = ((($49)) + 4|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $8;
  $53 = ((($52)) + 12|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $51 + $54;
  $56 = ((($1)) + 4|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $55 < $57;
  if ($58) {
   STACKTOP = sp;return;
  }
 }
 $59 = $6;
 $60 = (_nk_command_buffer_push($59,6,32)|0);
 $7 = $60;
 $61 = $7;
 $62 = ($61|0)!=(0|0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $63 = +HEAPF32[$1>>2];
 $64 = (~~(($63)));
 $65 = $7;
 $66 = ((($65)) + 8|0);
 HEAP16[$66>>1] = $64;
 $67 = ((($1)) + 4|0);
 $68 = +HEAPF32[$67>>2];
 $69 = (~~(($68)));
 $70 = $7;
 $71 = ((($70)) + 10|0);
 HEAP16[$71>>1] = $69;
 $72 = ((($1)) + 8|0);
 $73 = +HEAPF32[$72>>2];
 $74 = 0.0 < $73;
 if ($74) {
  $75 = ((($1)) + 8|0);
  $76 = +HEAPF32[$75>>2];
  $78 = $76;
 } else {
  $78 = 0.0;
 }
 $77 = (~~(($78))&65535);
 $79 = $7;
 $80 = ((($79)) + 12|0);
 HEAP16[$80>>1] = $77;
 $81 = ((($1)) + 12|0);
 $82 = +HEAPF32[$81>>2];
 $83 = 0.0 < $82;
 if ($83) {
  $84 = ((($1)) + 12|0);
  $85 = +HEAPF32[$84>>2];
  $87 = $85;
 } else {
  $87 = 0.0;
 }
 $86 = (~~(($87))&65535);
 $88 = $7;
 $89 = ((($88)) + 14|0);
 HEAP16[$89>>1] = $86;
 $90 = $7;
 $91 = ((($90)) + 16|0);
 ;HEAP8[$91>>0]=HEAP8[$2>>0]|0;HEAP8[$91+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$91+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$91+3>>0]=HEAP8[$2+3>>0]|0;
 $92 = $7;
 $93 = ((($92)) + 20|0);
 ;HEAP8[$93>>0]=HEAP8[$3>>0]|0;HEAP8[$93+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$93+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$93+3>>0]=HEAP8[$3+3>>0]|0;
 $94 = $7;
 $95 = ((($94)) + 28|0);
 ;HEAP8[$95>>0]=HEAP8[$4>>0]|0;HEAP8[$95+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$95+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$95+3>>0]=HEAP8[$4+3>>0]|0;
 $96 = $7;
 $97 = ((($96)) + 24|0);
 ;HEAP8[$97>>0]=HEAP8[$5>>0]|0;HEAP8[$97+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$5+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_fill_circle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((1492|0),(1320|0),6267,(2181|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ((($2)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 == 0.0;
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = ((($1)) + 12|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 == 0.0;
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $3;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $3;
  $25 = ((($24)) + 4|0);
  $5 = $25;
  $26 = $5;
  $27 = +HEAPF32[$26>>2];
  $28 = +HEAPF32[$1>>2];
  $29 = ((($1)) + 8|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $28 + $30;
  $32 = $27 > $31;
  if ($32) {
   STACKTOP = sp;return;
  }
  $33 = $5;
  $34 = +HEAPF32[$33>>2];
  $35 = $5;
  $36 = ((($35)) + 8|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $34 + $37;
  $39 = +HEAPF32[$1>>2];
  $40 = $38 < $39;
  if ($40) {
   STACKTOP = sp;return;
  }
  $41 = $5;
  $42 = ((($41)) + 4|0);
  $43 = +HEAPF32[$42>>2];
  $44 = ((($1)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = ((($1)) + 12|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $45 + $47;
  $49 = $43 > $48;
  if ($49) {
   STACKTOP = sp;return;
  }
  $50 = $5;
  $51 = ((($50)) + 4|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $5;
  $54 = ((($53)) + 12|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $52 + $55;
  $57 = ((($1)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $56 < $58;
  if ($59) {
   STACKTOP = sp;return;
  }
 }
 $60 = $3;
 $61 = (_nk_command_buffer_push($60,8,20)|0);
 $4 = $61;
 $62 = $4;
 $63 = ($62|0)!=(0|0);
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $64 = +HEAPF32[$1>>2];
 $65 = (~~(($64)));
 $66 = $4;
 $67 = ((($66)) + 8|0);
 HEAP16[$67>>1] = $65;
 $68 = ((($1)) + 4|0);
 $69 = +HEAPF32[$68>>2];
 $70 = (~~(($69)));
 $71 = $4;
 $72 = ((($71)) + 10|0);
 HEAP16[$72>>1] = $70;
 $73 = ((($1)) + 8|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $74 < 0.0;
 if ($75) {
  $79 = 0.0;
 } else {
  $76 = ((($1)) + 8|0);
  $77 = +HEAPF32[$76>>2];
  $79 = $77;
 }
 $78 = (~~(($79))&65535);
 $80 = $4;
 $81 = ((($80)) + 12|0);
 HEAP16[$81>>1] = $78;
 $82 = ((($1)) + 12|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $83 < 0.0;
 if ($84) {
  $88 = 0.0;
 } else {
  $85 = ((($1)) + 12|0);
  $86 = +HEAPF32[$85>>2];
  $88 = $86;
 }
 $87 = (~~(($88))&65535);
 $89 = $4;
 $90 = ((($89)) + 14|0);
 HEAP16[$90>>1] = $87;
 $91 = $4;
 $92 = ((($91)) + 16|0);
 ;HEAP8[$92>>0]=HEAP8[$2>>0]|0;HEAP8[$92+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$2+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_fill_triangle($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $8;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((1492|0),(1320|0),6354,(2196|0));
  // unreachable;
 }
 $19 = $8;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = ((($7)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)!=(0);
 $25 = $8;
 $26 = ($25|0)!=(0|0);
 $or$cond = $24 & $26;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $27 = $8;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = $8;
   $32 = ((($31)) + 4|0);
   $16 = $32;
   $33 = $16;
   $34 = +HEAPF32[$33>>2];
   $35 = $9;
   $36 = $34 <= $35;
   if ($36) {
    $37 = $9;
    $38 = $16;
    $39 = +HEAPF32[$38>>2];
    $40 = $16;
    $41 = ((($40)) + 8|0);
    $42 = +HEAPF32[$41>>2];
    $43 = $39 + $42;
    $44 = $37 <= $43;
    if ($44) {
     $45 = $16;
     $46 = ((($45)) + 4|0);
     $47 = +HEAPF32[$46>>2];
     $48 = $10;
     $49 = $47 <= $48;
     if ($49) {
      $50 = $10;
      $51 = $16;
      $52 = ((($51)) + 4|0);
      $53 = +HEAPF32[$52>>2];
      $54 = $16;
      $55 = ((($54)) + 12|0);
      $56 = +HEAPF32[$55>>2];
      $57 = $53 + $56;
      $58 = $50 <= $57;
      if ($58) {
       break;
      }
     }
    }
   }
   $59 = $16;
   $60 = +HEAPF32[$59>>2];
   $61 = $11;
   $62 = $60 <= $61;
   if ($62) {
    $63 = $11;
    $64 = $16;
    $65 = +HEAPF32[$64>>2];
    $66 = $16;
    $67 = ((($66)) + 8|0);
    $68 = +HEAPF32[$67>>2];
    $69 = $65 + $68;
    $70 = $63 <= $69;
    if ($70) {
     $71 = $16;
     $72 = ((($71)) + 4|0);
     $73 = +HEAPF32[$72>>2];
     $74 = $12;
     $75 = $73 <= $74;
     if ($75) {
      $76 = $12;
      $77 = $16;
      $78 = ((($77)) + 4|0);
      $79 = +HEAPF32[$78>>2];
      $80 = $16;
      $81 = ((($80)) + 12|0);
      $82 = +HEAPF32[$81>>2];
      $83 = $79 + $82;
      $84 = $76 <= $83;
      if ($84) {
       break;
      }
     }
    }
   }
   $85 = $16;
   $86 = +HEAPF32[$85>>2];
   $87 = $13;
   $88 = $86 <= $87;
   if (!($88)) {
    STACKTOP = sp;return;
   }
   $89 = $13;
   $90 = $16;
   $91 = +HEAPF32[$90>>2];
   $92 = $16;
   $93 = ((($92)) + 8|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $91 + $94;
   $96 = $89 <= $95;
   if (!($96)) {
    STACKTOP = sp;return;
   }
   $97 = $16;
   $98 = ((($97)) + 4|0);
   $99 = +HEAPF32[$98>>2];
   $100 = $14;
   $101 = $99 <= $100;
   if (!($101)) {
    STACKTOP = sp;return;
   }
   $102 = $14;
   $103 = $16;
   $104 = ((($103)) + 4|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $16;
   $107 = ((($106)) + 12|0);
   $108 = +HEAPF32[$107>>2];
   $109 = $105 + $108;
   $110 = $102 <= $109;
   if (!($110)) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $111 = $8;
 $112 = (_nk_command_buffer_push($111,12,24)|0);
 $15 = $112;
 $113 = $15;
 $114 = ($113|0)!=(0|0);
 if (!($114)) {
  STACKTOP = sp;return;
 }
 $115 = $9;
 $116 = (~~(($115)));
 $117 = $15;
 $118 = ((($117)) + 8|0);
 HEAP16[$118>>1] = $116;
 $119 = $10;
 $120 = (~~(($119)));
 $121 = $15;
 $122 = ((($121)) + 8|0);
 $123 = ((($122)) + 2|0);
 HEAP16[$123>>1] = $120;
 $124 = $11;
 $125 = (~~(($124)));
 $126 = $15;
 $127 = ((($126)) + 12|0);
 HEAP16[$127>>1] = $125;
 $128 = $12;
 $129 = (~~(($128)));
 $130 = $15;
 $131 = ((($130)) + 12|0);
 $132 = ((($131)) + 2|0);
 HEAP16[$132>>1] = $129;
 $133 = $13;
 $134 = (~~(($133)));
 $135 = $15;
 $136 = ((($135)) + 16|0);
 HEAP16[$136>>1] = $134;
 $137 = $14;
 $138 = (~~(($137)));
 $139 = $15;
 $140 = ((($139)) + 16|0);
 $141 = ((($140)) + 2|0);
 HEAP16[$141>>1] = $138;
 $142 = $15;
 $143 = ((($142)) + 20|0);
 ;HEAP8[$143>>0]=HEAP8[$7>>0]|0;HEAP8[$143+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$143+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$143+3>>0]=HEAP8[$7+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_draw_image($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $2;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1492|0),(1320|0),6448,(2213|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $4;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 4|0);
  $7 = $17;
  $18 = $7;
  $19 = ((($18)) + 8|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20 == 0.0;
  if ($21) {
   STACKTOP = sp;return;
  }
  $22 = $7;
  $23 = ((($22)) + 12|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $24 == 0.0;
  if ($25) {
   STACKTOP = sp;return;
  }
  $26 = $7;
  $27 = +HEAPF32[$26>>2];
  $28 = +HEAPF32[$1>>2];
  $29 = ((($1)) + 8|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $28 + $30;
  $32 = $27 > $31;
  if ($32) {
   STACKTOP = sp;return;
  }
  $33 = $7;
  $34 = +HEAPF32[$33>>2];
  $35 = $7;
  $36 = ((($35)) + 8|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $34 + $37;
  $39 = +HEAPF32[$1>>2];
  $40 = $38 < $39;
  if ($40) {
   STACKTOP = sp;return;
  }
  $41 = $7;
  $42 = ((($41)) + 4|0);
  $43 = +HEAPF32[$42>>2];
  $44 = ((($1)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = ((($1)) + 12|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $45 + $47;
  $49 = $43 > $48;
  if ($49) {
   STACKTOP = sp;return;
  }
  $50 = $7;
  $51 = ((($50)) + 4|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $7;
  $54 = ((($53)) + 12|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $52 + $55;
  $57 = ((($1)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $56 < $58;
  if ($59) {
   STACKTOP = sp;return;
  }
 }
 $60 = $4;
 $61 = (_nk_command_buffer_push($60,17,36)|0);
 $6 = $61;
 $62 = $6;
 $63 = ($62|0)!=(0|0);
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $64 = +HEAPF32[$1>>2];
 $65 = (~~(($64)));
 $66 = $6;
 $67 = ((($66)) + 8|0);
 HEAP16[$67>>1] = $65;
 $68 = ((($1)) + 4|0);
 $69 = +HEAPF32[$68>>2];
 $70 = (~~(($69)));
 $71 = $6;
 $72 = ((($71)) + 10|0);
 HEAP16[$72>>1] = $70;
 $73 = ((($1)) + 8|0);
 $74 = +HEAPF32[$73>>2];
 $75 = 0.0 < $74;
 if ($75) {
  $76 = ((($1)) + 8|0);
  $77 = +HEAPF32[$76>>2];
  $79 = $77;
 } else {
  $79 = 0.0;
 }
 $78 = (~~(($79))&65535);
 $80 = $6;
 $81 = ((($80)) + 12|0);
 HEAP16[$81>>1] = $78;
 $82 = ((($1)) + 12|0);
 $83 = +HEAPF32[$82>>2];
 $84 = 0.0 < $83;
 if ($84) {
  $85 = ((($1)) + 12|0);
  $86 = +HEAPF32[$85>>2];
  $88 = $86;
 } else {
  $88 = 0.0;
 }
 $87 = (~~(($88))&65535);
 $89 = $6;
 $90 = ((($89)) + 14|0);
 HEAP16[$90>>1] = $87;
 $91 = $6;
 $92 = ((($91)) + 16|0);
 $93 = $5;
 ;HEAP32[$92>>2]=HEAP32[$93>>2]|0;HEAP32[$92+4>>2]=HEAP32[$93+4>>2]|0;HEAP32[$92+8>>2]=HEAP32[$93+8>>2]|0;HEAP32[$92+12>>2]=HEAP32[$93+12>>2]|0;
 $94 = $6;
 $95 = ((($94)) + 32|0);
 ;HEAP8[$95>>0]=HEAP8[$3>>0]|0;HEAP8[$95+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$95+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$95+3>>0]=HEAP8[$3+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_draw_text($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 36|0;
 $14 = sp + 4|0;
 $15 = sp;
 $7 = $0;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0.0;
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((1492|0),(1320|0),6475,(2227|0));
  // unreachable;
 }
 $18 = $10;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((2240|0),(1320|0),6476,(2227|0));
  // unreachable;
 }
 $20 = $7;
 $21 = ($20|0)!=(0|0);
 $22 = $8;
 $23 = ($22|0)!=(0|0);
 $or$cond = $21 & $23;
 $24 = $9;
 $25 = ($24|0)!=(0);
 $or$cond3 = $or$cond & $25;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $26 = ((($5)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = ((($6)) + 3|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(0);
  if ($33) {
   STACKTOP = sp;return;
  }
 }
 $34 = $7;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $7;
  $39 = ((($38)) + 4|0);
  $13 = $39;
  $40 = $13;
  $41 = ((($40)) + 8|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $42 == 0.0;
  if ($43) {
   STACKTOP = sp;return;
  }
  $44 = $13;
  $45 = ((($44)) + 12|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $46 == 0.0;
  if ($47) {
   STACKTOP = sp;return;
  }
  $48 = $13;
  $49 = +HEAPF32[$48>>2];
  $50 = +HEAPF32[$1>>2];
  $51 = ((($1)) + 8|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $50 + $52;
  $54 = $49 > $53;
  if ($54) {
   STACKTOP = sp;return;
  }
  $55 = $13;
  $56 = +HEAPF32[$55>>2];
  $57 = $13;
  $58 = ((($57)) + 8|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $56 + $59;
  $61 = +HEAPF32[$1>>2];
  $62 = $60 < $61;
  if ($62) {
   STACKTOP = sp;return;
  }
  $63 = $13;
  $64 = ((($63)) + 4|0);
  $65 = +HEAPF32[$64>>2];
  $66 = ((($1)) + 4|0);
  $67 = +HEAPF32[$66>>2];
  $68 = ((($1)) + 12|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $67 + $69;
  $71 = $65 > $70;
  if ($71) {
   STACKTOP = sp;return;
  }
  $72 = $13;
  $73 = ((($72)) + 4|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $13;
  $76 = ((($75)) + 12|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $74 + $77;
  $79 = ((($1)) + 4|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $78 < $80;
  if ($81) {
   STACKTOP = sp;return;
  }
 }
 $82 = $10;
 $83 = ((($82)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $10;
 $86 = $10;
 $87 = ((($86)) + 4|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $8;
 $90 = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$85>>2]|0;
 $91 = (+FUNCTION_TABLE_didii[$84 & 15]($$byval_copy,$88,$89,$90));
 $11 = $91;
 $92 = $11;
 $93 = ((($1)) + 8|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $92 > $94;
 if ($95) {
  HEAP32[$14>>2] = 0;
  $96 = $11;
  HEAPF32[$15>>2] = $96;
  $97 = $10;
  $98 = $8;
  $99 = $9;
  $100 = ((($1)) + 8|0);
  $101 = +HEAPF32[$100>>2];
  $102 = (_nk_text_clamp($97,$98,$99,$101,$14,$15,0,0)|0);
  $9 = $102;
 }
 $103 = $9;
 $104 = ($103|0)!=(0);
 if (!($104)) {
  STACKTOP = sp;return;
 }
 $105 = $7;
 $106 = $9;
 $107 = (($106) + 1)|0;
 $108 = (40 + ($107))|0;
 $109 = (_nk_command_buffer_push($105,16,$108)|0);
 $12 = $109;
 $110 = $12;
 $111 = ($110|0)!=(0|0);
 if (!($111)) {
  STACKTOP = sp;return;
 }
 $112 = +HEAPF32[$1>>2];
 $113 = (~~(($112)));
 $114 = $12;
 $115 = ((($114)) + 20|0);
 HEAP16[$115>>1] = $113;
 $116 = ((($1)) + 4|0);
 $117 = +HEAPF32[$116>>2];
 $118 = (~~(($117)));
 $119 = $12;
 $120 = ((($119)) + 22|0);
 HEAP16[$120>>1] = $118;
 $121 = ((($1)) + 8|0);
 $122 = +HEAPF32[$121>>2];
 $123 = (~~(($122))&65535);
 $124 = $12;
 $125 = ((($124)) + 24|0);
 HEAP16[$125>>1] = $123;
 $126 = ((($1)) + 12|0);
 $127 = +HEAPF32[$126>>2];
 $128 = (~~(($127))&65535);
 $129 = $12;
 $130 = ((($129)) + 26|0);
 HEAP16[$130>>1] = $128;
 $131 = $12;
 $132 = ((($131)) + 12|0);
 ;HEAP8[$132>>0]=HEAP8[$5>>0]|0;HEAP8[$132+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$132+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$132+3>>0]=HEAP8[$5+3>>0]|0;
 $133 = $12;
 $134 = ((($133)) + 16|0);
 ;HEAP8[$134>>0]=HEAP8[$6>>0]|0;HEAP8[$134+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$134+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$134+3>>0]=HEAP8[$6+3>>0]|0;
 $135 = $10;
 $136 = $12;
 $137 = ((($136)) + 8|0);
 HEAP32[$137>>2] = $135;
 $138 = $9;
 $139 = $12;
 $140 = ((($139)) + 32|0);
 HEAP32[$140>>2] = $138;
 $141 = $10;
 $142 = ((($141)) + 4|0);
 $143 = +HEAPF32[$142>>2];
 $144 = $12;
 $145 = ((($144)) + 28|0);
 HEAPF32[$145>>2] = $143;
 $146 = $12;
 $147 = ((($146)) + 36|0);
 $148 = $8;
 $149 = $9;
 (_nk_memcopy($147,$148,$149)|0);
 $150 = $9;
 $151 = $12;
 $152 = ((($151)) + 36|0);
 $153 = (($152) + ($150)|0);
 HEAP8[$153>>0] = 0;
 STACKTOP = sp;return;
}
function _nk_text_clamp($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 80|0;
 $20 = sp + 28|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = 0;
 $18 = 0;
 $19 = 0.0;
 HEAP32[$20>>2] = 0;
 $21 = 0.0;
 $22 = 0;
 $23 = 0;
 $25 = 0;
 $26 = 0;
 $27 = 0.0;
 $28 = $16;
 $29 = ($28|0)<(0);
 $30 = $16;
 $31 = $29 ? 0 : $30;
 $16 = $31;
 $32 = $10;
 $33 = $11;
 $34 = (_nk_utf_decode($32,$20,$33)|0);
 $18 = $34;
 while(1) {
  $35 = $18;
  $36 = ($35|0)!=(0);
  if (!($36)) {
   break;
  }
  $37 = $21;
  $38 = $12;
  $39 = $37 < $38;
  if (!($39)) {
   break;
  }
  $40 = $22;
  $41 = $11;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $18;
  $44 = $22;
  $45 = (($44) + ($43))|0;
  $22 = $45;
  $46 = $9;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $9;
  $50 = $9;
  $51 = ((($50)) + 4|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $10;
  $54 = $22;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$49>>2]|0;
  $55 = (+FUNCTION_TABLE_didii[$48 & 15]($$byval_copy,$52,$53,$54));
  $24 = $55;
  $17 = 0;
  while(1) {
   $56 = $17;
   $57 = $16;
   $58 = ($56|0)<($57|0);
   if (!($58)) {
    break;
   }
   $59 = HEAP32[$20>>2]|0;
   $60 = $17;
   $61 = $15;
   $62 = (($61) + ($60<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($59|0)!=($63|0);
   if (!($64)) {
    label = 8;
    break;
   }
   $69 = $17;
   $70 = (($69) + 1)|0;
   $17 = $70;
  }
  if ((label|0) == 8) {
   label = 0;
   $65 = $21;
   $19 = $65;
   $27 = $65;
   $66 = $23;
   $67 = (($66) + 1)|0;
   $26 = $67;
   $68 = $22;
   $25 = $68;
  }
  $71 = $17;
  $72 = $16;
  $73 = ($72|0)<(0);
  $74 = $16;
  $75 = $73 ? 0 : $74;
  $76 = ($71|0)==($75|0);
  if ($76) {
   $77 = $21;
   $27 = $77;
   $19 = $77;
   $78 = $23;
   $79 = (($78) + 1)|0;
   $26 = $79;
  }
  $80 = $24;
  $21 = $80;
  $81 = $22;
  $82 = $10;
  $83 = (($82) + ($81)|0);
  $84 = $11;
  $85 = $22;
  $86 = (($84) - ($85))|0;
  $87 = (_nk_utf_decode($83,$20,$86)|0);
  $18 = $87;
  $88 = $23;
  $89 = (($88) + 1)|0;
  $23 = $89;
 }
 $90 = $22;
 $91 = $11;
 $92 = ($90|0)>=($91|0);
 if ($92) {
  $93 = $23;
  $94 = $13;
  HEAP32[$94>>2] = $93;
  $95 = $19;
  $96 = $14;
  HEAPF32[$96>>2] = $95;
  $97 = $22;
  $8 = $97;
  $107 = $8;
  STACKTOP = sp;return ($107|0);
 } else {
  $98 = $26;
  $99 = $13;
  HEAP32[$99>>2] = $98;
  $100 = $27;
  $101 = $14;
  HEAPF32[$101>>2] = $100;
  $102 = $25;
  $103 = ($102|0)!=(0);
  $104 = $22;
  $105 = $25;
  $106 = $103 ? $105 : $104;
  $8 = $106;
  $107 = $8;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function _nk_draw_list_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2245|0),(1320|0),6519,(2250|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 _nk_zero($8,196);
 $2 = 0;
 while(1) {
  $9 = $2;
  $10 = ($9>>>0)<(12);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = (+($11>>>0));
  $13 = $12 / 12.0;
  $14 = $13 * 2.0;
  $15 = $14 * 3.1415927410125732;
  $3 = $15;
  $16 = $3;
  $17 = (+_nk_cos($16));
  $18 = $2;
  $19 = $1;
  $20 = ((($19)) + 16|0);
  $21 = (($20) + ($18<<3)|0);
  HEAPF32[$21>>2] = $17;
  $22 = $3;
  $23 = (+_nk_sin($22));
  $24 = $2;
  $25 = $1;
  $26 = ((($25)) + 16|0);
  $27 = (($26) + ($24<<3)|0);
  $28 = ((($27)) + 4|0);
  HEAPF32[$28>>2] = $23;
  $29 = $2;
  $30 = (($29) + 1)|0;
  $2 = $30;
 }
 STACKTOP = sp;return;
}
function _nk_cos($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = $1;
 $5 = $1;
 $6 = $1;
 $7 = $1;
 $8 = $1;
 $9 = $8 * -5.2302214344429956E-14;
 $10 = 9.9014095030725002E-4 + $9;
 $11 = $7 * $10;
 $12 = -0.018663715571165085 + $11;
 $13 = $6 * $12;
 $14 = 0.10712379962205887 + $13;
 $15 = $5 * $14;
 $16 = -0.1181340366601944 + $15;
 $17 = $4 * $16;
 $18 = -0.39438232779502869 + $17;
 $19 = $3 * $18;
 $20 = -0.038191996514797211 + $19;
 $21 = $2 * $20;
 $22 = 1.0023859739303589 + $21;
 STACKTOP = sp;return (+$22);
}
function _nk_sin($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = $1;
 $5 = $1;
 $6 = $1;
 $7 = $1;
 $8 = $1;
 $9 = $8 * 1.3823564222548157E-4;
 $10 = -0.0030399605166167021 + $9;
 $11 = $7 * $10;
 $12 = 0.020802659913897514 + $11;
 $13 = $6 * $12;
 $14 = -0.026735339313745499 + $13;
 $15 = $5 * $14;
 $16 = -0.13807877898216248 + $15;
 $17 = $4 * $16;
 $18 = -0.012127612717449665 + $17;
 $19 = $3 * $18;
 $20 = 1.0008676052093506 + $19;
 $21 = $2 * $20;
 $22 = 1.9105930344931873E-31 + $21;
 STACKTOP = sp;return (+$22);
}
function _nk_draw_list_setup($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((2268|0),(1320|0),6533,(2275|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2294|0),(1320|0),6534,(2275|0));
  // unreachable;
 }
 $14 = $7;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2301|0),(1320|0),6535,(2275|0));
  // unreachable;
 }
 $16 = $8;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((2306|0),(1320|0),6536,(2275|0));
  // unreachable;
 }
 $18 = $9;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((2315|0),(1320|0),6537,(2275|0));
  // unreachable;
 }
 $20 = $5;
 $21 = ($20|0)!=(0|0);
 $22 = $6;
 $23 = ($22|0)!=(0|0);
 $or$cond = $21 & $23;
 $24 = $7;
 $25 = ($24|0)!=(0|0);
 $or$cond3 = $or$cond & $25;
 $26 = $8;
 $27 = ($26|0)!=(0|0);
 $or$cond5 = $or$cond3 & $27;
 $28 = $9;
 $29 = ($28|0)!=(0|0);
 $or$cond7 = $or$cond5 & $29;
 if (!($or$cond7)) {
  STACKTOP = sp;return;
 }
 $30 = $7;
 $31 = $5;
 $32 = ((($31)) + 160|0);
 HEAP32[$32>>2] = $30;
 $33 = $5;
 $34 = ((($33)) + 112|0);
 $35 = $6;
 dest=$34; src=$35; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $36 = $9;
 $37 = $5;
 $38 = ((($37)) + 168|0);
 HEAP32[$38>>2] = $36;
 $39 = $8;
 $40 = $5;
 $41 = ((($40)) + 164|0);
 HEAP32[$41>>2] = $39;
 $42 = $5;
 ;HEAP32[$42>>2]=HEAP32[8>>2]|0;HEAP32[$42+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[8+12>>2]|0;
 STACKTOP = sp;return;
}
function _nk__draw_list_begin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1473|0),(1320|0),6555,(2324|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $4;
  $13 = ((($12)) + 56|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $3;
   $17 = ((($16)) + 180|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $4;
    $21 = ((($20)) + 32|0);
    $22 = HEAP32[$21>>2]|0;
    $5 = $22;
    $23 = $4;
    $24 = ((($23)) + 32|0);
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $3;
    $28 = ((($27)) + 184|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($26) - ($29))|0;
    $6 = $30;
    $31 = $5;
    $32 = $6;
    $33 = (($31) + ($32)|0);
    $7 = $33;
    $34 = $7;
    $2 = $34;
    $35 = $2;
    STACKTOP = sp;return ($35|0);
   }
  }
 }
 $2 = 0;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function _nk__draw_list_end($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((1473|0),(1320|0),6573,(2344|0));
  // unreachable;
 }
 $11 = $3;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((2268|0),(1320|0),6574,(2344|0));
  // unreachable;
 }
 $13 = $4;
 $14 = ($13|0)!=(0|0);
 $15 = $3;
 $16 = ($15|0)!=(0|0);
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = $4;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $7 = $19;
  $20 = $4;
  $21 = ((($20)) + 32|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $5 = $23;
  $24 = $5;
  $25 = $3;
  $26 = ((($25)) + 184|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24) - ($27))|0;
  $6 = $28;
  $29 = $7;
  $30 = $6;
  $31 = (($29) + ($30)|0);
  $8 = $31;
  $32 = $3;
  $33 = ((($32)) + 180|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) - 1)|0;
  $36 = $8;
  $37 = (0 - ($35))|0;
  $38 = (($36) + (($37*24)|0)|0);
  $8 = $38;
  $39 = $8;
  $2 = $39;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 } else {
  $2 = 0;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _nk__draw_list_next($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1473|0),(1320|0),6591,(2362|0));
  // unreachable;
 }
 $10 = $6;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((2268|0),(1320|0),6592,(2362|0));
  // unreachable;
 }
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 $16 = $6;
 $17 = ($16|0)!=(0|0);
 $or$cond3 = $or$cond & $17;
 if (!($or$cond3)) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $18 = $6;
 $19 = $5;
 $20 = (_nk__draw_list_end($18,$19)|0);
 $7 = $20;
 $21 = $4;
 $22 = $7;
 $23 = ($21>>>0)<=($22>>>0);
 if ($23) {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 } else {
  $24 = $4;
  $25 = ((($24)) + -24|0);
  $3 = $25;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _nk_draw_list_clear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((2245|0),(1320|0),6604,(2381|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 160|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 160|0);
  $12 = HEAP32[$11>>2]|0;
  _nk_buffer_clear($12);
 }
 $13 = $1;
 $14 = ((($13)) + 164|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = ((($17)) + 164|0);
  $19 = HEAP32[$18>>2]|0;
  _nk_buffer_clear($19);
 }
 $20 = $1;
 $21 = ((($20)) + 168|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $1;
  $25 = ((($24)) + 168|0);
  $26 = HEAP32[$25>>2]|0;
  _nk_buffer_clear($26);
 }
 $27 = $1;
 $28 = ((($27)) + 172|0);
 HEAP32[$28>>2] = 0;
 $29 = $1;
 $30 = ((($29)) + 176|0);
 HEAP32[$30>>2] = 0;
 $31 = $1;
 $32 = ((($31)) + 184|0);
 HEAP32[$32>>2] = 0;
 $33 = $1;
 $34 = ((($33)) + 180|0);
 HEAP32[$34>>2] = 0;
 $35 = $1;
 $36 = ((($35)) + 188|0);
 HEAP32[$36>>2] = 0;
 $37 = $1;
 $38 = ((($37)) + 164|0);
 HEAP32[$38>>2] = 0;
 $39 = $1;
 $40 = ((($39)) + 168|0);
 HEAP32[$40>>2] = 0;
 $41 = $1;
 ;HEAP32[$41>>2]=HEAP32[8>>2]|0;HEAP32[$41+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$41+12>>2]=HEAP32[8+12>>2]|0;
 STACKTOP = sp;return;
}
function _nk_draw_list_stroke_poly_line($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0;
 var $$byval_copy29 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy40 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0.0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
 var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
 var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0.0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
 var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0.0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
 var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0.0, $1175 = 0.0, $1176 = 0.0, $1177 = 0, $1178 = 0.0, $1179 = 0, $118 = 0, $1180 = 0.0, $1181 = 0.0, $1182 = 0.0, $1183 = 0.0, $1184 = 0.0;
 var $1185 = 0, $1186 = 0.0, $1187 = 0, $1188 = 0.0, $1189 = 0.0, $119 = 0.0, $1190 = 0.0, $1191 = 0.0, $1192 = 0, $1193 = 0.0, $1194 = 0.0, $1195 = 0.0, $1196 = 0.0, $1197 = 0.0, $1198 = 0, $1199 = 0.0, $12 = 0, $120 = 0.0, $1200 = 0.0, $1201 = 0.0;
 var $1202 = 0.0, $1203 = 0.0, $1204 = 0.0, $1205 = 0.0, $1206 = 0, $1207 = 0.0, $1208 = 0.0, $1209 = 0.0, $121 = 0, $1210 = 0.0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0.0, $1215 = 0.0, $1216 = 0.0, $1217 = 0, $1218 = 0.0, $1219 = 0.0, $122 = 0;
 var $1220 = 0.0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0.0, $1226 = 0.0, $1227 = 0.0, $1228 = 0, $1229 = 0.0, $123 = 0, $1230 = 0.0, $1231 = 0.0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0.0, $1237 = 0.0, $1238 = 0.0;
 var $1239 = 0, $124 = 0, $1240 = 0.0, $1241 = 0.0, $1242 = 0.0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0.0, $1248 = 0.0, $1249 = 0.0, $125 = 0, $1250 = 0, $1251 = 0.0, $1252 = 0.0, $1253 = 0.0, $1254 = 0, $1255 = 0, $1256 = 0;
 var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
 var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0.0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0;
 var $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0;
 var $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0, $30 = 0.0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0;
 var $46 = 0, $460 = 0.0, $461 = 0, $462 = 0.0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0;
 var $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0, $64 = 0, $640 = 0.0;
 var $641 = 0.0, $642 = 0.0, $643 = 0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0, $654 = 0, $655 = 0.0, $656 = 0, $657 = 0.0, $658 = 0.0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0.0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0;
 var $678 = 0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0, $693 = 0.0, $694 = 0.0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0.0, $746 = 0, $747 = 0.0, $748 = 0.0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0.0;
 var $768 = 0, $769 = 0.0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0.0, $79 = 0.0, $790 = 0, $791 = 0.0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0.0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0.0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0.0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0.0, $842 = 0.0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0.0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0.0, $853 = 0.0, $854 = 0.0, $855 = 0.0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0.0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0.0, $864 = 0.0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0.0, $875 = 0.0;
 var $876 = 0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0, $880 = 0.0, $881 = 0.0, $882 = 0, $883 = 0.0, $884 = 0, $885 = 0.0, $886 = 0.0, $887 = 0.0, $888 = 0.0, $889 = 0, $89 = 0, $890 = 0.0, $891 = 0.0, $892 = 0.0, $893 = 0;
 var $894 = 0.0, $895 = 0.0, $896 = 0.0, $897 = 0.0, $898 = 0.0, $899 = 0, $9 = 0, $90 = 0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0.0, $904 = 0.0, $905 = 0.0, $906 = 0.0, $907 = 0, $908 = 0.0, $909 = 0.0, $91 = 0, $910 = 0.0;
 var $911 = 0.0, $912 = 0.0, $913 = 0.0, $914 = 0.0, $915 = 0, $916 = 0.0, $917 = 0.0, $918 = 0.0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0.0, $928 = 0.0, $929 = 0.0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0.0, $935 = 0, $936 = 0.0, $937 = 0.0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0.0, $947 = 0.0;
 var $948 = 0.0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0, $952 = 0, $953 = 0.0, $954 = 0, $955 = 0.0, $956 = 0.0, $957 = 0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0.0;
 var $966 = 0.0, $967 = 0.0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0.0, $973 = 0, $974 = 0.0, $975 = 0.0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0.0, $985 = 0.0, $986 = 0.0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0.0, $992 = 0, $993 = 0.0, $994 = 0.0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $$byval_copy40 = sp + 1008|0;
 $$byval_copy39 = sp + 1000|0;
 $$byval_copy38 = sp + 992|0;
 $$byval_copy37 = sp + 976|0;
 $$byval_copy36 = sp + 968|0;
 $$byval_copy35 = sp + 960|0;
 $$byval_copy34 = sp + 944|0;
 $$byval_copy33 = sp + 936|0;
 $$byval_copy32 = sp + 928|0;
 $$byval_copy31 = sp + 912|0;
 $$byval_copy30 = sp + 904|0;
 $$byval_copy29 = sp + 896|0;
 $$byval_copy28 = sp + 880|0;
 $$byval_copy27 = sp + 872|0;
 $$byval_copy26 = sp + 864|0;
 $$byval_copy25 = sp + 848|0;
 $$byval_copy24 = sp + 840|0;
 $$byval_copy23 = sp + 832|0;
 $$byval_copy22 = sp + 816|0;
 $$byval_copy21 = sp + 808|0;
 $$byval_copy20 = sp + 800|0;
 $$byval_copy19 = sp + 784|0;
 $$byval_copy18 = sp + 776|0;
 $$byval_copy17 = sp + 768|0;
 $$byval_copy16 = sp + 752|0;
 $$byval_copy15 = sp + 744|0;
 $$byval_copy14 = sp + 736|0;
 $$byval_copy13 = sp + 720|0;
 $$byval_copy12 = sp + 712|0;
 $$byval_copy11 = sp + 704|0;
 $$byval_copy10 = sp + 688|0;
 $$byval_copy9 = sp + 680|0;
 $$byval_copy8 = sp + 672|0;
 $$byval_copy = sp + 1024|0;
 $15 = sp + 624|0;
 $16 = sp + 608|0;
 $29 = sp + 552|0;
 $31 = sp + 536|0;
 $34 = sp + 520|0;
 $35 = sp + 512|0;
 $36 = sp + 504|0;
 $37 = sp + 496|0;
 $38 = sp + 488|0;
 $39 = sp + 480|0;
 $40 = sp + 472|0;
 $41 = sp + 464|0;
 $42 = sp + 456|0;
 $43 = sp + 448|0;
 $44 = sp + 440|0;
 $48 = sp + 416|0;
 $49 = sp + 408|0;
 $50 = sp + 400|0;
 $52 = sp + 384|0;
 $53 = sp + 376|0;
 $54 = sp + 368|0;
 $55 = sp + 360|0;
 $56 = sp + 352|0;
 $60 = sp + 328|0;
 $61 = sp + 320|0;
 $62 = sp + 312|0;
 $63 = sp + 304|0;
 $64 = sp + 296|0;
 $65 = sp + 288|0;
 $66 = sp + 280|0;
 $67 = sp + 272|0;
 $68 = sp + 264|0;
 $69 = sp + 256|0;
 $70 = sp + 248|0;
 $71 = sp + 240|0;
 $72 = sp + 232|0;
 $73 = sp + 224|0;
 $76 = sp + 208|0;
 $77 = sp + 200|0;
 $78 = sp + 192|0;
 $81 = sp + 176|0;
 $82 = sp + 168|0;
 $83 = sp + 160|0;
 $84 = sp + 152|0;
 $85 = sp + 144|0;
 $86 = sp + 136|0;
 $87 = sp + 128|0;
 $88 = sp + 120|0;
 $97 = sp + 80|0;
 $99 = sp + 64|0;
 $100 = sp + 56|0;
 $101 = sp + 48|0;
 $103 = sp + 32|0;
 $104 = sp + 24|0;
 $105 = sp + 16|0;
 $106 = sp + 8|0;
 $107 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $108 = $7;
 $109 = ($108|0)!=(0|0);
 if (!($109)) {
  ___assert_fail((2245|0),(1320|0),6929,(2400|0));
  // unreachable;
 }
 $110 = $7;
 $111 = ($110|0)==(0|0);
 $112 = $9;
 $113 = ($112>>>0)<(2);
 $or$cond = $111 | $113;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $114 = ((($3)) + 3|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = (+($115&255));
 $117 = $7;
 $118 = ((($117)) + 112|0);
 $119 = +HEAPF32[$118>>2];
 $120 = $116 * $119;
 $121 = (~~(($120))&255);
 $122 = ((($3)) + 3|0);
 HEAP8[$122>>0] = $121;
 $123 = $9;
 $13 = $123;
 $124 = $10;
 $125 = ($124|0)!=(0);
 if (!($125)) {
  $126 = $9;
  $127 = (($126) - 1)|0;
  $13 = $127;
 }
 $128 = $11;
 $129 = $128 > 1.0;
 $130 = $129&1;
 $14 = $130;
 $131 = ((($3)) + 3|0);
 $132 = HEAP8[$131>>0]|0;
 $133 = (+($132&255));
 $134 = $7;
 $135 = ((($134)) + 112|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $133 * $136;
 $138 = (~~(($137))&255);
 $139 = ((($3)) + 3|0);
 HEAP8[$139>>0] = $138;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$3+3>>0]|0;
 _nk_color_fv($15,$$byval_copy);
 ;HEAP32[$16>>2]=HEAP32[$15>>2]|0;HEAP32[$16+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$15+12>>2]|0;
 $140 = ((($16)) + 12|0);
 HEAPF32[$140>>2] = 0.0;
 $141 = $12;
 $142 = ($141|0)==(1);
 if (!($142)) {
  $89 = 0;
  $1137 = $7;
  $1138 = ((($1137)) + 176|0);
  $1139 = HEAP32[$1138>>2]|0;
  $90 = $1139;
  $1140 = $13;
  $1141 = ($1140*6)|0;
  $91 = $1141;
  $1142 = $13;
  $1143 = $1142<<2;
  $92 = $1143;
  $1144 = $7;
  $1145 = $92;
  $1146 = (_nk_draw_list_alloc_vertices($1144,$1145)|0);
  $93 = $1146;
  $1147 = $7;
  $1148 = $91;
  $1149 = (_nk_draw_list_alloc_elements($1147,$1148)|0);
  $94 = $1149;
  $1150 = $93;
  $1151 = ($1150|0)!=(0|0);
  $1152 = $94;
  $1153 = ($1152|0)!=(0|0);
  $or$cond7 = $1151 & $1153;
  if (!($or$cond7)) {
   STACKTOP = sp;return;
  }
  $89 = 0;
  while(1) {
   $1154 = $89;
   $1155 = $13;
   $1156 = ($1154>>>0)<($1155>>>0);
   if (!($1156)) {
    break;
   }
   $1157 = $7;
   $1158 = ((($1157)) + 112|0);
   $1159 = ((($1158)) + 24|0);
   $1160 = ((($1159)) + 4|0);
   ;HEAP32[$97>>2]=HEAP32[$1160>>2]|0;HEAP32[$97+4>>2]=HEAP32[$1160+4>>2]|0;
   $1161 = $89;
   $1162 = (($1161) + 1)|0;
   $1163 = $9;
   $1164 = ($1162|0)==($1163|0);
   $1165 = $89;
   $1166 = (($1165) + 1)|0;
   $1167 = $1164 ? 0 : $1166;
   $98 = $1167;
   $1168 = $89;
   $1169 = $8;
   $1170 = (($1169) + ($1168<<3)|0);
   ;HEAP32[$99>>2]=HEAP32[$1170>>2]|0;HEAP32[$99+4>>2]=HEAP32[$1170+4>>2]|0;
   $1171 = $98;
   $1172 = $8;
   $1173 = (($1172) + ($1171<<3)|0);
   ;HEAP32[$100>>2]=HEAP32[$1173>>2]|0;HEAP32[$100+4>>2]=HEAP32[$1173+4>>2]|0;
   $1174 = +HEAPF32[$100>>2];
   $1175 = +HEAPF32[$99>>2];
   $1176 = $1174 - $1175;
   $1177 = ((($100)) + 4|0);
   $1178 = +HEAPF32[$1177>>2];
   $1179 = ((($99)) + 4|0);
   $1180 = +HEAPF32[$1179>>2];
   $1181 = $1178 - $1180;
   _nk_vec2($101,$1176,$1181);
   $1182 = +HEAPF32[$101>>2];
   $1183 = +HEAPF32[$101>>2];
   $1184 = $1182 * $1183;
   $1185 = ((($101)) + 4|0);
   $1186 = +HEAPF32[$1185>>2];
   $1187 = ((($101)) + 4|0);
   $1188 = +HEAPF32[$1187>>2];
   $1189 = $1186 * $1188;
   $1190 = $1184 + $1189;
   $102 = $1190;
   $1191 = $102;
   $1192 = $1191 != 0.0;
   if ($1192) {
    $1193 = $102;
    $1194 = (+_nk_inv_sqrt($1193));
    $102 = $1194;
   } else {
    $102 = 1.0;
   }
   $1195 = +HEAPF32[$101>>2];
   $1196 = $102;
   $1197 = $1195 * $1196;
   $1198 = ((($101)) + 4|0);
   $1199 = +HEAPF32[$1198>>2];
   $1200 = $102;
   $1201 = $1199 * $1200;
   _nk_vec2($103,$1197,$1201);
   ;HEAP32[$101>>2]=HEAP32[$103>>2]|0;HEAP32[$101+4>>2]=HEAP32[$103+4>>2]|0;
   $1202 = +HEAPF32[$101>>2];
   $1203 = $11;
   $1204 = $1203 * 0.5;
   $1205 = $1202 * $1204;
   $95 = $1205;
   $1206 = ((($101)) + 4|0);
   $1207 = +HEAPF32[$1206>>2];
   $1208 = $11;
   $1209 = $1208 * 0.5;
   $1210 = $1207 * $1209;
   $96 = $1210;
   $1211 = $93;
   $1212 = $7;
   $1213 = ((($1212)) + 112|0);
   $1214 = +HEAPF32[$99>>2];
   $1215 = $96;
   $1216 = $1214 + $1215;
   $1217 = ((($99)) + 4|0);
   $1218 = +HEAPF32[$1217>>2];
   $1219 = $95;
   $1220 = $1218 - $1219;
   _nk_vec2($104,$1216,$1220);
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$104>>2]|0;HEAP32[$$byval_copy29+4>>2]=HEAP32[$104+4>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$97>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$97+4>>2]|0;
   ;HEAP32[$$byval_copy31>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[$15+12>>2]|0;
   $1221 = (_nk_draw_vertex($1211,$1213,$$byval_copy29,$$byval_copy30,$$byval_copy31)|0);
   $93 = $1221;
   $1222 = $93;
   $1223 = $7;
   $1224 = ((($1223)) + 112|0);
   $1225 = +HEAPF32[$100>>2];
   $1226 = $96;
   $1227 = $1225 + $1226;
   $1228 = ((($100)) + 4|0);
   $1229 = +HEAPF32[$1228>>2];
   $1230 = $95;
   $1231 = $1229 - $1230;
   _nk_vec2($105,$1227,$1231);
   ;HEAP32[$$byval_copy32>>2]=HEAP32[$105>>2]|0;HEAP32[$$byval_copy32+4>>2]=HEAP32[$105+4>>2]|0;
   ;HEAP32[$$byval_copy33>>2]=HEAP32[$97>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$97+4>>2]|0;
   ;HEAP32[$$byval_copy34>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy34+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy34+12>>2]=HEAP32[$15+12>>2]|0;
   $1232 = (_nk_draw_vertex($1222,$1224,$$byval_copy32,$$byval_copy33,$$byval_copy34)|0);
   $93 = $1232;
   $1233 = $93;
   $1234 = $7;
   $1235 = ((($1234)) + 112|0);
   $1236 = +HEAPF32[$100>>2];
   $1237 = $96;
   $1238 = $1236 - $1237;
   $1239 = ((($100)) + 4|0);
   $1240 = +HEAPF32[$1239>>2];
   $1241 = $95;
   $1242 = $1240 + $1241;
   _nk_vec2($106,$1238,$1242);
   ;HEAP32[$$byval_copy35>>2]=HEAP32[$106>>2]|0;HEAP32[$$byval_copy35+4>>2]=HEAP32[$106+4>>2]|0;
   ;HEAP32[$$byval_copy36>>2]=HEAP32[$97>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$97+4>>2]|0;
   ;HEAP32[$$byval_copy37>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy37+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy37+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy37+12>>2]=HEAP32[$15+12>>2]|0;
   $1243 = (_nk_draw_vertex($1233,$1235,$$byval_copy35,$$byval_copy36,$$byval_copy37)|0);
   $93 = $1243;
   $1244 = $93;
   $1245 = $7;
   $1246 = ((($1245)) + 112|0);
   $1247 = +HEAPF32[$99>>2];
   $1248 = $96;
   $1249 = $1247 - $1248;
   $1250 = ((($99)) + 4|0);
   $1251 = +HEAPF32[$1250>>2];
   $1252 = $95;
   $1253 = $1251 + $1252;
   _nk_vec2($107,$1249,$1253);
   ;HEAP32[$$byval_copy38>>2]=HEAP32[$107>>2]|0;HEAP32[$$byval_copy38+4>>2]=HEAP32[$107+4>>2]|0;
   ;HEAP32[$$byval_copy39>>2]=HEAP32[$97>>2]|0;HEAP32[$$byval_copy39+4>>2]=HEAP32[$97+4>>2]|0;
   ;HEAP32[$$byval_copy40>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy40+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy40+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy40+12>>2]=HEAP32[$15+12>>2]|0;
   $1254 = (_nk_draw_vertex($1244,$1246,$$byval_copy38,$$byval_copy39,$$byval_copy40)|0);
   $93 = $1254;
   $1255 = $90;
   $1256 = (($1255) + 0)|0;
   $1257 = $1256&65535;
   $1258 = $94;
   HEAP16[$1258>>1] = $1257;
   $1259 = $90;
   $1260 = (($1259) + 1)|0;
   $1261 = $1260&65535;
   $1262 = $94;
   $1263 = ((($1262)) + 2|0);
   HEAP16[$1263>>1] = $1261;
   $1264 = $90;
   $1265 = (($1264) + 2)|0;
   $1266 = $1265&65535;
   $1267 = $94;
   $1268 = ((($1267)) + 4|0);
   HEAP16[$1268>>1] = $1266;
   $1269 = $90;
   $1270 = (($1269) + 0)|0;
   $1271 = $1270&65535;
   $1272 = $94;
   $1273 = ((($1272)) + 6|0);
   HEAP16[$1273>>1] = $1271;
   $1274 = $90;
   $1275 = (($1274) + 2)|0;
   $1276 = $1275&65535;
   $1277 = $94;
   $1278 = ((($1277)) + 8|0);
   HEAP16[$1278>>1] = $1276;
   $1279 = $90;
   $1280 = (($1279) + 3)|0;
   $1281 = $1280&65535;
   $1282 = $94;
   $1283 = ((($1282)) + 10|0);
   HEAP16[$1283>>1] = $1281;
   $1284 = $94;
   $1285 = ((($1284)) + 12|0);
   $94 = $1285;
   $1286 = $90;
   $1287 = (($1286) + 4)|0;
   $90 = $1287;
   $1288 = $89;
   $1289 = (($1288) + 1)|0;
   $89 = $1289;
  }
  STACKTOP = sp;return;
 }
 $17 = 1.0;
 $18 = 0;
 $143 = $7;
 $144 = ((($143)) + 176|0);
 $145 = HEAP32[$144>>2]|0;
 $20 = $145;
 $146 = $14;
 $147 = ($146|0)!=(0);
 $148 = $13;
 $149 = ($148*18)|0;
 $150 = ($148*12)|0;
 $151 = $147 ? $149 : $150;
 $21 = $151;
 $152 = $14;
 $153 = ($152|0)!=(0);
 $154 = $9;
 $155 = $154<<2;
 $156 = ($154*3)|0;
 $157 = $153 ? $155 : $156;
 $22 = $157;
 $158 = $7;
 $159 = $22;
 $160 = (_nk_draw_list_alloc_vertices($158,$159)|0);
 $23 = $160;
 $161 = $7;
 $162 = $21;
 $163 = (_nk_draw_list_alloc_elements($161,$162)|0);
 $24 = $163;
 $164 = $23;
 $165 = ($164|0)!=(0|0);
 $166 = $24;
 $167 = ($166|0)!=(0|0);
 $or$cond3 = $165 & $167;
 if (!($or$cond3)) {
  ___assert_fail((2430|0),(1320|0),6965,(2400|0));
  // unreachable;
 }
 $168 = $23;
 $169 = ($168|0)!=(0|0);
 $170 = $24;
 $171 = ($170|0)!=(0|0);
 $or$cond5 = $169 & $171;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $172 = $23;
 $173 = $7;
 $174 = ((($173)) + 164|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ((($175)) + 32|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = $172;
 $179 = $177;
 $180 = (($178) - ($179))|0;
 $19 = $180;
 $181 = $7;
 $182 = ((($181)) + 164|0);
 $183 = HEAP32[$182>>2]|0;
 _nk_buffer_mark($183,0);
 $184 = $14;
 $185 = ($184|0)!=(0);
 $186 = $185 ? 5 : 3;
 $187 = $186<<3;
 $188 = $9;
 $189 = Math_imul($187, $188)|0;
 $25 = $189;
 $190 = $7;
 $191 = ((($190)) + 164|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = $25;
 $194 = (_nk_buffer_alloc($192,0,$193,4)|0);
 $26 = $194;
 $195 = $26;
 $196 = ($195|0)!=(0|0);
 if (!($196)) {
  ___assert_fail((2441|0),(1320|0),6973,(2400|0));
  // unreachable;
 }
 $197 = $26;
 $198 = ($197|0)!=(0|0);
 if (!($198)) {
  STACKTOP = sp;return;
 }
 $199 = $26;
 $200 = $9;
 $201 = (($199) + ($200<<3)|0);
 $27 = $201;
 $202 = $7;
 $203 = ((($202)) + 164|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ((($204)) + 32|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $19;
 $208 = (($206) + ($207)|0);
 $23 = $208;
 $18 = 0;
 while(1) {
  $209 = $18;
  $210 = $13;
  $211 = ($209>>>0)<($210>>>0);
  if (!($211)) {
   break;
  }
  $212 = $18;
  $213 = (($212) + 1)|0;
  $214 = $9;
  $215 = ($213|0)==($214|0);
  $216 = $18;
  $217 = (($216) + 1)|0;
  $218 = $215 ? 0 : $217;
  $28 = $218;
  $219 = $28;
  $220 = $8;
  $221 = (($220) + ($219<<3)|0);
  $222 = +HEAPF32[$221>>2];
  $223 = $18;
  $224 = $8;
  $225 = (($224) + ($223<<3)|0);
  $226 = +HEAPF32[$225>>2];
  $227 = $222 - $226;
  $228 = $28;
  $229 = $8;
  $230 = (($229) + ($228<<3)|0);
  $231 = ((($230)) + 4|0);
  $232 = +HEAPF32[$231>>2];
  $233 = $18;
  $234 = $8;
  $235 = (($234) + ($233<<3)|0);
  $236 = ((($235)) + 4|0);
  $237 = +HEAPF32[$236>>2];
  $238 = $232 - $237;
  _nk_vec2($29,$227,$238);
  $239 = +HEAPF32[$29>>2];
  $240 = +HEAPF32[$29>>2];
  $241 = $239 * $240;
  $242 = ((($29)) + 4|0);
  $243 = +HEAPF32[$242>>2];
  $244 = ((($29)) + 4|0);
  $245 = +HEAPF32[$244>>2];
  $246 = $243 * $245;
  $247 = $241 + $246;
  $30 = $247;
  $248 = $30;
  $249 = $248 != 0.0;
  if ($249) {
   $250 = $30;
   $251 = (+_nk_inv_sqrt($250));
   $30 = $251;
  } else {
   $30 = 1.0;
  }
  $252 = +HEAPF32[$29>>2];
  $253 = $30;
  $254 = $252 * $253;
  $255 = ((($29)) + 4|0);
  $256 = +HEAPF32[$255>>2];
  $257 = $30;
  $258 = $256 * $257;
  _nk_vec2($31,$254,$258);
  ;HEAP32[$29>>2]=HEAP32[$31>>2]|0;HEAP32[$29+4>>2]=HEAP32[$31+4>>2]|0;
  $259 = ((($29)) + 4|0);
  $260 = +HEAPF32[$259>>2];
  $261 = $18;
  $262 = $26;
  $263 = (($262) + ($261<<3)|0);
  HEAPF32[$263>>2] = $260;
  $264 = +HEAPF32[$29>>2];
  $265 = -$264;
  $266 = $18;
  $267 = $26;
  $268 = (($267) + ($266<<3)|0);
  $269 = ((($268)) + 4|0);
  HEAPF32[$269>>2] = $265;
  $270 = $18;
  $271 = (($270) + 1)|0;
  $18 = $271;
 }
 $272 = $10;
 $273 = ($272|0)!=(0);
 if (!($273)) {
  $274 = $9;
  $275 = (($274) - 1)|0;
  $276 = $26;
  $277 = (($276) + ($275<<3)|0);
  $278 = $9;
  $279 = (($278) - 2)|0;
  $280 = $26;
  $281 = (($280) + ($279<<3)|0);
  ;HEAP32[$277>>2]=HEAP32[$281>>2]|0;HEAP32[$277+4>>2]=HEAP32[$281+4>>2]|0;
 }
 $282 = $14;
 $283 = ($282|0)!=(0);
 L47: do {
  if ($283) {
   $623 = $11;
   $624 = $623 - 1.0;
   $625 = $624 * 0.5;
   $59 = $625;
   $626 = $10;
   $627 = ($626|0)!=(0);
   if (!($627)) {
    $628 = $26;
    $629 = +HEAPF32[$628>>2];
    $630 = $59;
    $631 = $630 + 1.0;
    $632 = $629 * $631;
    $633 = $26;
    $634 = ((($633)) + 4|0);
    $635 = +HEAPF32[$634>>2];
    $636 = $59;
    $637 = $636 + 1.0;
    $638 = $635 * $637;
    _nk_vec2($60,$632,$638);
    $639 = $26;
    $640 = +HEAPF32[$639>>2];
    $641 = $59;
    $642 = $640 * $641;
    $643 = $26;
    $644 = ((($643)) + 4|0);
    $645 = +HEAPF32[$644>>2];
    $646 = $59;
    $647 = $645 * $646;
    _nk_vec2($61,$642,$647);
    $648 = $27;
    $649 = $8;
    $650 = +HEAPF32[$649>>2];
    $651 = +HEAPF32[$60>>2];
    $652 = $650 + $651;
    $653 = $8;
    $654 = ((($653)) + 4|0);
    $655 = +HEAPF32[$654>>2];
    $656 = ((($60)) + 4|0);
    $657 = +HEAPF32[$656>>2];
    $658 = $655 + $657;
    _nk_vec2($62,$652,$658);
    ;HEAP32[$648>>2]=HEAP32[$62>>2]|0;HEAP32[$648+4>>2]=HEAP32[$62+4>>2]|0;
    $659 = $27;
    $660 = ((($659)) + 8|0);
    $661 = $8;
    $662 = +HEAPF32[$661>>2];
    $663 = +HEAPF32[$61>>2];
    $664 = $662 + $663;
    $665 = $8;
    $666 = ((($665)) + 4|0);
    $667 = +HEAPF32[$666>>2];
    $668 = ((($61)) + 4|0);
    $669 = +HEAPF32[$668>>2];
    $670 = $667 + $669;
    _nk_vec2($63,$664,$670);
    ;HEAP32[$660>>2]=HEAP32[$63>>2]|0;HEAP32[$660+4>>2]=HEAP32[$63+4>>2]|0;
    $671 = $27;
    $672 = ((($671)) + 16|0);
    $673 = $8;
    $674 = +HEAPF32[$673>>2];
    $675 = +HEAPF32[$61>>2];
    $676 = $674 - $675;
    $677 = $8;
    $678 = ((($677)) + 4|0);
    $679 = +HEAPF32[$678>>2];
    $680 = ((($61)) + 4|0);
    $681 = +HEAPF32[$680>>2];
    $682 = $679 - $681;
    _nk_vec2($64,$676,$682);
    ;HEAP32[$672>>2]=HEAP32[$64>>2]|0;HEAP32[$672+4>>2]=HEAP32[$64+4>>2]|0;
    $683 = $27;
    $684 = ((($683)) + 24|0);
    $685 = $8;
    $686 = +HEAPF32[$685>>2];
    $687 = +HEAPF32[$60>>2];
    $688 = $686 - $687;
    $689 = $8;
    $690 = ((($689)) + 4|0);
    $691 = +HEAPF32[$690>>2];
    $692 = ((($60)) + 4|0);
    $693 = +HEAPF32[$692>>2];
    $694 = $691 - $693;
    _nk_vec2($65,$688,$694);
    ;HEAP32[$684>>2]=HEAP32[$65>>2]|0;HEAP32[$684+4>>2]=HEAP32[$65+4>>2]|0;
    $695 = $9;
    $696 = (($695) - 1)|0;
    $697 = $26;
    $698 = (($697) + ($696<<3)|0);
    $699 = +HEAPF32[$698>>2];
    $700 = $59;
    $701 = $700 + 1.0;
    $702 = $699 * $701;
    $703 = $9;
    $704 = (($703) - 1)|0;
    $705 = $26;
    $706 = (($705) + ($704<<3)|0);
    $707 = ((($706)) + 4|0);
    $708 = +HEAPF32[$707>>2];
    $709 = $59;
    $710 = $709 + 1.0;
    $711 = $708 * $710;
    _nk_vec2($66,$702,$711);
    ;HEAP32[$60>>2]=HEAP32[$66>>2]|0;HEAP32[$60+4>>2]=HEAP32[$66+4>>2]|0;
    $712 = $9;
    $713 = (($712) - 1)|0;
    $714 = $26;
    $715 = (($714) + ($713<<3)|0);
    $716 = +HEAPF32[$715>>2];
    $717 = $59;
    $718 = $716 * $717;
    $719 = $9;
    $720 = (($719) - 1)|0;
    $721 = $26;
    $722 = (($721) + ($720<<3)|0);
    $723 = ((($722)) + 4|0);
    $724 = +HEAPF32[$723>>2];
    $725 = $59;
    $726 = $724 * $725;
    _nk_vec2($67,$718,$726);
    ;HEAP32[$61>>2]=HEAP32[$67>>2]|0;HEAP32[$61+4>>2]=HEAP32[$67+4>>2]|0;
    $727 = $9;
    $728 = (($727) - 1)|0;
    $729 = $728<<2;
    $730 = (($729) + 0)|0;
    $731 = $27;
    $732 = (($731) + ($730<<3)|0);
    $733 = $9;
    $734 = (($733) - 1)|0;
    $735 = $8;
    $736 = (($735) + ($734<<3)|0);
    $737 = +HEAPF32[$736>>2];
    $738 = +HEAPF32[$60>>2];
    $739 = $737 + $738;
    $740 = $9;
    $741 = (($740) - 1)|0;
    $742 = $8;
    $743 = (($742) + ($741<<3)|0);
    $744 = ((($743)) + 4|0);
    $745 = +HEAPF32[$744>>2];
    $746 = ((($60)) + 4|0);
    $747 = +HEAPF32[$746>>2];
    $748 = $745 + $747;
    _nk_vec2($68,$739,$748);
    ;HEAP32[$732>>2]=HEAP32[$68>>2]|0;HEAP32[$732+4>>2]=HEAP32[$68+4>>2]|0;
    $749 = $9;
    $750 = (($749) - 1)|0;
    $751 = $750<<2;
    $752 = (($751) + 1)|0;
    $753 = $27;
    $754 = (($753) + ($752<<3)|0);
    $755 = $9;
    $756 = (($755) - 1)|0;
    $757 = $8;
    $758 = (($757) + ($756<<3)|0);
    $759 = +HEAPF32[$758>>2];
    $760 = +HEAPF32[$61>>2];
    $761 = $759 + $760;
    $762 = $9;
    $763 = (($762) - 1)|0;
    $764 = $8;
    $765 = (($764) + ($763<<3)|0);
    $766 = ((($765)) + 4|0);
    $767 = +HEAPF32[$766>>2];
    $768 = ((($61)) + 4|0);
    $769 = +HEAPF32[$768>>2];
    $770 = $767 + $769;
    _nk_vec2($69,$761,$770);
    ;HEAP32[$754>>2]=HEAP32[$69>>2]|0;HEAP32[$754+4>>2]=HEAP32[$69+4>>2]|0;
    $771 = $9;
    $772 = (($771) - 1)|0;
    $773 = $772<<2;
    $774 = (($773) + 2)|0;
    $775 = $27;
    $776 = (($775) + ($774<<3)|0);
    $777 = $9;
    $778 = (($777) - 1)|0;
    $779 = $8;
    $780 = (($779) + ($778<<3)|0);
    $781 = +HEAPF32[$780>>2];
    $782 = +HEAPF32[$61>>2];
    $783 = $781 - $782;
    $784 = $9;
    $785 = (($784) - 1)|0;
    $786 = $8;
    $787 = (($786) + ($785<<3)|0);
    $788 = ((($787)) + 4|0);
    $789 = +HEAPF32[$788>>2];
    $790 = ((($61)) + 4|0);
    $791 = +HEAPF32[$790>>2];
    $792 = $789 - $791;
    _nk_vec2($70,$783,$792);
    ;HEAP32[$776>>2]=HEAP32[$70>>2]|0;HEAP32[$776+4>>2]=HEAP32[$70+4>>2]|0;
    $793 = $9;
    $794 = (($793) - 1)|0;
    $795 = $794<<2;
    $796 = (($795) + 3)|0;
    $797 = $27;
    $798 = (($797) + ($796<<3)|0);
    $799 = $9;
    $800 = (($799) - 1)|0;
    $801 = $8;
    $802 = (($801) + ($800<<3)|0);
    $803 = +HEAPF32[$802>>2];
    $804 = +HEAPF32[$60>>2];
    $805 = $803 - $804;
    $806 = $9;
    $807 = (($806) - 1)|0;
    $808 = $8;
    $809 = (($808) + ($807<<3)|0);
    $810 = ((($809)) + 4|0);
    $811 = +HEAPF32[$810>>2];
    $812 = ((($60)) + 4|0);
    $813 = +HEAPF32[$812>>2];
    $814 = $811 - $813;
    _nk_vec2($71,$805,$814);
    ;HEAP32[$798>>2]=HEAP32[$71>>2]|0;HEAP32[$798+4>>2]=HEAP32[$71+4>>2]|0;
   }
   $815 = $20;
   $57 = $815;
   $18 = 0;
   while(1) {
    $816 = $18;
    $817 = $13;
    $818 = ($816>>>0)<($817>>>0);
    if (!($818)) {
     break;
    }
    $819 = $18;
    $820 = (($819) + 1)|0;
    $821 = $9;
    $822 = ($820|0)==($821|0);
    $823 = $18;
    $824 = (($823) + 1)|0;
    $825 = $822 ? 0 : $824;
    $74 = $825;
    $826 = $18;
    $827 = (($826) + 1)|0;
    $828 = $9;
    $829 = ($827|0)==($828|0);
    $830 = $20;
    $831 = $57;
    $832 = (($831) + 4)|0;
    $833 = $829 ? $830 : $832;
    $75 = $833;
    $834 = $18;
    $835 = $26;
    $836 = (($835) + ($834<<3)|0);
    $837 = +HEAPF32[$836>>2];
    $838 = $74;
    $839 = $26;
    $840 = (($839) + ($838<<3)|0);
    $841 = +HEAPF32[$840>>2];
    $842 = $837 + $841;
    $843 = $18;
    $844 = $26;
    $845 = (($844) + ($843<<3)|0);
    $846 = ((($845)) + 4|0);
    $847 = +HEAPF32[$846>>2];
    $848 = $74;
    $849 = $26;
    $850 = (($849) + ($848<<3)|0);
    $851 = ((($850)) + 4|0);
    $852 = +HEAPF32[$851>>2];
    $853 = $847 + $852;
    _nk_vec2($77,$842,$853);
    $854 = +HEAPF32[$77>>2];
    $855 = $854 * 0.5;
    $856 = $18;
    $857 = $26;
    $858 = (($857) + ($856<<3)|0);
    $859 = +HEAPF32[$858>>2];
    $860 = $74;
    $861 = $26;
    $862 = (($861) + ($860<<3)|0);
    $863 = +HEAPF32[$862>>2];
    $864 = $859 + $863;
    $865 = $18;
    $866 = $26;
    $867 = (($866) + ($865<<3)|0);
    $868 = ((($867)) + 4|0);
    $869 = +HEAPF32[$868>>2];
    $870 = $74;
    $871 = $26;
    $872 = (($871) + ($870<<3)|0);
    $873 = ((($872)) + 4|0);
    $874 = +HEAPF32[$873>>2];
    $875 = $869 + $874;
    _nk_vec2($78,$864,$875);
    $876 = ((($78)) + 4|0);
    $877 = +HEAPF32[$876>>2];
    $878 = $877 * 0.5;
    _nk_vec2($76,$855,$878);
    $879 = +HEAPF32[$76>>2];
    $880 = +HEAPF32[$76>>2];
    $881 = $879 * $880;
    $882 = ((($76)) + 4|0);
    $883 = +HEAPF32[$882>>2];
    $884 = ((($76)) + 4|0);
    $885 = +HEAPF32[$884>>2];
    $886 = $883 * $885;
    $887 = $881 + $886;
    $79 = $887;
    $888 = $79;
    $889 = $888 > 9.9999999747524271E-7;
    if ($889) {
     $890 = $79;
     $891 = 1.0 / $890;
     $80 = $891;
     $892 = $80;
     $893 = 100.0 < $892;
     $894 = $80;
     $895 = $893 ? 100.0 : $894;
     $80 = $895;
     $896 = +HEAPF32[$76>>2];
     $897 = $80;
     $898 = $896 * $897;
     $899 = ((($76)) + 4|0);
     $900 = +HEAPF32[$899>>2];
     $901 = $80;
     $902 = $900 * $901;
     _nk_vec2($81,$898,$902);
     ;HEAP32[$76>>2]=HEAP32[$81>>2]|0;HEAP32[$76+4>>2]=HEAP32[$81+4>>2]|0;
    }
    $903 = +HEAPF32[$76>>2];
    $904 = $59;
    $905 = $904 + 1.0;
    $906 = $903 * $905;
    $907 = ((($76)) + 4|0);
    $908 = +HEAPF32[$907>>2];
    $909 = $59;
    $910 = $909 + 1.0;
    $911 = $908 * $910;
    _nk_vec2($82,$906,$911);
    ;HEAP32[$72>>2]=HEAP32[$82>>2]|0;HEAP32[$72+4>>2]=HEAP32[$82+4>>2]|0;
    $912 = +HEAPF32[$76>>2];
    $913 = $59;
    $914 = $912 * $913;
    $915 = ((($76)) + 4|0);
    $916 = +HEAPF32[$915>>2];
    $917 = $59;
    $918 = $916 * $917;
    _nk_vec2($83,$914,$918);
    ;HEAP32[$73>>2]=HEAP32[$83>>2]|0;HEAP32[$73+4>>2]=HEAP32[$83+4>>2]|0;
    $919 = $74;
    $920 = $919<<2;
    $921 = (($920) + 0)|0;
    $922 = $27;
    $923 = (($922) + ($921<<3)|0);
    $924 = $74;
    $925 = $8;
    $926 = (($925) + ($924<<3)|0);
    $927 = +HEAPF32[$926>>2];
    $928 = +HEAPF32[$72>>2];
    $929 = $927 + $928;
    $930 = $74;
    $931 = $8;
    $932 = (($931) + ($930<<3)|0);
    $933 = ((($932)) + 4|0);
    $934 = +HEAPF32[$933>>2];
    $935 = ((($72)) + 4|0);
    $936 = +HEAPF32[$935>>2];
    $937 = $934 + $936;
    _nk_vec2($84,$929,$937);
    ;HEAP32[$923>>2]=HEAP32[$84>>2]|0;HEAP32[$923+4>>2]=HEAP32[$84+4>>2]|0;
    $938 = $74;
    $939 = $938<<2;
    $940 = (($939) + 1)|0;
    $941 = $27;
    $942 = (($941) + ($940<<3)|0);
    $943 = $74;
    $944 = $8;
    $945 = (($944) + ($943<<3)|0);
    $946 = +HEAPF32[$945>>2];
    $947 = +HEAPF32[$73>>2];
    $948 = $946 + $947;
    $949 = $74;
    $950 = $8;
    $951 = (($950) + ($949<<3)|0);
    $952 = ((($951)) + 4|0);
    $953 = +HEAPF32[$952>>2];
    $954 = ((($73)) + 4|0);
    $955 = +HEAPF32[$954>>2];
    $956 = $953 + $955;
    _nk_vec2($85,$948,$956);
    ;HEAP32[$942>>2]=HEAP32[$85>>2]|0;HEAP32[$942+4>>2]=HEAP32[$85+4>>2]|0;
    $957 = $74;
    $958 = $957<<2;
    $959 = (($958) + 2)|0;
    $960 = $27;
    $961 = (($960) + ($959<<3)|0);
    $962 = $74;
    $963 = $8;
    $964 = (($963) + ($962<<3)|0);
    $965 = +HEAPF32[$964>>2];
    $966 = +HEAPF32[$73>>2];
    $967 = $965 - $966;
    $968 = $74;
    $969 = $8;
    $970 = (($969) + ($968<<3)|0);
    $971 = ((($970)) + 4|0);
    $972 = +HEAPF32[$971>>2];
    $973 = ((($73)) + 4|0);
    $974 = +HEAPF32[$973>>2];
    $975 = $972 - $974;
    _nk_vec2($86,$967,$975);
    ;HEAP32[$961>>2]=HEAP32[$86>>2]|0;HEAP32[$961+4>>2]=HEAP32[$86+4>>2]|0;
    $976 = $74;
    $977 = $976<<2;
    $978 = (($977) + 3)|0;
    $979 = $27;
    $980 = (($979) + ($978<<3)|0);
    $981 = $74;
    $982 = $8;
    $983 = (($982) + ($981<<3)|0);
    $984 = +HEAPF32[$983>>2];
    $985 = +HEAPF32[$72>>2];
    $986 = $984 - $985;
    $987 = $74;
    $988 = $8;
    $989 = (($988) + ($987<<3)|0);
    $990 = ((($989)) + 4|0);
    $991 = +HEAPF32[$990>>2];
    $992 = ((($72)) + 4|0);
    $993 = +HEAPF32[$992>>2];
    $994 = $991 - $993;
    _nk_vec2($87,$986,$994);
    ;HEAP32[$980>>2]=HEAP32[$87>>2]|0;HEAP32[$980+4>>2]=HEAP32[$87+4>>2]|0;
    $995 = $75;
    $996 = (($995) + 1)|0;
    $997 = $996&65535;
    $998 = $24;
    HEAP16[$998>>1] = $997;
    $999 = $57;
    $1000 = (($999) + 1)|0;
    $1001 = $1000&65535;
    $1002 = $24;
    $1003 = ((($1002)) + 2|0);
    HEAP16[$1003>>1] = $1001;
    $1004 = $57;
    $1005 = (($1004) + 2)|0;
    $1006 = $1005&65535;
    $1007 = $24;
    $1008 = ((($1007)) + 4|0);
    HEAP16[$1008>>1] = $1006;
    $1009 = $57;
    $1010 = (($1009) + 2)|0;
    $1011 = $1010&65535;
    $1012 = $24;
    $1013 = ((($1012)) + 6|0);
    HEAP16[$1013>>1] = $1011;
    $1014 = $75;
    $1015 = (($1014) + 2)|0;
    $1016 = $1015&65535;
    $1017 = $24;
    $1018 = ((($1017)) + 8|0);
    HEAP16[$1018>>1] = $1016;
    $1019 = $75;
    $1020 = (($1019) + 1)|0;
    $1021 = $1020&65535;
    $1022 = $24;
    $1023 = ((($1022)) + 10|0);
    HEAP16[$1023>>1] = $1021;
    $1024 = $75;
    $1025 = (($1024) + 1)|0;
    $1026 = $1025&65535;
    $1027 = $24;
    $1028 = ((($1027)) + 12|0);
    HEAP16[$1028>>1] = $1026;
    $1029 = $57;
    $1030 = (($1029) + 1)|0;
    $1031 = $1030&65535;
    $1032 = $24;
    $1033 = ((($1032)) + 14|0);
    HEAP16[$1033>>1] = $1031;
    $1034 = $57;
    $1035 = (($1034) + 0)|0;
    $1036 = $1035&65535;
    $1037 = $24;
    $1038 = ((($1037)) + 16|0);
    HEAP16[$1038>>1] = $1036;
    $1039 = $57;
    $1040 = (($1039) + 0)|0;
    $1041 = $1040&65535;
    $1042 = $24;
    $1043 = ((($1042)) + 18|0);
    HEAP16[$1043>>1] = $1041;
    $1044 = $75;
    $1045 = (($1044) + 0)|0;
    $1046 = $1045&65535;
    $1047 = $24;
    $1048 = ((($1047)) + 20|0);
    HEAP16[$1048>>1] = $1046;
    $1049 = $75;
    $1050 = (($1049) + 1)|0;
    $1051 = $1050&65535;
    $1052 = $24;
    $1053 = ((($1052)) + 22|0);
    HEAP16[$1053>>1] = $1051;
    $1054 = $75;
    $1055 = (($1054) + 2)|0;
    $1056 = $1055&65535;
    $1057 = $24;
    $1058 = ((($1057)) + 24|0);
    HEAP16[$1058>>1] = $1056;
    $1059 = $57;
    $1060 = (($1059) + 2)|0;
    $1061 = $1060&65535;
    $1062 = $24;
    $1063 = ((($1062)) + 26|0);
    HEAP16[$1063>>1] = $1061;
    $1064 = $57;
    $1065 = (($1064) + 3)|0;
    $1066 = $1065&65535;
    $1067 = $24;
    $1068 = ((($1067)) + 28|0);
    HEAP16[$1068>>1] = $1066;
    $1069 = $57;
    $1070 = (($1069) + 3)|0;
    $1071 = $1070&65535;
    $1072 = $24;
    $1073 = ((($1072)) + 30|0);
    HEAP16[$1073>>1] = $1071;
    $1074 = $75;
    $1075 = (($1074) + 3)|0;
    $1076 = $1075&65535;
    $1077 = $24;
    $1078 = ((($1077)) + 32|0);
    HEAP16[$1078>>1] = $1076;
    $1079 = $75;
    $1080 = (($1079) + 2)|0;
    $1081 = $1080&65535;
    $1082 = $24;
    $1083 = ((($1082)) + 34|0);
    HEAP16[$1083>>1] = $1081;
    $1084 = $24;
    $1085 = ((($1084)) + 36|0);
    $24 = $1085;
    $1086 = $75;
    $57 = $1086;
    $1087 = $18;
    $1088 = (($1087) + 1)|0;
    $18 = $1088;
   }
   $58 = 0;
   while(1) {
    $1089 = $58;
    $1090 = $9;
    $1091 = ($1089>>>0)<($1090>>>0);
    if (!($1091)) {
     break L47;
    }
    $1092 = $7;
    $1093 = ((($1092)) + 112|0);
    $1094 = ((($1093)) + 24|0);
    $1095 = ((($1094)) + 4|0);
    ;HEAP32[$88>>2]=HEAP32[$1095>>2]|0;HEAP32[$88+4>>2]=HEAP32[$1095+4>>2]|0;
    $1096 = $23;
    $1097 = $7;
    $1098 = ((($1097)) + 112|0);
    $1099 = $58;
    $1100 = $1099<<2;
    $1101 = (($1100) + 0)|0;
    $1102 = $27;
    $1103 = (($1102) + ($1101<<3)|0);
    ;HEAP32[$$byval_copy17>>2]=HEAP32[$1103>>2]|0;HEAP32[$$byval_copy17+4>>2]=HEAP32[$1103+4>>2]|0;
    ;HEAP32[$$byval_copy18>>2]=HEAP32[$88>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$88+4>>2]|0;
    ;HEAP32[$$byval_copy19>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy19+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy19+12>>2]=HEAP32[$16+12>>2]|0;
    $1104 = (_nk_draw_vertex($1096,$1098,$$byval_copy17,$$byval_copy18,$$byval_copy19)|0);
    $23 = $1104;
    $1105 = $23;
    $1106 = $7;
    $1107 = ((($1106)) + 112|0);
    $1108 = $58;
    $1109 = $1108<<2;
    $1110 = (($1109) + 1)|0;
    $1111 = $27;
    $1112 = (($1111) + ($1110<<3)|0);
    ;HEAP32[$$byval_copy20>>2]=HEAP32[$1112>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$1112+4>>2]|0;
    ;HEAP32[$$byval_copy21>>2]=HEAP32[$88>>2]|0;HEAP32[$$byval_copy21+4>>2]=HEAP32[$88+4>>2]|0;
    ;HEAP32[$$byval_copy22>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy22+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy22+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy22+12>>2]=HEAP32[$15+12>>2]|0;
    $1113 = (_nk_draw_vertex($1105,$1107,$$byval_copy20,$$byval_copy21,$$byval_copy22)|0);
    $23 = $1113;
    $1114 = $23;
    $1115 = $7;
    $1116 = ((($1115)) + 112|0);
    $1117 = $58;
    $1118 = $1117<<2;
    $1119 = (($1118) + 2)|0;
    $1120 = $27;
    $1121 = (($1120) + ($1119<<3)|0);
    ;HEAP32[$$byval_copy23>>2]=HEAP32[$1121>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[$1121+4>>2]|0;
    ;HEAP32[$$byval_copy24>>2]=HEAP32[$88>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$88+4>>2]|0;
    ;HEAP32[$$byval_copy25>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy25+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy25+12>>2]=HEAP32[$15+12>>2]|0;
    $1122 = (_nk_draw_vertex($1114,$1116,$$byval_copy23,$$byval_copy24,$$byval_copy25)|0);
    $23 = $1122;
    $1123 = $23;
    $1124 = $7;
    $1125 = ((($1124)) + 112|0);
    $1126 = $58;
    $1127 = $1126<<2;
    $1128 = (($1127) + 3)|0;
    $1129 = $27;
    $1130 = (($1129) + ($1128<<3)|0);
    ;HEAP32[$$byval_copy26>>2]=HEAP32[$1130>>2]|0;HEAP32[$$byval_copy26+4>>2]=HEAP32[$1130+4>>2]|0;
    ;HEAP32[$$byval_copy27>>2]=HEAP32[$88>>2]|0;HEAP32[$$byval_copy27+4>>2]=HEAP32[$88+4>>2]|0;
    ;HEAP32[$$byval_copy28>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy28+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy28+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy28+12>>2]=HEAP32[$16+12>>2]|0;
    $1131 = (_nk_draw_vertex($1123,$1125,$$byval_copy26,$$byval_copy27,$$byval_copy28)|0);
    $23 = $1131;
    $1132 = $58;
    $1133 = (($1132) + 1)|0;
    $58 = $1133;
   }
  } else {
   $284 = $10;
   $285 = ($284|0)!=(0);
   if (!($285)) {
    $286 = $27;
    $287 = $8;
    $288 = +HEAPF32[$287>>2];
    $289 = $26;
    $290 = +HEAPF32[$289>>2];
    $291 = $290 * 1.0;
    $292 = $26;
    $293 = ((($292)) + 4|0);
    $294 = +HEAPF32[$293>>2];
    $295 = $294 * 1.0;
    _nk_vec2($35,$291,$295);
    $296 = +HEAPF32[$35>>2];
    $297 = $288 + $296;
    $298 = $8;
    $299 = ((($298)) + 4|0);
    $300 = +HEAPF32[$299>>2];
    $301 = $26;
    $302 = +HEAPF32[$301>>2];
    $303 = $302 * 1.0;
    $304 = $26;
    $305 = ((($304)) + 4|0);
    $306 = +HEAPF32[$305>>2];
    $307 = $306 * 1.0;
    _nk_vec2($36,$303,$307);
    $308 = ((($36)) + 4|0);
    $309 = +HEAPF32[$308>>2];
    $310 = $300 + $309;
    _nk_vec2($37,$297,$310);
    ;HEAP32[$286>>2]=HEAP32[$37>>2]|0;HEAP32[$286+4>>2]=HEAP32[$37+4>>2]|0;
    $311 = $27;
    $312 = ((($311)) + 8|0);
    $313 = $8;
    $314 = +HEAPF32[$313>>2];
    $315 = $26;
    $316 = +HEAPF32[$315>>2];
    $317 = $316 * 1.0;
    $318 = $26;
    $319 = ((($318)) + 4|0);
    $320 = +HEAPF32[$319>>2];
    $321 = $320 * 1.0;
    _nk_vec2($38,$317,$321);
    $322 = +HEAPF32[$38>>2];
    $323 = $314 - $322;
    $324 = $8;
    $325 = ((($324)) + 4|0);
    $326 = +HEAPF32[$325>>2];
    $327 = $26;
    $328 = +HEAPF32[$327>>2];
    $329 = $328 * 1.0;
    $330 = $26;
    $331 = ((($330)) + 4|0);
    $332 = +HEAPF32[$331>>2];
    $333 = $332 * 1.0;
    _nk_vec2($39,$329,$333);
    $334 = ((($39)) + 4|0);
    $335 = +HEAPF32[$334>>2];
    $336 = $326 - $335;
    _nk_vec2($40,$323,$336);
    ;HEAP32[$312>>2]=HEAP32[$40>>2]|0;HEAP32[$312+4>>2]=HEAP32[$40+4>>2]|0;
    $337 = $9;
    $338 = (($337) - 1)|0;
    $339 = $26;
    $340 = (($339) + ($338<<3)|0);
    $341 = +HEAPF32[$340>>2];
    $342 = $341 * 1.0;
    $343 = $9;
    $344 = (($343) - 1)|0;
    $345 = $26;
    $346 = (($345) + ($344<<3)|0);
    $347 = ((($346)) + 4|0);
    $348 = +HEAPF32[$347>>2];
    $349 = $348 * 1.0;
    _nk_vec2($41,$342,$349);
    ;HEAP32[$34>>2]=HEAP32[$41>>2]|0;HEAP32[$34+4>>2]=HEAP32[$41+4>>2]|0;
    $350 = $9;
    $351 = (($350) - 1)|0;
    $352 = $351<<1;
    $353 = (($352) + 0)|0;
    $354 = $27;
    $355 = (($354) + ($353<<3)|0);
    $356 = $9;
    $357 = (($356) - 1)|0;
    $358 = $8;
    $359 = (($358) + ($357<<3)|0);
    $360 = +HEAPF32[$359>>2];
    $361 = +HEAPF32[$34>>2];
    $362 = $360 + $361;
    $363 = $9;
    $364 = (($363) - 1)|0;
    $365 = $8;
    $366 = (($365) + ($364<<3)|0);
    $367 = ((($366)) + 4|0);
    $368 = +HEAPF32[$367>>2];
    $369 = ((($34)) + 4|0);
    $370 = +HEAPF32[$369>>2];
    $371 = $368 + $370;
    _nk_vec2($42,$362,$371);
    ;HEAP32[$355>>2]=HEAP32[$42>>2]|0;HEAP32[$355+4>>2]=HEAP32[$42+4>>2]|0;
    $372 = $9;
    $373 = (($372) - 1)|0;
    $374 = $373<<1;
    $375 = (($374) + 1)|0;
    $376 = $27;
    $377 = (($376) + ($375<<3)|0);
    $378 = $9;
    $379 = (($378) - 1)|0;
    $380 = $8;
    $381 = (($380) + ($379<<3)|0);
    $382 = +HEAPF32[$381>>2];
    $383 = +HEAPF32[$34>>2];
    $384 = $382 - $383;
    $385 = $9;
    $386 = (($385) - 1)|0;
    $387 = $8;
    $388 = (($387) + ($386<<3)|0);
    $389 = ((($388)) + 4|0);
    $390 = +HEAPF32[$389>>2];
    $391 = ((($34)) + 4|0);
    $392 = +HEAPF32[$391>>2];
    $393 = $390 - $392;
    _nk_vec2($43,$384,$393);
    ;HEAP32[$377>>2]=HEAP32[$43>>2]|0;HEAP32[$377+4>>2]=HEAP32[$43+4>>2]|0;
   }
   $394 = $20;
   $32 = $394;
   $18 = 0;
   while(1) {
    $395 = $18;
    $396 = $13;
    $397 = ($395>>>0)<($396>>>0);
    if (!($397)) {
     break;
    }
    $398 = $18;
    $399 = (($398) + 1)|0;
    $400 = $9;
    $401 = ($399|0)==($400|0);
    $402 = $18;
    $403 = (($402) + 1)|0;
    $404 = $401 ? 0 : $403;
    $46 = $404;
    $405 = $18;
    $406 = (($405) + 1)|0;
    $407 = $9;
    $408 = ($406|0)==($407|0);
    $409 = $20;
    $410 = $32;
    $411 = (($410) + 3)|0;
    $412 = $408 ? $409 : $411;
    $47 = $412;
    $413 = $18;
    $414 = $26;
    $415 = (($414) + ($413<<3)|0);
    $416 = +HEAPF32[$415>>2];
    $417 = $46;
    $418 = $26;
    $419 = (($418) + ($417<<3)|0);
    $420 = +HEAPF32[$419>>2];
    $421 = $416 + $420;
    $422 = $18;
    $423 = $26;
    $424 = (($423) + ($422<<3)|0);
    $425 = ((($424)) + 4|0);
    $426 = +HEAPF32[$425>>2];
    $427 = $46;
    $428 = $26;
    $429 = (($428) + ($427<<3)|0);
    $430 = ((($429)) + 4|0);
    $431 = +HEAPF32[$430>>2];
    $432 = $426 + $431;
    _nk_vec2($48,$421,$432);
    $433 = +HEAPF32[$48>>2];
    $434 = $433 * 0.5;
    $435 = $18;
    $436 = $26;
    $437 = (($436) + ($435<<3)|0);
    $438 = +HEAPF32[$437>>2];
    $439 = $46;
    $440 = $26;
    $441 = (($440) + ($439<<3)|0);
    $442 = +HEAPF32[$441>>2];
    $443 = $438 + $442;
    $444 = $18;
    $445 = $26;
    $446 = (($445) + ($444<<3)|0);
    $447 = ((($446)) + 4|0);
    $448 = +HEAPF32[$447>>2];
    $449 = $46;
    $450 = $26;
    $451 = (($450) + ($449<<3)|0);
    $452 = ((($451)) + 4|0);
    $453 = +HEAPF32[$452>>2];
    $454 = $448 + $453;
    _nk_vec2($49,$443,$454);
    $455 = ((($49)) + 4|0);
    $456 = +HEAPF32[$455>>2];
    $457 = $456 * 0.5;
    _nk_vec2($50,$434,$457);
    ;HEAP32[$44>>2]=HEAP32[$50>>2]|0;HEAP32[$44+4>>2]=HEAP32[$50+4>>2]|0;
    $458 = +HEAPF32[$44>>2];
    $459 = +HEAPF32[$44>>2];
    $460 = $458 * $459;
    $461 = ((($44)) + 4|0);
    $462 = +HEAPF32[$461>>2];
    $463 = ((($44)) + 4|0);
    $464 = +HEAPF32[$463>>2];
    $465 = $462 * $464;
    $466 = $460 + $465;
    $45 = $466;
    $467 = $45;
    $468 = $467 > 9.9999999747524271E-7;
    if ($468) {
     $469 = $45;
     $470 = 1.0 / $469;
     $51 = $470;
     $471 = $51;
     $472 = 100.0 < $471;
     $473 = $51;
     $474 = $472 ? 100.0 : $473;
     $51 = $474;
     $475 = +HEAPF32[$44>>2];
     $476 = $51;
     $477 = $475 * $476;
     $478 = ((($44)) + 4|0);
     $479 = +HEAPF32[$478>>2];
     $480 = $51;
     $481 = $479 * $480;
     _nk_vec2($52,$477,$481);
     ;HEAP32[$44>>2]=HEAP32[$52>>2]|0;HEAP32[$44+4>>2]=HEAP32[$52+4>>2]|0;
    }
    $482 = +HEAPF32[$44>>2];
    $483 = $482 * 1.0;
    $484 = ((($44)) + 4|0);
    $485 = +HEAPF32[$484>>2];
    $486 = $485 * 1.0;
    _nk_vec2($53,$483,$486);
    ;HEAP32[$44>>2]=HEAP32[$53>>2]|0;HEAP32[$44+4>>2]=HEAP32[$53+4>>2]|0;
    $487 = $46;
    $488 = $487<<1;
    $489 = (($488) + 0)|0;
    $490 = $27;
    $491 = (($490) + ($489<<3)|0);
    $492 = $46;
    $493 = $8;
    $494 = (($493) + ($492<<3)|0);
    $495 = +HEAPF32[$494>>2];
    $496 = +HEAPF32[$44>>2];
    $497 = $495 + $496;
    $498 = $46;
    $499 = $8;
    $500 = (($499) + ($498<<3)|0);
    $501 = ((($500)) + 4|0);
    $502 = +HEAPF32[$501>>2];
    $503 = ((($44)) + 4|0);
    $504 = +HEAPF32[$503>>2];
    $505 = $502 + $504;
    _nk_vec2($54,$497,$505);
    ;HEAP32[$491>>2]=HEAP32[$54>>2]|0;HEAP32[$491+4>>2]=HEAP32[$54+4>>2]|0;
    $506 = $46;
    $507 = $506<<1;
    $508 = (($507) + 1)|0;
    $509 = $27;
    $510 = (($509) + ($508<<3)|0);
    $511 = $46;
    $512 = $8;
    $513 = (($512) + ($511<<3)|0);
    $514 = +HEAPF32[$513>>2];
    $515 = +HEAPF32[$44>>2];
    $516 = $514 - $515;
    $517 = $46;
    $518 = $8;
    $519 = (($518) + ($517<<3)|0);
    $520 = ((($519)) + 4|0);
    $521 = +HEAPF32[$520>>2];
    $522 = ((($44)) + 4|0);
    $523 = +HEAPF32[$522>>2];
    $524 = $521 - $523;
    _nk_vec2($55,$516,$524);
    ;HEAP32[$510>>2]=HEAP32[$55>>2]|0;HEAP32[$510+4>>2]=HEAP32[$55+4>>2]|0;
    $525 = $47;
    $526 = (($525) + 0)|0;
    $527 = $526&65535;
    $528 = $24;
    HEAP16[$528>>1] = $527;
    $529 = $32;
    $530 = (($529) + 0)|0;
    $531 = $530&65535;
    $532 = $24;
    $533 = ((($532)) + 2|0);
    HEAP16[$533>>1] = $531;
    $534 = $32;
    $535 = (($534) + 2)|0;
    $536 = $535&65535;
    $537 = $24;
    $538 = ((($537)) + 4|0);
    HEAP16[$538>>1] = $536;
    $539 = $32;
    $540 = (($539) + 2)|0;
    $541 = $540&65535;
    $542 = $24;
    $543 = ((($542)) + 6|0);
    HEAP16[$543>>1] = $541;
    $544 = $47;
    $545 = (($544) + 2)|0;
    $546 = $545&65535;
    $547 = $24;
    $548 = ((($547)) + 8|0);
    HEAP16[$548>>1] = $546;
    $549 = $47;
    $550 = (($549) + 0)|0;
    $551 = $550&65535;
    $552 = $24;
    $553 = ((($552)) + 10|0);
    HEAP16[$553>>1] = $551;
    $554 = $47;
    $555 = (($554) + 1)|0;
    $556 = $555&65535;
    $557 = $24;
    $558 = ((($557)) + 12|0);
    HEAP16[$558>>1] = $556;
    $559 = $32;
    $560 = (($559) + 1)|0;
    $561 = $560&65535;
    $562 = $24;
    $563 = ((($562)) + 14|0);
    HEAP16[$563>>1] = $561;
    $564 = $32;
    $565 = (($564) + 0)|0;
    $566 = $565&65535;
    $567 = $24;
    $568 = ((($567)) + 16|0);
    HEAP16[$568>>1] = $566;
    $569 = $32;
    $570 = (($569) + 0)|0;
    $571 = $570&65535;
    $572 = $24;
    $573 = ((($572)) + 18|0);
    HEAP16[$573>>1] = $571;
    $574 = $47;
    $575 = (($574) + 0)|0;
    $576 = $575&65535;
    $577 = $24;
    $578 = ((($577)) + 20|0);
    HEAP16[$578>>1] = $576;
    $579 = $47;
    $580 = (($579) + 1)|0;
    $581 = $580&65535;
    $582 = $24;
    $583 = ((($582)) + 22|0);
    HEAP16[$583>>1] = $581;
    $584 = $24;
    $585 = ((($584)) + 24|0);
    $24 = $585;
    $586 = $47;
    $32 = $586;
    $587 = $18;
    $588 = (($587) + 1)|0;
    $18 = $588;
   }
   $33 = 0;
   while(1) {
    $589 = $33;
    $590 = $9;
    $591 = ($589>>>0)<($590>>>0);
    if (!($591)) {
     break L47;
    }
    $592 = $7;
    $593 = ((($592)) + 112|0);
    $594 = ((($593)) + 24|0);
    $595 = ((($594)) + 4|0);
    ;HEAP32[$56>>2]=HEAP32[$595>>2]|0;HEAP32[$56+4>>2]=HEAP32[$595+4>>2]|0;
    $596 = $23;
    $597 = $7;
    $598 = ((($597)) + 112|0);
    $599 = $33;
    $600 = $8;
    $601 = (($600) + ($599<<3)|0);
    ;HEAP32[$$byval_copy8>>2]=HEAP32[$601>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$601+4>>2]|0;
    ;HEAP32[$$byval_copy9>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$56+4>>2]|0;
    ;HEAP32[$$byval_copy10>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$15+12>>2]|0;
    $602 = (_nk_draw_vertex($596,$598,$$byval_copy8,$$byval_copy9,$$byval_copy10)|0);
    $23 = $602;
    $603 = $23;
    $604 = $7;
    $605 = ((($604)) + 112|0);
    $606 = $33;
    $607 = $606<<1;
    $608 = (($607) + 0)|0;
    $609 = $27;
    $610 = (($609) + ($608<<3)|0);
    ;HEAP32[$$byval_copy11>>2]=HEAP32[$610>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$610+4>>2]|0;
    ;HEAP32[$$byval_copy12>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$56+4>>2]|0;
    ;HEAP32[$$byval_copy13>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy13+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy13+12>>2]=HEAP32[$16+12>>2]|0;
    $611 = (_nk_draw_vertex($603,$605,$$byval_copy11,$$byval_copy12,$$byval_copy13)|0);
    $23 = $611;
    $612 = $23;
    $613 = $7;
    $614 = ((($613)) + 112|0);
    $615 = $33;
    $616 = $615<<1;
    $617 = (($616) + 1)|0;
    $618 = $27;
    $619 = (($618) + ($617<<3)|0);
    ;HEAP32[$$byval_copy14>>2]=HEAP32[$619>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$619+4>>2]|0;
    ;HEAP32[$$byval_copy15>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$56+4>>2]|0;
    ;HEAP32[$$byval_copy16>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy16+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy16+12>>2]=HEAP32[$16+12>>2]|0;
    $620 = (_nk_draw_vertex($612,$614,$$byval_copy14,$$byval_copy15,$$byval_copy16)|0);
    $23 = $620;
    $621 = $33;
    $622 = (($621) + 1)|0;
    $33 = $622;
   }
  }
 } while(0);
 $1134 = $7;
 $1135 = ((($1134)) + 164|0);
 $1136 = HEAP32[$1135>>2]|0;
 _nk_buffer_reset($1136,0);
 STACKTOP = sp;return;
}
function _nk_draw_list_alloc_vertices($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2245|0),(1320|0),6743,(21976|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $10 = $3;
 $11 = ((($10)) + 164|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = ((($13)) + 112|0);
 $15 = ((($14)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = Math_imul($16, $17)|0;
 $19 = $3;
 $20 = ((($19)) + 112|0);
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_nk_buffer_alloc($12,0,$18,$22)|0);
 $5 = $23;
 $24 = $5;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $4;
  $27 = $3;
  $28 = ((($27)) + 176|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26))|0;
  HEAP32[$28>>2] = $30;
  $31 = $5;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _nk_draw_list_alloc_elements($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((2245|0),(1320|0),6759,(22004|0));
  // unreachable;
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 $11 = $3;
 $12 = ((($11)) + 168|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = $14<<1;
 $16 = (_nk_buffer_alloc($13,0,$15,2)|0);
 $5 = $16;
 $17 = $5;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $3;
  $20 = (_nk_draw_list_command_last($19)|0);
  $6 = $20;
  $21 = $4;
  $22 = $3;
  $23 = ((($22)) + 172|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21))|0;
  HEAP32[$23>>2] = $25;
  $26 = $4;
  $27 = $6;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($26))|0;
  HEAP32[$27>>2] = $29;
  $30 = $5;
  $2 = $30;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 } else {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _nk_inv_sqrt($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $1 = $0;
 $3 = 1.5;
 ;HEAP32[$4>>2]=0|0;
 $5 = $1;
 HEAPF32[$4>>2] = $5;
 $6 = $1;
 $7 = $6 * 0.5;
 $2 = $7;
 $8 = HEAP32[$4>>2]|0;
 $9 = $8 >>> 1;
 $10 = (1597463172 - ($9))|0;
 HEAP32[$4>>2] = $10;
 $11 = +HEAPF32[$4>>2];
 $12 = $2;
 $13 = +HEAPF32[$4>>2];
 $14 = $12 * $13;
 $15 = +HEAPF32[$4>>2];
 $16 = $14 * $15;
 $17 = 1.5 - $16;
 $18 = $11 * $17;
 HEAPF32[$4>>2] = $18;
 $19 = +HEAPF32[$4>>2];
 STACKTOP = sp;return (+$19);
}
function _nk_draw_vertex($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $10 = $5;
 $11 = $6;
 $12 = ((($11)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13)|0);
 $7 = $14;
 $15 = $6;
 $16 = ((($15)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 $8 = $17;
 L1: while(1) {
  $18 = $8;
  $19 = (_nk_draw_vertex_layout_element_is_end_of_layout($18)|0);
  $20 = ($19|0)!=(0);
  $21 = $20 ^ 1;
  if (!($21)) {
   label = 9;
   break;
  }
  $22 = $5;
  $23 = $8;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($22) + ($25)|0);
  $9 = $26;
  $27 = $8;
  $28 = HEAP32[$27>>2]|0;
  switch ($28|0) {
  case 1:  {
   $37 = $9;
   $38 = $8;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   _nk_draw_vertex_color($37,$4,$40);
   break;
  }
  case 0:  {
   $29 = $9;
   $30 = $8;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   _nk_draw_vertex_element($29,$2,2,$32);
   break;
  }
  case 2:  {
   $33 = $9;
   $34 = $8;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   _nk_draw_vertex_element($33,$3,2,$36);
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
  $41 = $8;
  $42 = ((($41)) + 12|0);
  $8 = $42;
 }
 if ((label|0) == 4) {
  ___assert_fail((22032|0),(1320|0),6910,(22063|0));
  // unreachable;
 }
 else if ((label|0) == 9) {
  $43 = $7;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _nk_draw_list_fill_poly_convex($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0;
 var $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0;
 var $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0;
 var $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0;
 var $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0;
 var $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $$byval_copy14 = sp + 336|0;
 $$byval_copy13 = sp + 328|0;
 $$byval_copy12 = sp + 320|0;
 $$byval_copy11 = sp + 304|0;
 $$byval_copy10 = sp + 296|0;
 $$byval_copy9 = sp + 288|0;
 $$byval_copy8 = sp + 272|0;
 $$byval_copy7 = sp + 264|0;
 $$byval_copy6 = sp + 256|0;
 $$byval_copy = sp + 352|0;
 $9 = sp + 224|0;
 $10 = sp + 208|0;
 $25 = sp + 144|0;
 $26 = sp + 136|0;
 $27 = sp + 128|0;
 $29 = sp + 112|0;
 $30 = sp + 104|0;
 $31 = sp + 96|0;
 $32 = sp + 88|0;
 $33 = sp + 80|0;
 $34 = sp + 72|0;
 $35 = sp + 64|0;
 $38 = sp + 48|0;
 $39 = sp + 40|0;
 $40 = sp + 32|0;
 $41 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $4;
 $48 = $5;
 $49 = ($48|0)!=(0|0);
 if (!($49)) {
  ___assert_fail((2245|0),(1320|0),7173,(2449|0));
  // unreachable;
 }
 $50 = $5;
 $51 = ($50|0)==(0|0);
 $52 = $7;
 $53 = ($52>>>0)<(3);
 $or$cond = $51 | $53;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $54 = ((($3)) + 3|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = (+($55&255));
 $57 = $5;
 $58 = ((($57)) + 112|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $56 * $59;
 $61 = (~~(($60))&255);
 $62 = ((($3)) + 3|0);
 HEAP8[$62>>0] = $61;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$3+3>>0]|0;
 _nk_color_fv($9,$$byval_copy);
 ;HEAP32[$10>>2]=HEAP32[$9>>2]|0;HEAP32[$10+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$9+12>>2]|0;
 $63 = ((($10)) + 12|0);
 HEAPF32[$63>>2] = 0.0;
 $64 = $8;
 $65 = ($64|0)==(1);
 if (!($65)) {
  $42 = 0;
  $346 = $5;
  $347 = ((($346)) + 176|0);
  $348 = HEAP32[$347>>2]|0;
  $43 = $348;
  $349 = $7;
  $350 = (($349) - 2)|0;
  $351 = ($350*3)|0;
  $44 = $351;
  $352 = $7;
  $45 = $352;
  $353 = $5;
  $354 = $45;
  $355 = (_nk_draw_list_alloc_vertices($353,$354)|0);
  $46 = $355;
  $356 = $5;
  $357 = $44;
  $358 = (_nk_draw_list_alloc_elements($356,$357)|0);
  $47 = $358;
  $359 = $46;
  $360 = ($359|0)!=(0|0);
  $361 = $47;
  $362 = ($361|0)!=(0|0);
  $or$cond5 = $360 & $362;
  if (!($or$cond5)) {
   STACKTOP = sp;return;
  }
  $42 = 0;
  while(1) {
   $363 = $42;
   $364 = $45;
   $365 = ($363>>>0)<($364>>>0);
   if (!($365)) {
    break;
   }
   $366 = $46;
   $367 = $5;
   $368 = ((($367)) + 112|0);
   $369 = $42;
   $370 = $6;
   $371 = (($370) + ($369<<3)|0);
   $372 = $5;
   $373 = ((($372)) + 112|0);
   $374 = ((($373)) + 24|0);
   $375 = ((($374)) + 4|0);
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$371>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$371+4>>2]|0;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$375>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$375+4>>2]|0;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy14+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy14+12>>2]=HEAP32[$9+12>>2]|0;
   $376 = (_nk_draw_vertex($366,$368,$$byval_copy12,$$byval_copy13,$$byval_copy14)|0);
   $46 = $376;
   $377 = $42;
   $378 = (($377) + 1)|0;
   $42 = $378;
  }
  $42 = 2;
  while(1) {
   $379 = $42;
   $380 = $7;
   $381 = ($379>>>0)<($380>>>0);
   if (!($381)) {
    break;
   }
   $382 = $43;
   $383 = $382&65535;
   $384 = $47;
   HEAP16[$384>>1] = $383;
   $385 = $43;
   $386 = $42;
   $387 = (($385) + ($386))|0;
   $388 = (($387) - 1)|0;
   $389 = $388&65535;
   $390 = $47;
   $391 = ((($390)) + 2|0);
   HEAP16[$391>>1] = $389;
   $392 = $43;
   $393 = $42;
   $394 = (($392) + ($393))|0;
   $395 = $394&65535;
   $396 = $47;
   $397 = ((($396)) + 4|0);
   HEAP16[$397>>1] = $395;
   $398 = $47;
   $399 = ((($398)) + 6|0);
   $47 = $399;
   $400 = $42;
   $401 = (($400) + 1)|0;
   $42 = $401;
  }
  STACKTOP = sp;return;
 }
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $14 = 1.0;
 $15 = 0;
 $66 = $5;
 $67 = ((($66)) + 176|0);
 $68 = HEAP32[$67>>2]|0;
 $16 = $68;
 $69 = $7;
 $70 = (($69) - 2)|0;
 $71 = ($70*3)|0;
 $72 = $7;
 $73 = ($72*6)|0;
 $74 = (($71) + ($73))|0;
 $17 = $74;
 $75 = $7;
 $76 = $75<<1;
 $18 = $76;
 $77 = $5;
 $78 = $18;
 $79 = (_nk_draw_list_alloc_vertices($77,$78)|0);
 $19 = $79;
 $80 = $5;
 $81 = $17;
 $82 = (_nk_draw_list_alloc_elements($80,$81)|0);
 $20 = $82;
 $21 = 0;
 $22 = 0;
 $83 = $16;
 $84 = (($83) + 0)|0;
 $23 = $84;
 $85 = $16;
 $86 = (($85) + 1)|0;
 $24 = $86;
 $87 = $19;
 $88 = ($87|0)!=(0|0);
 $89 = $20;
 $90 = ($89|0)!=(0|0);
 $or$cond3 = $88 & $90;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $91 = $19;
 $92 = $5;
 $93 = ((($92)) + 164|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 32|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $91;
 $98 = $96;
 $99 = (($97) - ($98))|0;
 $15 = $99;
 $100 = $5;
 $101 = ((($100)) + 164|0);
 $102 = HEAP32[$101>>2]|0;
 _nk_buffer_mark($102,0);
 $103 = $7;
 $104 = $103<<3;
 $21 = $104;
 $105 = $5;
 $106 = ((($105)) + 164|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $21;
 $109 = (_nk_buffer_alloc($107,0,$108,4)|0);
 $22 = $109;
 $110 = $22;
 $111 = ($110|0)!=(0|0);
 if (!($111)) {
  ___assert_fail((2441|0),(1320|0),7211,(2449|0));
  // unreachable;
 }
 $112 = $22;
 $113 = ($112|0)!=(0|0);
 if (!($113)) {
  STACKTOP = sp;return;
 }
 $114 = $5;
 $115 = ((($114)) + 164|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ((($116)) + 32|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $15;
 $120 = (($118) + ($119)|0);
 $19 = $120;
 $11 = 2;
 while(1) {
  $121 = $11;
  $122 = $7;
  $123 = ($121>>>0)<($122>>>0);
  if (!($123)) {
   break;
  }
  $124 = $23;
  $125 = $124&65535;
  $126 = $20;
  HEAP16[$126>>1] = $125;
  $127 = $23;
  $128 = $11;
  $129 = (($128) - 1)|0;
  $130 = $129 << 1;
  $131 = (($127) + ($130))|0;
  $132 = $131&65535;
  $133 = $20;
  $134 = ((($133)) + 2|0);
  HEAP16[$134>>1] = $132;
  $135 = $23;
  $136 = $11;
  $137 = $136 << 1;
  $138 = (($135) + ($137))|0;
  $139 = $138&65535;
  $140 = $20;
  $141 = ((($140)) + 4|0);
  HEAP16[$141>>1] = $139;
  $142 = $20;
  $143 = ((($142)) + 6|0);
  $20 = $143;
  $144 = $11;
  $145 = (($144) + 1)|0;
  $11 = $145;
 }
 $146 = $7;
 $147 = (($146) - 1)|0;
 $12 = $147;
 $13 = 0;
 while(1) {
  $148 = $13;
  $149 = $7;
  $150 = ($148>>>0)<($149>>>0);
  if (!($150)) {
   break;
  }
  $151 = $12;
  $152 = $6;
  $153 = (($152) + ($151<<3)|0);
  ;HEAP32[$25>>2]=HEAP32[$153>>2]|0;HEAP32[$25+4>>2]=HEAP32[$153+4>>2]|0;
  $154 = $13;
  $155 = $6;
  $156 = (($155) + ($154<<3)|0);
  ;HEAP32[$26>>2]=HEAP32[$156>>2]|0;HEAP32[$26+4>>2]=HEAP32[$156+4>>2]|0;
  $157 = +HEAPF32[$26>>2];
  $158 = +HEAPF32[$25>>2];
  $159 = $157 - $158;
  $160 = ((($26)) + 4|0);
  $161 = +HEAPF32[$160>>2];
  $162 = ((($25)) + 4|0);
  $163 = +HEAPF32[$162>>2];
  $164 = $161 - $163;
  _nk_vec2($27,$159,$164);
  $165 = +HEAPF32[$27>>2];
  $166 = +HEAPF32[$27>>2];
  $167 = $165 * $166;
  $168 = ((($27)) + 4|0);
  $169 = +HEAPF32[$168>>2];
  $170 = ((($27)) + 4|0);
  $171 = +HEAPF32[$170>>2];
  $172 = $169 * $171;
  $173 = $167 + $172;
  $28 = $173;
  $174 = $28;
  $175 = $174 != 0.0;
  if ($175) {
   $176 = $28;
   $177 = (+_nk_inv_sqrt($176));
   $28 = $177;
  } else {
   $28 = 1.0;
  }
  $178 = +HEAPF32[$27>>2];
  $179 = $28;
  $180 = $178 * $179;
  $181 = ((($27)) + 4|0);
  $182 = +HEAPF32[$181>>2];
  $183 = $28;
  $184 = $182 * $183;
  _nk_vec2($29,$180,$184);
  ;HEAP32[$27>>2]=HEAP32[$29>>2]|0;HEAP32[$27+4>>2]=HEAP32[$29+4>>2]|0;
  $185 = ((($27)) + 4|0);
  $186 = +HEAPF32[$185>>2];
  $187 = $12;
  $188 = $22;
  $189 = (($188) + ($187<<3)|0);
  HEAPF32[$189>>2] = $186;
  $190 = +HEAPF32[$27>>2];
  $191 = -$190;
  $192 = $12;
  $193 = $22;
  $194 = (($193) + ($192<<3)|0);
  $195 = ((($194)) + 4|0);
  HEAPF32[$195>>2] = $191;
  $196 = $13;
  $197 = (($196) + 1)|0;
  $13 = $197;
  $12 = $196;
 }
 $198 = $7;
 $199 = (($198) - 1)|0;
 $12 = $199;
 $13 = 0;
 while(1) {
  $200 = $13;
  $201 = $7;
  $202 = ($200>>>0)<($201>>>0);
  $203 = $5;
  if (!($202)) {
   break;
  }
  $204 = ((($203)) + 112|0);
  $205 = ((($204)) + 24|0);
  $206 = ((($205)) + 4|0);
  ;HEAP32[$30>>2]=HEAP32[$206>>2]|0;HEAP32[$30+4>>2]=HEAP32[$206+4>>2]|0;
  $207 = $12;
  $208 = $22;
  $209 = (($208) + ($207<<3)|0);
  ;HEAP32[$31>>2]=HEAP32[$209>>2]|0;HEAP32[$31+4>>2]=HEAP32[$209+4>>2]|0;
  $210 = $13;
  $211 = $22;
  $212 = (($211) + ($210<<3)|0);
  ;HEAP32[$32>>2]=HEAP32[$212>>2]|0;HEAP32[$32+4>>2]=HEAP32[$212+4>>2]|0;
  $213 = +HEAPF32[$31>>2];
  $214 = +HEAPF32[$32>>2];
  $215 = $213 + $214;
  $216 = ((($31)) + 4|0);
  $217 = +HEAPF32[$216>>2];
  $218 = ((($32)) + 4|0);
  $219 = +HEAPF32[$218>>2];
  $220 = $217 + $219;
  _nk_vec2($34,$215,$220);
  $221 = +HEAPF32[$34>>2];
  $222 = $221 * 0.5;
  $223 = +HEAPF32[$31>>2];
  $224 = +HEAPF32[$32>>2];
  $225 = $223 + $224;
  $226 = ((($31)) + 4|0);
  $227 = +HEAPF32[$226>>2];
  $228 = ((($32)) + 4|0);
  $229 = +HEAPF32[$228>>2];
  $230 = $227 + $229;
  _nk_vec2($35,$225,$230);
  $231 = ((($35)) + 4|0);
  $232 = +HEAPF32[$231>>2];
  $233 = $232 * 0.5;
  _nk_vec2($33,$222,$233);
  $234 = +HEAPF32[$33>>2];
  $235 = +HEAPF32[$33>>2];
  $236 = $234 * $235;
  $237 = ((($33)) + 4|0);
  $238 = +HEAPF32[$237>>2];
  $239 = ((($33)) + 4|0);
  $240 = +HEAPF32[$239>>2];
  $241 = $238 * $240;
  $242 = $236 + $241;
  $36 = $242;
  $243 = $36;
  $244 = $243 > 9.9999999747524271E-7;
  if ($244) {
   $245 = $36;
   $246 = 1.0 / $245;
   $37 = $246;
   $247 = $37;
   $248 = $247 < 100.0;
   $249 = $37;
   $250 = $248 ? $249 : 100.0;
   $37 = $250;
   $251 = +HEAPF32[$33>>2];
   $252 = $37;
   $253 = $251 * $252;
   $254 = ((($33)) + 4|0);
   $255 = +HEAPF32[$254>>2];
   $256 = $37;
   $257 = $255 * $256;
   _nk_vec2($38,$253,$257);
   ;HEAP32[$33>>2]=HEAP32[$38>>2]|0;HEAP32[$33+4>>2]=HEAP32[$38+4>>2]|0;
  }
  $258 = +HEAPF32[$33>>2];
  $259 = $258 * 0.5;
  $260 = ((($33)) + 4|0);
  $261 = +HEAPF32[$260>>2];
  $262 = $261 * 0.5;
  _nk_vec2($39,$259,$262);
  ;HEAP32[$33>>2]=HEAP32[$39>>2]|0;HEAP32[$33+4>>2]=HEAP32[$39+4>>2]|0;
  $263 = $19;
  $264 = $5;
  $265 = ((($264)) + 112|0);
  $266 = $13;
  $267 = $6;
  $268 = (($267) + ($266<<3)|0);
  $269 = +HEAPF32[$268>>2];
  $270 = +HEAPF32[$33>>2];
  $271 = $269 - $270;
  $272 = $13;
  $273 = $6;
  $274 = (($273) + ($272<<3)|0);
  $275 = ((($274)) + 4|0);
  $276 = +HEAPF32[$275>>2];
  $277 = ((($33)) + 4|0);
  $278 = +HEAPF32[$277>>2];
  $279 = $276 - $278;
  _nk_vec2($40,$271,$279);
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$40+4>>2]|0;
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$30>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$30+4>>2]|0;
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$9+12>>2]|0;
  $280 = (_nk_draw_vertex($263,$265,$$byval_copy6,$$byval_copy7,$$byval_copy8)|0);
  $19 = $280;
  $281 = $19;
  $282 = $5;
  $283 = ((($282)) + 112|0);
  $284 = $13;
  $285 = $6;
  $286 = (($285) + ($284<<3)|0);
  $287 = +HEAPF32[$286>>2];
  $288 = +HEAPF32[$33>>2];
  $289 = $287 + $288;
  $290 = $13;
  $291 = $6;
  $292 = (($291) + ($290<<3)|0);
  $293 = ((($292)) + 4|0);
  $294 = +HEAPF32[$293>>2];
  $295 = ((($33)) + 4|0);
  $296 = +HEAPF32[$295>>2];
  $297 = $294 + $296;
  _nk_vec2($41,$289,$297);
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$41>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$41+4>>2]|0;
  ;HEAP32[$$byval_copy10>>2]=HEAP32[$30>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$30+4>>2]|0;
  ;HEAP32[$$byval_copy11>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$10+12>>2]|0;
  $298 = (_nk_draw_vertex($281,$283,$$byval_copy9,$$byval_copy10,$$byval_copy11)|0);
  $19 = $298;
  $299 = $23;
  $300 = $13;
  $301 = $300 << 1;
  $302 = (($299) + ($301))|0;
  $303 = $302&65535;
  $304 = $20;
  HEAP16[$304>>1] = $303;
  $305 = $23;
  $306 = $12;
  $307 = $306 << 1;
  $308 = (($305) + ($307))|0;
  $309 = $308&65535;
  $310 = $20;
  $311 = ((($310)) + 2|0);
  HEAP16[$311>>1] = $309;
  $312 = $24;
  $313 = $12;
  $314 = $313 << 1;
  $315 = (($312) + ($314))|0;
  $316 = $315&65535;
  $317 = $20;
  $318 = ((($317)) + 4|0);
  HEAP16[$318>>1] = $316;
  $319 = $24;
  $320 = $12;
  $321 = $320 << 1;
  $322 = (($319) + ($321))|0;
  $323 = $322&65535;
  $324 = $20;
  $325 = ((($324)) + 6|0);
  HEAP16[$325>>1] = $323;
  $326 = $24;
  $327 = $13;
  $328 = $327 << 1;
  $329 = (($326) + ($328))|0;
  $330 = $329&65535;
  $331 = $20;
  $332 = ((($331)) + 8|0);
  HEAP16[$332>>1] = $330;
  $333 = $23;
  $334 = $13;
  $335 = $334 << 1;
  $336 = (($333) + ($335))|0;
  $337 = $336&65535;
  $338 = $20;
  $339 = ((($338)) + 10|0);
  HEAP16[$339>>1] = $337;
  $340 = $20;
  $341 = ((($340)) + 12|0);
  $20 = $341;
  $342 = $13;
  $343 = (($342) + 1)|0;
  $13 = $343;
  $12 = $342;
 }
 $344 = ((($203)) + 164|0);
 $345 = HEAP32[$344>>2]|0;
 _nk_buffer_reset($345,0);
 STACKTOP = sp;return;
}
function _nk_draw_list_path_clear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((2245|0),(1320|0),7292,(2479|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 160|0);
 $8 = HEAP32[$7>>2]|0;
 _nk_buffer_reset($8,0);
 $9 = $1;
 $10 = ((($9)) + 188|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 192|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_draw_list_path_line_to($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nk_null_rect$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $nk_null_rect$byval_copy = sp + 16|0;
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2245|0),(1320|0),7304,(2503|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 180|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = $2;
  ;HEAP32[$nk_null_rect$byval_copy>>2]=HEAP32[8>>2]|0;HEAP32[$nk_null_rect$byval_copy+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$nk_null_rect$byval_copy+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$nk_null_rect$byval_copy+12>>2]=HEAP32[8+12>>2]|0;
  _nk_draw_list_add_clip($13,$nk_null_rect$byval_copy);
 }
 $14 = $2;
 $15 = (_nk_draw_list_command_last($14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $4;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = ((($21)) + 112|0);
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($20|0)!=($24|0);
  if ($25) {
   $26 = $2;
   $27 = $2;
   $28 = ((($27)) + 112|0);
   $29 = ((($28)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$29>>2]|0;
   _nk_draw_list_push_image($26,$$byval_copy);
  }
 }
 $30 = $2;
 $31 = (_nk_draw_list_alloc_path($30,1)|0);
 $3 = $31;
 $32 = $3;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $3;
 ;HEAP32[$34>>2]=HEAP32[$1>>2]|0;HEAP32[$34+4>>2]=HEAP32[$1+4>>2]|0;
 STACKTOP = sp;return;
}
function _nk_draw_list_add_clip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy3 = sp + 48|0;
 $$byval_copy2 = sp + 32|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2245|0),(1320|0),6703,(22293|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ((($8)) + 180|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 $12 = $2;
 if (!($11)) {
  $13 = $2;
  $14 = ((($13)) + 112|0);
  $15 = ((($14)) + 24|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$15>>2]|0;
  (_nk_draw_list_push_command($12,$$byval_copy,$$byval_copy1)|0);
  STACKTOP = sp;return;
 }
 $16 = (_nk_draw_list_command_last($12)|0);
 $3 = $16;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = $3;
  $21 = ((($20)) + 4|0);
  ;HEAP32[$21>>2]=HEAP32[$1>>2]|0;HEAP32[$21+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$1+12>>2]|0;
 }
 $22 = $2;
 $23 = $3;
 $24 = ((($23)) + 20|0);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$24>>2]|0;
 (_nk_draw_list_push_command($22,$$byval_copy2,$$byval_copy3)|0);
 STACKTOP = sp;return;
}
function _nk_draw_list_command_last($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 180|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 160|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_nk_buffer_memory($11)|0);
  $2 = $12;
  $13 = $1;
  $14 = ((($13)) + 160|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_nk_buffer_total($15)|0);
  $3 = $16;
  $17 = $2;
  $18 = $3;
  $19 = $1;
  $20 = ((($19)) + 184|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($18) - ($21))|0;
  $23 = (($17) + ($22)|0);
  $4 = $23;
  $24 = $4;
  $25 = $1;
  $26 = ((($25)) + 180|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) - 1)|0;
  $29 = (0 - ($28))|0;
  $30 = (($24) + (($29*24)|0)|0);
  STACKTOP = sp;return ($30|0);
 } else {
  ___assert_fail((22341|0),(1320|0),6692,(22357|0));
  // unreachable;
 }
 return (0)|0;
}
function _nk_draw_list_push_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nk_null_rect$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 48|0;
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $nk_null_rect$byval_copy = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2245|0),(1320|0),6718,(22383|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ((($8)) + 180|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 $12 = $2;
 if (!($11)) {
  ;HEAP32[$nk_null_rect$byval_copy>>2]=HEAP32[8>>2]|0;HEAP32[$nk_null_rect$byval_copy+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$nk_null_rect$byval_copy+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$nk_null_rect$byval_copy+12>>2]=HEAP32[8+12>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
  (_nk_draw_list_push_command($12,$nk_null_rect$byval_copy,$$byval_copy)|0);
  STACKTOP = sp;return;
 }
 $13 = (_nk_draw_list_command_last($12)|0);
 $3 = $13;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 $17 = $3;
 $18 = ((($17)) + 20|0);
 if ($16) {
  ;HEAP32[$18>>2]=HEAP32[$1>>2]|0;
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$1>>2]|0;
 $21 = ($19|0)!=($20|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $2;
 $23 = $3;
 $24 = ((($23)) + 4|0);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$24+12>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;
 (_nk_draw_list_push_command($22,$$byval_copy1,$$byval_copy2)|0);
 STACKTOP = sp;return;
}
function _nk_draw_list_alloc_path($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 160|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $4;
 $11 = $10<<3;
 $12 = (_nk_buffer_alloc($9,0,$11,4)|0);
 $5 = $12;
 $13 = $5;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $2 = 0;
  $36 = $2;
  STACKTOP = sp;return ($36|0);
 }
 $15 = $3;
 $16 = ((($15)) + 192|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $19 = $3;
  $20 = ((($19)) + 160|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_nk_buffer_memory($21)|0);
  $6 = $22;
  $23 = $5;
  $24 = $6;
  $25 = $23;
  $26 = $24;
  $27 = (($25) - ($26))|0;
  $28 = $3;
  $29 = ((($28)) + 192|0);
  HEAP32[$29>>2] = $27;
 }
 $30 = $4;
 $31 = $3;
 $32 = ((($31)) + 188|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30))|0;
 HEAP32[$32>>2] = $34;
 $35 = $5;
 $2 = $35;
 $36 = $2;
 STACKTOP = sp;return ($36|0);
}
function _nk_draw_list_path_arc_to_fast($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 48|0;
 $10 = sp + 16|0;
 $13 = sp;
 $5 = $0;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = 0;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2245|0),(1320|0),7323,(2529|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $7;
 $19 = $8;
 $20 = ($18|0)<=($19|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $7;
 $9 = $21;
 while(1) {
  $22 = $9;
  $23 = $8;
  $24 = ($22|0)<=($23|0);
  if (!($24)) {
   break;
  }
  $25 = $9;
  $26 = (($25>>>0) % 12)&-1;
  $27 = $5;
  $28 = ((($27)) + 16|0);
  $29 = (($28) + ($26<<3)|0);
  ;HEAP32[$10>>2]=HEAP32[$29>>2]|0;HEAP32[$10+4>>2]=HEAP32[$29+4>>2]|0;
  $30 = +HEAPF32[$1>>2];
  $31 = +HEAPF32[$10>>2];
  $32 = $6;
  $33 = $31 * $32;
  $34 = $30 + $33;
  $11 = $34;
  $35 = ((($1)) + 4|0);
  $36 = +HEAPF32[$35>>2];
  $37 = ((($10)) + 4|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $6;
  $40 = $38 * $39;
  $41 = $36 + $40;
  $12 = $41;
  $42 = $5;
  $43 = $11;
  $44 = $12;
  _nk_vec2($13,$43,$44);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;
  _nk_draw_list_path_line_to($42,$$byval_copy);
  $45 = $9;
  $46 = (($45) + 1)|0;
  $9 = $46;
 }
 STACKTOP = sp;return;
}
function _nk_draw_list_path_arc_to($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 48|0;
 $15 = sp;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = 0;
 $16 = $6;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((2245|0),(1320|0),7340,(2559|0));
  // unreachable;
 }
 $18 = $6;
 $19 = ($18|0)==(0|0);
 $20 = $7;
 $21 = $20 == 0.0;
 $or$cond = $19 | $21;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $11 = 0;
 while(1) {
  $22 = $11;
  $23 = $10;
  $24 = ($22>>>0)<=($23>>>0);
  if (!($24)) {
   break;
  }
  $25 = $8;
  $26 = $11;
  $27 = (+($26>>>0));
  $28 = $10;
  $29 = (+($28>>>0));
  $30 = $27 / $29;
  $31 = $9;
  $32 = $8;
  $33 = $31 - $32;
  $34 = $30 * $33;
  $35 = $25 + $34;
  $12 = $35;
  $36 = +HEAPF32[$1>>2];
  $37 = $12;
  $38 = (+_nk_cos($37));
  $39 = $7;
  $40 = $38 * $39;
  $41 = $36 + $40;
  $13 = $41;
  $42 = ((($1)) + 4|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $12;
  $45 = (+_nk_sin($44));
  $46 = $7;
  $47 = $45 * $46;
  $48 = $43 + $47;
  $14 = $48;
  $49 = $6;
  $50 = $13;
  $51 = $14;
  _nk_vec2($15,$50,$51);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$15+4>>2]|0;
  _nk_draw_list_path_line_to($49,$$byval_copy);
  $52 = $11;
  $53 = (($52) + 1)|0;
  $11 = $53;
 }
 STACKTOP = sp;return;
}
function _nk_draw_list_path_rect_to($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0;
 var $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy7 = sp + 120|0;
 $$byval_copy6 = sp + 112|0;
 $$byval_copy5 = sp + 104|0;
 $$byval_copy4 = sp + 96|0;
 $$byval_copy3 = sp + 88|0;
 $$byval_copy2 = sp + 80|0;
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 64|0;
 $7 = sp + 40|0;
 $8 = sp + 32|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp;
 $4 = $0;
 $5 = $3;
 $13 = $4;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((2245|0),(1320|0),7356,(2584|0));
  // unreachable;
 }
 $15 = $4;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $5;
 $6 = $17;
 $18 = $6;
 $19 = +HEAPF32[$2>>2];
 $20 = +HEAPF32[$1>>2];
 $21 = $19 - $20;
 $22 = $21 < 0.0;
 $23 = +HEAPF32[$2>>2];
 $24 = +HEAPF32[$1>>2];
 $25 = $23 - $24;
 $26 = -$25;
 $27 = $22 ? $26 : $25;
 $28 = $18 < $27;
 if ($28) {
  $29 = $6;
  $39 = $29;
 } else {
  $30 = +HEAPF32[$2>>2];
  $31 = +HEAPF32[$1>>2];
  $32 = $30 - $31;
  $33 = $32 < 0.0;
  $34 = +HEAPF32[$2>>2];
  $35 = +HEAPF32[$1>>2];
  $36 = $34 - $35;
  $37 = -$36;
  $38 = $33 ? $37 : $36;
  $39 = $38;
 }
 $6 = $39;
 $40 = $6;
 $41 = ((($2)) + 4|0);
 $42 = +HEAPF32[$41>>2];
 $43 = ((($1)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $42 - $44;
 $46 = $45 < 0.0;
 $47 = ((($2)) + 4|0);
 $48 = +HEAPF32[$47>>2];
 $49 = ((($1)) + 4|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $48 - $50;
 $52 = -$51;
 $53 = $46 ? $52 : $51;
 $54 = $40 < $53;
 if ($54) {
  $55 = $6;
  $69 = $55;
 } else {
  $56 = ((($2)) + 4|0);
  $57 = +HEAPF32[$56>>2];
  $58 = ((($1)) + 4|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $57 - $59;
  $61 = $60 < 0.0;
  $62 = ((($2)) + 4|0);
  $63 = +HEAPF32[$62>>2];
  $64 = ((($1)) + 4|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $63 - $65;
  $67 = -$66;
  $68 = $61 ? $67 : $66;
  $69 = $68;
 }
 $6 = $69;
 $70 = $6;
 $71 = $70 == 0.0;
 $72 = $4;
 if ($71) {
  ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
  _nk_draw_list_path_line_to($72,$$byval_copy);
  $73 = $4;
  $74 = +HEAPF32[$2>>2];
  $75 = ((($1)) + 4|0);
  $76 = +HEAPF32[$75>>2];
  _nk_vec2($7,$74,$76);
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$7+4>>2]|0;
  _nk_draw_list_path_line_to($73,$$byval_copy1);
  $77 = $4;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$2+4>>2]|0;
  _nk_draw_list_path_line_to($77,$$byval_copy2);
  $78 = $4;
  $79 = +HEAPF32[$1>>2];
  $80 = ((($2)) + 4|0);
  $81 = +HEAPF32[$80>>2];
  _nk_vec2($8,$79,$81);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$8+4>>2]|0;
  _nk_draw_list_path_line_to($78,$$byval_copy3);
  STACKTOP = sp;return;
 } else {
  $82 = +HEAPF32[$1>>2];
  $83 = $6;
  $84 = $82 + $83;
  $85 = ((($1)) + 4|0);
  $86 = +HEAPF32[$85>>2];
  $87 = $6;
  $88 = $86 + $87;
  _nk_vec2($9,$84,$88);
  $89 = $6;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$9+4>>2]|0;
  _nk_draw_list_path_arc_to_fast($72,$$byval_copy4,$89,6,9);
  $90 = $4;
  $91 = +HEAPF32[$2>>2];
  $92 = $6;
  $93 = $91 - $92;
  $94 = ((($1)) + 4|0);
  $95 = +HEAPF32[$94>>2];
  $96 = $6;
  $97 = $95 + $96;
  _nk_vec2($10,$93,$97);
  $98 = $6;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$10+4>>2]|0;
  _nk_draw_list_path_arc_to_fast($90,$$byval_copy5,$98,9,12);
  $99 = $4;
  $100 = +HEAPF32[$2>>2];
  $101 = $6;
  $102 = $100 - $101;
  $103 = ((($2)) + 4|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $6;
  $106 = $104 - $105;
  _nk_vec2($11,$102,$106);
  $107 = $6;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$11+4>>2]|0;
  _nk_draw_list_path_arc_to_fast($99,$$byval_copy6,$107,0,3);
  $108 = $4;
  $109 = +HEAPF32[$1>>2];
  $110 = $6;
  $111 = $109 + $110;
  $112 = ((($2)) + 4|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $6;
  $115 = $113 - $114;
  _nk_vec2($12,$111,$115);
  $116 = $6;
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$12+4>>2]|0;
  _nk_draw_list_path_arc_to_fast($108,$$byval_copy7,$116,3,6);
  STACKTOP = sp;return;
 }
}
function _nk_draw_list_path_curve_to($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0;
 var $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0;
 var $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 72|0;
 $9 = sp + 48|0;
 $10 = sp + 40|0;
 $19 = sp;
 $5 = $0;
 $6 = $4;
 $20 = $5;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((2245|0),(1320|0),7383,(2610|0));
  // unreachable;
 }
 $22 = $5;
 $23 = ((($22)) + 188|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  ___assert_fail((2637|0),(1320|0),7384,(2610|0));
  // unreachable;
 }
 $26 = $5;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $5;
 $29 = ((($28)) + 188|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $6;
 $33 = ($32>>>0)<(1);
 $34 = $6;
 $35 = $33 ? 1 : $34;
 $6 = $35;
 $36 = $5;
 _nk_draw_list_path_last($10,$36);
 ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;
 $37 = $6;
 $38 = (+($37>>>0));
 $39 = 1.0 / $38;
 $7 = $39;
 $8 = 1;
 while(1) {
  $40 = $8;
  $41 = $6;
  $42 = ($40>>>0)<=($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = $7;
  $44 = $8;
  $45 = (+($44>>>0));
  $46 = $43 * $45;
  $11 = $46;
  $47 = $11;
  $48 = 1.0 - $47;
  $12 = $48;
  $49 = $12;
  $50 = $12;
  $51 = $49 * $50;
  $52 = $12;
  $53 = $51 * $52;
  $13 = $53;
  $54 = $12;
  $55 = 3.0 * $54;
  $56 = $12;
  $57 = $55 * $56;
  $58 = $11;
  $59 = $57 * $58;
  $14 = $59;
  $60 = $12;
  $61 = 3.0 * $60;
  $62 = $11;
  $63 = $61 * $62;
  $64 = $11;
  $65 = $63 * $64;
  $15 = $65;
  $66 = $11;
  $67 = $11;
  $68 = $66 * $67;
  $69 = $11;
  $70 = $68 * $69;
  $16 = $70;
  $71 = $13;
  $72 = +HEAPF32[$9>>2];
  $73 = $71 * $72;
  $74 = $14;
  $75 = +HEAPF32[$1>>2];
  $76 = $74 * $75;
  $77 = $73 + $76;
  $78 = $15;
  $79 = +HEAPF32[$2>>2];
  $80 = $78 * $79;
  $81 = $77 + $80;
  $82 = $16;
  $83 = +HEAPF32[$3>>2];
  $84 = $82 * $83;
  $85 = $81 + $84;
  $17 = $85;
  $86 = $13;
  $87 = ((($9)) + 4|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $86 * $88;
  $90 = $14;
  $91 = ((($1)) + 4|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $90 * $92;
  $94 = $89 + $93;
  $95 = $15;
  $96 = ((($2)) + 4|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $95 * $97;
  $99 = $94 + $98;
  $100 = $16;
  $101 = ((($3)) + 4|0);
  $102 = +HEAPF32[$101>>2];
  $103 = $100 * $102;
  $104 = $99 + $103;
  $18 = $104;
  $105 = $5;
  $106 = $17;
  $107 = $18;
  _nk_vec2($19,$106,$107);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$19+4>>2]|0;
  _nk_draw_list_path_line_to($105,$$byval_copy);
  $108 = $8;
  $109 = (($108) + 1)|0;
  $8 = $109;
 }
 STACKTOP = sp;return;
}
function _nk_draw_list_path_last($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $5 = $2;
 $6 = ((($5)) + 188|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 160|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_nk_buffer_memory($11)|0);
  $3 = $12;
  $13 = $3;
  $14 = $2;
  $15 = ((($14)) + 192|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13) + ($16)|0);
  $4 = $17;
  $18 = $2;
  $19 = ((($18)) + 188|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) - 1)|0;
  $22 = $4;
  $23 = (($22) + ($21<<3)|0);
  $4 = $23;
  $24 = $4;
  ;HEAP32[$0>>2]=HEAP32[$24>>2]|0;HEAP32[$0+4>>2]=HEAP32[$24+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2637|0),(1320|0),6647,(22407|0));
  // unreachable;
 }
}
function _nk_draw_list_path_fill($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2245|0),(1320|0),7407,(2654|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ((($8)) + 160|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_nk_buffer_memory($10)|0);
 $3 = $11;
 $12 = $2;
 $13 = $3;
 $14 = $2;
 $15 = ((($14)) + 188|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 112|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _nk_draw_list_fill_poly_convex($12,$13,$16,$$byval_copy,$20);
 $21 = $2;
 _nk_draw_list_path_clear($21);
 STACKTOP = sp;return;
}
function _nk_draw_list_path_stroke($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $2;
 $6 = $3;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2245|0),(1320|0),7419,(2677|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $4;
 $13 = ((($12)) + 160|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_nk_buffer_memory($14)|0);
 $7 = $15;
 $16 = $4;
 $17 = $7;
 $18 = $4;
 $19 = ((($18)) + 188|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = $6;
 $23 = $4;
 $24 = ((($23)) + 112|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _nk_draw_list_stroke_poly_line($16,$17,$20,$$byval_copy,$21,$22,$26);
 $27 = $4;
 _nk_draw_list_path_clear($27);
 STACKTOP = sp;return;
}
function _nk_draw_list_stroke_line($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy2 = sp + 72|0;
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $7 = sp + 40|0;
 $8 = sp + 32|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp;
 $5 = $0;
 $6 = $4;
 $13 = $5;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((2245|0),(1320|0),7431,(2702|0));
  // unreachable;
 }
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = ((($3)) + 3|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)!=(0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $5;
 $21 = +HEAPF32[$1>>2];
 _nk_vec2($8,0.5,0.5);
 $22 = +HEAPF32[$8>>2];
 $23 = $21 + $22;
 $24 = ((($1)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 _nk_vec2($9,0.5,0.5);
 $26 = ((($9)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $25 + $27;
 _nk_vec2($7,$23,$28);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 _nk_draw_list_path_line_to($20,$$byval_copy);
 $29 = $5;
 $30 = +HEAPF32[$2>>2];
 _nk_vec2($11,0.5,0.5);
 $31 = +HEAPF32[$11>>2];
 $32 = $30 + $31;
 $33 = ((($2)) + 4|0);
 $34 = +HEAPF32[$33>>2];
 _nk_vec2($12,0.5,0.5);
 $35 = ((($12)) + 4|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $34 + $36;
 _nk_vec2($10,$32,$37);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$10+4>>2]|0;
 _nk_draw_list_path_line_to($29,$$byval_copy1);
 $38 = $5;
 $39 = $6;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$3+3>>0]|0;
 _nk_draw_list_path_stroke($38,$$byval_copy2,0,$39);
 STACKTOP = sp;return;
}
function _nk_draw_list_fill_rect($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy2 = sp + 40|0;
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $6 = sp + 8|0;
 $7 = sp;
 $4 = $0;
 $5 = $3;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2245|0),(1320|0),7442,(2727|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ((($2)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $4;
 $16 = +HEAPF32[$1>>2];
 $17 = $16 + 0.5;
 $18 = ((($1)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $19 + 0.5;
 _nk_vec2($6,$17,$20);
 $21 = +HEAPF32[$1>>2];
 $22 = ((($1)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $21 + $23;
 $25 = $24 + 0.5;
 $26 = ((($1)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = ((($1)) + 12|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $27 + $29;
 $31 = $30 + 0.5;
 _nk_vec2($7,$25,$31);
 $32 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$7+4>>2]|0;
 _nk_draw_list_path_rect_to($15,$$byval_copy,$$byval_copy1,$32);
 $33 = $4;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$2+3>>0]|0;
 _nk_draw_list_path_fill($33,$$byval_copy2);
 STACKTOP = sp;return;
}
function _nk_draw_list_stroke_rect($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 48|0;
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $8 = sp + 8|0;
 $9 = sp;
 $5 = $0;
 $6 = $3;
 $7 = $4;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((2245|0),(1320|0),7453,(2750|0));
  // unreachable;
 }
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = ((($2)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $5;
 $18 = +HEAPF32[$1>>2];
 $19 = $18 + 0.5;
 $20 = ((($1)) + 4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $21 + 0.5;
 _nk_vec2($8,$19,$22);
 $23 = +HEAPF32[$1>>2];
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $23 + $25;
 $27 = $26 + 0.5;
 $28 = ((($1)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = ((($1)) + 12|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $29 + $31;
 $33 = $32 + 0.5;
 _nk_vec2($9,$27,$33);
 $34 = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$9+4>>2]|0;
 _nk_draw_list_path_rect_to($17,$$byval_copy,$$byval_copy1,$34);
 $35 = $5;
 $36 = $7;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$2+3>>0]|0;
 _nk_draw_list_path_stroke($35,$$byval_copy2,1,$36);
 STACKTOP = sp;return;
}
function _nk_draw_list_fill_rect_multi_color($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0.0;
 var $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy17 = sp + 232|0;
 $$byval_copy16 = sp + 224|0;
 $$byval_copy15 = sp + 216|0;
 $$byval_copy14 = sp + 200|0;
 $$byval_copy13 = sp + 192|0;
 $$byval_copy12 = sp + 184|0;
 $$byval_copy11 = sp + 168|0;
 $$byval_copy10 = sp + 160|0;
 $$byval_copy9 = sp + 152|0;
 $$byval_copy8 = sp + 136|0;
 $$byval_copy7 = sp + 128|0;
 $$byval_copy6 = sp + 120|0;
 $$byval_copy5 = sp + 112|0;
 $$byval_copy4 = sp + 264|0;
 $$byval_copy3 = sp + 260|0;
 $$byval_copy2 = sp + 256|0;
 $$byval_copy = sp + 252|0;
 $8 = sp + 88|0;
 $9 = sp + 72|0;
 $10 = sp + 56|0;
 $11 = sp + 40|0;
 $14 = sp + 24|0;
 $15 = sp + 16|0;
 $16 = sp + 8|0;
 $17 = sp;
 $6 = $0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$2+3>>0]|0;
 _nk_color_fv($8,$$byval_copy);
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$4+3>>0]|0;
 _nk_color_fv($10,$$byval_copy2);
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$3+3>>0]|0;
 _nk_color_fv($9,$$byval_copy3);
 ;HEAP8[$$byval_copy4>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$5+3>>0]|0;
 _nk_color_fv($11,$$byval_copy4);
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((2245|0),(1320|0),7476,(2775|0));
  // unreachable;
 }
 $20 = $6;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $6;
 $23 = $6;
 $24 = ((($23)) + 112|0);
 $25 = ((($24)) + 24|0);
 ;HEAP32[$$byval_copy5>>2]=HEAP32[$25>>2]|0;
 _nk_draw_list_push_image($22,$$byval_copy5);
 $26 = $6;
 $27 = ((($26)) + 176|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28&65535;
 $13 = $29;
 $30 = $6;
 $31 = (_nk_draw_list_alloc_vertices($30,4)|0);
 $7 = $31;
 $32 = $6;
 $33 = (_nk_draw_list_alloc_elements($32,6)|0);
 $12 = $33;
 $34 = $7;
 $35 = ($34|0)!=(0|0);
 $36 = $12;
 $37 = ($36|0)!=(0|0);
 $or$cond = $35 & $37;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $38 = $13;
 $39 = $38&65535;
 $40 = (($39) + 0)|0;
 $41 = $40&65535;
 $42 = $12;
 HEAP16[$42>>1] = $41;
 $43 = $13;
 $44 = $43&65535;
 $45 = (($44) + 1)|0;
 $46 = $45&65535;
 $47 = $12;
 $48 = ((($47)) + 2|0);
 HEAP16[$48>>1] = $46;
 $49 = $13;
 $50 = $49&65535;
 $51 = (($50) + 2)|0;
 $52 = $51&65535;
 $53 = $12;
 $54 = ((($53)) + 4|0);
 HEAP16[$54>>1] = $52;
 $55 = $13;
 $56 = $55&65535;
 $57 = (($56) + 0)|0;
 $58 = $57&65535;
 $59 = $12;
 $60 = ((($59)) + 6|0);
 HEAP16[$60>>1] = $58;
 $61 = $13;
 $62 = $61&65535;
 $63 = (($62) + 2)|0;
 $64 = $63&65535;
 $65 = $12;
 $66 = ((($65)) + 8|0);
 HEAP16[$66>>1] = $64;
 $67 = $13;
 $68 = $67&65535;
 $69 = (($68) + 3)|0;
 $70 = $69&65535;
 $71 = $12;
 $72 = ((($71)) + 10|0);
 HEAP16[$72>>1] = $70;
 $73 = $7;
 $74 = $6;
 $75 = ((($74)) + 112|0);
 $76 = +HEAPF32[$1>>2];
 $77 = ((($1)) + 4|0);
 $78 = +HEAPF32[$77>>2];
 _nk_vec2($14,$76,$78);
 $79 = $6;
 $80 = ((($79)) + 112|0);
 $81 = ((($80)) + 24|0);
 $82 = ((($81)) + 4|0);
 ;HEAP32[$$byval_copy6>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$14+4>>2]|0;
 ;HEAP32[$$byval_copy7>>2]=HEAP32[$82>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$82+4>>2]|0;
 ;HEAP32[$$byval_copy8>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$8+12>>2]|0;
 $83 = (_nk_draw_vertex($73,$75,$$byval_copy6,$$byval_copy7,$$byval_copy8)|0);
 $7 = $83;
 $84 = $7;
 $85 = $6;
 $86 = ((($85)) + 112|0);
 $87 = +HEAPF32[$1>>2];
 $88 = ((($1)) + 8|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $87 + $89;
 $91 = ((($1)) + 4|0);
 $92 = +HEAPF32[$91>>2];
 _nk_vec2($15,$90,$92);
 $93 = $6;
 $94 = ((($93)) + 112|0);
 $95 = ((($94)) + 24|0);
 $96 = ((($95)) + 4|0);
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$15+4>>2]|0;
 ;HEAP32[$$byval_copy10>>2]=HEAP32[$96>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$96+4>>2]|0;
 ;HEAP32[$$byval_copy11>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$9+12>>2]|0;
 $97 = (_nk_draw_vertex($84,$86,$$byval_copy9,$$byval_copy10,$$byval_copy11)|0);
 $7 = $97;
 $98 = $7;
 $99 = $6;
 $100 = ((($99)) + 112|0);
 $101 = +HEAPF32[$1>>2];
 $102 = ((($1)) + 8|0);
 $103 = +HEAPF32[$102>>2];
 $104 = $101 + $103;
 $105 = ((($1)) + 4|0);
 $106 = +HEAPF32[$105>>2];
 $107 = ((($1)) + 12|0);
 $108 = +HEAPF32[$107>>2];
 $109 = $106 + $108;
 _nk_vec2($16,$104,$109);
 $110 = $6;
 $111 = ((($110)) + 112|0);
 $112 = ((($111)) + 24|0);
 $113 = ((($112)) + 4|0);
 ;HEAP32[$$byval_copy12>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$16+4>>2]|0;
 ;HEAP32[$$byval_copy13>>2]=HEAP32[$113>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$113+4>>2]|0;
 ;HEAP32[$$byval_copy14>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy14+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy14+12>>2]=HEAP32[$10+12>>2]|0;
 $114 = (_nk_draw_vertex($98,$100,$$byval_copy12,$$byval_copy13,$$byval_copy14)|0);
 $7 = $114;
 $115 = $7;
 $116 = $6;
 $117 = ((($116)) + 112|0);
 $118 = +HEAPF32[$1>>2];
 $119 = ((($1)) + 4|0);
 $120 = +HEAPF32[$119>>2];
 $121 = ((($1)) + 12|0);
 $122 = +HEAPF32[$121>>2];
 $123 = $120 + $122;
 _nk_vec2($17,$118,$123);
 $124 = $6;
 $125 = ((($124)) + 112|0);
 $126 = ((($125)) + 24|0);
 $127 = ((($126)) + 4|0);
 ;HEAP32[$$byval_copy15>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$17+4>>2]|0;
 ;HEAP32[$$byval_copy16>>2]=HEAP32[$127>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$127+4>>2]|0;
 ;HEAP32[$$byval_copy17>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy17+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$$byval_copy17+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$$byval_copy17+12>>2]=HEAP32[$11+12>>2]|0;
 $128 = (_nk_draw_vertex($115,$117,$$byval_copy15,$$byval_copy16,$$byval_copy17)|0);
 $7 = $128;
 STACKTOP = sp;return;
}
function _nk_draw_list_fill_triangle($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy3 = sp + 32|0;
 $$byval_copy2 = sp + 24|0;
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 8|0;
 $5 = $0;
 $6 = $5;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2245|0),(1320|0),7499,(2810|0));
  // unreachable;
 }
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ((($4)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _nk_draw_list_path_line_to($13,$$byval_copy);
 $14 = $5;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
 _nk_draw_list_path_line_to($14,$$byval_copy1);
 $15 = $5;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
 _nk_draw_list_path_line_to($15,$$byval_copy2);
 $16 = $5;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$4+3>>0]|0;
 _nk_draw_list_path_fill($16,$$byval_copy3);
 STACKTOP = sp;return;
}
function _nk_draw_list_stroke_triangle($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy3 = sp + 32|0;
 $$byval_copy2 = sp + 24|0;
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 8|0;
 $6 = $0;
 $7 = $5;
 $8 = $6;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2245|0),(1320|0),7511,(2837|0));
  // unreachable;
 }
 $10 = $6;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ((($4)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _nk_draw_list_path_line_to($15,$$byval_copy);
 $16 = $6;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
 _nk_draw_list_path_line_to($16,$$byval_copy1);
 $17 = $6;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
 _nk_draw_list_path_line_to($17,$$byval_copy2);
 $18 = $6;
 $19 = $7;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$4+3>>0]|0;
 _nk_draw_list_path_stroke($18,$$byval_copy3,1,$19);
 STACKTOP = sp;return;
}
function _nk_draw_list_fill_circle($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 16|0;
 $5 = $0;
 $6 = $2;
 $7 = $4;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((2245|0),(1320|0),7524,(2866|0));
  // unreachable;
 }
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = ((($3)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $7;
 $17 = (+($16>>>0));
 $18 = $17 - 1.0;
 $19 = 6.2831854820251465 * $18;
 $20 = $7;
 $21 = (+($20>>>0));
 $22 = $19 / $21;
 $8 = $22;
 $23 = $5;
 $24 = $6;
 $25 = $8;
 $26 = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _nk_draw_list_path_arc_to($23,$$byval_copy,$24,0.0,$25,$26);
 $27 = $5;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$3+3>>0]|0;
 _nk_draw_list_path_fill($27,$$byval_copy1);
 STACKTOP = sp;return;
}
function _nk_draw_list_stroke_circle($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $30 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 24|0;
 $6 = $0;
 $7 = $2;
 $8 = $4;
 $9 = $5;
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((2245|0),(1320|0),7536,(2891|0));
  // unreachable;
 }
 $13 = $6;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ((($3)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)!=(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $8;
 $19 = (+($18>>>0));
 $20 = $19 - 1.0;
 $21 = 6.2831854820251465 * $20;
 $22 = $8;
 $23 = (+($22>>>0));
 $24 = $21 / $23;
 $10 = $24;
 $25 = $6;
 $26 = $7;
 $27 = $10;
 $28 = $8;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _nk_draw_list_path_arc_to($25,$$byval_copy,$26,0.0,$27,$28);
 $29 = $6;
 $30 = $9;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$3+3>>0]|0;
 _nk_draw_list_path_stroke($29,$$byval_copy1,1,$30);
 STACKTOP = sp;return;
}
function _nk_draw_list_stroke_curve($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy4 = sp + 48|0;
 $$byval_copy3 = sp + 40|0;
 $$byval_copy2 = sp + 32|0;
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 16|0;
 $8 = $0;
 $9 = $6;
 $10 = $7;
 $11 = $8;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((2245|0),(1320|0),7548,(2918|0));
  // unreachable;
 }
 $13 = $8;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ((($5)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)!=(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $8;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 _nk_draw_list_path_line_to($18,$$byval_copy);
 $19 = $8;
 $20 = $9;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$4+4>>2]|0;
 _nk_draw_list_path_curve_to($19,$$byval_copy1,$$byval_copy2,$$byval_copy3,$20);
 $21 = $8;
 $22 = $10;
 ;HEAP8[$$byval_copy4>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$5+3>>0]|0;
 _nk_draw_list_path_stroke($21,$$byval_copy4,0,$22);
 STACKTOP = sp;return;
}
function _nk_draw_list_add_image($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0;
 var $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy10 = sp + 140|0;
 $$byval_copy9 = sp + 128|0;
 $$byval_copy8 = sp + 120|0;
 $$byval_copy7 = sp + 112|0;
 $$byval_copy6 = sp + 104|0;
 $$byval_copy5 = sp + 136|0;
 $$byval_copy4 = sp + 96|0;
 $$byval_copy3 = sp + 88|0;
 $$byval_copy2 = sp + 80|0;
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 68|0;
 $5 = sp + 48|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $4 = $0;
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2245|0),(1320|0),7597,(2944|0));
  // unreachable;
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
 _nk_draw_list_push_image($16,$$byval_copy);
 $17 = (_nk_image_is_subimage($1)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = ((($1)) + 8|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = (+($20&65535));
  $22 = ((($1)) + 4|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = (+($23&65535));
  $25 = $21 / $24;
  HEAPF32[$5>>2] = $25;
  $26 = ((($1)) + 8|0);
  $27 = ((($26)) + 2|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = (+($28&65535));
  $30 = ((($1)) + 6|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = (+($31&65535));
  $33 = $29 / $32;
  $34 = ((($5)) + 4|0);
  HEAPF32[$34>>2] = $33;
  $35 = ((($1)) + 8|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = ((($1)) + 8|0);
  $39 = ((($38)) + 4|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = (($37) + ($41))|0;
  $43 = (+($42|0));
  $44 = ((($1)) + 4|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = (+($45&65535));
  $47 = $43 / $46;
  $48 = ((($5)) + 8|0);
  HEAPF32[$48>>2] = $47;
  $49 = ((($1)) + 8|0);
  $50 = ((($49)) + 2|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51&65535;
  $53 = ((($1)) + 8|0);
  $54 = ((($53)) + 6|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = (($52) + ($56))|0;
  $58 = (+($57|0));
  $59 = ((($1)) + 6|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = (+($60&65535));
  $62 = $58 / $61;
  $63 = ((($5)) + 8|0);
  $64 = ((($63)) + 4|0);
  HEAPF32[$64>>2] = $62;
  $65 = $4;
  $66 = +HEAPF32[$2>>2];
  $67 = ((($2)) + 4|0);
  $68 = +HEAPF32[$67>>2];
  _nk_vec2($6,$66,$68);
  $69 = +HEAPF32[$2>>2];
  $70 = ((($2)) + 8|0);
  $71 = +HEAPF32[$70>>2];
  $72 = $69 + $71;
  $73 = ((($2)) + 4|0);
  $74 = +HEAPF32[$73>>2];
  $75 = ((($2)) + 12|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $74 + $76;
  _nk_vec2($7,$72,$77);
  $78 = ((($5)) + 8|0);
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$6+4>>2]|0;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$7+4>>2]|0;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$5+4>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$78>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$78+4>>2]|0;
  ;HEAP8[$$byval_copy5>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy5+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy5+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy5+3>>0]=HEAP8[$3+3>>0]|0;
  _nk_draw_list_push_rect_uv($65,$$byval_copy1,$$byval_copy2,$$byval_copy3,$$byval_copy4,$$byval_copy5);
  STACKTOP = sp;return;
 } else {
  $79 = $4;
  $80 = +HEAPF32[$2>>2];
  $81 = ((($2)) + 4|0);
  $82 = +HEAPF32[$81>>2];
  _nk_vec2($8,$80,$82);
  $83 = +HEAPF32[$2>>2];
  $84 = ((($2)) + 8|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $83 + $85;
  $87 = ((($2)) + 4|0);
  $88 = +HEAPF32[$87>>2];
  $89 = ((($2)) + 12|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $88 + $90;
  _nk_vec2($9,$86,$91);
  _nk_vec2($10,0.0,0.0);
  _nk_vec2($11,1.0,1.0);
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$8+4>>2]|0;
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$9+4>>2]|0;
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$10+4>>2]|0;
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$11+4>>2]|0;
  ;HEAP8[$$byval_copy10>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy10+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy10+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy10+3>>0]=HEAP8[$3+3>>0]|0;
  _nk_draw_list_push_rect_uv($79,$$byval_copy6,$$byval_copy7,$$byval_copy8,$$byval_copy9,$$byval_copy10);
  STACKTOP = sp;return;
 }
}
function _nk_draw_list_push_rect_uv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy13 = sp + 208|0;
 $$byval_copy12 = sp + 200|0;
 $$byval_copy11 = sp + 192|0;
 $$byval_copy10 = sp + 176|0;
 $$byval_copy9 = sp + 168|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 144|0;
 $$byval_copy6 = sp + 136|0;
 $$byval_copy5 = sp + 128|0;
 $$byval_copy4 = sp + 112|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 96|0;
 $$byval_copy = sp + 228|0;
 $8 = sp + 80|0;
 $9 = sp + 72|0;
 $10 = sp + 64|0;
 $11 = sp + 56|0;
 $12 = sp + 40|0;
 $15 = sp + 24|0;
 $16 = sp + 16|0;
 $17 = sp + 8|0;
 $18 = sp;
 $6 = $0;
 $19 = $6;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((2245|0),(1320|0),7569,(22430|0));
  // unreachable;
 }
 $21 = $6;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 ;HEAP8[$$byval_copy>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$5+3>>0]|0;
 _nk_color_fv($12,$$byval_copy);
 $23 = +HEAPF32[$4>>2];
 $24 = ((($3)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 _nk_vec2($15,$23,$25);
 ;HEAP32[$8>>2]=HEAP32[$15>>2]|0;HEAP32[$8+4>>2]=HEAP32[$15+4>>2]|0;
 $26 = +HEAPF32[$3>>2];
 $27 = ((($4)) + 4|0);
 $28 = +HEAPF32[$27>>2];
 _nk_vec2($16,$26,$28);
 ;HEAP32[$9>>2]=HEAP32[$16>>2]|0;HEAP32[$9+4>>2]=HEAP32[$16+4>>2]|0;
 $29 = +HEAPF32[$2>>2];
 $30 = ((($1)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 _nk_vec2($17,$29,$31);
 ;HEAP32[$10>>2]=HEAP32[$17>>2]|0;HEAP32[$10+4>>2]=HEAP32[$17+4>>2]|0;
 $32 = +HEAPF32[$1>>2];
 $33 = ((($2)) + 4|0);
 $34 = +HEAPF32[$33>>2];
 _nk_vec2($18,$32,$34);
 ;HEAP32[$11>>2]=HEAP32[$18>>2]|0;HEAP32[$11+4>>2]=HEAP32[$18+4>>2]|0;
 $35 = $6;
 $36 = ((($35)) + 176|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37&65535;
 $14 = $38;
 $39 = $6;
 $40 = (_nk_draw_list_alloc_vertices($39,4)|0);
 $7 = $40;
 $41 = $6;
 $42 = (_nk_draw_list_alloc_elements($41,6)|0);
 $13 = $42;
 $43 = $7;
 $44 = ($43|0)!=(0|0);
 $45 = $13;
 $46 = ($45|0)!=(0|0);
 $or$cond = $44 & $46;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $47 = $14;
 $48 = $47&65535;
 $49 = (($48) + 0)|0;
 $50 = $49&65535;
 $51 = $13;
 HEAP16[$51>>1] = $50;
 $52 = $14;
 $53 = $52&65535;
 $54 = (($53) + 1)|0;
 $55 = $54&65535;
 $56 = $13;
 $57 = ((($56)) + 2|0);
 HEAP16[$57>>1] = $55;
 $58 = $14;
 $59 = $58&65535;
 $60 = (($59) + 2)|0;
 $61 = $60&65535;
 $62 = $13;
 $63 = ((($62)) + 4|0);
 HEAP16[$63>>1] = $61;
 $64 = $14;
 $65 = $64&65535;
 $66 = (($65) + 0)|0;
 $67 = $66&65535;
 $68 = $13;
 $69 = ((($68)) + 6|0);
 HEAP16[$69>>1] = $67;
 $70 = $14;
 $71 = $70&65535;
 $72 = (($71) + 2)|0;
 $73 = $72&65535;
 $74 = $13;
 $75 = ((($74)) + 8|0);
 HEAP16[$75>>1] = $73;
 $76 = $14;
 $77 = $76&65535;
 $78 = (($77) + 3)|0;
 $79 = $78&65535;
 $80 = $13;
 $81 = ((($80)) + 10|0);
 HEAP16[$81>>1] = $79;
 $82 = $7;
 $83 = $6;
 $84 = ((($83)) + 112|0);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$3+4>>2]|0;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$12+12>>2]|0;
 $85 = (_nk_draw_vertex($82,$84,$$byval_copy2,$$byval_copy3,$$byval_copy4)|0);
 $7 = $85;
 $86 = $7;
 $87 = $6;
 $88 = ((($87)) + 112|0);
 ;HEAP32[$$byval_copy5>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$10+4>>2]|0;
 ;HEAP32[$$byval_copy6>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$8+4>>2]|0;
 ;HEAP32[$$byval_copy7>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$12+12>>2]|0;
 $89 = (_nk_draw_vertex($86,$88,$$byval_copy5,$$byval_copy6,$$byval_copy7)|0);
 $7 = $89;
 $90 = $7;
 $91 = $6;
 $92 = ((($91)) + 112|0);
 ;HEAP32[$$byval_copy8>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$2+4>>2]|0;
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$4+4>>2]|0;
 ;HEAP32[$$byval_copy10>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$12+12>>2]|0;
 $93 = (_nk_draw_vertex($90,$92,$$byval_copy8,$$byval_copy9,$$byval_copy10)|0);
 $7 = $93;
 $94 = $7;
 $95 = $6;
 $96 = ((($95)) + 112|0);
 ;HEAP32[$$byval_copy11>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$11+4>>2]|0;
 ;HEAP32[$$byval_copy12>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$9+4>>2]|0;
 ;HEAP32[$$byval_copy13>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy13+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy13+12>>2]=HEAP32[$12+12>>2]|0;
 $97 = (_nk_draw_vertex($94,$96,$$byval_copy11,$$byval_copy12,$$byval_copy13)|0);
 $7 = $97;
 STACKTOP = sp;return;
}
function _nk_draw_list_add_text($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0;
 var $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy9 = sp + 160|0;
 $$byval_copy8 = sp + 152|0;
 $$byval_copy7 = sp + 144|0;
 $$byval_copy6 = sp + 136|0;
 $$byval_copy5 = sp + 128|0;
 $$byval_copy4 = sp + 120|0;
 $$byval_copy = sp + 116|0;
 $14 = sp + 84|0;
 $15 = sp + 80|0;
 $18 = sp + 36|0;
 $24 = sp + 8|0;
 $25 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0.0;
 $13 = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$15>>2] = 0;
 $16 = 0;
 $17 = 0;
 $26 = $7;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((2245|0),(1320|0),7628,(2967|0));
  // unreachable;
 }
 $28 = $7;
 $29 = ($28|0)!=(0|0);
 $30 = $10;
 $31 = ($30|0)!=(0);
 $or$cond = $29 & $31;
 $32 = $9;
 $33 = ($32|0)!=(0|0);
 $or$cond3 = $or$cond & $33;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $34 = $7;
 $35 = +HEAPF32[$34>>2];
 $36 = +HEAPF32[$2>>2];
 $37 = ((($2)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $36 + $38;
 $40 = $35 > $39;
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = $7;
 $42 = +HEAPF32[$41>>2];
 $43 = $7;
 $44 = ((($43)) + 8|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $42 + $45;
 $47 = +HEAPF32[$2>>2];
 $48 = $46 < $47;
 if ($48) {
  STACKTOP = sp;return;
 }
 $49 = $7;
 $50 = ((($49)) + 4|0);
 $51 = +HEAPF32[$50>>2];
 $52 = ((($2)) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = ((($2)) + 12|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $53 + $55;
 $57 = $51 > $56;
 if ($57) {
  STACKTOP = sp;return;
 }
 $58 = $7;
 $59 = ((($58)) + 4|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $7;
 $62 = ((($61)) + 12|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $60 + $63;
 $65 = ((($2)) + 4|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $64 < $66;
 if ($67) {
  STACKTOP = sp;return;
 }
 $68 = $7;
 $69 = $8;
 $70 = ((($69)) + 16|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$70>>2]|0;
 _nk_draw_list_push_image($68,$$byval_copy);
 $71 = +HEAPF32[$2>>2];
 $12 = $71;
 $72 = $9;
 $73 = $10;
 $74 = (_nk_utf_decode($72,$14,$73)|0);
 $16 = $74;
 $75 = $16;
 $76 = ($75|0)!=(0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = ((($6)) + 3|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = (+($78&255));
 $80 = $7;
 $81 = ((($80)) + 112|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $79 * $82;
 $84 = (~~(($83))&255);
 $85 = ((($6)) + 3|0);
 HEAP8[$85>>0] = $84;
 while(1) {
  $86 = $13;
  $87 = $10;
  $88 = ($86|0)<($87|0);
  $89 = $16;
  $90 = ($89|0)!=(0);
  $91 = $88 ? $90 : 0;
  if (!($91)) {
   label = 13;
   break;
  }
  $23 = 0.0;
  $92 = HEAP32[$14>>2]|0;
  $93 = ($92|0)==(65533);
  if ($93) {
   label = 13;
   break;
  }
  $94 = $9;
  $95 = $13;
  $96 = (($94) + ($95)|0);
  $97 = $16;
  $98 = (($96) + ($97)|0);
  $99 = $10;
  $100 = $13;
  $101 = (($99) - ($100))|0;
  $102 = (_nk_utf_decode($98,$15,$101)|0);
  $17 = $102;
  $103 = $8;
  $104 = ((($103)) + 12|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $8;
  $107 = $11;
  $108 = HEAP32[$14>>2]|0;
  $109 = HEAP32[$15>>2]|0;
  $110 = ($109|0)==(65533);
  $111 = HEAP32[$15>>2]|0;
  $112 = $110 ? 0 : $111;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$106>>2]|0;
  FUNCTION_TABLE_vidiii[$105 & 15]($$byval_copy4,$107,$18,$108,$112);
  $113 = $12;
  $114 = ((($18)) + 16|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $113 + $115;
  $19 = $116;
  $117 = ((($2)) + 4|0);
  $118 = +HEAPF32[$117>>2];
  $119 = ((($18)) + 16|0);
  $120 = ((($119)) + 4|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $118 + $121;
  $20 = $122;
  $123 = ((($18)) + 24|0);
  $124 = +HEAPF32[$123>>2];
  $22 = $124;
  $125 = ((($18)) + 28|0);
  $126 = +HEAPF32[$125>>2];
  $21 = $126;
  $127 = ((($18)) + 32|0);
  $128 = +HEAPF32[$127>>2];
  $23 = $128;
  $129 = $7;
  $130 = $19;
  $131 = $20;
  _nk_vec2($24,$130,$131);
  $132 = $19;
  $133 = $22;
  $134 = $132 + $133;
  $135 = $20;
  $136 = $21;
  $137 = $135 + $136;
  _nk_vec2($25,$134,$137);
  $138 = ((($18)) + 8|0);
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$24+4>>2]|0;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$25+4>>2]|0;
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$18+4>>2]|0;
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$138>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$138+4>>2]|0;
  ;HEAP8[$$byval_copy9>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy9+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy9+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy9+3>>0]=HEAP8[$6+3>>0]|0;
  _nk_draw_list_push_rect_uv($129,$$byval_copy5,$$byval_copy6,$$byval_copy7,$$byval_copy8,$$byval_copy9);
  $139 = $16;
  $140 = $13;
  $141 = (($140) + ($139))|0;
  $13 = $141;
  $142 = $23;
  $143 = $12;
  $144 = $143 + $142;
  $12 = $144;
  $145 = $17;
  $16 = $145;
  $146 = HEAP32[$15>>2]|0;
  HEAP32[$14>>2] = $146;
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
}
function _nk_convert($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0;
 var $$byval_copy29 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $$byval_copy42 = 0, $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $$byval_copy46 = 0, $$byval_copy47 = 0, $$byval_copy48 = 0;
 var $$byval_copy49 = 0, $$byval_copy50 = 0, $$byval_copy51 = 0, $$byval_copy52 = 0, $$byval_copy53 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0.0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0.0, $601 = 0, $602 = 0, $603 = 0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0.0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0.0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(784|0);
 $$byval_copy53 = sp + 776|0;
 $$byval_copy52 = sp + 688|0;
 $$byval_copy51 = sp + 672|0;
 $$byval_copy50 = sp + 772|0;
 $$byval_copy49 = sp + 656|0;
 $$byval_copy48 = sp + 768|0;
 $$byval_copy47 = sp + 648|0;
 $$byval_copy46 = sp + 764|0;
 $$byval_copy45 = sp + 640|0;
 $$byval_copy44 = sp + 760|0;
 $$byval_copy43 = sp + 632|0;
 $$byval_copy42 = sp + 756|0;
 $$byval_copy41 = sp + 624|0;
 $$byval_copy40 = sp + 616|0;
 $$byval_copy39 = sp + 608|0;
 $$byval_copy38 = sp + 752|0;
 $$byval_copy37 = sp + 600|0;
 $$byval_copy36 = sp + 592|0;
 $$byval_copy35 = sp + 584|0;
 $$byval_copy34 = sp + 748|0;
 $$byval_copy33 = sp + 576|0;
 $$byval_copy32 = sp + 568|0;
 $$byval_copy31 = sp + 744|0;
 $$byval_copy30 = sp + 560|0;
 $$byval_copy29 = sp + 552|0;
 $$byval_copy28 = sp + 740|0;
 $$byval_copy27 = sp + 544|0;
 $$byval_copy26 = sp + 736|0;
 $$byval_copy25 = sp + 536|0;
 $$byval_copy24 = sp + 732|0;
 $$byval_copy23 = sp + 728|0;
 $$byval_copy22 = sp + 724|0;
 $$byval_copy21 = sp + 720|0;
 $$byval_copy20 = sp + 520|0;
 $$byval_copy19 = sp + 716|0;
 $$byval_copy18 = sp + 504|0;
 $$byval_copy17 = sp + 712|0;
 $$byval_copy16 = sp + 488|0;
 $$byval_copy15 = sp + 708|0;
 $$byval_copy14 = sp + 480|0;
 $$byval_copy13 = sp + 472|0;
 $$byval_copy12 = sp + 464|0;
 $$byval_copy11 = sp + 456|0;
 $$byval_copy10 = sp + 704|0;
 $$byval_copy9 = sp + 448|0;
 $$byval_copy8 = sp + 440|0;
 $$byval_copy = sp + 424|0;
 $12 = sp + 376|0;
 $14 = sp + 360|0;
 $15 = sp + 352|0;
 $17 = sp + 336|0;
 $18 = sp + 328|0;
 $19 = sp + 320|0;
 $20 = sp + 312|0;
 $22 = sp + 288|0;
 $24 = sp + 264|0;
 $26 = sp + 240|0;
 $28 = sp + 224|0;
 $30 = sp + 208|0;
 $32 = sp + 192|0;
 $33 = sp + 184|0;
 $35 = sp + 168|0;
 $36 = sp + 160|0;
 $38 = sp + 144|0;
 $39 = sp + 136|0;
 $40 = sp + 128|0;
 $42 = sp + 112|0;
 $43 = sp + 104|0;
 $44 = sp + 96|0;
 $47 = sp + 80|0;
 $50 = sp + 64|0;
 $53 = sp + 48|0;
 $55 = sp + 24|0;
 $57 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $58 = $5;
 $59 = ($58|0)!=(0|0);
 if (!($59)) {
  ___assert_fail((2989|0),(1320|0),7672,(2993|0));
  // unreachable;
 }
 $60 = $6;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  ___assert_fail((2301|0),(1320|0),7673,(2993|0));
  // unreachable;
 }
 $62 = $7;
 $63 = ($62|0)!=(0|0);
 if (!($63)) {
  ___assert_fail((2306|0),(1320|0),7674,(2993|0));
  // unreachable;
 }
 $64 = $8;
 $65 = ($64|0)!=(0|0);
 if (!($65)) {
  ___assert_fail((2315|0),(1320|0),7675,(2993|0));
  // unreachable;
 }
 $66 = $9;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  ___assert_fail((2294|0),(1320|0),7676,(2993|0));
  // unreachable;
 }
 $68 = $9;
 $69 = ((($68)) + 36|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0|0);
 if (!($71)) {
  ___assert_fail((3004|0),(1320|0),7677,(2993|0));
  // unreachable;
 }
 $72 = $9;
 $73 = ((($72)) + 40|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0);
 if (!($75)) {
  ___assert_fail((3026|0),(1320|0),7678,(2993|0));
  // unreachable;
 }
 $76 = $5;
 $77 = ($76|0)!=(0|0);
 $78 = $6;
 $79 = ($78|0)!=(0|0);
 $or$cond = $77 & $79;
 $80 = $7;
 $81 = ($80|0)!=(0|0);
 $or$cond3 = $or$cond & $81;
 $82 = $8;
 $83 = ($82|0)!=(0|0);
 $or$cond5 = $or$cond3 & $83;
 $84 = $9;
 $85 = ($84|0)!=(0|0);
 $or$cond7 = $or$cond5 & $85;
 if (!($or$cond7)) {
  STACKTOP = sp;return;
 }
 $86 = $9;
 $87 = ((($86)) + 36|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)!=(0|0);
 if (!($89)) {
  STACKTOP = sp;return;
 }
 $90 = $5;
 $91 = ((($90)) + 7308|0);
 $92 = $9;
 $93 = $6;
 $94 = $7;
 $95 = $8;
 _nk_draw_list_setup($91,$92,$93,$94,$95);
 $96 = $5;
 $97 = (_nk__begin($96)|0);
 $10 = $97;
 while(1) {
  $98 = $10;
  $99 = ($98|0)!=(0|0);
  if (!($99)) {
   break;
  }
  $100 = $10;
  $101 = HEAP32[$100>>2]|0;
  do {
   switch ($101|0) {
   case 17:  {
    $623 = $10;
    $56 = $623;
    $624 = $5;
    $625 = ((($624)) + 7308|0);
    $626 = $56;
    $627 = ((($626)) + 16|0);
    $628 = $56;
    $629 = ((($628)) + 8|0);
    $630 = HEAP16[$629>>1]|0;
    $631 = (+($630<<16>>16));
    $632 = $56;
    $633 = ((($632)) + 10|0);
    $634 = HEAP16[$633>>1]|0;
    $635 = (+($634<<16>>16));
    $636 = $56;
    $637 = ((($636)) + 12|0);
    $638 = HEAP16[$637>>1]|0;
    $639 = (+($638&65535));
    $640 = $56;
    $641 = ((($640)) + 14|0);
    $642 = HEAP16[$641>>1]|0;
    $643 = (+($642&65535));
    _nk_rect($57,$631,$635,$639,$643);
    $644 = $56;
    $645 = ((($644)) + 32|0);
    ;HEAP32[$$byval_copy51>>2]=HEAP32[$627>>2]|0;HEAP32[$$byval_copy51+4>>2]=HEAP32[$627+4>>2]|0;HEAP32[$$byval_copy51+8>>2]=HEAP32[$627+8>>2]|0;HEAP32[$$byval_copy51+12>>2]=HEAP32[$627+12>>2]|0;
    ;HEAP32[$$byval_copy52>>2]=HEAP32[$57>>2]|0;HEAP32[$$byval_copy52+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$$byval_copy52+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$$byval_copy52+12>>2]=HEAP32[$57+12>>2]|0;
    ;HEAP8[$$byval_copy53>>0]=HEAP8[$645>>0]|0;HEAP8[$$byval_copy53+1>>0]=HEAP8[$645+1>>0]|0;HEAP8[$$byval_copy53+2>>0]=HEAP8[$645+2>>0]|0;HEAP8[$$byval_copy53+3>>0]=HEAP8[$645+3>>0]|0;
    _nk_draw_list_add_image($625,$$byval_copy51,$$byval_copy52,$$byval_copy53);
    break;
   }
   case 1:  {
    $102 = $10;
    $11 = $102;
    $103 = $5;
    $104 = ((($103)) + 7308|0);
    $105 = $11;
    $106 = ((($105)) + 8|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = (+($107<<16>>16));
    $109 = $11;
    $110 = ((($109)) + 10|0);
    $111 = HEAP16[$110>>1]|0;
    $112 = (+($111<<16>>16));
    $113 = $11;
    $114 = ((($113)) + 12|0);
    $115 = HEAP16[$114>>1]|0;
    $116 = (+($115&65535));
    $117 = $11;
    $118 = ((($117)) + 14|0);
    $119 = HEAP16[$118>>1]|0;
    $120 = (+($119&65535));
    _nk_rect($12,$108,$112,$116,$120);
    ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$12+12>>2]|0;
    _nk_draw_list_add_clip($104,$$byval_copy);
    break;
   }
   case 2:  {
    $121 = $10;
    $13 = $121;
    $122 = $5;
    $123 = ((($122)) + 7308|0);
    $124 = $13;
    $125 = ((($124)) + 10|0);
    $126 = HEAP16[$125>>1]|0;
    $127 = (+($126<<16>>16));
    $128 = $13;
    $129 = ((($128)) + 10|0);
    $130 = ((($129)) + 2|0);
    $131 = HEAP16[$130>>1]|0;
    $132 = (+($131<<16>>16));
    _nk_vec2($14,$127,$132);
    $133 = $13;
    $134 = ((($133)) + 14|0);
    $135 = HEAP16[$134>>1]|0;
    $136 = (+($135<<16>>16));
    $137 = $13;
    $138 = ((($137)) + 14|0);
    $139 = ((($138)) + 2|0);
    $140 = HEAP16[$139>>1]|0;
    $141 = (+($140<<16>>16));
    _nk_vec2($15,$136,$141);
    $142 = $13;
    $143 = ((($142)) + 18|0);
    $144 = $13;
    $145 = ((($144)) + 8|0);
    $146 = HEAP16[$145>>1]|0;
    $147 = (+($146&65535));
    ;HEAP32[$$byval_copy8>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$14+4>>2]|0;
    ;HEAP32[$$byval_copy9>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$15+4>>2]|0;
    ;HEAP8[$$byval_copy10>>0]=HEAP8[$143>>0]|0;HEAP8[$$byval_copy10+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$$byval_copy10+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$$byval_copy10+3>>0]=HEAP8[$143+3>>0]|0;
    _nk_draw_list_stroke_line($123,$$byval_copy8,$$byval_copy9,$$byval_copy10,$147);
    break;
   }
   case 3:  {
    $148 = $10;
    $16 = $148;
    $149 = $5;
    $150 = ((($149)) + 7308|0);
    $151 = $16;
    $152 = ((($151)) + 10|0);
    $153 = HEAP16[$152>>1]|0;
    $154 = (+($153<<16>>16));
    $155 = $16;
    $156 = ((($155)) + 10|0);
    $157 = ((($156)) + 2|0);
    $158 = HEAP16[$157>>1]|0;
    $159 = (+($158<<16>>16));
    _nk_vec2($17,$154,$159);
    $160 = $16;
    $161 = ((($160)) + 18|0);
    $162 = HEAP16[$161>>1]|0;
    $163 = (+($162<<16>>16));
    $164 = $16;
    $165 = ((($164)) + 18|0);
    $166 = ((($165)) + 2|0);
    $167 = HEAP16[$166>>1]|0;
    $168 = (+($167<<16>>16));
    _nk_vec2($18,$163,$168);
    $169 = $16;
    $170 = ((($169)) + 18|0);
    $171 = ((($170)) + 4|0);
    $172 = HEAP16[$171>>1]|0;
    $173 = (+($172<<16>>16));
    $174 = $16;
    $175 = ((($174)) + 18|0);
    $176 = ((($175)) + 4|0);
    $177 = ((($176)) + 2|0);
    $178 = HEAP16[$177>>1]|0;
    $179 = (+($178<<16>>16));
    _nk_vec2($19,$173,$179);
    $180 = $16;
    $181 = ((($180)) + 14|0);
    $182 = HEAP16[$181>>1]|0;
    $183 = (+($182<<16>>16));
    $184 = $16;
    $185 = ((($184)) + 14|0);
    $186 = ((($185)) + 2|0);
    $187 = HEAP16[$186>>1]|0;
    $188 = (+($187<<16>>16));
    _nk_vec2($20,$183,$188);
    $189 = $16;
    $190 = ((($189)) + 26|0);
    $191 = $9;
    $192 = ((($191)) + 20|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $16;
    $195 = ((($194)) + 8|0);
    $196 = HEAP16[$195>>1]|0;
    $197 = (+($196&65535));
    ;HEAP32[$$byval_copy11>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$17+4>>2]|0;
    ;HEAP32[$$byval_copy12>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$18+4>>2]|0;
    ;HEAP32[$$byval_copy13>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$19+4>>2]|0;
    ;HEAP32[$$byval_copy14>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$20+4>>2]|0;
    ;HEAP8[$$byval_copy15>>0]=HEAP8[$190>>0]|0;HEAP8[$$byval_copy15+1>>0]=HEAP8[$190+1>>0]|0;HEAP8[$$byval_copy15+2>>0]=HEAP8[$190+2>>0]|0;HEAP8[$$byval_copy15+3>>0]=HEAP8[$190+3>>0]|0;
    _nk_draw_list_stroke_curve($150,$$byval_copy11,$$byval_copy12,$$byval_copy13,$$byval_copy14,$$byval_copy15,$193,$197);
    break;
   }
   case 4:  {
    $198 = $10;
    $21 = $198;
    $199 = $5;
    $200 = ((($199)) + 7308|0);
    $201 = $21;
    $202 = ((($201)) + 12|0);
    $203 = HEAP16[$202>>1]|0;
    $204 = (+($203<<16>>16));
    $205 = $21;
    $206 = ((($205)) + 14|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = (+($207<<16>>16));
    $209 = $21;
    $210 = ((($209)) + 16|0);
    $211 = HEAP16[$210>>1]|0;
    $212 = (+($211&65535));
    $213 = $21;
    $214 = ((($213)) + 18|0);
    $215 = HEAP16[$214>>1]|0;
    $216 = (+($215&65535));
    _nk_rect($22,$204,$208,$212,$216);
    $217 = $21;
    $218 = ((($217)) + 20|0);
    $219 = $21;
    $220 = ((($219)) + 8|0);
    $221 = HEAP16[$220>>1]|0;
    $222 = (+($221&65535));
    $223 = $21;
    $224 = ((($223)) + 10|0);
    $225 = HEAP16[$224>>1]|0;
    $226 = (+($225&65535));
    ;HEAP32[$$byval_copy16>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy16+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy16+12>>2]=HEAP32[$22+12>>2]|0;
    ;HEAP8[$$byval_copy17>>0]=HEAP8[$218>>0]|0;HEAP8[$$byval_copy17+1>>0]=HEAP8[$218+1>>0]|0;HEAP8[$$byval_copy17+2>>0]=HEAP8[$218+2>>0]|0;HEAP8[$$byval_copy17+3>>0]=HEAP8[$218+3>>0]|0;
    _nk_draw_list_stroke_rect($200,$$byval_copy16,$$byval_copy17,$222,$226);
    break;
   }
   case 5:  {
    $227 = $10;
    $23 = $227;
    $228 = $5;
    $229 = ((($228)) + 7308|0);
    $230 = $23;
    $231 = ((($230)) + 10|0);
    $232 = HEAP16[$231>>1]|0;
    $233 = (+($232<<16>>16));
    $234 = $23;
    $235 = ((($234)) + 12|0);
    $236 = HEAP16[$235>>1]|0;
    $237 = (+($236<<16>>16));
    $238 = $23;
    $239 = ((($238)) + 14|0);
    $240 = HEAP16[$239>>1]|0;
    $241 = (+($240&65535));
    $242 = $23;
    $243 = ((($242)) + 16|0);
    $244 = HEAP16[$243>>1]|0;
    $245 = (+($244&65535));
    _nk_rect($24,$233,$237,$241,$245);
    $246 = $23;
    $247 = ((($246)) + 18|0);
    $248 = $23;
    $249 = ((($248)) + 8|0);
    $250 = HEAP16[$249>>1]|0;
    $251 = (+($250&65535));
    ;HEAP32[$$byval_copy18>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[$24+12>>2]|0;
    ;HEAP8[$$byval_copy19>>0]=HEAP8[$247>>0]|0;HEAP8[$$byval_copy19+1>>0]=HEAP8[$247+1>>0]|0;HEAP8[$$byval_copy19+2>>0]=HEAP8[$247+2>>0]|0;HEAP8[$$byval_copy19+3>>0]=HEAP8[$247+3>>0]|0;
    _nk_draw_list_fill_rect($229,$$byval_copy18,$$byval_copy19,$251);
    break;
   }
   case 6:  {
    $252 = $10;
    $25 = $252;
    $253 = $5;
    $254 = ((($253)) + 7308|0);
    $255 = $25;
    $256 = ((($255)) + 8|0);
    $257 = HEAP16[$256>>1]|0;
    $258 = (+($257<<16>>16));
    $259 = $25;
    $260 = ((($259)) + 10|0);
    $261 = HEAP16[$260>>1]|0;
    $262 = (+($261<<16>>16));
    $263 = $25;
    $264 = ((($263)) + 12|0);
    $265 = HEAP16[$264>>1]|0;
    $266 = (+($265&65535));
    $267 = $25;
    $268 = ((($267)) + 14|0);
    $269 = HEAP16[$268>>1]|0;
    $270 = (+($269&65535));
    _nk_rect($26,$258,$262,$266,$270);
    $271 = $25;
    $272 = ((($271)) + 16|0);
    $273 = $25;
    $274 = ((($273)) + 20|0);
    $275 = $25;
    $276 = ((($275)) + 28|0);
    $277 = $25;
    $278 = ((($277)) + 24|0);
    ;HEAP32[$$byval_copy20>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy20+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$byval_copy20+12>>2]=HEAP32[$26+12>>2]|0;
    ;HEAP8[$$byval_copy21>>0]=HEAP8[$272>>0]|0;HEAP8[$$byval_copy21+1>>0]=HEAP8[$272+1>>0]|0;HEAP8[$$byval_copy21+2>>0]=HEAP8[$272+2>>0]|0;HEAP8[$$byval_copy21+3>>0]=HEAP8[$272+3>>0]|0;
    ;HEAP8[$$byval_copy22>>0]=HEAP8[$274>>0]|0;HEAP8[$$byval_copy22+1>>0]=HEAP8[$274+1>>0]|0;HEAP8[$$byval_copy22+2>>0]=HEAP8[$274+2>>0]|0;HEAP8[$$byval_copy22+3>>0]=HEAP8[$274+3>>0]|0;
    ;HEAP8[$$byval_copy23>>0]=HEAP8[$276>>0]|0;HEAP8[$$byval_copy23+1>>0]=HEAP8[$276+1>>0]|0;HEAP8[$$byval_copy23+2>>0]=HEAP8[$276+2>>0]|0;HEAP8[$$byval_copy23+3>>0]=HEAP8[$276+3>>0]|0;
    ;HEAP8[$$byval_copy24>>0]=HEAP8[$278>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$278+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$278+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$278+3>>0]|0;
    _nk_draw_list_fill_rect_multi_color($254,$$byval_copy20,$$byval_copy21,$$byval_copy22,$$byval_copy23,$$byval_copy24);
    break;
   }
   case 7:  {
    $279 = $10;
    $27 = $279;
    $280 = $5;
    $281 = ((($280)) + 7308|0);
    $282 = $27;
    $283 = ((($282)) + 8|0);
    $284 = HEAP16[$283>>1]|0;
    $285 = (+($284<<16>>16));
    $286 = $27;
    $287 = ((($286)) + 14|0);
    $288 = HEAP16[$287>>1]|0;
    $289 = (+($288&65535));
    $290 = $289 / 2.0;
    $291 = $285 + $290;
    $292 = $27;
    $293 = ((($292)) + 10|0);
    $294 = HEAP16[$293>>1]|0;
    $295 = (+($294<<16>>16));
    $296 = $27;
    $297 = ((($296)) + 16|0);
    $298 = HEAP16[$297>>1]|0;
    $299 = (+($298&65535));
    $300 = $299 / 2.0;
    $301 = $295 + $300;
    _nk_vec2($28,$291,$301);
    $302 = $27;
    $303 = ((($302)) + 14|0);
    $304 = HEAP16[$303>>1]|0;
    $305 = (+($304&65535));
    $306 = $305 / 2.0;
    $307 = $27;
    $308 = ((($307)) + 18|0);
    $309 = $9;
    $310 = ((($309)) + 12|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = $27;
    $313 = ((($312)) + 12|0);
    $314 = HEAP16[$313>>1]|0;
    $315 = (+($314&65535));
    ;HEAP32[$$byval_copy25>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[$28+4>>2]|0;
    ;HEAP8[$$byval_copy26>>0]=HEAP8[$308>>0]|0;HEAP8[$$byval_copy26+1>>0]=HEAP8[$308+1>>0]|0;HEAP8[$$byval_copy26+2>>0]=HEAP8[$308+2>>0]|0;HEAP8[$$byval_copy26+3>>0]=HEAP8[$308+3>>0]|0;
    _nk_draw_list_stroke_circle($281,$$byval_copy25,$306,$$byval_copy26,$311,$315);
    break;
   }
   case 8:  {
    $316 = $10;
    $29 = $316;
    $317 = $5;
    $318 = ((($317)) + 7308|0);
    $319 = $29;
    $320 = ((($319)) + 8|0);
    $321 = HEAP16[$320>>1]|0;
    $322 = (+($321<<16>>16));
    $323 = $29;
    $324 = ((($323)) + 12|0);
    $325 = HEAP16[$324>>1]|0;
    $326 = (+($325&65535));
    $327 = $326 / 2.0;
    $328 = $322 + $327;
    $329 = $29;
    $330 = ((($329)) + 10|0);
    $331 = HEAP16[$330>>1]|0;
    $332 = (+($331<<16>>16));
    $333 = $29;
    $334 = ((($333)) + 14|0);
    $335 = HEAP16[$334>>1]|0;
    $336 = (+($335&65535));
    $337 = $336 / 2.0;
    $338 = $332 + $337;
    _nk_vec2($30,$328,$338);
    $339 = $29;
    $340 = ((($339)) + 12|0);
    $341 = HEAP16[$340>>1]|0;
    $342 = (+($341&65535));
    $343 = $342 / 2.0;
    $344 = $29;
    $345 = ((($344)) + 16|0);
    $346 = $9;
    $347 = ((($346)) + 12|0);
    $348 = HEAP32[$347>>2]|0;
    ;HEAP32[$$byval_copy27>>2]=HEAP32[$30>>2]|0;HEAP32[$$byval_copy27+4>>2]=HEAP32[$30+4>>2]|0;
    ;HEAP8[$$byval_copy28>>0]=HEAP8[$345>>0]|0;HEAP8[$$byval_copy28+1>>0]=HEAP8[$345+1>>0]|0;HEAP8[$$byval_copy28+2>>0]=HEAP8[$345+2>>0]|0;HEAP8[$$byval_copy28+3>>0]=HEAP8[$345+3>>0]|0;
    _nk_draw_list_fill_circle($318,$$byval_copy27,$343,$$byval_copy28,$348);
    break;
   }
   case 9:  {
    $349 = $10;
    $31 = $349;
    $350 = $5;
    $351 = ((($350)) + 7308|0);
    $352 = $31;
    $353 = ((($352)) + 8|0);
    $354 = HEAP16[$353>>1]|0;
    $355 = (+($354<<16>>16));
    $356 = $31;
    $357 = ((($356)) + 10|0);
    $358 = HEAP16[$357>>1]|0;
    $359 = (+($358<<16>>16));
    _nk_vec2($32,$355,$359);
    ;HEAP32[$$byval_copy29>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy29+4>>2]=HEAP32[$32+4>>2]|0;
    _nk_draw_list_path_line_to($351,$$byval_copy29);
    $360 = $5;
    $361 = ((($360)) + 7308|0);
    $362 = $31;
    $363 = ((($362)) + 8|0);
    $364 = HEAP16[$363>>1]|0;
    $365 = (+($364<<16>>16));
    $366 = $31;
    $367 = ((($366)) + 10|0);
    $368 = HEAP16[$367>>1]|0;
    $369 = (+($368<<16>>16));
    _nk_vec2($33,$365,$369);
    $370 = $31;
    $371 = ((($370)) + 12|0);
    $372 = HEAP16[$371>>1]|0;
    $373 = (+($372&65535));
    $374 = $31;
    $375 = ((($374)) + 16|0);
    $376 = +HEAPF32[$375>>2];
    $377 = $31;
    $378 = ((($377)) + 16|0);
    $379 = ((($378)) + 4|0);
    $380 = +HEAPF32[$379>>2];
    $381 = $9;
    $382 = ((($381)) + 16|0);
    $383 = HEAP32[$382>>2]|0;
    ;HEAP32[$$byval_copy30>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$33+4>>2]|0;
    _nk_draw_list_path_arc_to($361,$$byval_copy30,$373,$376,$380,$383);
    $384 = $5;
    $385 = ((($384)) + 7308|0);
    $386 = $31;
    $387 = ((($386)) + 24|0);
    $388 = $31;
    $389 = ((($388)) + 14|0);
    $390 = HEAP16[$389>>1]|0;
    $391 = (+($390&65535));
    ;HEAP8[$$byval_copy31>>0]=HEAP8[$387>>0]|0;HEAP8[$$byval_copy31+1>>0]=HEAP8[$387+1>>0]|0;HEAP8[$$byval_copy31+2>>0]=HEAP8[$387+2>>0]|0;HEAP8[$$byval_copy31+3>>0]=HEAP8[$387+3>>0]|0;
    _nk_draw_list_path_stroke($385,$$byval_copy31,1,$391);
    break;
   }
   case 10:  {
    $392 = $10;
    $34 = $392;
    $393 = $5;
    $394 = ((($393)) + 7308|0);
    $395 = $34;
    $396 = ((($395)) + 8|0);
    $397 = HEAP16[$396>>1]|0;
    $398 = (+($397<<16>>16));
    $399 = $34;
    $400 = ((($399)) + 10|0);
    $401 = HEAP16[$400>>1]|0;
    $402 = (+($401<<16>>16));
    _nk_vec2($35,$398,$402);
    ;HEAP32[$$byval_copy32>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy32+4>>2]=HEAP32[$35+4>>2]|0;
    _nk_draw_list_path_line_to($394,$$byval_copy32);
    $403 = $5;
    $404 = ((($403)) + 7308|0);
    $405 = $34;
    $406 = ((($405)) + 8|0);
    $407 = HEAP16[$406>>1]|0;
    $408 = (+($407<<16>>16));
    $409 = $34;
    $410 = ((($409)) + 10|0);
    $411 = HEAP16[$410>>1]|0;
    $412 = (+($411<<16>>16));
    _nk_vec2($36,$408,$412);
    $413 = $34;
    $414 = ((($413)) + 12|0);
    $415 = HEAP16[$414>>1]|0;
    $416 = (+($415&65535));
    $417 = $34;
    $418 = ((($417)) + 16|0);
    $419 = +HEAPF32[$418>>2];
    $420 = $34;
    $421 = ((($420)) + 16|0);
    $422 = ((($421)) + 4|0);
    $423 = +HEAPF32[$422>>2];
    $424 = $9;
    $425 = ((($424)) + 16|0);
    $426 = HEAP32[$425>>2]|0;
    ;HEAP32[$$byval_copy33>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$36+4>>2]|0;
    _nk_draw_list_path_arc_to($404,$$byval_copy33,$416,$419,$423,$426);
    $427 = $5;
    $428 = ((($427)) + 7308|0);
    $429 = $34;
    $430 = ((($429)) + 24|0);
    ;HEAP8[$$byval_copy34>>0]=HEAP8[$430>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$430+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$430+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$430+3>>0]|0;
    _nk_draw_list_path_fill($428,$$byval_copy34);
    break;
   }
   case 11:  {
    $431 = $10;
    $37 = $431;
    $432 = $5;
    $433 = ((($432)) + 7308|0);
    $434 = $37;
    $435 = ((($434)) + 10|0);
    $436 = HEAP16[$435>>1]|0;
    $437 = (+($436<<16>>16));
    $438 = $37;
    $439 = ((($438)) + 10|0);
    $440 = ((($439)) + 2|0);
    $441 = HEAP16[$440>>1]|0;
    $442 = (+($441<<16>>16));
    _nk_vec2($38,$437,$442);
    $443 = $37;
    $444 = ((($443)) + 14|0);
    $445 = HEAP16[$444>>1]|0;
    $446 = (+($445<<16>>16));
    $447 = $37;
    $448 = ((($447)) + 14|0);
    $449 = ((($448)) + 2|0);
    $450 = HEAP16[$449>>1]|0;
    $451 = (+($450<<16>>16));
    _nk_vec2($39,$446,$451);
    $452 = $37;
    $453 = ((($452)) + 18|0);
    $454 = HEAP16[$453>>1]|0;
    $455 = (+($454<<16>>16));
    $456 = $37;
    $457 = ((($456)) + 18|0);
    $458 = ((($457)) + 2|0);
    $459 = HEAP16[$458>>1]|0;
    $460 = (+($459<<16>>16));
    _nk_vec2($40,$455,$460);
    $461 = $37;
    $462 = ((($461)) + 22|0);
    $463 = $37;
    $464 = ((($463)) + 8|0);
    $465 = HEAP16[$464>>1]|0;
    $466 = (+($465&65535));
    ;HEAP32[$$byval_copy35>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy35+4>>2]=HEAP32[$38+4>>2]|0;
    ;HEAP32[$$byval_copy36>>2]=HEAP32[$39>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$39+4>>2]|0;
    ;HEAP32[$$byval_copy37>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy37+4>>2]=HEAP32[$40+4>>2]|0;
    ;HEAP8[$$byval_copy38>>0]=HEAP8[$462>>0]|0;HEAP8[$$byval_copy38+1>>0]=HEAP8[$462+1>>0]|0;HEAP8[$$byval_copy38+2>>0]=HEAP8[$462+2>>0]|0;HEAP8[$$byval_copy38+3>>0]=HEAP8[$462+3>>0]|0;
    _nk_draw_list_stroke_triangle($433,$$byval_copy35,$$byval_copy36,$$byval_copy37,$$byval_copy38,$466);
    break;
   }
   case 12:  {
    $467 = $10;
    $41 = $467;
    $468 = $5;
    $469 = ((($468)) + 7308|0);
    $470 = $41;
    $471 = ((($470)) + 8|0);
    $472 = HEAP16[$471>>1]|0;
    $473 = (+($472<<16>>16));
    $474 = $41;
    $475 = ((($474)) + 8|0);
    $476 = ((($475)) + 2|0);
    $477 = HEAP16[$476>>1]|0;
    $478 = (+($477<<16>>16));
    _nk_vec2($42,$473,$478);
    $479 = $41;
    $480 = ((($479)) + 12|0);
    $481 = HEAP16[$480>>1]|0;
    $482 = (+($481<<16>>16));
    $483 = $41;
    $484 = ((($483)) + 12|0);
    $485 = ((($484)) + 2|0);
    $486 = HEAP16[$485>>1]|0;
    $487 = (+($486<<16>>16));
    _nk_vec2($43,$482,$487);
    $488 = $41;
    $489 = ((($488)) + 16|0);
    $490 = HEAP16[$489>>1]|0;
    $491 = (+($490<<16>>16));
    $492 = $41;
    $493 = ((($492)) + 16|0);
    $494 = ((($493)) + 2|0);
    $495 = HEAP16[$494>>1]|0;
    $496 = (+($495<<16>>16));
    _nk_vec2($44,$491,$496);
    $497 = $41;
    $498 = ((($497)) + 20|0);
    ;HEAP32[$$byval_copy39>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy39+4>>2]=HEAP32[$42+4>>2]|0;
    ;HEAP32[$$byval_copy40>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy40+4>>2]=HEAP32[$43+4>>2]|0;
    ;HEAP32[$$byval_copy41>>2]=HEAP32[$44>>2]|0;HEAP32[$$byval_copy41+4>>2]=HEAP32[$44+4>>2]|0;
    ;HEAP8[$$byval_copy42>>0]=HEAP8[$498>>0]|0;HEAP8[$$byval_copy42+1>>0]=HEAP8[$498+1>>0]|0;HEAP8[$$byval_copy42+2>>0]=HEAP8[$498+2>>0]|0;HEAP8[$$byval_copy42+3>>0]=HEAP8[$498+3>>0]|0;
    _nk_draw_list_fill_triangle($469,$$byval_copy39,$$byval_copy40,$$byval_copy41,$$byval_copy42);
    break;
   }
   case 13:  {
    $499 = $10;
    $46 = $499;
    $45 = 0;
    while(1) {
     $500 = $45;
     $501 = $46;
     $502 = ((($501)) + 14|0);
     $503 = HEAP16[$502>>1]|0;
     $504 = $503&65535;
     $505 = ($500|0)<($504|0);
     if (!($505)) {
      break;
     }
     $506 = $45;
     $507 = $46;
     $508 = ((($507)) + 16|0);
     $509 = (($508) + ($506<<2)|0);
     $510 = HEAP16[$509>>1]|0;
     $511 = (+($510<<16>>16));
     $512 = $45;
     $513 = $46;
     $514 = ((($513)) + 16|0);
     $515 = (($514) + ($512<<2)|0);
     $516 = ((($515)) + 2|0);
     $517 = HEAP16[$516>>1]|0;
     $518 = (+($517<<16>>16));
     _nk_vec2($47,$511,$518);
     $519 = $5;
     $520 = ((($519)) + 7308|0);
     ;HEAP32[$$byval_copy43>>2]=HEAP32[$47>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$47+4>>2]|0;
     _nk_draw_list_path_line_to($520,$$byval_copy43);
     $521 = $45;
     $522 = (($521) + 1)|0;
     $45 = $522;
    }
    $523 = $5;
    $524 = ((($523)) + 7308|0);
    $525 = $46;
    $526 = ((($525)) + 8|0);
    $527 = $46;
    $528 = ((($527)) + 12|0);
    $529 = HEAP16[$528>>1]|0;
    $530 = (+($529&65535));
    ;HEAP8[$$byval_copy44>>0]=HEAP8[$526>>0]|0;HEAP8[$$byval_copy44+1>>0]=HEAP8[$526+1>>0]|0;HEAP8[$$byval_copy44+2>>0]=HEAP8[$526+2>>0]|0;HEAP8[$$byval_copy44+3>>0]=HEAP8[$526+3>>0]|0;
    _nk_draw_list_path_stroke($524,$$byval_copy44,1,$530);
    break;
   }
   case 14:  {
    $531 = $10;
    $49 = $531;
    $48 = 0;
    while(1) {
     $532 = $48;
     $533 = $49;
     $534 = ((($533)) + 12|0);
     $535 = HEAP16[$534>>1]|0;
     $536 = $535&65535;
     $537 = ($532|0)<($536|0);
     if (!($537)) {
      break;
     }
     $538 = $48;
     $539 = $49;
     $540 = ((($539)) + 14|0);
     $541 = (($540) + ($538<<2)|0);
     $542 = HEAP16[$541>>1]|0;
     $543 = (+($542<<16>>16));
     $544 = $48;
     $545 = $49;
     $546 = ((($545)) + 14|0);
     $547 = (($546) + ($544<<2)|0);
     $548 = ((($547)) + 2|0);
     $549 = HEAP16[$548>>1]|0;
     $550 = (+($549<<16>>16));
     _nk_vec2($50,$543,$550);
     $551 = $5;
     $552 = ((($551)) + 7308|0);
     ;HEAP32[$$byval_copy45>>2]=HEAP32[$50>>2]|0;HEAP32[$$byval_copy45+4>>2]=HEAP32[$50+4>>2]|0;
     _nk_draw_list_path_line_to($552,$$byval_copy45);
     $553 = $48;
     $554 = (($553) + 1)|0;
     $48 = $554;
    }
    $555 = $5;
    $556 = ((($555)) + 7308|0);
    $557 = $49;
    $558 = ((($557)) + 8|0);
    ;HEAP8[$$byval_copy46>>0]=HEAP8[$558>>0]|0;HEAP8[$$byval_copy46+1>>0]=HEAP8[$558+1>>0]|0;HEAP8[$$byval_copy46+2>>0]=HEAP8[$558+2>>0]|0;HEAP8[$$byval_copy46+3>>0]=HEAP8[$558+3>>0]|0;
    _nk_draw_list_path_fill($556,$$byval_copy46);
    break;
   }
   case 15:  {
    $559 = $10;
    $52 = $559;
    $51 = 0;
    while(1) {
     $560 = $51;
     $561 = $52;
     $562 = ((($561)) + 14|0);
     $563 = HEAP16[$562>>1]|0;
     $564 = $563&65535;
     $565 = ($560|0)<($564|0);
     if (!($565)) {
      break;
     }
     $566 = $51;
     $567 = $52;
     $568 = ((($567)) + 16|0);
     $569 = (($568) + ($566<<2)|0);
     $570 = HEAP16[$569>>1]|0;
     $571 = (+($570<<16>>16));
     $572 = $51;
     $573 = $52;
     $574 = ((($573)) + 16|0);
     $575 = (($574) + ($572<<2)|0);
     $576 = ((($575)) + 2|0);
     $577 = HEAP16[$576>>1]|0;
     $578 = (+($577<<16>>16));
     _nk_vec2($53,$571,$578);
     $579 = $5;
     $580 = ((($579)) + 7308|0);
     ;HEAP32[$$byval_copy47>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy47+4>>2]=HEAP32[$53+4>>2]|0;
     _nk_draw_list_path_line_to($580,$$byval_copy47);
     $581 = $51;
     $582 = (($581) + 1)|0;
     $51 = $582;
    }
    $583 = $5;
    $584 = ((($583)) + 7308|0);
    $585 = $52;
    $586 = ((($585)) + 8|0);
    $587 = $52;
    $588 = ((($587)) + 12|0);
    $589 = HEAP16[$588>>1]|0;
    $590 = (+($589&65535));
    ;HEAP8[$$byval_copy48>>0]=HEAP8[$586>>0]|0;HEAP8[$$byval_copy48+1>>0]=HEAP8[$586+1>>0]|0;HEAP8[$$byval_copy48+2>>0]=HEAP8[$586+2>>0]|0;HEAP8[$$byval_copy48+3>>0]=HEAP8[$586+3>>0]|0;
    _nk_draw_list_path_stroke($584,$$byval_copy48,0,$590);
    break;
   }
   case 16:  {
    $591 = $10;
    $54 = $591;
    $592 = $5;
    $593 = ((($592)) + 7308|0);
    $594 = $54;
    $595 = ((($594)) + 8|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = $54;
    $598 = ((($597)) + 20|0);
    $599 = HEAP16[$598>>1]|0;
    $600 = (+($599<<16>>16));
    $601 = $54;
    $602 = ((($601)) + 22|0);
    $603 = HEAP16[$602>>1]|0;
    $604 = (+($603<<16>>16));
    $605 = $54;
    $606 = ((($605)) + 24|0);
    $607 = HEAP16[$606>>1]|0;
    $608 = (+($607&65535));
    $609 = $54;
    $610 = ((($609)) + 26|0);
    $611 = HEAP16[$610>>1]|0;
    $612 = (+($611&65535));
    _nk_rect($55,$600,$604,$608,$612);
    $613 = $54;
    $614 = ((($613)) + 36|0);
    $615 = $54;
    $616 = ((($615)) + 32|0);
    $617 = HEAP32[$616>>2]|0;
    $618 = $54;
    $619 = ((($618)) + 28|0);
    $620 = +HEAPF32[$619>>2];
    $621 = $54;
    $622 = ((($621)) + 16|0);
    ;HEAP32[$$byval_copy49>>2]=HEAP32[$55>>2]|0;HEAP32[$$byval_copy49+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$$byval_copy49+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$$byval_copy49+12>>2]=HEAP32[$55+12>>2]|0;
    ;HEAP8[$$byval_copy50>>0]=HEAP8[$622>>0]|0;HEAP8[$$byval_copy50+1>>0]=HEAP8[$622+1>>0]|0;HEAP8[$$byval_copy50+2>>0]=HEAP8[$622+2>>0]|0;HEAP8[$$byval_copy50+3>>0]=HEAP8[$622+3>>0]|0;
    _nk_draw_list_add_text($593,$596,$$byval_copy49,$614,$617,$620,$$byval_copy50);
    break;
   }
   default: {
   }
   }
  } while(0);
  $646 = $5;
  $647 = $10;
  $648 = (_nk__next($646,$647)|0);
  $10 = $648;
 }
 STACKTOP = sp;return;
}
function _nk__begin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),16268,(18673|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $1 = 0;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 $9 = $2;
 $10 = ((($9)) + 12916|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $1 = 0;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 $13 = $2;
 $14 = ((($13)) + 5724|0);
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $4 = $16;
 $17 = $2;
 $18 = ((($17)) + 12848|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $21 = $2;
  _nk_build($21);
  $22 = $2;
  $23 = ((($22)) + 12848|0);
  HEAP32[$23>>2] = 1;
 }
 $24 = $2;
 $25 = ((($24)) + 12896|0);
 $26 = HEAP32[$25>>2]|0;
 $3 = $26;
 while(1) {
  $27 = $3;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $3;
   $30 = ((($29)) + 100|0);
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $3;
   $34 = ((($33)) + 100|0);
   $35 = ((($34)) + 32|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($32|0)==($36|0);
   if ($37) {
    $54 = 1;
   } else {
    $38 = $3;
    $39 = ((($38)) + 72|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 & 4096;
    $42 = ($41|0)!=(0);
    $54 = $42;
   }
  } else {
   $54 = 0;
  }
  $43 = $3;
  if (!($54)) {
   break;
  }
  $44 = ((($43)) + 348|0);
  $45 = HEAP32[$44>>2]|0;
  $3 = $45;
 }
 $46 = ($43|0)!=(0|0);
 if ($46) {
  $47 = $4;
  $48 = $3;
  $49 = ((($48)) + 100|0);
  $50 = ((($49)) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($47) + ($51)|0);
  $1 = $52;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 } else {
  $1 = 0;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _nk__next($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((2989|0),(1320|0),16290,(18683|0));
  // unreachable;
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $13 = $3;
  $14 = ((($13)) + 12916|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $4;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $3;
   $21 = ((($20)) + 5724|0);
   $22 = ((($21)) + 44|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($19>>>0)>=($23>>>0);
   if ($24) {
    $2 = 0;
    $35 = $2;
    STACKTOP = sp;return ($35|0);
   } else {
    $25 = $3;
    $26 = ((($25)) + 5724|0);
    $27 = ((($26)) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    $5 = $28;
    $29 = $5;
    $30 = $4;
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + ($32)|0);
    $6 = $33;
    $34 = $6;
    $2 = $34;
    $35 = $2;
    STACKTOP = sp;return ($35|0);
   }
  }
 }
 $2 = 0;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function _nk__draw_begin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 7308|0);
 $6 = $3;
 $7 = (_nk__draw_list_begin($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _nk__draw_next($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = ((($8)) + 7308|0);
 $10 = (_nk__draw_list_next($6,$7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _nk_font_default_glyph_ranges() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24|0);
}
function _nk_font_find_glyph($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $7 = 0;
 $8 = 0;
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2240|0),(1320|0),10394,(3046|0));
  // unreachable;
 }
 $14 = $3;
 $15 = ((($14)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((3065|0),(1320|0),10395,(3046|0));
  // unreachable;
 }
 $18 = $3;
 $19 = ((($18)) + 24|0);
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((3078|0),(1320|0),10396,(3046|0));
  // unreachable;
 }
 $23 = $3;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $3;
  $26 = ((($25)) + 52|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $3;
   $30 = ((($29)) + 56|0);
   $31 = HEAP32[$30>>2]|0;
   $8 = $31;
   $32 = $3;
   $33 = ((($32)) + 24|0);
   $34 = ((($33)) + 20|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_nk_range_count($35)|0);
   $6 = $36;
   $5 = 0;
   while(1) {
    $37 = $5;
    $38 = $6;
    $39 = ($37|0)<($38|0);
    if (!($39)) {
     label = 16;
     break;
    }
    $40 = $5;
    $41 = $40<<1;
    $42 = (($41) + 0)|0;
    $43 = $3;
    $44 = ((($43)) + 24|0);
    $45 = ((($44)) + 20|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($42<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $10 = $48;
    $49 = $5;
    $50 = $49<<1;
    $51 = (($50) + 1)|0;
    $52 = $3;
    $53 = ((($52)) + 24|0);
    $54 = ((($53)) + 20|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + ($51<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $11 = $57;
    $58 = $11;
    $59 = $10;
    $60 = (($58) - ($59))|0;
    $61 = (($60) + 1)|0;
    $9 = $61;
    $62 = $4;
    $63 = $10;
    $64 = ($62>>>0)>=($63>>>0);
    if ($64) {
     $65 = $4;
     $66 = $11;
     $67 = ($65>>>0)<=($66>>>0);
     if ($67) {
      label = 14;
      break;
     }
    }
    $77 = $9;
    $78 = $7;
    $79 = (($78) + ($77))|0;
    $7 = $79;
    $80 = $5;
    $81 = (($80) + 1)|0;
    $5 = $81;
   }
   if ((label|0) == 14) {
    $68 = $7;
    $69 = $4;
    $70 = $10;
    $71 = (($69) - ($70))|0;
    $72 = (($68) + ($71))|0;
    $73 = $3;
    $74 = ((($73)) + 52|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + (($72*48)|0)|0);
    $2 = $76;
    $83 = $2;
    STACKTOP = sp;return ($83|0);
   }
   else if ((label|0) == 16) {
    $82 = $8;
    $2 = $82;
    $83 = $2;
    STACKTOP = sp;return ($83|0);
   }
  }
 }
 $2 = 0;
 $83 = $2;
 STACKTOP = sp;return ($83|0);
}
function _nk_range_count($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $3 = $4;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((22456|0),(1320|0),9930,(22462|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $1 = 0;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 while(1) {
  $9 = $3;
  $10 = ((($9)) + 4|0);
  $3 = $10;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
 }
 $13 = $3;
 $14 = $2;
 $15 = ($13|0)==($14|0);
 if ($15) {
  $23 = 0;
 } else {
  $16 = $3;
  $17 = $2;
  $18 = $16;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = (($20|0) / 4)&-1;
  $22 = (($21|0) / 2)&-1;
  $23 = $22;
 }
 $1 = $23;
 $24 = $1;
 STACKTOP = sp;return ($24|0);
}
function _nk_font_config($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 8|0;
 $4 = sp;
 $2 = $1;
 _nk_zero($3,48);
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 12|0);
 HEAP8[$7>>0] = 0;
 $8 = $2;
 $9 = ((($3)) + 20|0);
 HEAPF32[$9>>2] = $8;
 $10 = ((($3)) + 16|0);
 HEAP8[$10>>0] = 3;
 $11 = ((($3)) + 15|0);
 HEAP8[$11>>0] = 1;
 $12 = ((($3)) + 14|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($3)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($3)) + 28|0);
 _nk_vec2($4,0.0,0.0);
 ;HEAP32[$14>>2]=HEAP32[$4>>2]|0;HEAP32[$14+4>>2]=HEAP32[$4+4>>2]|0;
 $15 = (_nk_font_default_glyph_ranges()|0);
 $16 = ((($3)) + 36|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 13|0);
 HEAP8[$17>>0] = 0;
 $18 = ((($3)) + 44|0);
 HEAP32[$18>>2] = 63;
 $19 = ((($3)) + 40|0);
 HEAP32[$19>>2] = 0;
 dest=$0; src=$3; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _nk_font_atlas_init_default($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((3096|0),(1320|0),10767,(3102|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 _nk_zero($6,292);
 $7 = $1;
 $8 = ((($7)) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 24|0);
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 8;
 $12 = $1;
 $13 = ((($12)) + 24|0);
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 9;
 $15 = $1;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 12|0);
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = 8;
 $20 = $1;
 $21 = ((($20)) + 12|0);
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = 9;
 STACKTOP = sp;return;
}
function _nk_font_atlas_begin($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 4|0;
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((3096|0),(1320|0),10806,(3135|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((3155|0),(1320|0),10807,(3135|0));
  // unreachable;
 }
 $9 = $1;
 $10 = ((($9)) + 24|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((3155|0),(1320|0),10807,(3135|0));
  // unreachable;
 }
 $14 = $1;
 $15 = ((($14)) + 12|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((3203|0),(1320|0),10808,(3135|0));
  // unreachable;
 }
 $19 = $1;
 $20 = ((($19)) + 12|0);
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((3203|0),(1320|0),10808,(3135|0));
  // unreachable;
 }
 $24 = $1;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $1;
 $27 = ((($26)) + 12|0);
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $1;
 $32 = ((($31)) + 12|0);
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $1;
 $37 = ((($36)) + 24|0);
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = $1;
 $42 = ((($41)) + 24|0);
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $1;
 $47 = ((($46)) + 272|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = $1;
  $51 = ((($50)) + 12|0);
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $1;
  $55 = ((($54)) + 12|0);
  $56 = $1;
  $57 = ((($56)) + 272|0);
  $58 = HEAP32[$57>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$55>>2]|0;
  FUNCTION_TABLE_vii[$53 & 31]($$byval_copy,$58);
  $59 = $1;
  $60 = ((($59)) + 272|0);
  HEAP32[$60>>2] = 0;
 }
 $61 = $1;
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $64 = $1;
 $65 = ((($64)) + 12|0);
 $66 = ((($65)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $1;
 $69 = ((($68)) + 12|0);
 $70 = $1;
 $71 = HEAP32[$70>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$69>>2]|0;
 FUNCTION_TABLE_vii[$67 & 31]($$byval_copy1,$71);
 $72 = $1;
 HEAP32[$72>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_font_atlas_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy3 = sp + 28|0;
 $$byval_copy2 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((3096|0),(1320|0),10827,(3251|0));
  // unreachable;
 }
 $9 = $3;
 $10 = ((($9)) + 12|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((3269|0),(1320|0),10828,(3251|0));
  // unreachable;
 }
 $14 = $3;
 $15 = ((($14)) + 12|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((3292|0),(1320|0),10829,(3251|0));
  // unreachable;
 }
 $19 = $3;
 $20 = ((($19)) + 24|0);
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((3314|0),(1320|0),10830,(3251|0));
  // unreachable;
 }
 $24 = $3;
 $25 = ((($24)) + 24|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  ___assert_fail((3337|0),(1320|0),10831,(3251|0));
  // unreachable;
 }
 $29 = $4;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((2294|0),(1320|0),10833,(3251|0));
  // unreachable;
 }
 $31 = $4;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  ___assert_fail((3359|0),(1320|0),10834,(3251|0));
  // unreachable;
 }
 $35 = $4;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0);
 if (!($38)) {
  ___assert_fail((3376|0),(1320|0),10835,(3251|0));
  // unreachable;
 }
 $39 = $4;
 $40 = ((($39)) + 20|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $41 > 0.0;
 if (!($42)) {
  ___assert_fail((3393|0),(1320|0),10836,(3251|0));
  // unreachable;
 }
 $43 = $3;
 $44 = ($43|0)!=(0|0);
 $45 = $4;
 $46 = ($45|0)!=(0|0);
 $or$cond = $44 & $46;
 if ($or$cond) {
  $47 = $4;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0|0);
  if ($50) {
   $51 = $4;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $4;
    $56 = ((($55)) + 20|0);
    $57 = +HEAPF32[$56>>2];
    $58 = $57 <= 0.0;
    if (!($58)) {
     $59 = $3;
     $60 = ((($59)) + 12|0);
     $61 = ((($60)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)!=(0|0);
     if ($63) {
      $64 = $3;
      $65 = ((($64)) + 12|0);
      $66 = ((($65)) + 8|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)!=(0|0);
      if ($68) {
       $69 = $3;
       $70 = ((($69)) + 24|0);
       $71 = ((($70)) + 4|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($72|0)!=(0|0);
       if ($73) {
        $74 = $3;
        $75 = ((($74)) + 24|0);
        $76 = ((($75)) + 8|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($77|0)!=(0|0);
        if ($78) {
         $79 = $3;
         $80 = ((($79)) + 12|0);
         $81 = ((($80)) + 4|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = $3;
         $84 = ((($83)) + 12|0);
         ;HEAP32[$$byval_copy>>2]=HEAP32[$84>>2]|0;
         $85 = (FUNCTION_TABLE_iiii[$82 & 15]($$byval_copy,0,48)|0);
         $6 = $85;
         $86 = $6;
         $87 = $4;
         (_nk_memcopy($86,$87,48)|0);
         $88 = $3;
         $89 = ((($88)) + 284|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = ($90|0)!=(0|0);
         if ($91) {
          $96 = $3;
          $97 = ((($96)) + 284|0);
          $98 = HEAP32[$97>>2]|0;
          $99 = $6;
          HEAP32[$99>>2] = $98;
          $100 = $6;
          $101 = $3;
          $102 = ((($101)) + 284|0);
          HEAP32[$102>>2] = $100;
         } else {
          $92 = $6;
          $93 = $3;
          $94 = ((($93)) + 284|0);
          HEAP32[$94>>2] = $92;
          $95 = $6;
          HEAP32[$95>>2] = 0;
         }
         $103 = $4;
         $104 = ((($103)) + 13|0);
         $105 = HEAP8[$104>>0]|0;
         $106 = ($105<<24>>24)!=(0);
         $107 = $3;
         do {
          if ($106) {
           $121 = ((($107)) + 288|0);
           $122 = HEAP32[$121>>2]|0;
           $123 = ($122|0)!=(0);
           if ($123) {
            $124 = $3;
            $125 = ((($124)) + 280|0);
            $126 = HEAP32[$125>>2]|0;
            $5 = $126;
            $127 = $6;
            $128 = $5;
            $129 = ((($128)) + 68|0);
            HEAP32[$129>>2] = $127;
            break;
           } else {
            ___assert_fail((3413|0),(1320|0),10863,(3251|0));
            // unreachable;
           }
          } else {
           $108 = ((($107)) + 12|0);
           $109 = ((($108)) + 4|0);
           $110 = HEAP32[$109>>2]|0;
           $111 = $3;
           $112 = ((($111)) + 12|0);
           ;HEAP32[$$byval_copy2>>2]=HEAP32[$112>>2]|0;
           $113 = (FUNCTION_TABLE_iiii[$110 & 15]($$byval_copy2,0,72)|0);
           $5 = $113;
           $114 = $5;
           $115 = ($114|0)!=(0|0);
           if (!($115)) {
            ___assert_fail((2240|0),(1320|0),10859,(3251|0));
            // unreachable;
           }
           $116 = $5;
           $117 = ($116|0)!=(0|0);
           if ($117) {
            $118 = $6;
            $119 = $5;
            $120 = ((($119)) + 68|0);
            HEAP32[$120>>2] = $118;
            break;
           }
           $2 = 0;
           $197 = $2;
           STACKTOP = sp;return ($197|0);
          }
         } while(0);
         $130 = $4;
         $131 = ((($130)) + 13|0);
         $132 = HEAP8[$131>>0]|0;
         $133 = ($132<<24>>24)!=(0);
         if (!($133)) {
          $134 = $3;
          $135 = ((($134)) + 280|0);
          $136 = HEAP32[$135>>2]|0;
          $137 = ($136|0)!=(0|0);
          if ($137) {
           $142 = $3;
           $143 = ((($142)) + 280|0);
           $144 = HEAP32[$143>>2]|0;
           $145 = $5;
           HEAP32[$145>>2] = $144;
           $146 = $5;
           $147 = $3;
           $148 = ((($147)) + 280|0);
           HEAP32[$148>>2] = $146;
          } else {
           $138 = $5;
           $139 = $3;
           $140 = ((($139)) + 280|0);
           HEAP32[$140>>2] = $138;
           $141 = $5;
           HEAP32[$141>>2] = 0;
          }
          $149 = $5;
          $150 = ((($149)) + 24|0);
          $151 = $6;
          $152 = ((($151)) + 40|0);
          HEAP32[$152>>2] = $150;
         }
         $153 = $4;
         $154 = ((($153)) + 12|0);
         $155 = HEAP8[$154>>0]|0;
         $156 = ($155<<24>>24)!=(0);
         do {
          if (!($156)) {
           $157 = $3;
           $158 = ((($157)) + 12|0);
           $159 = ((($158)) + 4|0);
           $160 = HEAP32[$159>>2]|0;
           $161 = $3;
           $162 = ((($161)) + 12|0);
           $163 = $6;
           $164 = ((($163)) + 8|0);
           $165 = HEAP32[$164>>2]|0;
           ;HEAP32[$$byval_copy3>>2]=HEAP32[$162>>2]|0;
           $166 = (FUNCTION_TABLE_iiii[$160 & 15]($$byval_copy3,0,$165)|0);
           $167 = $6;
           $168 = ((($167)) + 4|0);
           HEAP32[$168>>2] = $166;
           $169 = $6;
           $170 = ((($169)) + 4|0);
           $171 = HEAP32[$170>>2]|0;
           $172 = ($171|0)!=(0|0);
           if (!($172)) {
            ___assert_fail((3429|0),(1320|0),10883,(3251|0));
            // unreachable;
           }
           $173 = $6;
           $174 = ((($173)) + 4|0);
           $175 = HEAP32[$174>>2]|0;
           $176 = ($175|0)!=(0|0);
           if ($176) {
            $181 = $6;
            $182 = ((($181)) + 4|0);
            $183 = HEAP32[$182>>2]|0;
            $184 = $4;
            $185 = ((($184)) + 4|0);
            $186 = HEAP32[$185>>2]|0;
            $187 = $6;
            $188 = ((($187)) + 8|0);
            $189 = HEAP32[$188>>2]|0;
            (_nk_memcopy($183,$186,$189)|0);
            $190 = $6;
            $191 = ((($190)) + 12|0);
            HEAP8[$191>>0] = 1;
            break;
           }
           $177 = $3;
           $178 = ((($177)) + 288|0);
           $179 = HEAP32[$178>>2]|0;
           $180 = (($179) + 1)|0;
           HEAP32[$178>>2] = $180;
           $2 = 0;
           $197 = $2;
           STACKTOP = sp;return ($197|0);
          }
         } while(0);
         $192 = $3;
         $193 = ((($192)) + 288|0);
         $194 = HEAP32[$193>>2]|0;
         $195 = (($194) + 1)|0;
         HEAP32[$193>>2] = $195;
         $196 = $5;
         $2 = $196;
         $197 = $2;
         STACKTOP = sp;return ($197|0);
        }
       }
      }
     }
    }
   }
  }
 }
 $2 = 0;
 $197 = $2;
 STACKTOP = sp;return ($197|0);
}
function _nk_font_atlas_add_compressed($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 128|0;
 $13 = sp + 48|0;
 $14 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((3096|0),(1320|0),10957,(3450|0));
  // unreachable;
 }
 $17 = $6;
 $18 = ((($17)) + 24|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((3314|0),(1320|0),10958,(3450|0));
  // unreachable;
 }
 $22 = $6;
 $23 = ((($22)) + 24|0);
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((3337|0),(1320|0),10959,(3450|0));
  // unreachable;
 }
 $27 = $6;
 $28 = ((($27)) + 12|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((3269|0),(1320|0),10960,(3450|0));
  // unreachable;
 }
 $32 = $6;
 $33 = ((($32)) + 12|0);
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  ___assert_fail((3292|0),(1320|0),10961,(3450|0));
  // unreachable;
 }
 $37 = $7;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  ___assert_fail((3479|0),(1320|0),10963,(3450|0));
  // unreachable;
 }
 $39 = $8;
 $40 = ($39|0)!=(0);
 if (!($40)) {
  ___assert_fail((3495|0),(1320|0),10964,(3450|0));
  // unreachable;
 }
 $41 = $6;
 $42 = ($41|0)!=(0|0);
 $43 = $7;
 $44 = ($43|0)!=(0|0);
 $or$cond = $42 & $44;
 if ($or$cond) {
  $45 = $6;
  $46 = ((($45)) + 24|0);
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = $6;
   $51 = ((($50)) + 24|0);
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)!=(0|0);
   if ($54) {
    $55 = $6;
    $56 = ((($55)) + 12|0);
    $57 = ((($56)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)!=(0|0);
    if ($59) {
     $60 = $6;
     $61 = ((($60)) + 12|0);
     $62 = ((($61)) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)!=(0|0);
     if ($64) {
      $65 = $7;
      $66 = (_nk_decompress_length($65)|0);
      $11 = $66;
      $67 = $6;
      $68 = ((($67)) + 12|0);
      $69 = ((($68)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $6;
      $72 = ((($71)) + 12|0);
      $73 = $11;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$72>>2]|0;
      $74 = (FUNCTION_TABLE_iiii[$70 & 15]($$byval_copy,0,$73)|0);
      $12 = $74;
      $75 = $12;
      $76 = ($75|0)!=(0|0);
      if (!($76)) {
       ___assert_fail((3511|0),(1320|0),10971,(3450|0));
       // unreachable;
      }
      $77 = $12;
      $78 = ($77|0)!=(0|0);
      if (!($78)) {
       $5 = 0;
       $95 = $5;
       STACKTOP = sp;return ($95|0);
      }
      $79 = $12;
      $80 = $7;
      $81 = $8;
      (_nk_decompress($79,$80,$81)|0);
      $82 = $10;
      $83 = ($82|0)!=(0|0);
      if ($83) {
       $84 = $10;
       dest=$13; src=$84; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      } else {
       $85 = $9;
       _nk_font_config($14,$85);
       dest=$13; src=$14; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      }
      $86 = $12;
      $87 = ((($13)) + 4|0);
      HEAP32[$87>>2] = $86;
      $88 = $11;
      $89 = ((($13)) + 8|0);
      HEAP32[$89>>2] = $88;
      $90 = $9;
      $91 = ((($13)) + 20|0);
      HEAPF32[$91>>2] = $90;
      $92 = ((($13)) + 12|0);
      HEAP8[$92>>0] = 1;
      $93 = $6;
      $94 = (_nk_font_atlas_add($93,$13)|0);
      $5 = $94;
      $95 = $5;
      STACKTOP = sp;return ($95|0);
     }
    }
   }
  }
 }
 $5 = 0;
 $95 = $5;
 STACKTOP = sp;return ($95|0);
}
function _nk_decompress_length($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = $1;
 $8 = ((($7)) + 9|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = (($6) + ($11))|0;
 $13 = $1;
 $14 = ((($13)) + 10|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = (($12) + ($17))|0;
 $19 = $1;
 $20 = ((($19)) + 11|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($18) + ($22))|0;
 STACKTOP = sp;return ($23|0);
}
function _nk_decompress($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 24;
 $13 = $5;
 $14 = ((($13)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 16;
 $18 = $5;
 $19 = ((($18)) + 2|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 8;
 $23 = $5;
 $24 = ((($23)) + 3|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = (($22) + ($26))|0;
 $28 = (($17) + ($27))|0;
 $29 = (($12) + ($28))|0;
 $30 = ($29|0)!=(1471938560);
 if ($30) {
  $3 = 0;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $31 = $5;
 $32 = ((($31)) + 4|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 << 24;
 $36 = $5;
 $37 = ((($36)) + 5|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 16;
 $41 = $5;
 $42 = ((($41)) + 6|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 << 8;
 $46 = $5;
 $47 = ((($46)) + 7|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (($45) + ($49))|0;
 $51 = (($40) + ($50))|0;
 $52 = (($35) + ($51))|0;
 $53 = ($52|0)!=(0);
 if ($53) {
  $3 = 0;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 $54 = $5;
 $55 = (_nk_decompress_length($54)|0);
 $7 = $55;
 $56 = $5;
 HEAP32[11205] = $56;
 $57 = $5;
 $58 = $6;
 $59 = (($57) + ($58)|0);
 HEAP32[11206] = $59;
 $60 = $4;
 $61 = $7;
 $62 = (($60) + ($61)|0);
 HEAP32[11207] = $62;
 $63 = $4;
 HEAP32[11208] = $63;
 $64 = $5;
 $65 = ((($64)) + 16|0);
 $5 = $65;
 $66 = $4;
 HEAP32[11209] = $66;
 while(1) {
  $67 = $5;
  $8 = $67;
  $68 = $5;
  $69 = (_nk_decompress_token($68)|0);
  $5 = $69;
  $70 = $5;
  $71 = $8;
  $72 = ($70|0)==($71|0);
  if ($72) {
   label = 7;
   break;
  }
  $119 = HEAP32[11209]|0;
  $120 = $4;
  $121 = $7;
  $122 = (($120) + ($121)|0);
  $123 = ($119>>>0)<=($122>>>0);
  if (!($123)) {
   label = 18;
   break;
  }
  $124 = HEAP32[11209]|0;
  $125 = $4;
  $126 = $7;
  $127 = (($125) + ($126)|0);
  $128 = ($124>>>0)>($127>>>0);
  if ($128) {
   label = 20;
   break;
  }
 }
 if ((label|0) == 7) {
  $73 = $5;
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = ($75|0)==(5);
  if (!($76)) {
   ___assert_fail((22521|0),(1320|0),10700,(22507|0));
   // unreachable;
  }
  $77 = $5;
  $78 = ((($77)) + 1|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = ($80|0)==(250);
  if (!($81)) {
   ___assert_fail((22521|0),(1320|0),10700,(22507|0));
   // unreachable;
  }
  $82 = HEAP32[11209]|0;
  $83 = $4;
  $84 = $7;
  $85 = (($83) + ($84)|0);
  $86 = ($82|0)==($85|0);
  if (!($86)) {
   ___assert_fail((22481|0),(1320|0),10694,(22507|0));
   // unreachable;
  }
  $87 = HEAP32[11209]|0;
  $88 = $4;
  $89 = $7;
  $90 = (($88) + ($89)|0);
  $91 = ($87|0)!=($90|0);
  if ($91) {
   $3 = 0;
   $129 = $3;
   STACKTOP = sp;return ($129|0);
  }
  $92 = $4;
  $93 = $7;
  $94 = (_nk_adler32(1,$92,$93)|0);
  $95 = $5;
  $96 = ((($95)) + 2|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 << 24;
  $100 = $5;
  $101 = ((($100)) + 3|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $103 << 16;
  $105 = $5;
  $106 = ((($105)) + 4|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = $108 << 8;
  $110 = $5;
  $111 = ((($110)) + 5|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = (($109) + ($113))|0;
  $115 = (($104) + ($114))|0;
  $116 = (($99) + ($115))|0;
  $117 = ($94|0)!=($116|0);
  if ($117) {
   $3 = 0;
   $129 = $3;
   STACKTOP = sp;return ($129|0);
  } else {
   $118 = $7;
   $3 = $118;
   $129 = $3;
   STACKTOP = sp;return ($129|0);
  }
 }
 else if ((label|0) == 18) {
  ___assert_fail((22523|0),(1320|0),10704,(22507|0));
  // unreachable;
 }
 else if ((label|0) == 20) {
  $3 = 0;
  $129 = $3;
  STACKTOP = sp;return ($129|0);
 }
 return (0)|0;
}
function _nk_font_atlas_add_compressed_base85($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy2 = sp + 36|0;
 $$byval_copy = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((3096|0),(1320|0),10992,(3529|0));
  // unreachable;
 }
 $14 = $5;
 $15 = ((($14)) + 24|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((3314|0),(1320|0),10993,(3529|0));
  // unreachable;
 }
 $19 = $5;
 $20 = ((($19)) + 24|0);
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((3337|0),(1320|0),10994,(3529|0));
  // unreachable;
 }
 $24 = $5;
 $25 = ((($24)) + 12|0);
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  ___assert_fail((3269|0),(1320|0),10995,(3529|0));
  // unreachable;
 }
 $29 = $5;
 $30 = ((($29)) + 12|0);
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  ___assert_fail((3292|0),(1320|0),10996,(3529|0));
  // unreachable;
 }
 $34 = $6;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  ___assert_fail((3565|0),(1320|0),10998,(3529|0));
  // unreachable;
 }
 $36 = $5;
 $37 = ($36|0)!=(0|0);
 $38 = $6;
 $39 = ($38|0)!=(0|0);
 $or$cond = $37 & $39;
 if ($or$cond) {
  $40 = $5;
  $41 = ((($40)) + 24|0);
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(0|0);
  if ($44) {
   $45 = $5;
   $46 = ((($45)) + 24|0);
   $47 = ((($46)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = $5;
    $51 = ((($50)) + 12|0);
    $52 = ((($51)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)!=(0|0);
    if ($54) {
     $55 = $5;
     $56 = ((($55)) + 12|0);
     $57 = ((($56)) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)!=(0|0);
     if ($59) {
      $60 = $6;
      $61 = (_nk_strlen($60)|0);
      $62 = (($61) + 4)|0;
      $63 = (($62|0) / 5)&-1;
      $64 = $63<<2;
      $9 = $64;
      $65 = $5;
      $66 = ((($65)) + 24|0);
      $67 = ((($66)) + 4|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $5;
      $70 = ((($69)) + 24|0);
      $71 = $9;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$70>>2]|0;
      $72 = (FUNCTION_TABLE_iiii[$68 & 15]($$byval_copy,0,$71)|0);
      $10 = $72;
      $73 = $10;
      $74 = ($73|0)!=(0|0);
      if (!($74)) {
       ___assert_fail((3479|0),(1320|0),11005,(3529|0));
       // unreachable;
      }
      $75 = $10;
      $76 = ($75|0)!=(0|0);
      if ($76) {
       $77 = $10;
       $78 = $6;
       _nk_decode_85($77,$78);
       $79 = $5;
       $80 = $10;
       $81 = $9;
       $82 = $7;
       $83 = $8;
       $84 = (_nk_font_atlas_add_compressed($79,$80,$81,$82,$83)|0);
       $11 = $84;
       $85 = $5;
       $86 = ((($85)) + 24|0);
       $87 = ((($86)) + 8|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = $5;
       $90 = ((($89)) + 24|0);
       $91 = $10;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$90>>2]|0;
       FUNCTION_TABLE_vii[$88 & 31]($$byval_copy2,$91);
       $92 = $11;
       $4 = $92;
       $93 = $4;
       STACKTOP = sp;return ($93|0);
      } else {
       $4 = 0;
       $93 = $4;
       STACKTOP = sp;return ($93|0);
      }
     }
    }
   }
  }
 }
 $4 = 0;
 $93 = $4;
 STACKTOP = sp;return ($93|0);
}
function _nk_decode_85($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $5 = $3;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = (_nk_decode_85_byte($9)|0);
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = (_nk_decode_85_byte($13)|0);
  $15 = $3;
  $16 = ((($15)) + 2|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = (_nk_decode_85_byte($17)|0);
  $19 = $3;
  $20 = ((($19)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = (_nk_decode_85_byte($21)|0);
  $23 = $3;
  $24 = ((($23)) + 4|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = (_nk_decode_85_byte($25)|0);
  $27 = ($26*85)|0;
  $28 = (($22) + ($27))|0;
  $29 = ($28*85)|0;
  $30 = (($18) + ($29))|0;
  $31 = ($30*85)|0;
  $32 = (($14) + ($31))|0;
  $33 = ($32*85)|0;
  $34 = (($10) + ($33))|0;
  $4 = $34;
  $35 = $4;
  $36 = $35 >>> 0;
  $37 = $36 & 255;
  $38 = $37&255;
  $39 = $2;
  HEAP8[$39>>0] = $38;
  $40 = $4;
  $41 = $40 >>> 8;
  $42 = $41 & 255;
  $43 = $42&255;
  $44 = $2;
  $45 = ((($44)) + 1|0);
  HEAP8[$45>>0] = $43;
  $46 = $4;
  $47 = $46 >>> 16;
  $48 = $47 & 255;
  $49 = $48&255;
  $50 = $2;
  $51 = ((($50)) + 2|0);
  HEAP8[$51>>0] = $49;
  $52 = $4;
  $53 = $52 >>> 24;
  $54 = $53 & 255;
  $55 = $54&255;
  $56 = $2;
  $57 = ((($56)) + 3|0);
  HEAP8[$57>>0] = $55;
  $58 = $3;
  $59 = ((($58)) + 5|0);
  $3 = $59;
  $60 = $2;
  $61 = ((($60)) + 4|0);
  $2 = $61;
 }
 STACKTOP = sp;return;
}
function _nk_font_atlas_add_default($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((3096|0),(1320|0),11019,(3577|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((3314|0),(1320|0),11020,(3577|0));
  // unreachable;
 }
 $13 = $3;
 $14 = ((($13)) + 24|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((3337|0),(1320|0),11021,(3577|0));
  // unreachable;
 }
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((3269|0),(1320|0),11022,(3577|0));
  // unreachable;
 }
 $23 = $3;
 $24 = ((($23)) + 12|0);
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $3;
  $29 = $4;
  $30 = $5;
  $31 = (_nk_font_atlas_add_compressed_base85($28,3603,$29,$30)|0);
  STACKTOP = sp;return ($31|0);
 } else {
  ___assert_fail((3292|0),(1320|0),11023,(3577|0));
  // unreachable;
 }
 return (0)|0;
}
function _nk_font_atlas_bake($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0;
 var $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy13 = sp + 100|0;
 $$byval_copy12 = sp + 96|0;
 $$byval_copy11 = sp + 92|0;
 $$byval_copy10 = sp + 88|0;
 $$byval_copy9 = sp + 84|0;
 $$byval_copy8 = sp + 80|0;
 $$byval_copy7 = sp + 76|0;
 $$byval_copy6 = sp + 104|0;
 $$byval_copy5 = sp + 72|0;
 $$byval_copy4 = sp + 68|0;
 $$byval_copy = sp + 64|0;
 $11 = sp + 32|0;
 $12 = sp + 28|0;
 $18 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $20 = $5;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((3096|0),(1320|0),11039,(15584|0));
  // unreachable;
 }
 $22 = $5;
 $23 = ((($22)) + 24|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((3314|0),(1320|0),11040,(15584|0));
  // unreachable;
 }
 $27 = $5;
 $28 = ((($27)) + 24|0);
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((3337|0),(1320|0),11041,(15584|0));
  // unreachable;
 }
 $32 = $5;
 $33 = ((($32)) + 12|0);
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  ___assert_fail((3269|0),(1320|0),11042,(15584|0));
  // unreachable;
 }
 $37 = $5;
 $38 = ((($37)) + 12|0);
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  ___assert_fail((3292|0),(1320|0),11043,(15584|0));
  // unreachable;
 }
 $42 = $6;
 $43 = ($42|0)!=(0|0);
 if (!($43)) {
  ___assert_fail((15603|0),(1320|0),11045,(15584|0));
  // unreachable;
 }
 $44 = $7;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  ___assert_fail((15609|0),(1320|0),11046,(15584|0));
  // unreachable;
 }
 $46 = $5;
 $47 = ($46|0)!=(0|0);
 $48 = $6;
 $49 = ($48|0)!=(0|0);
 $or$cond = $47 & $49;
 $50 = $7;
 $51 = ($50|0)!=(0|0);
 $or$cond3 = $or$cond & $51;
 if ($or$cond3) {
  $52 = $5;
  $53 = ((($52)) + 24|0);
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0|0);
  if ($56) {
   $57 = $5;
   $58 = ((($57)) + 24|0);
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)!=(0|0);
   if ($61) {
    $62 = $5;
    $63 = ((($62)) + 12|0);
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)!=(0|0);
    if ($66) {
     $67 = $5;
     $68 = ((($67)) + 12|0);
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)!=(0|0);
     if ($71) {
      $72 = $5;
      $73 = ((($72)) + 288|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($74|0)!=(0);
      if (!($75)) {
       $76 = $5;
       $77 = (_nk_font_atlas_add_default($76,13.0,0)|0);
       $78 = $5;
       $79 = ((($78)) + 276|0);
       HEAP32[$79>>2] = $77;
      }
      $80 = $5;
      $81 = ((($80)) + 288|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)!=(0);
      if (!($83)) {
       ___assert_fail((3413|0),(1320|0),11057,(15584|0));
       // unreachable;
      }
      $84 = $5;
      $85 = ((($84)) + 288|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)!=(0);
      if (!($87)) {
       $4 = 0;
       $387 = $4;
       STACKTOP = sp;return ($387|0);
      }
      $88 = $5;
      $89 = ((($88)) + 268|0);
      $90 = $5;
      $91 = ((($90)) + 284|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $5;
      $94 = ((($93)) + 288|0);
      $95 = HEAP32[$94>>2]|0;
      _nk_font_baker_memory($11,$89,$92,$95);
      $96 = $5;
      $97 = ((($96)) + 24|0);
      $98 = ((($97)) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $5;
      $101 = ((($100)) + 24|0);
      $102 = HEAP32[$11>>2]|0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$101>>2]|0;
      $103 = (FUNCTION_TABLE_iiii[$99 & 15]($$byval_copy,0,$102)|0);
      $10 = $103;
      $104 = $10;
      $105 = ($104|0)!=(0|0);
      if (!($105)) {
       ___assert_fail((15616|0),(1320|0),11063,(15584|0));
       // unreachable;
      }
      $106 = $10;
      $107 = ($106|0)!=(0|0);
      do {
       if ($107) {
        $108 = $10;
        $109 = $5;
        $110 = ((($109)) + 268|0);
        $111 = HEAP32[$110>>2]|0;
        $112 = $5;
        $113 = ((($112)) + 288|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = $5;
        $116 = ((($115)) + 24|0);
        $117 = (_nk_font_baker($108,$111,$114,$116)|0);
        $14 = $117;
        $118 = $5;
        $119 = ((($118)) + 12|0);
        $120 = ((($119)) + 4|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = $5;
        $123 = ((($122)) + 12|0);
        $124 = $5;
        $125 = ((($124)) + 268|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = ($126*48)|0;
        ;HEAP32[$$byval_copy4>>2]=HEAP32[$123>>2]|0;
        $128 = (FUNCTION_TABLE_iiii[$121 & 15]($$byval_copy4,0,$127)|0);
        $129 = $5;
        $130 = ((($129)) + 272|0);
        HEAP32[$130>>2] = $128;
        $131 = $5;
        $132 = ((($131)) + 272|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = ($133|0)!=(0|0);
        if (!($134)) {
         ___assert_fail((15620|0),(1320|0),11070,(15584|0));
         // unreachable;
        }
        $135 = $5;
        $136 = ((($135)) + 272|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($137|0)!=(0|0);
        if (!($138)) {
         break;
        }
        $139 = $5;
        $140 = ((($139)) + 36|0);
        $141 = ((($140)) + 4|0);
        HEAP16[$141>>1] = 181;
        $142 = $5;
        $143 = ((($142)) + 36|0);
        $144 = ((($143)) + 6|0);
        HEAP16[$144>>1] = 28;
        $145 = $14;
        $146 = $6;
        $147 = $7;
        $148 = $5;
        $149 = ((($148)) + 36|0);
        $150 = $5;
        $151 = ((($150)) + 284|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = $5;
        $154 = ((($153)) + 288|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = $5;
        $157 = ((($156)) + 24|0);
        $158 = (_nk_font_bake_pack($145,$12,$146,$147,$149,$152,$155,$157)|0);
        $159 = ($158|0)!=(0);
        if (!($159)) {
         break;
        }
        $160 = $5;
        $161 = ((($160)) + 24|0);
        $162 = ((($161)) + 4|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = $5;
        $165 = ((($164)) + 24|0);
        $166 = HEAP32[$12>>2]|0;
        ;HEAP32[$$byval_copy5>>2]=HEAP32[$165>>2]|0;
        $167 = (FUNCTION_TABLE_iiii[$163 & 15]($$byval_copy5,0,$166)|0);
        $168 = $5;
        HEAP32[$168>>2] = $167;
        $169 = $5;
        $170 = HEAP32[$169>>2]|0;
        $171 = ($170|0)!=(0|0);
        if (!($171)) {
         ___assert_fail((15634|0),(1320|0),11083,(15584|0));
         // unreachable;
        }
        $172 = $5;
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)!=(0|0);
        if (!($174)) {
         break;
        }
        $175 = $14;
        $176 = $5;
        $177 = HEAP32[$176>>2]|0;
        $178 = $6;
        $179 = HEAP32[$178>>2]|0;
        $180 = $7;
        $181 = HEAP32[$180>>2]|0;
        $182 = $5;
        $183 = ((($182)) + 272|0);
        $184 = HEAP32[$183>>2]|0;
        $185 = $5;
        $186 = ((($185)) + 268|0);
        $187 = HEAP32[$186>>2]|0;
        $188 = $5;
        $189 = ((($188)) + 284|0);
        $190 = HEAP32[$189>>2]|0;
        $191 = $5;
        $192 = ((($191)) + 288|0);
        $193 = HEAP32[$192>>2]|0;
        _nk_font_bake($175,$177,$179,$181,$184,$187,$190,$193);
        $194 = $5;
        $195 = HEAP32[$194>>2]|0;
        $196 = $6;
        $197 = HEAP32[$196>>2]|0;
        $198 = $7;
        $199 = HEAP32[$198>>2]|0;
        $200 = $5;
        $201 = ((($200)) + 36|0);
        ;HEAP16[$$byval_copy6>>1]=HEAP16[$201>>1]|0;HEAP16[$$byval_copy6+2>>1]=HEAP16[$201+2>>1]|0;HEAP16[$$byval_copy6+4>>1]=HEAP16[$201+4>>1]|0;HEAP16[$$byval_copy6+6>>1]=HEAP16[$201+6>>1]|0;
        _nk_font_bake_custom_data($195,$197,$199,$$byval_copy6,15647,90,27,46,88);
        $202 = $8;
        $203 = ($202|0)==(1);
        if ($203) {
         $204 = $5;
         $205 = ((($204)) + 24|0);
         $206 = ((($205)) + 4|0);
         $207 = HEAP32[$206>>2]|0;
         $208 = $5;
         $209 = ((($208)) + 24|0);
         $210 = $6;
         $211 = HEAP32[$210>>2]|0;
         $212 = $7;
         $213 = HEAP32[$212>>2]|0;
         $214 = Math_imul($211, $213)|0;
         $215 = $214<<2;
         ;HEAP32[$$byval_copy7>>2]=HEAP32[$209>>2]|0;
         $216 = (FUNCTION_TABLE_iiii[$207 & 15]($$byval_copy7,0,$215)|0);
         $15 = $216;
         $217 = $15;
         $218 = ($217|0)!=(0|0);
         if (!($218)) {
          ___assert_fail((18078|0),(1320|0),11097,(15584|0));
          // unreachable;
         }
         $219 = $15;
         $220 = ($219|0)!=(0|0);
         if (!($220)) {
          break;
         }
         $221 = $15;
         $222 = $6;
         $223 = HEAP32[$222>>2]|0;
         $224 = $7;
         $225 = HEAP32[$224>>2]|0;
         $226 = $5;
         $227 = HEAP32[$226>>2]|0;
         _nk_font_bake_convert($221,$223,$225,$227);
         $228 = $5;
         $229 = ((($228)) + 24|0);
         $230 = ((($229)) + 8|0);
         $231 = HEAP32[$230>>2]|0;
         $232 = $5;
         $233 = ((($232)) + 24|0);
         $234 = $5;
         $235 = HEAP32[$234>>2]|0;
         ;HEAP32[$$byval_copy8>>2]=HEAP32[$233>>2]|0;
         FUNCTION_TABLE_vii[$231 & 31]($$byval_copy8,$235);
         $236 = $15;
         $237 = $5;
         HEAP32[$237>>2] = $236;
        }
        $238 = $6;
        $239 = HEAP32[$238>>2]|0;
        $240 = $5;
        $241 = ((($240)) + 4|0);
        HEAP32[$241>>2] = $239;
        $242 = $7;
        $243 = HEAP32[$242>>2]|0;
        $244 = $5;
        $245 = ((($244)) + 8|0);
        HEAP32[$245>>2] = $243;
        $246 = $5;
        $247 = ((($246)) + 280|0);
        $248 = HEAP32[$247>>2]|0;
        $13 = $248;
        while(1) {
         $249 = $13;
         $250 = ($249|0)!=(0|0);
         if (!($250)) {
          break;
         }
         $251 = $13;
         $16 = $251;
         $252 = $16;
         $253 = ((($252)) + 68|0);
         $254 = HEAP32[$253>>2]|0;
         $17 = $254;
         $255 = $16;
         $256 = $17;
         $257 = ((($256)) + 20|0);
         $258 = +HEAPF32[$257>>2];
         $259 = $17;
         $260 = ((($259)) + 44|0);
         $261 = HEAP32[$260>>2]|0;
         $262 = $5;
         $263 = ((($262)) + 272|0);
         $264 = HEAP32[$263>>2]|0;
         $265 = $17;
         $266 = ((($265)) + 40|0);
         $267 = HEAP32[$266>>2]|0;
         _nk_handle_ptr($18,0);
         ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
         _nk_font_init($255,$258,$261,$264,$267,$$byval_copy9);
         $268 = $13;
         $269 = HEAP32[$268>>2]|0;
         $13 = $269;
        }
        $9 = 0;
        while(1) {
         $270 = $9;
         $271 = ($270|0)<(7);
         if (!($271)) {
          break;
         }
         $272 = $9;
         $273 = $5;
         $274 = ((($273)) + 44|0);
         $275 = (($274) + ($272<<5)|0);
         $19 = $275;
         $276 = $6;
         $277 = HEAP32[$276>>2]|0;
         $278 = $277&65535;
         $279 = $19;
         $280 = ((($279)) + 4|0);
         HEAP16[$280>>1] = $278;
         $281 = $7;
         $282 = HEAP32[$281>>2]|0;
         $283 = $282&65535;
         $284 = $19;
         $285 = ((($284)) + 6|0);
         HEAP16[$285>>1] = $283;
         $286 = $5;
         $287 = ((($286)) + 36|0);
         $288 = HEAP16[$287>>1]|0;
         $289 = $288 << 16 >> 16;
         $290 = (+($289|0));
         $291 = $9;
         $292 = (36 + (($291*24)|0)|0);
         $293 = +HEAPF32[$292>>2];
         $294 = $290 + $293;
         $295 = (~~(($294))&65535);
         $296 = $19;
         $297 = ((($296)) + 8|0);
         HEAP16[$297>>1] = $295;
         $298 = $5;
         $299 = ((($298)) + 36|0);
         $300 = ((($299)) + 2|0);
         $301 = HEAP16[$300>>1]|0;
         $302 = $301 << 16 >> 16;
         $303 = (+($302|0));
         $304 = $9;
         $305 = (36 + (($304*24)|0)|0);
         $306 = ((($305)) + 4|0);
         $307 = +HEAPF32[$306>>2];
         $308 = $303 + $307;
         $309 = (~~(($308))&65535);
         $310 = $19;
         $311 = ((($310)) + 8|0);
         $312 = ((($311)) + 2|0);
         HEAP16[$312>>1] = $309;
         $313 = $9;
         $314 = (36 + (($313*24)|0)|0);
         $315 = ((($314)) + 8|0);
         $316 = +HEAPF32[$315>>2];
         $317 = (~~(($316))&65535);
         $318 = $19;
         $319 = ((($318)) + 8|0);
         $320 = ((($319)) + 4|0);
         HEAP16[$320>>1] = $317;
         $321 = $9;
         $322 = (36 + (($321*24)|0)|0);
         $323 = ((($322)) + 8|0);
         $324 = ((($323)) + 4|0);
         $325 = +HEAPF32[$324>>2];
         $326 = (~~(($325))&65535);
         $327 = $19;
         $328 = ((($327)) + 8|0);
         $329 = ((($328)) + 6|0);
         HEAP16[$329>>1] = $326;
         $330 = $19;
         $331 = ((($330)) + 16|0);
         $332 = $9;
         $333 = (36 + (($332*24)|0)|0);
         $334 = ((($333)) + 8|0);
         ;HEAP32[$331>>2]=HEAP32[$334>>2]|0;HEAP32[$331+4>>2]=HEAP32[$334+4>>2]|0;
         $335 = $19;
         $336 = ((($335)) + 24|0);
         $337 = $9;
         $338 = (36 + (($337*24)|0)|0);
         $339 = ((($338)) + 16|0);
         ;HEAP32[$336>>2]=HEAP32[$339>>2]|0;HEAP32[$336+4>>2]=HEAP32[$339+4>>2]|0;
         $340 = $9;
         $341 = (($340) + 1)|0;
         $9 = $341;
        }
        $342 = $5;
        $343 = ((($342)) + 24|0);
        $344 = ((($343)) + 8|0);
        $345 = HEAP32[$344>>2]|0;
        $346 = $5;
        $347 = ((($346)) + 24|0);
        $348 = $10;
        ;HEAP32[$$byval_copy10>>2]=HEAP32[$347>>2]|0;
        FUNCTION_TABLE_vii[$345 & 31]($$byval_copy10,$348);
        $349 = $5;
        $350 = HEAP32[$349>>2]|0;
        $4 = $350;
        $387 = $4;
        STACKTOP = sp;return ($387|0);
       }
      } while(0);
      $351 = $10;
      $352 = ($351|0)!=(0|0);
      if ($352) {
       $353 = $5;
       $354 = ((($353)) + 24|0);
       $355 = ((($354)) + 8|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = $5;
       $358 = ((($357)) + 24|0);
       $359 = $10;
       ;HEAP32[$$byval_copy11>>2]=HEAP32[$358>>2]|0;
       FUNCTION_TABLE_vii[$356 & 31]($$byval_copy11,$359);
      }
      $360 = $5;
      $361 = ((($360)) + 272|0);
      $362 = HEAP32[$361>>2]|0;
      $363 = ($362|0)!=(0|0);
      if ($363) {
       $364 = $5;
       $365 = ((($364)) + 12|0);
       $366 = ((($365)) + 8|0);
       $367 = HEAP32[$366>>2]|0;
       $368 = $5;
       $369 = ((($368)) + 12|0);
       $370 = $5;
       $371 = ((($370)) + 272|0);
       $372 = HEAP32[$371>>2]|0;
       ;HEAP32[$$byval_copy12>>2]=HEAP32[$369>>2]|0;
       FUNCTION_TABLE_vii[$367 & 31]($$byval_copy12,$372);
       $373 = $5;
       $374 = ((($373)) + 272|0);
       HEAP32[$374>>2] = 0;
      }
      $375 = $5;
      $376 = HEAP32[$375>>2]|0;
      $377 = ($376|0)!=(0|0);
      if ($377) {
       $378 = $5;
       $379 = ((($378)) + 24|0);
       $380 = ((($379)) + 8|0);
       $381 = HEAP32[$380>>2]|0;
       $382 = $5;
       $383 = ((($382)) + 24|0);
       $384 = $5;
       $385 = HEAP32[$384>>2]|0;
       ;HEAP32[$$byval_copy13>>2]=HEAP32[$383>>2]|0;
       FUNCTION_TABLE_vii[$381 & 31]($$byval_copy13,$385);
       $386 = $5;
       HEAP32[$386>>2] = 0;
      }
      $4 = 0;
      $387 = $4;
      STACKTOP = sp;return ($387|0);
     }
    }
   }
  }
 }
 $4 = 0;
 $387 = $4;
 STACKTOP = sp;return ($387|0);
}
function _nk_font_baker_memory($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $9 = 0;
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((22600|0),(1320|0),10006,(22612|0));
  // unreachable;
 }
 $13 = $5;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((22633|0),(1320|0),10007,(22612|0));
  // unreachable;
 }
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $17 = $4;
  HEAP32[$17>>2] = 0;
  $18 = $5;
  HEAP32[$18>>2] = 0;
  STACKTOP = sp;return;
 }
 $19 = $5;
 HEAP32[$19>>2] = 0;
 $20 = $6;
 $21 = ((($20)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $24 = (_nk_font_default_glyph_ranges()|0);
  $25 = $6;
  $26 = ((($25)) + 36|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $6;
 $10 = $27;
 while(1) {
  $28 = $10;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   break;
  }
  $30 = $10;
  $31 = ((($30)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_nk_range_count($32)|0);
  $8 = $33;
  $34 = $8;
  $35 = $9;
  $36 = (($35) + ($34))|0;
  $9 = $36;
  $37 = $10;
  $38 = ((($37)) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $8;
  $41 = (_nk_range_glyph_count($39,$40)|0);
  $42 = $5;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41))|0;
  HEAP32[$42>>2] = $44;
  $45 = $10;
  $46 = HEAP32[$45>>2]|0;
  $10 = $46;
 }
 $47 = $5;
 $48 = HEAP32[$47>>2]|0;
 $49 = $48<<4;
 $50 = $4;
 HEAP32[$50>>2] = $49;
 $51 = $9;
 $52 = ($51*24)|0;
 $53 = $4;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($52))|0;
 HEAP32[$53>>2] = $55;
 $56 = $5;
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57*28)|0;
 $59 = $4;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($58))|0;
 HEAP32[$59>>2] = $61;
 $62 = $7;
 $63 = ($62*56)|0;
 $64 = $4;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($63))|0;
 HEAP32[$64>>2] = $66;
 $67 = $4;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 64)|0;
 HEAP32[$67>>2] = $69;
 $70 = $4;
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + 12)|0;
 HEAP32[$70>>2] = $72;
 $73 = $4;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + 8)|0;
 HEAP32[$73>>2] = $75;
 STACKTOP = sp;return;
}
function _nk_font_baker($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $5;
  $13 = ((($12)) + 3|0);
  $14 = $13;
  $15 = $14 & -4;
  $16 = $15;
  $9 = $16;
  $17 = $9;
  $18 = ((($17)) + 64|0);
  $19 = ((($18)) + 3|0);
  $20 = $19;
  $21 = $20 & -4;
  $22 = $21;
  $23 = $9;
  $24 = ((($23)) + 48|0);
  HEAP32[$24>>2] = $22;
  $25 = $9;
  $26 = ((($25)) + 48|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $7;
  $29 = (($27) + (($28*56)|0)|0);
  $30 = ((($29)) + 3|0);
  $31 = $30;
  $32 = $31 & -4;
  $33 = $32;
  $34 = $9;
  $35 = ((($34)) + 52|0);
  HEAP32[$35>>2] = $33;
  $36 = $9;
  $37 = ((($36)) + 52|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $6;
  $40 = (($38) + (($39*28)|0)|0);
  $41 = ((($40)) + 3|0);
  $42 = $41;
  $43 = $42 & -4;
  $44 = $43;
  $45 = $9;
  $46 = ((($45)) + 56|0);
  HEAP32[$46>>2] = $44;
  $47 = $9;
  $48 = ((($47)) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $6;
  $51 = (($49) + ($50<<4)|0);
  $52 = ((($51)) + 3|0);
  $53 = $52;
  $54 = $53 & -4;
  $55 = $54;
  $56 = $9;
  $57 = ((($56)) + 60|0);
  HEAP32[$57>>2] = $55;
  $58 = $9;
  $59 = $8;
  ;HEAP32[$58>>2]=HEAP32[$59>>2]|0;HEAP32[$58+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$58+8>>2]=HEAP32[$59+8>>2]|0;
  $60 = $9;
  $4 = $60;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 } else {
  $4 = 0;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _nk_font_bake_pack($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $27 = sp + 24|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $18 = 0;
 $19 = 0;
 $20 = 0;
 $21 = 0;
 $33 = $10;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  ___assert_fail((22673|0),(1320|0),10060,(22686|0));
  // unreachable;
 }
 $35 = $11;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  ___assert_fail((15603|0),(1320|0),10061,(22686|0));
  // unreachable;
 }
 $37 = $12;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  ___assert_fail((15609|0),(1320|0),10062,(22686|0));
  // unreachable;
 }
 $39 = $14;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  ___assert_fail((22600|0),(1320|0),10063,(22686|0));
  // unreachable;
 }
 $41 = $15;
 $42 = ($41|0)!=(0);
 if (!($42)) {
  ___assert_fail((22704|0),(1320|0),10064,(22686|0));
  // unreachable;
 }
 $43 = $16;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  ___assert_fail((3129|0),(1320|0),10065,(22686|0));
  // unreachable;
 }
 $45 = $10;
 $46 = ($45|0)!=(0|0);
 $47 = $11;
 $48 = ($47|0)!=(0|0);
 $or$cond = $46 & $48;
 $49 = $12;
 $50 = ($49|0)!=(0|0);
 $or$cond3 = $or$cond & $50;
 $51 = $14;
 $52 = ($51|0)!=(0|0);
 $or$cond5 = $or$cond3 & $52;
 $53 = $15;
 $54 = ($53|0)!=(0);
 $or$cond7 = $or$cond5 & $54;
 if (!($or$cond7)) {
  $8 = 0;
  $385 = $8;
  STACKTOP = sp;return ($385|0);
 }
 $55 = $14;
 $17 = $55;
 while(1) {
  $56 = $17;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   break;
  }
  $58 = $17;
  $59 = ((($58)) + 36|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_nk_range_count($60)|0);
  $20 = $61;
  $62 = $20;
  $63 = $19;
  $64 = (($63) + ($62))|0;
  $19 = $64;
  $65 = $17;
  $66 = ((($65)) + 36|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $20;
  $69 = (_nk_range_glyph_count($67,$68)|0);
  $70 = $18;
  $71 = (($70) + ($69))|0;
  $18 = $71;
  $72 = $17;
  $73 = HEAP32[$72>>2]|0;
  $17 = $73;
 }
 $74 = $14;
 $17 = $74;
 while(1) {
  $75 = $17;
  $76 = ($75|0)!=(0|0);
  if (!($76)) {
   break;
  }
  $77 = $17;
  $22 = $77;
  $78 = $21;
  $79 = (($78) + 1)|0;
  $21 = $79;
  $80 = $9;
  $81 = ((($80)) + 48|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + (($78*56)|0)|0);
  $84 = $22;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (_nk_tt_InitFont($83,$86,0)|0);
  $88 = ($87|0)!=(0);
  if (!($88)) {
   label = 21;
   break;
  }
  $89 = $17;
  $90 = HEAP32[$89>>2]|0;
  $17 = $90;
 }
 if ((label|0) == 21) {
  $8 = 0;
  $385 = $8;
  STACKTOP = sp;return ($385|0);
 }
 $91 = $12;
 HEAP32[$91>>2] = 0;
 $92 = $18;
 $93 = ($92|0)>(1000);
 $94 = $93 ? 1024 : 512;
 $95 = $11;
 HEAP32[$95>>2] = $94;
 $96 = $9;
 $97 = ((($96)) + 12|0);
 $98 = $11;
 $99 = HEAP32[$98>>2]|0;
 $100 = $16;
 (_nk_tt_PackBegin($97,0,$99,32768,0,1,$100)|0);
 $23 = 0;
 $24 = 0;
 $25 = 0;
 $26 = 0;
 $101 = $13;
 $102 = ($101|0)!=(0|0);
 if ($102) {
  _nk_zero($27,16);
  $103 = $13;
  $104 = ((($103)) + 4|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = $106<<1;
  $108 = (($107) + 1)|0;
  $109 = $108&65535;
  $110 = ((($27)) + 4|0);
  HEAP16[$110>>1] = $109;
  $111 = $13;
  $112 = ((($111)) + 6|0);
  $113 = HEAP16[$112>>1]|0;
  $114 = $113 << 16 >> 16;
  $115 = (($114) + 1)|0;
  $116 = $115&65535;
  $117 = ((($27)) + 6|0);
  HEAP16[$117>>1] = $116;
  $118 = $9;
  $119 = ((($118)) + 12|0);
  _nk_tt_PackSetOversampling($119,1,1);
  $120 = $9;
  $121 = ((($120)) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  _nk_rp_pack_rects($122,$27,1);
  $123 = $12;
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($27)) + 10|0);
  $126 = HEAP16[$125>>1]|0;
  $127 = $126&65535;
  $128 = ((($27)) + 6|0);
  $129 = HEAP16[$128>>1]|0;
  $130 = $129&65535;
  $131 = (($127) + ($130))|0;
  $132 = ($124|0)<($131|0);
  if ($132) {
   $133 = ((($27)) + 10|0);
   $134 = HEAP16[$133>>1]|0;
   $135 = $134&65535;
   $136 = ((($27)) + 6|0);
   $137 = HEAP16[$136>>1]|0;
   $138 = $137&65535;
   $139 = (($135) + ($138))|0;
   $143 = $139;
  } else {
   $140 = $12;
   $141 = HEAP32[$140>>2]|0;
   $143 = $141;
  }
  $142 = $12;
  HEAP32[$142>>2] = $143;
  $144 = ((($27)) + 8|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $13;
  HEAP16[$146>>1] = $145;
  $147 = ((($27)) + 10|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $13;
  $150 = ((($149)) + 2|0);
  HEAP16[$150>>1] = $148;
  $151 = ((($27)) + 4|0);
  $152 = HEAP16[$151>>1]|0;
  $153 = $13;
  $154 = ((($153)) + 4|0);
  HEAP16[$154>>1] = $152;
  $155 = ((($27)) + 6|0);
  $156 = HEAP16[$155>>1]|0;
  $157 = $13;
  $158 = ((($157)) + 6|0);
  HEAP16[$158>>1] = $156;
 }
 $23 = 0;
 $159 = $14;
 $17 = $159;
 while(1) {
  $160 = $23;
  $161 = $15;
  $162 = ($160|0)<($161|0);
  $163 = $17;
  $164 = ($163|0)!=(0|0);
  $165 = $162 ? $164 : 0;
  if (!($165)) {
   break;
  }
  $28 = 0;
  $166 = $17;
  $31 = $166;
  $167 = $23;
  $168 = $9;
  $169 = ((($168)) + 48|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($167*56)|0)|0);
  $32 = $171;
  $29 = 0;
  $20 = 0;
  $172 = $31;
  $173 = ((($172)) + 36|0);
  $174 = HEAP32[$173>>2]|0;
  $30 = $174;
  while(1) {
   $175 = $30;
   $176 = HEAP32[$175>>2]|0;
   $177 = ($176|0)!=(0);
   if (!($177)) {
    break;
   }
   $178 = $30;
   $179 = ((($178)) + 4|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)!=(0);
   if (!($181)) {
    break;
   }
   $182 = $30;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $30;
   $186 = HEAP32[$185>>2]|0;
   $187 = (($184) - ($186))|0;
   $188 = (($187) + 1)|0;
   $189 = $29;
   $190 = (($189) + ($188))|0;
   $29 = $190;
   $191 = $20;
   $192 = (($191) + 1)|0;
   $20 = $192;
   $193 = $30;
   $194 = ((($193)) + 8|0);
   $30 = $194;
  }
  $195 = $9;
  $196 = ((($195)) + 60|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = $24;
  $199 = (($197) + (($198*24)|0)|0);
  $200 = $32;
  $201 = ((($200)) + 48|0);
  HEAP32[$201>>2] = $199;
  $202 = $20;
  $203 = $32;
  $204 = ((($203)) + 52|0);
  HEAP32[$204>>2] = $202;
  $205 = $20;
  $206 = $24;
  $207 = (($206) + ($205))|0;
  $24 = $207;
  $21 = 0;
  while(1) {
   $208 = $21;
   $209 = $20;
   $210 = ($208|0)<($209|0);
   if (!($210)) {
    break;
   }
   $211 = $21;
   $212 = $211<<1;
   $213 = $31;
   $214 = ((($213)) + 36|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + ($212<<2)|0);
   $30 = $216;
   $217 = $31;
   $218 = ((($217)) + 20|0);
   $219 = +HEAPF32[$218>>2];
   $220 = $21;
   $221 = $32;
   $222 = ((($221)) + 48|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + (($220*24)|0)|0);
   HEAPF32[$224>>2] = $219;
   $225 = $30;
   $226 = HEAP32[$225>>2]|0;
   $227 = $21;
   $228 = $32;
   $229 = ((($228)) + 48|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($230) + (($227*24)|0)|0);
   $232 = ((($231)) + 4|0);
   HEAP32[$232>>2] = $226;
   $233 = $30;
   $234 = ((($233)) + 4|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $30;
   $237 = HEAP32[$236>>2]|0;
   $238 = (($235) - ($237))|0;
   $239 = (($238) + 1)|0;
   $240 = $21;
   $241 = $32;
   $242 = ((($241)) + 48|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = (($243) + (($240*24)|0)|0);
   $245 = ((($244)) + 12|0);
   HEAP32[$245>>2] = $239;
   $246 = $9;
   $247 = ((($246)) + 52|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $26;
   $250 = (($248) + (($249*28)|0)|0);
   $251 = $21;
   $252 = $32;
   $253 = ((($252)) + 48|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = (($254) + (($251*24)|0)|0);
   $256 = ((($255)) + 16|0);
   HEAP32[$256>>2] = $250;
   $257 = $21;
   $258 = $32;
   $259 = ((($258)) + 48|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + (($257*24)|0)|0);
   $262 = ((($261)) + 12|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = $26;
   $265 = (($264) + ($263))|0;
   $26 = $265;
   $266 = $21;
   $267 = (($266) + 1)|0;
   $21 = $267;
  }
  $268 = $9;
  $269 = ((($268)) + 56|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $25;
  $272 = (($270) + ($271<<4)|0);
  $273 = $32;
  $274 = ((($273)) + 44|0);
  HEAP32[$274>>2] = $272;
  $275 = $29;
  $276 = $25;
  $277 = (($276) + ($275))|0;
  $25 = $277;
  $278 = $9;
  $279 = ((($278)) + 12|0);
  $280 = $31;
  $281 = ((($280)) + 16|0);
  $282 = HEAP8[$281>>0]|0;
  $283 = $282&255;
  $284 = $31;
  $285 = ((($284)) + 15|0);
  $286 = HEAP8[$285>>0]|0;
  $287 = $286&255;
  _nk_tt_PackSetOversampling($279,$283,$287);
  $288 = $9;
  $289 = ((($288)) + 12|0);
  $290 = $32;
  $291 = $32;
  $292 = ((($291)) + 48|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = $32;
  $295 = ((($294)) + 52|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = $32;
  $298 = ((($297)) + 44|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (_nk_tt_PackFontRangesGatherRects($289,$290,$293,$296,$299)|0);
  $28 = $300;
  $301 = $9;
  $302 = ((($301)) + 12|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = $32;
  $305 = ((($304)) + 44|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = $28;
  _nk_rp_pack_rects($303,$306,$307);
  $21 = 0;
  while(1) {
   $308 = $21;
   $309 = $28;
   $310 = ($308|0)<($309|0);
   if (!($310)) {
    break;
   }
   $311 = $21;
   $312 = $32;
   $313 = ((($312)) + 44|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = (($314) + ($311<<4)|0);
   $316 = ((($315)) + 12|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = ($317|0)!=(0);
   if ($318) {
    $319 = $12;
    $320 = HEAP32[$319>>2]|0;
    $321 = $21;
    $322 = $32;
    $323 = ((($322)) + 44|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = (($324) + ($321<<4)|0);
    $326 = ((($325)) + 10|0);
    $327 = HEAP16[$326>>1]|0;
    $328 = $327&65535;
    $329 = $21;
    $330 = $32;
    $331 = ((($330)) + 44|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = (($332) + ($329<<4)|0);
    $334 = ((($333)) + 6|0);
    $335 = HEAP16[$334>>1]|0;
    $336 = $335&65535;
    $337 = (($328) + ($336))|0;
    $338 = ($320|0)<($337|0);
    if ($338) {
     $339 = $21;
     $340 = $32;
     $341 = ((($340)) + 44|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = (($342) + ($339<<4)|0);
     $344 = ((($343)) + 10|0);
     $345 = HEAP16[$344>>1]|0;
     $346 = $345&65535;
     $347 = $21;
     $348 = $32;
     $349 = ((($348)) + 44|0);
     $350 = HEAP32[$349>>2]|0;
     $351 = (($350) + ($347<<4)|0);
     $352 = ((($351)) + 6|0);
     $353 = HEAP16[$352>>1]|0;
     $354 = $353&65535;
     $355 = (($346) + ($354))|0;
     $359 = $355;
    } else {
     $356 = $12;
     $357 = HEAP32[$356>>2]|0;
     $359 = $357;
    }
    $358 = $12;
    HEAP32[$358>>2] = $359;
   }
   $360 = $21;
   $361 = (($360) + 1)|0;
   $21 = $361;
  }
  $362 = $23;
  $363 = (($362) + 1)|0;
  $23 = $363;
  $364 = $17;
  $365 = HEAP32[$364>>2]|0;
  $17 = $365;
 }
 $366 = $25;
 $367 = $18;
 $368 = ($366|0)==($367|0);
 if (!($368)) {
  ___assert_fail((22710|0),(1320|0),10151,(22686|0));
  // unreachable;
 }
 $369 = $26;
 $370 = $18;
 $371 = ($369|0)==($370|0);
 if (!($371)) {
  ___assert_fail((22738|0),(1320|0),10152,(22686|0));
  // unreachable;
 }
 $372 = $24;
 $373 = $19;
 $374 = ($372|0)==($373|0);
 if (!($374)) {
  ___assert_fail((22766|0),(1320|0),10153,(22686|0));
  // unreachable;
 }
 $375 = $12;
 $376 = HEAP32[$375>>2]|0;
 $377 = (_nk_round_up_pow2($376)|0);
 $378 = $12;
 HEAP32[$378>>2] = $377;
 $379 = $11;
 $380 = HEAP32[$379>>2]|0;
 $381 = $12;
 $382 = HEAP32[$381>>2]|0;
 $383 = Math_imul($380, $382)|0;
 $384 = $10;
 HEAP32[$384>>2] = $383;
 $8 = 1;
 $385 = $8;
 STACKTOP = sp;return ($385|0);
}
function _nk_font_bake($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $28 = sp + 64|0;
 $29 = sp + 60|0;
 $30 = sp + 56|0;
 $33 = sp + 44|0;
 $34 = sp + 40|0;
 $35 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0;
 $17 = 0;
 $38 = $9;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  ___assert_fail((22673|0),(1320|0),10169,(23218|0));
  // unreachable;
 }
 $40 = $10;
 $41 = ($40|0)!=(0);
 if (!($41)) {
  ___assert_fail((15603|0),(1320|0),10170,(23218|0));
  // unreachable;
 }
 $42 = $11;
 $43 = ($42|0)!=(0);
 if (!($43)) {
  ___assert_fail((15609|0),(1320|0),10171,(23218|0));
  // unreachable;
 }
 $44 = $14;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  ___assert_fail((22600|0),(1320|0),10172,(23218|0));
  // unreachable;
 }
 $46 = $8;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  ___assert_fail((23231|0),(1320|0),10173,(23218|0));
  // unreachable;
 }
 $48 = $15;
 $49 = ($48|0)!=(0);
 if (!($49)) {
  ___assert_fail((23237|0),(1320|0),10174,(23218|0));
  // unreachable;
 }
 $50 = $13;
 $51 = ($50|0)!=(0);
 if (!($51)) {
  ___assert_fail((23248|0),(1320|0),10175,(23218|0));
  // unreachable;
 }
 $52 = $9;
 $53 = ($52|0)!=(0|0);
 $54 = $10;
 $55 = ($54|0)!=(0);
 $or$cond = $53 & $55;
 $56 = $11;
 $57 = ($56|0)!=(0);
 $or$cond3 = $or$cond & $57;
 $58 = $14;
 $59 = ($58|0)!=(0|0);
 $or$cond5 = $or$cond3 & $59;
 $60 = $15;
 $61 = ($60|0)!=(0);
 $or$cond7 = $or$cond5 & $61;
 $62 = $12;
 $63 = ($62|0)!=(0|0);
 $or$cond9 = $or$cond7 & $63;
 $64 = $13;
 $65 = ($64|0)!=(0);
 $or$cond11 = $or$cond9 & $65;
 if (!($or$cond11)) {
  STACKTOP = sp;return;
 }
 $66 = $9;
 $67 = $10;
 $68 = $11;
 $69 = Math_imul($67, $68)|0;
 _nk_zero($66,$69);
 $70 = $9;
 $71 = $8;
 $72 = ((($71)) + 12|0);
 $73 = ((($72)) + 28|0);
 HEAP32[$73>>2] = $70;
 $74 = $11;
 $75 = $8;
 $76 = ((($75)) + 12|0);
 $77 = ((($76)) + 8|0);
 HEAP32[$77>>2] = $74;
 $16 = 0;
 $78 = $14;
 $18 = $78;
 while(1) {
  $79 = $16;
  $80 = $15;
  $81 = ($79|0)<($80|0);
  $82 = $18;
  $83 = ($82|0)!=(0|0);
  $84 = $81 ? $83 : 0;
  if (!($84)) {
   break;
  }
  $85 = $18;
  $19 = $85;
  $86 = $16;
  $87 = $8;
  $88 = ((($87)) + 48|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + (($86*56)|0)|0);
  $20 = $90;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $93 = $19;
  $94 = ((($93)) + 16|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $19;
  $98 = ((($97)) + 15|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  _nk_tt_PackSetOversampling($92,$96,$100);
  $101 = $8;
  $102 = ((($101)) + 12|0);
  $103 = $20;
  $104 = $20;
  $105 = ((($104)) + 48|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $20;
  $108 = ((($107)) + 52|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $20;
  $111 = ((($110)) + 44|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $8;
  (_nk_tt_PackFontRangesRenderIntoRects($102,$103,$106,$109,$112,$113)|0);
  $114 = $16;
  $115 = (($114) + 1)|0;
  $16 = $115;
  $116 = $18;
  $117 = HEAP32[$116>>2]|0;
  $18 = $117;
 }
 $118 = $8;
 $119 = ((($118)) + 12|0);
 $120 = $8;
 _nk_tt_PackEnd($119,$120);
 $16 = 0;
 $121 = $14;
 $18 = $121;
 while(1) {
  $122 = $16;
  $123 = $15;
  $124 = ($122|0)<($123|0);
  $125 = $18;
  $126 = ($125|0)!=(0|0);
  $127 = $124 ? $126 : 0;
  if (!($127)) {
   break;
  }
  $21 = 0;
  $22 = 0;
  $23 = 0;
  $128 = $18;
  $24 = $128;
  $129 = $16;
  $130 = $8;
  $131 = ((($130)) + 48|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + (($129*56)|0)|0);
  $25 = $133;
  $134 = $24;
  $135 = ((($134)) + 40|0);
  $136 = HEAP32[$135>>2]|0;
  $26 = $136;
  $137 = $25;
  $138 = $24;
  $139 = ((($138)) + 20|0);
  $140 = +HEAPF32[$139>>2];
  $141 = (+_nk_tt_ScaleForPixelHeight($137,$140));
  $27 = $141;
  $142 = $25;
  _nk_tt_GetFontVMetrics($142,$28,$29,$30);
  $143 = $24;
  $144 = ((($143)) + 13|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = ($145<<24>>24)!=(0);
  if (!($146)) {
   $147 = $24;
   $148 = ((($147)) + 36|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $26;
   $151 = ((($150)) + 20|0);
   HEAP32[$151>>2] = $149;
   $152 = $24;
   $153 = ((($152)) + 20|0);
   $154 = +HEAPF32[$153>>2];
   $155 = $26;
   HEAPF32[$155>>2] = $154;
   $156 = HEAP32[$28>>2]|0;
   $157 = (+($156|0));
   $158 = $27;
   $159 = $157 * $158;
   $160 = $26;
   $161 = ((($160)) + 4|0);
   HEAPF32[$161>>2] = $159;
   $162 = HEAP32[$29>>2]|0;
   $163 = (+($162|0));
   $164 = $27;
   $165 = $163 * $164;
   $166 = $26;
   $167 = ((($166)) + 8|0);
   HEAPF32[$167>>2] = $165;
   $168 = $17;
   $169 = $26;
   $170 = ((($169)) + 12|0);
   HEAP32[$170>>2] = $168;
  }
  $21 = 0;
  while(1) {
   $171 = $21;
   $172 = $25;
   $173 = ((($172)) + 52|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ($171>>>0)<($174>>>0);
   if (!($175)) {
    break;
   }
   $176 = $21;
   $177 = $25;
   $178 = ((($177)) + 48|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) + (($176*24)|0)|0);
   $31 = $180;
   $22 = 0;
   while(1) {
    $181 = $22;
    $182 = $31;
    $183 = ((($182)) + 12|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ($181|0)<($184|0);
    if (!($185)) {
     break;
    }
    $32 = 0;
    HEAPF32[$33>>2] = 0.0;
    HEAPF32[$34>>2] = 0.0;
    $186 = $22;
    $187 = $31;
    $188 = ((($187)) + 16|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + (($186*28)|0)|0);
    $37 = $190;
    $191 = $37;
    $192 = HEAP16[$191>>1]|0;
    $193 = ($192<<16>>16)!=(0);
    if ($193) {
     label = 31;
    } else {
     $194 = $37;
     $195 = ((($194)) + 4|0);
     $196 = HEAP16[$195>>1]|0;
     $197 = ($196<<16>>16)!=(0);
     if ($197) {
      label = 31;
     } else {
      $198 = $37;
      $199 = ((($198)) + 2|0);
      $200 = HEAP16[$199>>1]|0;
      $201 = ($200<<16>>16)!=(0);
      if ($201) {
       label = 31;
      } else {
       $202 = $37;
       $203 = ((($202)) + 6|0);
       $204 = HEAP16[$203>>1]|0;
       $205 = ($204<<16>>16)!=(0);
       if ($205) {
        label = 31;
       }
      }
     }
    }
    if ((label|0) == 31) {
     label = 0;
     $206 = $31;
     $207 = ((($206)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $22;
     $210 = (($208) + ($209))|0;
     $32 = $210;
     $211 = $31;
     $212 = ((($211)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $10;
     $215 = $11;
     $216 = $22;
     _nk_tt_GetPackedQuad($213,$214,$215,$216,$33,$34,$35,0);
     $217 = $26;
     $218 = ((($217)) + 12|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $23;
     $221 = (($219) + ($220))|0;
     $222 = $12;
     $223 = (($222) + (($221*48)|0)|0);
     $36 = $223;
     $224 = $32;
     $225 = $36;
     HEAP32[$225>>2] = $224;
     $226 = +HEAPF32[$35>>2];
     $227 = $36;
     $228 = ((($227)) + 8|0);
     HEAPF32[$228>>2] = $226;
     $229 = ((($35)) + 4|0);
     $230 = +HEAPF32[$229>>2];
     $231 = $36;
     $232 = ((($231)) + 12|0);
     HEAPF32[$232>>2] = $230;
     $233 = ((($35)) + 16|0);
     $234 = +HEAPF32[$233>>2];
     $235 = $36;
     $236 = ((($235)) + 16|0);
     HEAPF32[$236>>2] = $234;
     $237 = ((($35)) + 20|0);
     $238 = +HEAPF32[$237>>2];
     $239 = $36;
     $240 = ((($239)) + 20|0);
     HEAPF32[$240>>2] = $238;
     $241 = $26;
     $242 = ((($241)) + 4|0);
     $243 = +HEAPF32[$242>>2];
     $244 = $243 + 0.5;
     $245 = $36;
     $246 = ((($245)) + 12|0);
     $247 = +HEAPF32[$246>>2];
     $248 = $247 + $244;
     HEAPF32[$246>>2] = $248;
     $249 = $26;
     $250 = ((($249)) + 4|0);
     $251 = +HEAPF32[$250>>2];
     $252 = $251 + 0.5;
     $253 = $36;
     $254 = ((($253)) + 20|0);
     $255 = +HEAPF32[$254>>2];
     $256 = $255 + $252;
     HEAPF32[$254>>2] = $256;
     $257 = $36;
     $258 = ((($257)) + 16|0);
     $259 = +HEAPF32[$258>>2];
     $260 = $36;
     $261 = ((($260)) + 8|0);
     $262 = +HEAPF32[$261>>2];
     $263 = $259 - $262;
     $264 = $263 + 0.5;
     $265 = $36;
     $266 = ((($265)) + 24|0);
     HEAPF32[$266>>2] = $264;
     $267 = $36;
     $268 = ((($267)) + 20|0);
     $269 = +HEAPF32[$268>>2];
     $270 = $36;
     $271 = ((($270)) + 12|0);
     $272 = +HEAPF32[$271>>2];
     $273 = $269 - $272;
     $274 = $36;
     $275 = ((($274)) + 28|0);
     HEAPF32[$275>>2] = $273;
     $276 = $24;
     $277 = ((($276)) + 24|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(1);
     $280 = ((($35)) + 8|0);
     $281 = +HEAPF32[$280>>2];
     if ($279) {
      $282 = $10;
      $283 = (+($282|0));
      $284 = $281 * $283;
      $285 = $36;
      $286 = ((($285)) + 32|0);
      HEAPF32[$286>>2] = $284;
      $287 = ((($35)) + 12|0);
      $288 = +HEAPF32[$287>>2];
      $289 = $11;
      $290 = (+($289|0));
      $291 = $288 * $290;
      $292 = $36;
      $293 = ((($292)) + 36|0);
      HEAPF32[$293>>2] = $291;
      $294 = ((($35)) + 24|0);
      $295 = +HEAPF32[$294>>2];
      $296 = $10;
      $297 = (+($296|0));
      $298 = $295 * $297;
      $299 = $36;
      $300 = ((($299)) + 40|0);
      HEAPF32[$300>>2] = $298;
      $301 = ((($35)) + 28|0);
      $302 = +HEAPF32[$301>>2];
      $303 = $11;
      $304 = (+($303|0));
      $305 = $302 * $304;
      $306 = $36;
      $307 = ((($306)) + 44|0);
      HEAPF32[$307>>2] = $305;
     } else {
      $308 = $36;
      $309 = ((($308)) + 32|0);
      HEAPF32[$309>>2] = $281;
      $310 = ((($35)) + 12|0);
      $311 = +HEAPF32[$310>>2];
      $312 = $36;
      $313 = ((($312)) + 36|0);
      HEAPF32[$313>>2] = $311;
      $314 = ((($35)) + 24|0);
      $315 = +HEAPF32[$314>>2];
      $316 = $36;
      $317 = ((($316)) + 40|0);
      HEAPF32[$317>>2] = $315;
      $318 = ((($35)) + 28|0);
      $319 = +HEAPF32[$318>>2];
      $320 = $36;
      $321 = ((($320)) + 44|0);
      HEAPF32[$321>>2] = $319;
     }
     $322 = $37;
     $323 = ((($322)) + 16|0);
     $324 = +HEAPF32[$323>>2];
     $325 = $24;
     $326 = ((($325)) + 28|0);
     $327 = +HEAPF32[$326>>2];
     $328 = $324 + $327;
     $329 = $36;
     $330 = ((($329)) + 4|0);
     HEAPF32[$330>>2] = $328;
     $331 = $24;
     $332 = ((($331)) + 14|0);
     $333 = HEAP8[$332>>0]|0;
     $334 = ($333<<24>>24)!=(0);
     if ($334) {
      $335 = $36;
      $336 = ((($335)) + 4|0);
      $337 = +HEAPF32[$336>>2];
      $338 = $337 + 0.5;
      $339 = (~~(($338)));
      $340 = (+($339|0));
      $341 = $36;
      $342 = ((($341)) + 4|0);
      HEAPF32[$342>>2] = $340;
     }
     $343 = $23;
     $344 = (($343) + 1)|0;
     $23 = $344;
    }
    $345 = $22;
    $346 = (($345) + 1)|0;
    $22 = $346;
   }
   $347 = $21;
   $348 = (($347) + 1)|0;
   $21 = $348;
  }
  $349 = $23;
  $350 = $26;
  $351 = ((($350)) + 16|0);
  HEAP32[$351>>2] = $349;
  $352 = $26;
  $353 = ((($352)) + 16|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = $17;
  $356 = (($355) + ($354))|0;
  $17 = $356;
  $357 = $16;
  $358 = (($357) + 1)|0;
  $16 = $358;
  $359 = $18;
  $360 = HEAP32[$359>>2]|0;
  $18 = $360;
 }
 STACKTOP = sp;return;
}
function _nk_font_bake_custom_data($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $18 = 0;
 $19 = 0;
 $20 = 0;
 $23 = $9;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((23694|0),(1320|0),10280,(23705|0));
  // unreachable;
 }
 $25 = $10;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  ___assert_fail((23730|0),(1320|0),10281,(23705|0));
  // unreachable;
 }
 $27 = $11;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  ___assert_fail((23740|0),(1320|0),10282,(23705|0));
  // unreachable;
 }
 $29 = $12;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((23751|0),(1320|0),10283,(23705|0));
  // unreachable;
 }
 $31 = $9;
 $32 = ($31|0)!=(0|0);
 $33 = $10;
 $34 = ($33|0)!=(0);
 $or$cond = $32 & $34;
 $35 = $11;
 $36 = ($35|0)!=(0);
 $or$cond3 = $or$cond & $36;
 $37 = $12;
 $38 = ($37|0)!=(0|0);
 $or$cond5 = $or$cond3 & $38;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $39 = $9;
 $17 = $39;
 $18 = 0;
 $20 = 0;
 while(1) {
  $40 = $18;
  $41 = $14;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $19 = 0;
  while(1) {
   $43 = $19;
   $44 = $13;
   $45 = ($43|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = HEAP16[$3>>1]|0;
   $47 = $46 << 16 >> 16;
   $48 = $19;
   $49 = (($47) + ($48))|0;
   $50 = ((($3)) + 2|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51 << 16 >> 16;
   $53 = $18;
   $54 = (($52) + ($53))|0;
   $55 = $10;
   $56 = Math_imul($54, $55)|0;
   $57 = (($49) + ($56))|0;
   $21 = $57;
   $58 = $21;
   $59 = (($58) + 1)|0;
   $60 = $13;
   $61 = (($59) + ($60))|0;
   $22 = $61;
   $62 = $20;
   $63 = $12;
   $64 = (($63) + ($62)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 << 24 >> 24;
   $67 = $15;
   $68 = $67 << 24 >> 24;
   $69 = ($66|0)==($68|0);
   $70 = $69 ? 255 : 0;
   $71 = $70&255;
   $72 = $21;
   $73 = $17;
   $74 = (($73) + ($72)|0);
   HEAP8[$74>>0] = $71;
   $75 = $20;
   $76 = $12;
   $77 = (($76) + ($75)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78 << 24 >> 24;
   $80 = $16;
   $81 = $80 << 24 >> 24;
   $82 = ($79|0)==($81|0);
   $83 = $82 ? 255 : 0;
   $84 = $83&255;
   $85 = $22;
   $86 = $17;
   $87 = (($86) + ($85)|0);
   HEAP8[$87>>0] = $84;
   $88 = $19;
   $89 = (($88) + 1)|0;
   $19 = $89;
   $90 = $20;
   $91 = (($90) + 1)|0;
   $20 = $91;
  }
  $92 = $18;
  $93 = (($92) + 1)|0;
  $18 = $93;
 }
 STACKTOP = sp;return;
}
function _nk_font_bake_convert($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((23769|0),(1320|0),10307,(23780|0));
  // unreachable;
 }
 $13 = $7;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((23801|0),(1320|0),10308,(23780|0));
  // unreachable;
 }
 $15 = $5;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  ___assert_fail((23730|0),(1320|0),10309,(23780|0));
  // unreachable;
 }
 $17 = $6;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  ___assert_fail((23740|0),(1320|0),10310,(23780|0));
  // unreachable;
 }
 $19 = $4;
 $20 = ($19|0)!=(0|0);
 $21 = $7;
 $22 = ($21|0)!=(0|0);
 $or$cond = $20 & $22;
 $23 = $6;
 $24 = ($23|0)!=(0);
 $or$cond3 = $or$cond & $24;
 $25 = $5;
 $26 = ($25|0)!=(0);
 $or$cond5 = $or$cond3 & $26;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $27 = $4;
 $9 = $27;
 $28 = $7;
 $10 = $28;
 $29 = $5;
 $30 = $6;
 $31 = Math_imul($29, $30)|0;
 $8 = $31;
 while(1) {
  $32 = $8;
  $33 = ($32|0)>(0);
  if (!($33)) {
   break;
  }
  $34 = $10;
  $35 = ((($34)) + 1|0);
  $10 = $35;
  $36 = HEAP8[$34>>0]|0;
  $37 = $36&255;
  $38 = $37 << 24;
  $39 = $38 | 16777215;
  $40 = $9;
  $41 = ((($40)) + 4|0);
  $9 = $41;
  HEAP32[$40>>2] = $39;
  $42 = $8;
  $43 = (($42) + -1)|0;
  $8 = $43;
 }
 STACKTOP = sp;return;
}
function _nk_font_init($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2240|0),(1320|0),10419,(23811|0));
  // unreachable;
 }
 $14 = $9;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((23824|0),(1320|0),10420,(23811|0));
  // unreachable;
 }
 $16 = $10;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((23831|0),(1320|0),10421,(23811|0));
  // unreachable;
 }
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 $20 = $9;
 $21 = ($20|0)!=(0|0);
 $or$cond = $19 & $21;
 $22 = $10;
 $23 = ($22|0)!=(0|0);
 $or$cond3 = $or$cond & $23;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $24 = $10;
 ;HEAP32[$11>>2]=HEAP32[$24>>2]|0;HEAP32[$11+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$24+12>>2]|0;HEAP32[$11+16>>2]=HEAP32[$24+16>>2]|0;HEAP32[$11+20>>2]=HEAP32[$24+20>>2]|0;
 $25 = $6;
 $26 = ((($25)) + 24|0);
 ;HEAP32[$26>>2]=HEAP32[$11>>2]|0;HEAP32[$26+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$26+16>>2]=HEAP32[$11+16>>2]|0;HEAP32[$26+20>>2]=HEAP32[$11+20>>2]|0;
 $27 = $7;
 $28 = $6;
 $29 = ((($28)) + 24|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 / $30;
 $32 = $6;
 $33 = ((($32)) + 48|0);
 HEAPF32[$33>>2] = $31;
 $34 = $10;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $9;
 $38 = (($37) + (($36*48)|0)|0);
 $39 = $6;
 $40 = ((($39)) + 52|0);
 HEAP32[$40>>2] = $38;
 $41 = $6;
 $42 = ((($41)) + 64|0);
 ;HEAP32[$42>>2]=HEAP32[$5>>2]|0;
 $43 = $8;
 $44 = $6;
 $45 = ((($44)) + 60|0);
 HEAP32[$45>>2] = $43;
 $46 = $6;
 $47 = $8;
 $48 = (_nk_font_find_glyph($46,$47)|0);
 $49 = $6;
 $50 = ((($49)) + 56|0);
 HEAP32[$50>>2] = $48;
 $51 = $6;
 $52 = ((($51)) + 24|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $6;
 $55 = ((($54)) + 48|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $53 * $56;
 $58 = $6;
 $59 = ((($58)) + 4|0);
 $60 = ((($59)) + 4|0);
 HEAPF32[$60>>2] = $57;
 $61 = $6;
 $62 = ((($61)) + 4|0);
 $63 = ((($62)) + 8|0);
 HEAP32[$63>>2] = 10;
 $64 = $6;
 $65 = $6;
 $66 = ((($65)) + 4|0);
 HEAP32[$66>>2] = $64;
 $67 = $6;
 $68 = ((($67)) + 4|0);
 $69 = ((($68)) + 12|0);
 HEAP32[$69>>2] = 11;
 $70 = $6;
 $71 = ((($70)) + 4|0);
 $72 = ((($71)) + 16|0);
 $73 = $6;
 $74 = ((($73)) + 64|0);
 ;HEAP32[$72>>2]=HEAP32[$74>>2]|0;
 STACKTOP = sp;return;
}
function _nk_font_atlas_end($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $7 = sp;
 $3 = $0;
 $4 = $2;
 $5 = 0;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((3096|0),(1320|0),11160,(18087|0));
  // unreachable;
 }
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 do {
  if (!($11)) {
   $12 = $4;
   $13 = ($12|0)!=(0|0);
   if ($13) {
    $14 = $4;
    ;HEAP32[$14>>2]=HEAP32[$1>>2]|0;
    $15 = $4;
    $16 = ((($15)) + 4|0);
    _nk_vec2($7,0.5,0.5);
    ;HEAP32[$16>>2]=HEAP32[$7>>2]|0;HEAP32[$16+4>>2]=HEAP32[$7+4>>2]|0;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $4;
  ;HEAP32[$19>>2]=HEAP32[$1>>2]|0;
  $20 = $3;
  $21 = ((($20)) + 36|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = (+($23|0));
  $25 = $24 + 0.5;
  $26 = $3;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (+($28|0));
  $30 = $25 / $29;
  $31 = $4;
  $32 = ((($31)) + 4|0);
  HEAPF32[$32>>2] = $30;
  $33 = $3;
  $34 = ((($33)) + 36|0);
  $35 = ((($34)) + 2|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = (+($37|0));
  $39 = $38 + 0.5;
  $40 = $3;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (+($42|0));
  $44 = $39 / $43;
  $45 = $4;
  $46 = ((($45)) + 4|0);
  $47 = ((($46)) + 4|0);
  HEAPF32[$47>>2] = $44;
 }
 $48 = $3;
 $49 = ((($48)) + 280|0);
 $50 = HEAP32[$49>>2]|0;
 $6 = $50;
 while(1) {
  $51 = $6;
  $52 = ($51|0)!=(0|0);
  if (!($52)) {
   break;
  }
  $53 = $6;
  $54 = ((($53)) + 64|0);
  ;HEAP32[$54>>2]=HEAP32[$1>>2]|0;
  $55 = $6;
  $56 = ((($55)) + 4|0);
  $57 = ((($56)) + 16|0);
  ;HEAP32[$57>>2]=HEAP32[$1>>2]|0;
  $58 = $6;
  $59 = HEAP32[$58>>2]|0;
  $6 = $59;
 }
 $5 = 0;
 while(1) {
  $60 = $5;
  $61 = ($60|0)<(7);
  if (!($61)) {
   break;
  }
  $62 = $5;
  $63 = $3;
  $64 = ((($63)) + 44|0);
  $65 = (($64) + ($62<<5)|0);
  ;HEAP32[$65>>2]=HEAP32[$1>>2]|0;
  $66 = $5;
  $67 = (($66) + 1)|0;
  $5 = $67;
 }
 $68 = $3;
 $69 = ((($68)) + 24|0);
 $70 = ((($69)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $3;
 $73 = ((($72)) + 24|0);
 $74 = $3;
 $75 = HEAP32[$74>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$73>>2]|0;
 FUNCTION_TABLE_vii[$71 & 31]($$byval_copy,$75);
 $76 = $3;
 HEAP32[$76>>2] = 0;
 $77 = $3;
 $78 = ((($77)) + 4|0);
 HEAP32[$78>>2] = 0;
 $79 = $3;
 $80 = ((($79)) + 8|0);
 HEAP32[$80>>2] = 0;
 $81 = $3;
 $82 = ((($81)) + 36|0);
 HEAP16[$82>>1] = 0;
 $83 = $3;
 $84 = ((($83)) + 36|0);
 $85 = ((($84)) + 2|0);
 HEAP16[$85>>1] = 0;
 $86 = $3;
 $87 = ((($86)) + 36|0);
 $88 = ((($87)) + 4|0);
 HEAP16[$88>>1] = 0;
 $89 = $3;
 $90 = ((($89)) + 36|0);
 $91 = ((($90)) + 6|0);
 HEAP16[$91>>1] = 0;
 STACKTOP = sp;return;
}
function _nk_font_atlas_cleanup($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((3096|0),(1320|0),11193,(18105|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((3314|0),(1320|0),11194,(18105|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((3337|0),(1320|0),11195,(18105|0));
  // unreachable;
 }
 $16 = $1;
 $17 = ((($16)) + 12|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((3269|0),(1320|0),11196,(18105|0));
  // unreachable;
 }
 $21 = $1;
 $22 = ((($21)) + 12|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((3292|0),(1320|0),11197,(18105|0));
  // unreachable;
 }
 $26 = $1;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $1;
 $29 = ((($28)) + 12|0);
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $1;
 $39 = ((($38)) + 284|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = $1;
 $43 = ((($42)) + 284|0);
 $44 = HEAP32[$43>>2]|0;
 $2 = $44;
 while(1) {
  $45 = $2;
  $46 = ($45|0)!=(0|0);
  if (!($46)) {
   break;
  }
  $47 = $2;
  $48 = HEAP32[$47>>2]|0;
  $3 = $48;
  $49 = $1;
  $50 = ((($49)) + 12|0);
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $1;
  $54 = ((($53)) + 12|0);
  $55 = $2;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vii[$52 & 31]($$byval_copy,$57);
  $58 = $1;
  $59 = ((($58)) + 12|0);
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $1;
  $63 = ((($62)) + 12|0);
  $64 = $2;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$63>>2]|0;
  FUNCTION_TABLE_vii[$61 & 31]($$byval_copy1,$64);
  $65 = $3;
  $2 = $65;
 }
 STACKTOP = sp;return;
}
function _nk_font_atlas_clear($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((3096|0),(1320|0),11213,(18127|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((3314|0),(1320|0),11214,(18127|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ((($11)) + 24|0);
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((3337|0),(1320|0),11215,(18127|0));
  // unreachable;
 }
 $16 = $1;
 $17 = ((($16)) + 12|0);
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((3269|0),(1320|0),11216,(18127|0));
  // unreachable;
 }
 $21 = $1;
 $22 = ((($21)) + 12|0);
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((3292|0),(1320|0),11217,(18127|0));
  // unreachable;
 }
 $26 = $1;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $1;
 $29 = ((($28)) + 12|0);
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $1;
 _nk_font_atlas_cleanup($38);
 $39 = $1;
 $40 = ((($39)) + 280|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $1;
  $44 = ((($43)) + 280|0);
  $45 = HEAP32[$44>>2]|0;
  $2 = $45;
  while(1) {
   $46 = $2;
   $47 = ($46|0)!=(0|0);
   if (!($47)) {
    break;
   }
   $48 = $2;
   $49 = HEAP32[$48>>2]|0;
   $3 = $49;
   $50 = $1;
   $51 = ((($50)) + 12|0);
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = ((($54)) + 12|0);
   $56 = $2;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$55>>2]|0;
   FUNCTION_TABLE_vii[$53 & 31]($$byval_copy,$56);
   $57 = $3;
   $2 = $57;
  }
  $58 = $1;
  $59 = ((($58)) + 280|0);
  HEAP32[$59>>2] = 0;
 }
 $60 = $1;
 $61 = ((($60)) + 272|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $1;
  $65 = ((($64)) + 12|0);
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $1;
  $69 = ((($68)) + 12|0);
  $70 = $1;
  $71 = ((($70)) + 272|0);
  $72 = HEAP32[$71>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$69>>2]|0;
  FUNCTION_TABLE_vii[$67 & 31]($$byval_copy1,$72);
 }
 $73 = $1;
 _nk_zero($73,292);
 STACKTOP = sp;return;
}
function _nk_input_begin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),11244,(18147|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $3 = $8;
 $2 = 0;
 while(1) {
  $9 = $2;
  $10 = ($9|0)<(3);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = $3;
  $13 = ((($12)) + 260|0);
  $14 = (($13) + ($11<<4)|0);
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = 0;
  $16 = $2;
  $17 = (($16) + 1)|0;
  $2 = $17;
 }
 $18 = $3;
 $19 = ((($18)) + 256|0);
 HEAP32[$19>>2] = 0;
 $20 = $3;
 $21 = ((($20)) + 260|0);
 $22 = ((($21)) + 72|0);
 HEAPF32[$22>>2] = 0.0;
 $23 = $3;
 $24 = ((($23)) + 260|0);
 $25 = ((($24)) + 48|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $3;
 $28 = ((($27)) + 260|0);
 $29 = ((($28)) + 56|0);
 HEAPF32[$29>>2] = $26;
 $30 = $3;
 $31 = ((($30)) + 260|0);
 $32 = ((($31)) + 48|0);
 $33 = ((($32)) + 4|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $3;
 $36 = ((($35)) + 260|0);
 $37 = ((($36)) + 56|0);
 $38 = ((($37)) + 4|0);
 HEAPF32[$38>>2] = $34;
 $39 = $3;
 $40 = ((($39)) + 260|0);
 $41 = ((($40)) + 64|0);
 HEAPF32[$41>>2] = 0.0;
 $42 = $3;
 $43 = ((($42)) + 260|0);
 $44 = ((($43)) + 64|0);
 $45 = ((($44)) + 4|0);
 HEAPF32[$45>>2] = 0.0;
 $2 = 0;
 while(1) {
  $46 = $2;
  $47 = ($46|0)<(30);
  if (!($47)) {
   break;
  }
  $48 = $2;
  $49 = $3;
  $50 = (($49) + ($48<<3)|0);
  $51 = ((($50)) + 4|0);
  HEAP32[$51>>2] = 0;
  $52 = $2;
  $53 = (($52) + 1)|0;
  $2 = $53;
 }
 STACKTOP = sp;return;
}
function _nk_input_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),11264,(18162|0));
  // unreachable;
 }
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 260|0);
 $10 = ((($9)) + 76|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)!=(0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 260|0);
  $15 = ((($14)) + 76|0);
  HEAP8[$15>>0] = 0;
 }
 $16 = $2;
 $17 = ((($16)) + 260|0);
 $18 = ((($17)) + 78|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = ((($21)) + 260|0);
 $23 = ((($22)) + 77|0);
 HEAP8[$23>>0] = 0;
 $24 = $2;
 $25 = ((($24)) + 260|0);
 $26 = ((($25)) + 78|0);
 HEAP8[$26>>0] = 0;
 $27 = $2;
 $28 = ((($27)) + 260|0);
 $29 = ((($28)) + 76|0);
 HEAP8[$29>>0] = 0;
 STACKTOP = sp;return;
}
function _nk_input_motion($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((2989|0),(1320|0),11280,(18175|0));
  // unreachable;
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $6 = $11;
 $12 = $4;
 $13 = (+($12|0));
 $14 = $6;
 $15 = ((($14)) + 260|0);
 $16 = ((($15)) + 48|0);
 HEAPF32[$16>>2] = $13;
 $17 = $5;
 $18 = (+($17|0));
 $19 = $6;
 $20 = ((($19)) + 260|0);
 $21 = ((($20)) + 48|0);
 $22 = ((($21)) + 4|0);
 HEAPF32[$22>>2] = $18;
 $23 = $6;
 $24 = ((($23)) + 260|0);
 $25 = ((($24)) + 48|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $6;
 $28 = ((($27)) + 260|0);
 $29 = ((($28)) + 56|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $26 - $30;
 $32 = $6;
 $33 = ((($32)) + 260|0);
 $34 = ((($33)) + 64|0);
 HEAPF32[$34>>2] = $31;
 $35 = $6;
 $36 = ((($35)) + 260|0);
 $37 = ((($36)) + 48|0);
 $38 = ((($37)) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $6;
 $41 = ((($40)) + 260|0);
 $42 = ((($41)) + 56|0);
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $39 - $44;
 $46 = $6;
 $47 = ((($46)) + 260|0);
 $48 = ((($47)) + 64|0);
 $49 = ((($48)) + 4|0);
 HEAPF32[$49>>2] = $45;
 STACKTOP = sp;return;
}
function _nk_input_key($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((2989|0),(1320|0),11293,(18191|0));
  // unreachable;
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $6 = $11;
 $12 = $5;
 $13 = $4;
 $14 = $6;
 $15 = (($14) + ($13<<3)|0);
 HEAP32[$15>>2] = $12;
 $16 = $4;
 $17 = $6;
 $18 = (($17) + ($16<<3)|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function _nk_input_button($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2989|0),(1320|0),11305,(18204|0));
  // unreachable;
 }
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $5;
 $11 = $16;
 $17 = $6;
 $18 = $11;
 $19 = ((($18)) + 260|0);
 $20 = (($19) + ($17<<4)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $9;
 $23 = ($21|0)==($22|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = $6;
 $25 = $11;
 $26 = ((($25)) + 260|0);
 $27 = (($26) + ($24<<4)|0);
 $10 = $27;
 $28 = $7;
 $29 = (+($28|0));
 $30 = $10;
 $31 = ((($30)) + 8|0);
 HEAPF32[$31>>2] = $29;
 $32 = $8;
 $33 = (+($32|0));
 $34 = $10;
 $35 = ((($34)) + 8|0);
 $36 = ((($35)) + 4|0);
 HEAPF32[$36>>2] = $33;
 $37 = $9;
 $38 = $10;
 HEAP32[$38>>2] = $37;
 $39 = $10;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 STACKTOP = sp;return;
}
function _nk_input_scroll($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),11320,(18220|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = $2;
 $10 = ((($9)) + 260|0);
 $11 = ((($10)) + 72|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 + $8;
 HEAPF32[$11>>2] = $13;
 STACKTOP = sp;return;
}
function _nk_input_glyph($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((2989|0),(1320|0),11332,(18236|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $6 = $11;
 $12 = $3;
 $13 = (_nk_utf_decode($12,$5,4)|0);
 $4 = $13;
 $14 = $4;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $6;
 $17 = ((($16)) + 256|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 $20 = (($18) + ($19))|0;
 $21 = ($20|0)<(16);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$5>>2]|0;
 $23 = $6;
 $24 = ((($23)) + 256|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $6;
 $27 = ((($26)) + 240|0);
 $28 = (($27) + ($25)|0);
 $29 = $6;
 $30 = ((($29)) + 256|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (16 - ($31))|0;
 (_nk_utf_encode($22,$28,$32)|0);
 $33 = $4;
 $34 = $6;
 $35 = ((($34)) + 256|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33))|0;
 HEAP32[$35>>2] = $37;
 STACKTOP = sp;return;
}
function _nk_input_unicode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),11358,(18251|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 (_nk_utf_encode($9,$4,4)|0);
 $10 = $2;
 _nk_input_glyph($10,$4);
 STACKTOP = sp;return;
}
function _nk_input_has_mouse_click_in_rect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $3 = 0;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 $9 = $5;
 $10 = $4;
 $11 = ((($10)) + 260|0);
 $12 = (($11) + ($9<<4)|0);
 $6 = $12;
 $13 = +HEAPF32[$2>>2];
 $14 = $6;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $13 <= $16;
 if ($17) {
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $20 = +HEAPF32[$19>>2];
  $21 = +HEAPF32[$2>>2];
  $22 = ((($2)) + 8|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $21 + $23;
  $25 = $20 <= $24;
  if ($25) {
   $26 = ((($2)) + 4|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $6;
   $29 = ((($28)) + 8|0);
   $30 = ((($29)) + 4|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $27 <= $31;
   if ($32) {
    $33 = $6;
    $34 = ((($33)) + 8|0);
    $35 = ((($34)) + 4|0);
    $36 = +HEAPF32[$35>>2];
    $37 = ((($2)) + 4|0);
    $38 = +HEAPF32[$37>>2];
    $39 = ((($2)) + 12|0);
    $40 = +HEAPF32[$39>>2];
    $41 = $38 + $40;
    $42 = $36 <= $41;
    if ($42) {
     $3 = 1;
     $43 = $3;
     STACKTOP = sp;return ($43|0);
    }
   }
  }
 }
 $3 = 0;
 $43 = $3;
 STACKTOP = sp;return ($43|0);
}
function _nk_input_has_mouse_click_down_in_rect($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $3;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $4 = 0;
  $25 = $4;
  STACKTOP = sp;return ($25|0);
 }
 $11 = $6;
 $12 = $5;
 $13 = ((($12)) + 260|0);
 $14 = (($13) + ($11<<4)|0);
 $8 = $14;
 $15 = $5;
 $16 = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $17 = (_nk_input_has_mouse_click_in_rect($15,$16,$$byval_copy)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $8;
  $20 = HEAP32[$19>>2]|0;
  $21 = $7;
  $22 = ($20|0)==($21|0);
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = $24&1;
 $4 = $23;
 $25 = $4;
 STACKTOP = sp;return ($25|0);
}
function _nk_input_is_mouse_click_in_rect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $3 = 0;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 $9 = $5;
 $10 = $4;
 $11 = ((($10)) + 260|0);
 $12 = (($11) + ($9<<4)|0);
 $6 = $12;
 $13 = $4;
 $14 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $15 = (_nk_input_has_mouse_click_down_in_rect($13,$14,$$byval_copy,0)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $6;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  $21 = $20;
 } else {
  $21 = 0;
 }
 $22 = $21 ? 1 : 0;
 $3 = $22;
 $23 = $3;
 STACKTOP = sp;return ($23|0);
}
function _nk_input_is_mouse_click_down_in_rect($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $3;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $4 = 0;
  $26 = $4;
  STACKTOP = sp;return ($26|0);
 }
 $11 = $6;
 $12 = $5;
 $13 = ((($12)) + 260|0);
 $14 = (($13) + ($11<<4)|0);
 $8 = $14;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $18 = (_nk_input_has_mouse_click_down_in_rect($15,$16,$$byval_copy,$17)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $8;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0);
  $24 = $23;
 } else {
  $24 = 0;
 }
 $25 = $24 ? 1 : 0;
 $4 = $25;
 $26 = $4;
 STACKTOP = sp;return ($26|0);
}
function _nk_input_is_mouse_hovering_rect($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $2 = 0;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 $6 = +HEAPF32[$1>>2];
 $7 = $3;
 $8 = ((($7)) + 260|0);
 $9 = ((($8)) + 48|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $6 <= $10;
 if ($11) {
  $12 = $3;
  $13 = ((($12)) + 260|0);
  $14 = ((($13)) + 48|0);
  $15 = +HEAPF32[$14>>2];
  $16 = +HEAPF32[$1>>2];
  $17 = ((($1)) + 8|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $16 + $18;
  $20 = $15 <= $19;
  if ($20) {
   $21 = ((($1)) + 4|0);
   $22 = +HEAPF32[$21>>2];
   $23 = $3;
   $24 = ((($23)) + 260|0);
   $25 = ((($24)) + 48|0);
   $26 = ((($25)) + 4|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $22 <= $27;
   if ($28) {
    $29 = $3;
    $30 = ((($29)) + 260|0);
    $31 = ((($30)) + 48|0);
    $32 = ((($31)) + 4|0);
    $33 = +HEAPF32[$32>>2];
    $34 = ((($1)) + 4|0);
    $35 = +HEAPF32[$34>>2];
    $36 = ((($1)) + 12|0);
    $37 = +HEAPF32[$36>>2];
    $38 = $35 + $37;
    $39 = $33 <= $38;
    $41 = $39;
   } else {
    $41 = 0;
   }
  } else {
   $41 = 0;
  }
 } else {
  $41 = 0;
 }
 $40 = $41&1;
 $2 = $40;
 $42 = $2;
 STACKTOP = sp;return ($42|0);
}
function _nk_input_is_mouse_prev_hovering_rect($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $2 = 0;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 $6 = +HEAPF32[$1>>2];
 $7 = $3;
 $8 = ((($7)) + 260|0);
 $9 = ((($8)) + 56|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $6 <= $10;
 if ($11) {
  $12 = $3;
  $13 = ((($12)) + 260|0);
  $14 = ((($13)) + 56|0);
  $15 = +HEAPF32[$14>>2];
  $16 = +HEAPF32[$1>>2];
  $17 = ((($1)) + 8|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $16 + $18;
  $20 = $15 <= $19;
  if ($20) {
   $21 = ((($1)) + 4|0);
   $22 = +HEAPF32[$21>>2];
   $23 = $3;
   $24 = ((($23)) + 260|0);
   $25 = ((($24)) + 56|0);
   $26 = ((($25)) + 4|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $22 <= $27;
   if ($28) {
    $29 = $3;
    $30 = ((($29)) + 260|0);
    $31 = ((($30)) + 56|0);
    $32 = ((($31)) + 4|0);
    $33 = +HEAPF32[$32>>2];
    $34 = ((($1)) + 4|0);
    $35 = +HEAPF32[$34>>2];
    $36 = ((($1)) + 12|0);
    $37 = +HEAPF32[$36>>2];
    $38 = $35 + $37;
    $39 = $33 <= $38;
    $41 = $39;
   } else {
    $41 = 0;
   }
  } else {
   $41 = 0;
  }
 } else {
  $41 = 0;
 }
 $40 = $41&1;
 $2 = $40;
 $42 = $2;
 STACKTOP = sp;return ($42|0);
}
function _nk_input_mouse_clicked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $4;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $3 = 0;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $9 = (_nk_input_is_mouse_hovering_rect($8,$$byval_copy)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $4;
  $12 = $5;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$2+12>>2]|0;
  $13 = (_nk_input_is_mouse_click_in_rect($11,$12,$$byval_copy1)|0);
  $3 = $13;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 } else {
  $3 = 0;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _nk_input_is_mouse_down($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $4;
  $8 = $3;
  $9 = ((($8)) + 260|0);
  $10 = (($9) + ($7<<4)|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
 } else {
  $2 = 0;
 }
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _nk_input_is_mouse_pressed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $4;
   $9 = $3;
   $10 = ((($9)) + 260|0);
   $11 = (($10) + ($8<<4)|0);
   $5 = $11;
   $12 = $5;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $5;
    $16 = ((($15)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0);
    if ($18) {
     $2 = 1;
     break;
    }
   }
   $2 = 0;
  } else {
   $2 = 0;
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _nk_input_is_mouse_released($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 $7 = $4;
 $8 = $3;
 $9 = ((($8)) + 260|0);
 $10 = (($9) + ($7<<4)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $21 = 0;
 } else {
  $13 = $4;
  $14 = $3;
  $15 = ((($14)) + 260|0);
  $16 = (($15) + ($13<<4)|0);
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  $21 = $19;
 }
 $20 = $21&1;
 $2 = $20;
 $22 = $2;
 STACKTOP = sp;return ($22|0);
}
function _nk_input_is_key_pressed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 $8 = $4;
 $9 = $3;
 $10 = (($9) + ($8<<3)|0);
 $5 = $10;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $5;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   label = 5;
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   $18 = $5;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(0);
   if (!($20)) {
    $21 = $5;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23>>>0)>=(2);
    if ($24) {
     break;
    }
   }
   $2 = 0;
   $25 = $2;
   STACKTOP = sp;return ($25|0);
  }
 } while(0);
 $2 = 1;
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function _nk_textedit_delete($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _nk_textedit_makeundo_delete($6,$7,$8);
 $9 = $3;
 $10 = ((($9)) + 12|0);
 $11 = $4;
 $12 = $5;
 _nk_str_delete_runes($10,$11,$12);
 $13 = $3;
 $14 = ((($13)) + 103|0);
 HEAP8[$14>>0] = 0;
 STACKTOP = sp;return;
}
function _nk_textedit_makeundo_delete($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 112|0);
 $10 = $4;
 $11 = $5;
 $12 = (_nk_textedit_createundo($9,$10,$11,0)|0);
 $7 = $12;
 $13 = $7;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $6 = 0;
 while(1) {
  $15 = $6;
  $16 = $5;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $3;
  $19 = ((($18)) + 12|0);
  $20 = $4;
  $21 = $6;
  $22 = (($20) + ($21))|0;
  $23 = (_nk_str_rune_at($19,$22)|0);
  $24 = $6;
  $25 = $7;
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = $23;
  $27 = $6;
  $28 = (($27) + 1)|0;
  $6 = $28;
 }
 STACKTOP = sp;return;
}
function _nk_textedit_delete_selection($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _nk_textedit_clamp($2);
 $3 = $1;
 $4 = ((($3)) + 92|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)!=($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ((($10)) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 96|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)<($15|0);
 $17 = $1;
 $18 = $1;
 if ($16) {
  $19 = ((($18)) + 92|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = ((($21)) + 96|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = ((($24)) + 92|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($23) - ($26))|0;
  _nk_textedit_delete($17,$20,$27);
  $28 = $1;
  $29 = ((($28)) + 92|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = ((($31)) + 88|0);
  HEAP32[$32>>2] = $30;
  $33 = $1;
  $34 = ((($33)) + 96|0);
  HEAP32[$34>>2] = $30;
 } else {
  $35 = ((($18)) + 96|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $1;
  $38 = ((($37)) + 92|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $1;
  $41 = ((($40)) + 96|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($39) - ($42))|0;
  _nk_textedit_delete($17,$36,$43);
  $44 = $1;
  $45 = ((($44)) + 96|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $1;
  $48 = ((($47)) + 88|0);
  HEAP32[$48>>2] = $46;
  $49 = $1;
  $50 = ((($49)) + 92|0);
  HEAP32[$50>>2] = $46;
 }
 $51 = $1;
 $52 = ((($51)) + 103|0);
 HEAP8[$52>>0] = 0;
 STACKTOP = sp;return;
}
function _nk_textedit_clamp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)!=($12|0);
 if ($13) {
  $14 = $1;
  $15 = ((($14)) + 92|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = ($16|0)>($17|0);
  if ($18) {
   $19 = $2;
   $20 = $1;
   $21 = ((($20)) + 92|0);
   HEAP32[$21>>2] = $19;
  }
  $22 = $1;
  $23 = ((($22)) + 96|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ($24|0)>($25|0);
  if ($26) {
   $27 = $2;
   $28 = $1;
   $29 = ((($28)) + 96|0);
   HEAP32[$29>>2] = $27;
  }
  $30 = $1;
  $31 = ((($30)) + 92|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = ((($33)) + 96|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)==($35|0);
  if ($36) {
   $37 = $1;
   $38 = ((($37)) + 92|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $1;
   $41 = ((($40)) + 88|0);
   HEAP32[$41>>2] = $39;
  }
 }
 $42 = $1;
 $43 = ((($42)) + 88|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $2;
 $46 = ($44|0)>($45|0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = $2;
 $48 = $1;
 $49 = ((($48)) + 88|0);
 HEAP32[$49>>2] = $47;
 STACKTOP = sp;return;
}
function _nk_textedit_cut($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 100|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $1 = 0;
  } else {
   $8 = $2;
   $9 = ((($8)) + 92|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $2;
   $12 = ((($11)) + 96|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($10|0)!=($13|0);
   if ($14) {
    $15 = $2;
    _nk_textedit_delete_selection($15);
    $16 = $2;
    $17 = ((($16)) + 103|0);
    HEAP8[$17>>0] = 0;
    $1 = 1;
    break;
   } else {
    $1 = 0;
    break;
   }
  }
 } while(0);
 $18 = $1;
 STACKTOP = sp;return ($18|0);
}
function _nk_textedit_paste($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $8 = $9;
 $10 = $4;
 $11 = ((($10)) + 100|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(0);
 if ($14) {
  $3 = 0;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 }
 $15 = $4;
 _nk_textedit_clamp($15);
 $16 = $4;
 _nk_textedit_delete_selection($16);
 $17 = $5;
 $18 = $6;
 $19 = (_nk_utf_len($17,$18)|0);
 $7 = $19;
 $20 = $4;
 $21 = ((($20)) + 12|0);
 $22 = $4;
 $23 = ((($22)) + 88|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $8;
 $26 = $6;
 $27 = (_nk_str_insert_text_char($21,$24,$25,$26)|0);
 $28 = ($27|0)!=(0);
 $29 = $4;
 if ($28) {
  $30 = $4;
  $31 = ((($30)) + 88|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $7;
  _nk_textedit_makeundo_insert($29,$32,$33);
  $34 = $6;
  $35 = $4;
  $36 = ((($35)) + 88|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34))|0;
  HEAP32[$36>>2] = $38;
  $39 = $4;
  $40 = ((($39)) + 103|0);
  HEAP8[$40>>0] = 0;
  $3 = 1;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 }
 $41 = ((($29)) + 112|0);
 $42 = ((($41)) + 5184|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = ($43<<16>>16)!=(0);
 if ($44) {
  $45 = $4;
  $46 = ((($45)) + 112|0);
  $47 = ((($46)) + 5184|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = (($48) + -1)<<16>>16;
  HEAP16[$47>>1] = $49;
 }
 $3 = 0;
 $50 = $3;
 STACKTOP = sp;return ($50|0);
}
function _nk_textedit_makeundo_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 112|0);
 $8 = $4;
 $9 = $5;
 (_nk_textedit_createundo($7,$8,0,$9)|0);
 STACKTOP = sp;return;
}
function _nk_textedit_text($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$not = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((18268|0),(1320|0),11885,(18274|0));
  // unreachable;
 }
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((1853|0),(1320|0),11886,(18274|0));
  // unreachable;
 }
 $13 = $4;
 $14 = ($13|0)!=(0|0);
 $15 = $5;
 $16 = ($15|0)!=(0);
 $or$cond = $14 & $16;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $17 = $3;
 $18 = ((($17)) + 100|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)==(0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = $4;
 $23 = $5;
 $24 = (_nk_utf_decode($22,$6,$23)|0);
 $7 = $24;
 $25 = $7;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $27 = $8;
  $28 = $5;
  $29 = ($27|0)<($28|0);
  $30 = $7;
  $31 = ($30|0)!=(0);
  $32 = $29 ? $31 : 0;
  $$not = $32 ^ 1;
  $33 = HEAP32[$6>>2]|0;
  $34 = ($33|0)==(127);
  $or$cond3 = $$not | $34;
  if ($or$cond3) {
   label = 23;
   break;
  }
  $35 = HEAP32[$6>>2]|0;
  $36 = ($35|0)==(10);
  if ($36) {
   $37 = $3;
   $38 = ((($37)) + 104|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = ($40|0)!=(0);
   if ($41) {
    label = 23;
    break;
   }
  }
  $42 = $3;
  $43 = ((($42)) + 76|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0|0);
  if ($45) {
   $46 = $3;
   $47 = ((($46)) + 76|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $3;
   $50 = HEAP32[$6>>2]|0;
   $51 = (FUNCTION_TABLE_iii[$48 & 31]($49,$50)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    $53 = $4;
    $54 = $8;
    $55 = (($53) + ($54)|0);
    $56 = $5;
    $57 = $8;
    $58 = (($56) - ($57))|0;
    $59 = (_nk_utf_decode($55,$6,$58)|0);
    $7 = $59;
    $60 = $7;
    $61 = $8;
    $62 = (($61) + ($60))|0;
    $8 = $62;
    continue;
   }
  }
  $63 = $3;
  $64 = ((($63)) + 92|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $3;
  $67 = ((($66)) + 96|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($65|0)!=($68|0);
  if ($69) {
   label = 20;
  } else {
   $70 = $3;
   $71 = ((($70)) + 88|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $3;
   $74 = ((($73)) + 12|0);
   $75 = ((($74)) + 60|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($72|0)<($76|0);
   if ($77) {
    $78 = $3;
    $79 = ((($78)) + 100|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80&255;
    $82 = ($81|0)==(2);
    if ($82) {
     $83 = $3;
     $84 = $3;
     $85 = ((($84)) + 88|0);
     $86 = HEAP32[$85>>2]|0;
     _nk_textedit_makeundo_replace($83,$86,1,1);
     $87 = $3;
     $88 = ((($87)) + 12|0);
     $89 = $3;
     $90 = ((($89)) + 88|0);
     $91 = HEAP32[$90>>2]|0;
     _nk_str_delete_runes($88,$91,1);
    }
    $92 = $3;
    $93 = ((($92)) + 12|0);
    $94 = $3;
    $95 = ((($94)) + 88|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $4;
    $98 = $8;
    $99 = (($97) + ($98)|0);
    $100 = (_nk_str_insert_text_utf8($93,$96,$99,1)|0);
    $101 = ($100|0)!=(0);
    if ($101) {
     $102 = $3;
     $103 = ((($102)) + 88|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($104) + 1)|0;
     HEAP32[$103>>2] = $105;
     $106 = $3;
     $107 = ((($106)) + 103|0);
     HEAP8[$107>>0] = 0;
    }
   } else {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $108 = $3;
   _nk_textedit_delete_selection($108);
   $109 = $3;
   $110 = ((($109)) + 12|0);
   $111 = $3;
   $112 = ((($111)) + 88|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $4;
   $115 = $8;
   $116 = (($114) + ($115)|0);
   $117 = (_nk_str_insert_text_utf8($110,$113,$116,1)|0);
   $118 = ($117|0)!=(0);
   if ($118) {
    $119 = $3;
    $120 = $3;
    $121 = ((($120)) + 88|0);
    $122 = HEAP32[$121>>2]|0;
    _nk_textedit_makeundo_insert($119,$122,1);
    $123 = $3;
    $124 = ((($123)) + 88|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + 1)|0;
    HEAP32[$124>>2] = $126;
    $127 = $3;
    $128 = ((($127)) + 103|0);
    HEAP8[$128>>0] = 0;
   }
  }
  $129 = $4;
  $130 = $8;
  $131 = (($129) + ($130)|0);
  $132 = $5;
  $133 = $8;
  $134 = (($132) - ($133))|0;
  $135 = (_nk_utf_decode($131,$6,$134)|0);
  $7 = $135;
  $136 = $7;
  $137 = $8;
  $138 = (($137) + ($136))|0;
  $8 = $138;
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function _nk_textedit_makeundo_replace($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = ((($10)) + 112|0);
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = (_nk_textedit_createundo($11,$12,$13,$14)|0);
 $9 = $15;
 $16 = $9;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $8 = 0;
 while(1) {
  $18 = $8;
  $19 = $6;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $4;
  $22 = ((($21)) + 12|0);
  $23 = $5;
  $24 = $8;
  $25 = (($23) + ($24))|0;
  $26 = (_nk_str_rune_at($22,$25)|0);
  $27 = $8;
  $28 = $9;
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = $26;
  $30 = $8;
  $31 = (($30) + 1)|0;
  $8 = $31;
 }
 STACKTOP = sp;return;
}
function _nk_textedit_undo($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 112|0);
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 5184|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = ((($13)) + 5184|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = (($16) - 1)|0;
 $18 = $2;
 $19 = (($18) + (($17*12)|0)|0);
 ;HEAP32[$3>>2]=HEAP32[$19>>2]|0;HEAP32[$3+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$19+8>>2]|0;
 $20 = $2;
 $21 = ((($20)) + 5186|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = (($23) - 1)|0;
 $25 = $2;
 $26 = (($25) + (($24*12)|0)|0);
 $4 = $26;
 $27 = $4;
 $28 = ((($27)) + 8|0);
 HEAP16[$28>>1] = -1;
 $29 = ((($3)) + 6|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $4;
 $32 = ((($31)) + 4|0);
 HEAP16[$32>>1] = $30;
 $33 = ((($3)) + 4|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $4;
 $36 = ((($35)) + 6|0);
 HEAP16[$36>>1] = $34;
 $37 = HEAP32[$3>>2]|0;
 $38 = $4;
 HEAP32[$38>>2] = $37;
 $39 = ((($3)) + 6|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = ($40<<16>>16)!=(0);
 if ($41) {
  $42 = $2;
  $43 = ((($42)) + 5188|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = ((($3)) + 6|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = (($45) + ($48))|0;
  $50 = ($49|0)>=(999);
  L6: do {
   if ($50) {
    $51 = $4;
    $52 = ((($51)) + 4|0);
    HEAP16[$52>>1] = 0;
   } else {
    while(1) {
     $53 = $2;
     $54 = ((($53)) + 5188|0);
     $55 = HEAP16[$54>>1]|0;
     $56 = $55 << 16 >> 16;
     $57 = ((($3)) + 6|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58 << 16 >> 16;
     $60 = (($56) + ($59))|0;
     $61 = $2;
     $62 = ((($61)) + 5190|0);
     $63 = HEAP16[$62>>1]|0;
     $64 = $63 << 16 >> 16;
     $65 = ($60|0)>($64|0);
     $66 = $2;
     if (!($65)) {
      break;
     }
     _nk_textedit_discard_redo($66);
     $67 = $2;
     $68 = ((($67)) + 5186|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = ($70|0)==(99);
     if ($71) {
      label = 14;
      break;
     }
    }
    if ((label|0) == 14) {
     STACKTOP = sp;return;
    }
    $72 = ((($66)) + 5186|0);
    $73 = HEAP16[$72>>1]|0;
    $74 = $73 << 16 >> 16;
    $75 = (($74) - 1)|0;
    $76 = $2;
    $77 = (($76) + (($75*12)|0)|0);
    $4 = $77;
    $78 = $2;
    $79 = ((($78)) + 5190|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = $80 << 16 >> 16;
    $82 = ((($3)) + 6|0);
    $83 = HEAP16[$82>>1]|0;
    $84 = $83 << 16 >> 16;
    $85 = (($81) - ($84))|0;
    $86 = $85&65535;
    $87 = $4;
    $88 = ((($87)) + 8|0);
    HEAP16[$88>>1] = $86;
    $89 = $2;
    $90 = ((($89)) + 5190|0);
    $91 = HEAP16[$90>>1]|0;
    $92 = $91 << 16 >> 16;
    $93 = ((($3)) + 6|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94 << 16 >> 16;
    $96 = (($92) - ($95))|0;
    $97 = $96&65535;
    $98 = $2;
    $99 = ((($98)) + 5190|0);
    HEAP16[$99>>1] = $97;
    $5 = 0;
    while(1) {
     $100 = $5;
     $101 = ((($3)) + 6|0);
     $102 = HEAP16[$101>>1]|0;
     $103 = $102 << 16 >> 16;
     $104 = ($100|0)<($103|0);
     if (!($104)) {
      break L6;
     }
     $105 = $1;
     $106 = ((($105)) + 12|0);
     $107 = HEAP32[$3>>2]|0;
     $108 = $5;
     $109 = (($107) + ($108))|0;
     $110 = (_nk_str_rune_at($106,$109)|0);
     $111 = $4;
     $112 = ((($111)) + 8|0);
     $113 = HEAP16[$112>>1]|0;
     $114 = $113 << 16 >> 16;
     $115 = $5;
     $116 = (($114) + ($115))|0;
     $117 = $2;
     $118 = ((($117)) + 1188|0);
     $119 = (($118) + ($116<<2)|0);
     HEAP32[$119>>2] = $110;
     $120 = $5;
     $121 = (($120) + 1)|0;
     $5 = $121;
    }
   }
  } while(0);
  $122 = $1;
  $123 = ((($122)) + 12|0);
  $124 = HEAP32[$3>>2]|0;
  $125 = ((($3)) + 6|0);
  $126 = HEAP16[$125>>1]|0;
  $127 = $126 << 16 >> 16;
  _nk_str_delete_runes($123,$124,$127);
 }
 $128 = ((($3)) + 4|0);
 $129 = HEAP16[$128>>1]|0;
 $130 = ($129<<16>>16)!=(0);
 if ($130) {
  $131 = $1;
  $132 = ((($131)) + 12|0);
  $133 = HEAP32[$3>>2]|0;
  $134 = ((($3)) + 8|0);
  $135 = HEAP16[$134>>1]|0;
  $136 = $135 << 16 >> 16;
  $137 = $2;
  $138 = ((($137)) + 1188|0);
  $139 = (($138) + ($136<<2)|0);
  $140 = ((($3)) + 4|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = $141 << 16 >> 16;
  (_nk_str_insert_text_runes($132,$133,$139,$142)|0);
  $143 = $2;
  $144 = ((($143)) + 5188|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145 << 16 >> 16;
  $147 = ((($3)) + 4|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148 << 16 >> 16;
  $150 = (($146) - ($149))|0;
  $151 = $150&65535;
  $152 = $2;
  $153 = ((($152)) + 5188|0);
  HEAP16[$153>>1] = $151;
 }
 $154 = HEAP32[$3>>2]|0;
 $155 = ((($3)) + 4|0);
 $156 = HEAP16[$155>>1]|0;
 $157 = $156 << 16 >> 16;
 $158 = (($154) + ($157))|0;
 $159 = $158&65535;
 $160 = $159 << 16 >> 16;
 $161 = $1;
 $162 = ((($161)) + 88|0);
 HEAP32[$162>>2] = $160;
 $163 = $2;
 $164 = ((($163)) + 5184|0);
 $165 = HEAP16[$164>>1]|0;
 $166 = (($165) + -1)<<16>>16;
 HEAP16[$164>>1] = $166;
 $167 = $2;
 $168 = ((($167)) + 5186|0);
 $169 = HEAP16[$168>>1]|0;
 $170 = (($169) + -1)<<16>>16;
 HEAP16[$168>>1] = $170;
 STACKTOP = sp;return;
}
function _nk_textedit_discard_redo($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $3 = 98;
 $6 = $1;
 $7 = ((($6)) + 5186|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $3;
 $11 = ($9|0)<=($10|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $3;
 $13 = $1;
 $14 = (($13) + (($12*12)|0)|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $18 = ($17|0)>=(0);
 L4: do {
  if ($18) {
   $19 = $3;
   $20 = $1;
   $21 = (($20) + (($19*12)|0)|0);
   $22 = ((($21)) + 4|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 << 16 >> 16;
   $4 = $24;
   $25 = $1;
   $26 = ((($25)) + 5190|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = $4;
   $30 = (($28) + ($29))|0;
   $31 = $30&65535;
   $32 = $1;
   $33 = ((($32)) + 5190|0);
   HEAP16[$33>>1] = $31;
   $34 = $1;
   $35 = ((($34)) + 5190|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36 << 16 >> 16;
   $38 = (999 - ($37))|0;
   $2 = $38;
   $39 = $1;
   $40 = ((($39)) + 1188|0);
   $41 = $1;
   $42 = ((($41)) + 5190|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43 << 16 >> 16;
   $45 = (($40) + ($44<<2)|0);
   $46 = $1;
   $47 = ((($46)) + 1188|0);
   $48 = $1;
   $49 = ((($48)) + 5190|0);
   $50 = HEAP16[$49>>1]|0;
   $51 = $50 << 16 >> 16;
   $52 = (($47) + ($51<<2)|0);
   $53 = $4;
   $54 = (0 - ($53))|0;
   $55 = (($52) + ($54<<2)|0);
   $56 = $2;
   $57 = $56;
   (_nk_memcopy($45,$55,$57)|0);
   $58 = $1;
   $59 = ((($58)) + 5186|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = $60 << 16 >> 16;
   $5 = $61;
   while(1) {
    $62 = $5;
    $63 = $3;
    $64 = ($62|0)<($63|0);
    if (!($64)) {
     break L4;
    }
    $65 = $5;
    $66 = $1;
    $67 = (($66) + (($65*12)|0)|0);
    $68 = ((($67)) + 8|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = $69 << 16 >> 16;
    $71 = ($70|0)>=(0);
    if ($71) {
     $72 = $5;
     $73 = $1;
     $74 = (($73) + (($72*12)|0)|0);
     $75 = ((($74)) + 8|0);
     $76 = HEAP16[$75>>1]|0;
     $77 = $76 << 16 >> 16;
     $78 = $4;
     $79 = (($77) + ($78))|0;
     $80 = $79&65535;
     $81 = $5;
     $82 = $1;
     $83 = (($82) + (($81*12)|0)|0);
     $84 = ((($83)) + 8|0);
     HEAP16[$84>>1] = $80;
    }
    $85 = $5;
    $86 = (($85) + 1)|0;
    $5 = $86;
   }
  }
 } while(0);
 $87 = $1;
 $88 = ((($87)) + 5186|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = (($89) + 1)<<16>>16;
 HEAP16[$88>>1] = $90;
 $91 = $1;
 $92 = ((($91)) + 5186|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = $93 << 16 >> 16;
 $95 = (99 - ($94))|0;
 $2 = $95;
 $96 = $2;
 $97 = ($96|0)!=(0);
 if (!($97)) {
  STACKTOP = sp;return;
 }
 $98 = $1;
 $99 = $1;
 $100 = ((($99)) + 5186|0);
 $101 = HEAP16[$100>>1]|0;
 $102 = $101 << 16 >> 16;
 $103 = (($98) + (($102*12)|0)|0);
 $104 = ((($103)) + -12|0);
 $105 = $1;
 $106 = $1;
 $107 = ((($106)) + 5186|0);
 $108 = HEAP16[$107>>1]|0;
 $109 = $108 << 16 >> 16;
 $110 = (($105) + (($109*12)|0)|0);
 $111 = $2;
 $112 = ($111*12)|0;
 (_nk_memcopy($104,$110,$112)|0);
 STACKTOP = sp;return;
}
function _nk_textedit_redo($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 4|0;
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 112|0);
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 5186|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($11|0)==(99);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = ((($13)) + 5184|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = $2;
 $18 = (($17) + (($16*12)|0)|0);
 $3 = $18;
 $19 = $2;
 $20 = ((($19)) + 5186|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $2;
 $24 = (($23) + (($22*12)|0)|0);
 ;HEAP32[$4>>2]=HEAP32[$24>>2]|0;HEAP32[$4+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$24+8>>2]|0;
 $25 = ((($4)) + 4|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $3;
 $28 = ((($27)) + 6|0);
 HEAP16[$28>>1] = $26;
 $29 = ((($4)) + 6|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $3;
 $32 = ((($31)) + 4|0);
 HEAP16[$32>>1] = $30;
 $33 = HEAP32[$4>>2]|0;
 $34 = $3;
 HEAP32[$34>>2] = $33;
 $35 = $3;
 $36 = ((($35)) + 8|0);
 HEAP16[$36>>1] = -1;
 $37 = ((($4)) + 6|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = ($38<<16>>16)!=(0);
 if ($39) {
  $40 = $2;
  $41 = ((($40)) + 5188|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = $3;
  $45 = ((($44)) + 4|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = (($43) + ($47))|0;
  $49 = $2;
  $50 = ((($49)) + 5190|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = ($48|0)>($52|0);
  L6: do {
   if ($53) {
    $54 = $3;
    $55 = ((($54)) + 4|0);
    HEAP16[$55>>1] = 0;
    $56 = $3;
    $57 = ((($56)) + 6|0);
    HEAP16[$57>>1] = 0;
   } else {
    $58 = $2;
    $59 = ((($58)) + 5188|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $3;
    $62 = ((($61)) + 8|0);
    HEAP16[$62>>1] = $60;
    $63 = $2;
    $64 = ((($63)) + 5188|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65 << 16 >> 16;
    $67 = $3;
    $68 = ((($67)) + 4|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = $69 << 16 >> 16;
    $71 = (($66) + ($70))|0;
    $72 = $71&65535;
    $73 = $2;
    $74 = ((($73)) + 5188|0);
    HEAP16[$74>>1] = $72;
    $5 = 0;
    while(1) {
     $75 = $5;
     $76 = $3;
     $77 = ((($76)) + 4|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78 << 16 >> 16;
     $80 = ($75|0)<($79|0);
     if (!($80)) {
      break L6;
     }
     $81 = $1;
     $82 = ((($81)) + 12|0);
     $83 = $3;
     $84 = HEAP32[$83>>2]|0;
     $85 = $5;
     $86 = (($84) + ($85))|0;
     $87 = (_nk_str_rune_at($82,$86)|0);
     $88 = $3;
     $89 = ((($88)) + 8|0);
     $90 = HEAP16[$89>>1]|0;
     $91 = $90 << 16 >> 16;
     $92 = $5;
     $93 = (($91) + ($92))|0;
     $94 = $2;
     $95 = ((($94)) + 1188|0);
     $96 = (($95) + ($93<<2)|0);
     HEAP32[$96>>2] = $87;
     $97 = $5;
     $98 = (($97) + 1)|0;
     $5 = $98;
    }
   }
  } while(0);
  $99 = $1;
  $100 = ((($99)) + 12|0);
  $101 = HEAP32[$4>>2]|0;
  $102 = ((($4)) + 6|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = $103 << 16 >> 16;
  _nk_str_delete_runes($100,$101,$104);
 }
 $105 = ((($4)) + 4|0);
 $106 = HEAP16[$105>>1]|0;
 $107 = ($106<<16>>16)!=(0);
 if ($107) {
  $108 = $1;
  $109 = ((($108)) + 12|0);
  $110 = HEAP32[$4>>2]|0;
  $111 = ((($4)) + 8|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112 << 16 >> 16;
  $114 = $2;
  $115 = ((($114)) + 1188|0);
  $116 = (($115) + ($113<<2)|0);
  $117 = ((($4)) + 4|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  (_nk_str_insert_text_runes($109,$110,$116,$119)|0);
 }
 $120 = HEAP32[$4>>2]|0;
 $121 = ((($4)) + 4|0);
 $122 = HEAP16[$121>>1]|0;
 $123 = $122 << 16 >> 16;
 $124 = (($120) + ($123))|0;
 $125 = $1;
 $126 = ((($125)) + 88|0);
 HEAP32[$126>>2] = $124;
 $127 = $2;
 $128 = ((($127)) + 5184|0);
 $129 = HEAP16[$128>>1]|0;
 $130 = (($129) + 1)<<16>>16;
 HEAP16[$128>>1] = $130;
 $131 = $2;
 $132 = ((($131)) + 5186|0);
 $133 = HEAP16[$132>>1]|0;
 $134 = (($133) + 1)<<16>>16;
 HEAP16[$132>>1] = $134;
 STACKTOP = sp;return;
}
function _nk_textedit_clear_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 112|0);
 $9 = ((($8)) + 5184|0);
 HEAP16[$9>>1] = 0;
 $10 = $3;
 $11 = ((($10)) + 112|0);
 $12 = ((($11)) + 5188|0);
 HEAP16[$12>>1] = 0;
 $13 = $3;
 $14 = ((($13)) + 112|0);
 $15 = ((($14)) + 5186|0);
 HEAP16[$15>>1] = 99;
 $16 = $3;
 $17 = ((($16)) + 112|0);
 $18 = ((($17)) + 5190|0);
 HEAP16[$18>>1] = 999;
 $19 = $3;
 $20 = ((($19)) + 92|0);
 HEAP32[$20>>2] = 0;
 $21 = $3;
 $22 = ((($21)) + 96|0);
 HEAP32[$22>>2] = 0;
 $23 = $3;
 $24 = ((($23)) + 88|0);
 HEAP32[$24>>2] = 0;
 $25 = $3;
 $26 = ((($25)) + 103|0);
 HEAP8[$26>>0] = 0;
 $27 = $3;
 $28 = ((($27)) + 108|0);
 HEAPF32[$28>>2] = 0.0;
 $29 = $3;
 $30 = ((($29)) + 101|0);
 HEAP8[$30>>0] = 0;
 $31 = $3;
 $32 = ((($31)) + 102|0);
 HEAP8[$32>>0] = 1;
 $33 = $4;
 $34 = ($33|0)==(0);
 $35 = $34&1;
 $36 = $35&255;
 $37 = $3;
 $38 = ((($37)) + 104|0);
 HEAP8[$38>>0] = $36;
 $39 = $3;
 $40 = ((($39)) + 100|0);
 HEAP8[$40>>0] = 0;
 $41 = $5;
 $42 = $3;
 $43 = ((($42)) + 76|0);
 HEAP32[$43>>2] = $41;
 $44 = $3;
 $45 = ((($44)) + 80|0);
 _nk_vec2($6,0.0,0.0);
 ;HEAP32[$45>>2]=HEAP32[$6>>2]|0;HEAP32[$45+4>>2]=HEAP32[$6+4>>2]|0;
 STACKTOP = sp;return;
}
function _nk_textedit_select_all($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = ((($4)) + 92|0);
  HEAP32[$5>>2] = 0;
  $6 = $1;
  $7 = ((($6)) + 12|0);
  $8 = ((($7)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = ((($10)) + 96|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18268|0),(1320|0),12560,(18291|0));
  // unreachable;
 }
}
function _nk_filter_default($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 1;
}
function _nk_filter_ascii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5>>>0)>(128);
 if ($6) {
  $2 = 0;
 } else {
  $2 = 1;
 }
 $7 = $2;
 STACKTOP = sp;return ($7|0);
}
function _nk_filter_float($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5>>>0)<(48);
 $7 = $4;
 $8 = ($7>>>0)>(57);
 $or$cond = $6 | $8;
 $9 = $4;
 $10 = ($9|0)!=(46);
 $or$cond3 = $or$cond & $10;
 $11 = $4;
 $12 = ($11|0)!=(45);
 $or$cond5 = $or$cond3 & $12;
 if ($or$cond5) {
  $2 = 0;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  $2 = 1;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _nk_filter_decimal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5>>>0)<(48);
 $7 = $4;
 $8 = ($7>>>0)>(57);
 $or$cond = $6 | $8;
 $9 = $4;
 $10 = ($9|0)!=(45);
 $or$cond3 = $or$cond & $10;
 if ($or$cond3) {
  $2 = 0;
  $11 = $2;
  STACKTOP = sp;return ($11|0);
 } else {
  $2 = 1;
  $11 = $2;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _nk_filter_hex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5>>>0)<(48);
 $7 = $4;
 $8 = ($7>>>0)>(57);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $9 = $4;
  $10 = ($9>>>0)<(97);
  $11 = $4;
  $12 = ($11>>>0)>(102);
  $or$cond3 = $10 | $12;
  if ($or$cond3) {
   $13 = $4;
   $14 = ($13>>>0)<(65);
   $15 = $4;
   $16 = ($15>>>0)>(70);
   $or$cond5 = $14 | $16;
   if ($or$cond5) {
    $2 = 0;
    $17 = $2;
    STACKTOP = sp;return ($17|0);
   }
  }
 }
 $2 = 1;
 $17 = $2;
 STACKTOP = sp;return ($17|0);
}
function _nk_filter_oct($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5>>>0)<(48);
 $7 = $4;
 $8 = ($7>>>0)>(55);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $2 = 0;
 } else {
  $2 = 1;
 }
 $9 = $2;
 STACKTOP = sp;return ($9|0);
}
function _nk_filter_binary($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)!=(48);
 $7 = $4;
 $8 = ($7|0)!=(49);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $2 = 0;
 } else {
  $2 = 1;
 }
 $9 = $2;
 STACKTOP = sp;return ($9|0);
}
function _nk_style_default($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _nk_style_from_table($2,0);
 STACKTOP = sp;return;
}
function _nk_style_from_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy4 = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $$byval_copy42 = 0, $$byval_copy43 = 0, $$byval_copy44 = 0;
 var $$byval_copy45 = 0, $$byval_copy46 = 0, $$byval_copy47 = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy5 = 0, $$byval_copy50 = 0, $$byval_copy51 = 0, $$byval_copy52 = 0, $$byval_copy53 = 0, $$byval_copy54 = 0, $$byval_copy55 = 0, $$byval_copy56 = 0, $$byval_copy57 = 0, $$byval_copy58 = 0, $$byval_copy59 = 0, $$byval_copy6 = 0, $$byval_copy60 = 0, $$byval_copy61 = 0, $$byval_copy62 = 0;
 var $$byval_copy63 = 0, $$byval_copy64 = 0, $$byval_copy65 = 0, $$byval_copy66 = 0, $$byval_copy67 = 0, $$byval_copy68 = 0, $$byval_copy69 = 0, $$byval_copy7 = 0, $$byval_copy70 = 0, $$byval_copy71 = 0, $$byval_copy72 = 0, $$byval_copy73 = 0, $$byval_copy74 = 0, $$byval_copy75 = 0, $$byval_copy76 = 0, $$byval_copy77 = 0, $$byval_copy78 = 0, $$byval_copy79 = 0, $$byval_copy8 = 0, $$byval_copy80 = 0;
 var $$byval_copy81 = 0, $$byval_copy82 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2816|0);
 $$byval_copy82 = sp + 2804|0;
 $$byval_copy81 = sp + 2800|0;
 $$byval_copy80 = sp + 2796|0;
 $$byval_copy79 = sp + 2792|0;
 $$byval_copy78 = sp + 2788|0;
 $$byval_copy77 = sp + 2784|0;
 $$byval_copy76 = sp + 2780|0;
 $$byval_copy75 = sp + 2776|0;
 $$byval_copy74 = sp + 2772|0;
 $$byval_copy73 = sp + 2768|0;
 $$byval_copy72 = sp + 2764|0;
 $$byval_copy71 = sp + 2760|0;
 $$byval_copy70 = sp + 2756|0;
 $$byval_copy69 = sp + 2752|0;
 $$byval_copy68 = sp + 2748|0;
 $$byval_copy67 = sp + 2744|0;
 $$byval_copy66 = sp + 2740|0;
 $$byval_copy65 = sp + 2736|0;
 $$byval_copy64 = sp + 2732|0;
 $$byval_copy63 = sp + 2728|0;
 $$byval_copy62 = sp + 2724|0;
 $$byval_copy61 = sp + 2720|0;
 $$byval_copy60 = sp + 2716|0;
 $$byval_copy59 = sp + 2712|0;
 $$byval_copy58 = sp + 2708|0;
 $$byval_copy57 = sp + 2704|0;
 $$byval_copy56 = sp + 2700|0;
 $$byval_copy55 = sp + 2696|0;
 $$byval_copy54 = sp + 2692|0;
 $$byval_copy53 = sp + 2688|0;
 $$byval_copy52 = sp + 2684|0;
 $$byval_copy51 = sp + 2680|0;
 $$byval_copy50 = sp + 2676|0;
 $$byval_copy49 = sp + 2672|0;
 $$byval_copy48 = sp + 2668|0;
 $$byval_copy47 = sp + 2664|0;
 $$byval_copy46 = sp + 2660|0;
 $$byval_copy45 = sp + 2656|0;
 $$byval_copy44 = sp + 2652|0;
 $$byval_copy43 = sp + 2648|0;
 $$byval_copy42 = sp + 2644|0;
 $$byval_copy41 = sp + 2640|0;
 $$byval_copy40 = sp + 2636|0;
 $$byval_copy39 = sp + 2632|0;
 $$byval_copy38 = sp + 2628|0;
 $$byval_copy37 = sp + 2624|0;
 $$byval_copy36 = sp + 2620|0;
 $$byval_copy35 = sp + 2616|0;
 $$byval_copy34 = sp + 2612|0;
 $$byval_copy33 = sp + 2608|0;
 $$byval_copy32 = sp + 2604|0;
 $$byval_copy31 = sp + 2600|0;
 $$byval_copy30 = sp + 2596|0;
 $$byval_copy29 = sp + 2592|0;
 $$byval_copy28 = sp + 2588|0;
 $$byval_copy27 = sp + 2584|0;
 $$byval_copy26 = sp + 2580|0;
 $$byval_copy25 = sp + 2576|0;
 $$byval_copy24 = sp + 2572|0;
 $$byval_copy23 = sp + 2568|0;
 $$byval_copy22 = sp + 2564|0;
 $$byval_copy21 = sp + 2560|0;
 $$byval_copy20 = sp + 2556|0;
 $$byval_copy19 = sp + 2552|0;
 $$byval_copy18 = sp + 2548|0;
 $$byval_copy17 = sp + 2544|0;
 $$byval_copy16 = sp + 2540|0;
 $$byval_copy15 = sp + 2536|0;
 $$byval_copy14 = sp + 2532|0;
 $$byval_copy13 = sp + 2528|0;
 $$byval_copy12 = sp + 2524|0;
 $$byval_copy11 = sp + 2520|0;
 $$byval_copy10 = sp + 2516|0;
 $$byval_copy9 = sp + 2512|0;
 $$byval_copy8 = sp + 2508|0;
 $$byval_copy7 = sp + 2504|0;
 $$byval_copy6 = sp + 2500|0;
 $$byval_copy5 = sp + 2496|0;
 $$byval_copy4 = sp + 2492|0;
 $$byval_copy3 = sp + 2488|0;
 $$byval_copy2 = sp + 2484|0;
 $$byval_copy1 = sp + 2480|0;
 $$byval_copy = sp + 2476|0;
 $18 = sp + 2296|0;
 $19 = sp + 2272|0;
 $20 = sp + 2252|0;
 $21 = sp + 2232|0;
 $22 = sp + 2224|0;
 $23 = sp + 2216|0;
 $24 = sp + 2208|0;
 $25 = sp + 2204|0;
 $26 = sp + 2184|0;
 $27 = sp + 2164|0;
 $28 = sp + 2144|0;
 $29 = sp + 2136|0;
 $30 = sp + 2128|0;
 $31 = sp + 2124|0;
 $32 = sp + 2104|0;
 $33 = sp + 2084|0;
 $34 = sp + 2064|0;
 $35 = sp + 2056|0;
 $36 = sp + 2048|0;
 $37 = sp + 2040|0;
 $38 = sp + 2020|0;
 $39 = sp + 2000|0;
 $40 = sp + 1980|0;
 $41 = sp + 1960|0;
 $42 = sp + 1940|0;
 $43 = sp + 1936|0;
 $44 = sp + 1928|0;
 $45 = sp + 1920|0;
 $46 = sp + 2472|0;
 $47 = sp + 1900|0;
 $48 = sp + 1880|0;
 $49 = sp + 1860|0;
 $50 = sp + 1840|0;
 $51 = sp + 1820|0;
 $52 = sp + 1816|0;
 $53 = sp + 1808|0;
 $54 = sp + 1800|0;
 $55 = sp + 2468|0;
 $56 = sp + 1780|0;
 $57 = sp + 1760|0;
 $58 = sp + 1740|0;
 $59 = sp + 1720|0;
 $60 = sp + 1700|0;
 $61 = sp + 1680|0;
 $62 = sp + 1672|0;
 $63 = sp + 1664|0;
 $64 = sp + 1656|0;
 $65 = sp + 1636|0;
 $66 = sp + 1616|0;
 $67 = sp + 1596|0;
 $68 = sp + 1576|0;
 $69 = sp + 1556|0;
 $70 = sp + 1536|0;
 $71 = sp + 1528|0;
 $72 = sp + 1520|0;
 $73 = sp + 1512|0;
 $74 = sp + 1508|0;
 $75 = sp + 2464|0;
 $76 = sp + 1488|0;
 $77 = sp + 2460|0;
 $78 = sp + 1468|0;
 $79 = sp + 2456|0;
 $80 = sp + 1448|0;
 $81 = sp + 2452|0;
 $82 = sp + 2448|0;
 $83 = sp + 2444|0;
 $84 = sp + 2440|0;
 $85 = sp + 2436|0;
 $86 = sp + 1440|0;
 $87 = sp + 1432|0;
 $88 = sp + 1428|0;
 $89 = sp + 1408|0;
 $90 = sp + 1388|0;
 $91 = sp + 1368|0;
 $92 = sp + 1348|0;
 $93 = sp + 1328|0;
 $94 = sp + 1308|0;
 $95 = sp + 2432|0;
 $96 = sp + 2428|0;
 $97 = sp + 1304|0;
 $98 = sp + 1296|0;
 $99 = sp + 1272|0;
 $100 = sp + 1252|0;
 $101 = sp + 1232|0;
 $102 = sp + 1212|0;
 $103 = sp + 1192|0;
 $104 = sp + 1172|0;
 $105 = sp + 1168|0;
 $106 = sp + 1160|0;
 $107 = sp + 2424|0;
 $108 = sp + 1136|0;
 $109 = sp + 2420|0;
 $110 = sp + 1116|0;
 $111 = sp + 2416|0;
 $112 = sp + 1096|0;
 $113 = sp + 2412|0;
 $114 = sp + 2408|0;
 $115 = sp + 2404|0;
 $116 = sp + 2400|0;
 $117 = sp + 2396|0;
 $118 = sp + 1088|0;
 $119 = sp + 1080|0;
 $120 = sp + 1076|0;
 $121 = sp + 1056|0;
 $122 = sp + 1036|0;
 $123 = sp + 1016|0;
 $124 = sp + 1008|0;
 $125 = sp + 1000|0;
 $126 = sp + 980|0;
 $127 = sp + 960|0;
 $128 = sp + 940|0;
 $129 = sp + 936|0;
 $130 = sp + 928|0;
 $131 = sp + 904|0;
 $132 = sp + 884|0;
 $133 = sp + 864|0;
 $134 = sp + 2392|0;
 $135 = sp + 856|0;
 $136 = sp + 848|0;
 $137 = sp + 844|0;
 $138 = sp + 824|0;
 $139 = sp + 804|0;
 $140 = sp + 784|0;
 $141 = sp + 2388|0;
 $142 = sp + 776|0;
 $143 = sp + 752|0;
 $144 = sp + 744|0;
 $145 = sp + 720|0;
 $146 = sp + 700|0;
 $147 = sp + 680|0;
 $148 = sp + 672|0;
 $149 = sp + 664|0;
 $150 = sp + 656|0;
 $151 = sp + 632|0;
 $152 = sp + 612|0;
 $153 = sp + 592|0;
 $154 = sp + 2384|0;
 $155 = sp + 584|0;
 $156 = sp + 576|0;
 $157 = sp + 572|0;
 $158 = sp + 552|0;
 $159 = sp + 544|0;
 $160 = sp + 536|0;
 $161 = sp + 512|0;
 $162 = sp + 492|0;
 $163 = sp + 472|0;
 $164 = sp + 2380|0;
 $165 = sp + 464|0;
 $166 = sp + 456|0;
 $167 = sp + 452|0;
 $168 = sp + 432|0;
 $169 = sp + 412|0;
 $170 = sp + 392|0;
 $171 = sp + 2376|0;
 $172 = sp + 384|0;
 $173 = sp + 376|0;
 $174 = sp + 372|0;
 $175 = sp + 352|0;
 $176 = sp + 332|0;
 $177 = sp + 312|0;
 $178 = sp + 304|0;
 $179 = sp + 296|0;
 $180 = sp + 288|0;
 $181 = sp + 264|0;
 $182 = sp + 244|0;
 $183 = sp + 224|0;
 $184 = sp + 2372|0;
 $185 = sp + 216|0;
 $186 = sp + 208|0;
 $187 = sp + 204|0;
 $188 = sp + 184|0;
 $189 = sp + 164|0;
 $190 = sp + 144|0;
 $191 = sp + 2368|0;
 $192 = sp + 136|0;
 $193 = sp + 128|0;
 $194 = sp + 120|0;
 $195 = sp + 100|0;
 $196 = sp + 80|0;
 $197 = sp + 72|0;
 $198 = sp + 64|0;
 $199 = sp + 56|0;
 $200 = sp + 48|0;
 $201 = sp + 40|0;
 $202 = sp + 32|0;
 $203 = sp + 24|0;
 $204 = sp + 16|0;
 $205 = sp + 8|0;
 $206 = sp;
 $2 = $0;
 $3 = $1;
 $207 = $2;
 $208 = ($207|0)!=(0|0);
 if (!($208)) {
  ___assert_fail((2989|0),(1320|0),15182,(18314|0));
  // unreachable;
 }
 $209 = $2;
 $210 = ($209|0)!=(0|0);
 if (!($210)) {
  STACKTOP = sp;return;
 }
 $211 = $2;
 $212 = ((($211)) + 340|0);
 $4 = $212;
 $213 = $3;
 $214 = ($213|0)!=(0|0);
 $215 = $3;
 $216 = $214 ? $215 : 18334;
 $3 = $216;
 $217 = $4;
 $218 = ((($217)) + 44|0);
 $5 = $218;
 $219 = $5;
 $220 = $3;
 ;HEAP8[$219>>0]=HEAP8[$220>>0]|0;HEAP8[$219+1>>0]=HEAP8[$220+1>>0]|0;HEAP8[$219+2>>0]=HEAP8[$220+2>>0]|0;HEAP8[$219+3>>0]=HEAP8[$220+3>>0]|0;
 $221 = $5;
 $222 = ((($221)) + 4|0);
 _nk_vec2($18,0.0,0.0);
 ;HEAP32[$222>>2]=HEAP32[$18>>2]|0;HEAP32[$222+4>>2]=HEAP32[$18+4>>2]|0;
 $223 = $4;
 $224 = ((($223)) + 56|0);
 $6 = $224;
 $225 = $6;
 _nk_zero($225,128);
 $226 = $6;
 $227 = $3;
 $228 = ((($227)) + 16|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$228>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$228+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$228+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$228+3>>0]|0;
 _nk_style_item_color($19,$$byval_copy);
 ;HEAP32[$226>>2]=HEAP32[$19>>2]|0;HEAP32[$226+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$226+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$226+12>>2]=HEAP32[$19+12>>2]|0;HEAP32[$226+16>>2]=HEAP32[$19+16>>2]|0;
 $229 = $6;
 $230 = ((($229)) + 20|0);
 $231 = $3;
 $232 = ((($231)) + 20|0);
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$232>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$232+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$232+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$232+3>>0]|0;
 _nk_style_item_color($20,$$byval_copy1);
 ;HEAP32[$230>>2]=HEAP32[$20>>2]|0;HEAP32[$230+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$230+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$230+12>>2]=HEAP32[$20+12>>2]|0;HEAP32[$230+16>>2]=HEAP32[$20+16>>2]|0;
 $233 = $6;
 $234 = ((($233)) + 40|0);
 $235 = $3;
 $236 = ((($235)) + 24|0);
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$236>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$236+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$236+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$236+3>>0]|0;
 _nk_style_item_color($21,$$byval_copy2);
 ;HEAP32[$234>>2]=HEAP32[$21>>2]|0;HEAP32[$234+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$234+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$234+12>>2]=HEAP32[$21+12>>2]|0;HEAP32[$234+16>>2]=HEAP32[$21+16>>2]|0;
 $237 = $6;
 $238 = ((($237)) + 60|0);
 $239 = $3;
 $240 = ((($239)) + 12|0);
 ;HEAP8[$238>>0]=HEAP8[$240>>0]|0;HEAP8[$238+1>>0]=HEAP8[$240+1>>0]|0;HEAP8[$238+2>>0]=HEAP8[$240+2>>0]|0;HEAP8[$238+3>>0]=HEAP8[$240+3>>0]|0;
 $241 = $6;
 $242 = ((($241)) + 64|0);
 $243 = $3;
 $244 = ((($243)) + 16|0);
 ;HEAP8[$242>>0]=HEAP8[$244>>0]|0;HEAP8[$242+1>>0]=HEAP8[$244+1>>0]|0;HEAP8[$242+2>>0]=HEAP8[$244+2>>0]|0;HEAP8[$242+3>>0]=HEAP8[$244+3>>0]|0;
 $245 = $6;
 $246 = ((($245)) + 68|0);
 $247 = $3;
 ;HEAP8[$246>>0]=HEAP8[$247>>0]|0;HEAP8[$246+1>>0]=HEAP8[$247+1>>0]|0;HEAP8[$246+2>>0]=HEAP8[$247+2>>0]|0;HEAP8[$246+3>>0]=HEAP8[$247+3>>0]|0;
 $248 = $6;
 $249 = ((($248)) + 72|0);
 $250 = $3;
 ;HEAP8[$249>>0]=HEAP8[$250>>0]|0;HEAP8[$249+1>>0]=HEAP8[$250+1>>0]|0;HEAP8[$249+2>>0]=HEAP8[$250+2>>0]|0;HEAP8[$249+3>>0]=HEAP8[$250+3>>0]|0;
 $251 = $6;
 $252 = ((($251)) + 76|0);
 $253 = $3;
 ;HEAP8[$252>>0]=HEAP8[$253>>0]|0;HEAP8[$252+1>>0]=HEAP8[$253+1>>0]|0;HEAP8[$252+2>>0]=HEAP8[$253+2>>0]|0;HEAP8[$252+3>>0]=HEAP8[$253+3>>0]|0;
 $254 = $6;
 $255 = ((($254)) + 92|0);
 _nk_vec2($22,2.0,2.0);
 ;HEAP32[$255>>2]=HEAP32[$22>>2]|0;HEAP32[$255+4>>2]=HEAP32[$22+4>>2]|0;
 $256 = $6;
 $257 = ((($256)) + 100|0);
 _nk_vec2($23,0.0,0.0);
 ;HEAP32[$257>>2]=HEAP32[$23>>2]|0;HEAP32[$257+4>>2]=HEAP32[$23+4>>2]|0;
 $258 = $6;
 $259 = ((($258)) + 108|0);
 _nk_vec2($24,0.0,0.0);
 ;HEAP32[$259>>2]=HEAP32[$24>>2]|0;HEAP32[$259+4>>2]=HEAP32[$24+4>>2]|0;
 $260 = $6;
 $261 = ((($260)) + 116|0);
 _nk_handle_ptr($25,0);
 ;HEAP32[$261>>2]=HEAP32[$25>>2]|0;
 $262 = $6;
 $263 = ((($262)) + 80|0);
 HEAP32[$263>>2] = 18;
 $264 = $6;
 $265 = ((($264)) + 84|0);
 HEAPF32[$265>>2] = 1.0;
 $266 = $6;
 $267 = ((($266)) + 88|0);
 HEAPF32[$267>>2] = 4.0;
 $268 = $6;
 $269 = ((($268)) + 120|0);
 HEAP32[$269>>2] = 0;
 $270 = $6;
 $271 = ((($270)) + 124|0);
 HEAP32[$271>>2] = 0;
 $272 = $4;
 $273 = ((($272)) + 184|0);
 $6 = $273;
 $274 = $6;
 _nk_zero($274,128);
 $275 = $6;
 $276 = $3;
 $277 = ((($276)) + 4|0);
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$277>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$277+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$277+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$277+3>>0]|0;
 _nk_style_item_color($26,$$byval_copy3);
 ;HEAP32[$275>>2]=HEAP32[$26>>2]|0;HEAP32[$275+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$275+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$275+12>>2]=HEAP32[$26+12>>2]|0;HEAP32[$275+16>>2]=HEAP32[$26+16>>2]|0;
 $278 = $6;
 $279 = ((($278)) + 20|0);
 $280 = $3;
 $281 = ((($280)) + 20|0);
 ;HEAP8[$$byval_copy4>>0]=HEAP8[$281>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$281+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$281+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$281+3>>0]|0;
 _nk_style_item_color($27,$$byval_copy4);
 ;HEAP32[$279>>2]=HEAP32[$27>>2]|0;HEAP32[$279+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$279+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$279+12>>2]=HEAP32[$27+12>>2]|0;HEAP32[$279+16>>2]=HEAP32[$27+16>>2]|0;
 $282 = $6;
 $283 = ((($282)) + 40|0);
 $284 = $3;
 $285 = ((($284)) + 24|0);
 ;HEAP8[$$byval_copy5>>0]=HEAP8[$285>>0]|0;HEAP8[$$byval_copy5+1>>0]=HEAP8[$285+1>>0]|0;HEAP8[$$byval_copy5+2>>0]=HEAP8[$285+2>>0]|0;HEAP8[$$byval_copy5+3>>0]=HEAP8[$285+3>>0]|0;
 _nk_style_item_color($28,$$byval_copy5);
 ;HEAP32[$283>>2]=HEAP32[$28>>2]|0;HEAP32[$283+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$283+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$283+12>>2]=HEAP32[$28+12>>2]|0;HEAP32[$283+16>>2]=HEAP32[$28+16>>2]|0;
 $286 = $6;
 $287 = ((($286)) + 60|0);
 $288 = $3;
 $289 = ((($288)) + 4|0);
 ;HEAP8[$287>>0]=HEAP8[$289>>0]|0;HEAP8[$287+1>>0]=HEAP8[$289+1>>0]|0;HEAP8[$287+2>>0]=HEAP8[$289+2>>0]|0;HEAP8[$287+3>>0]=HEAP8[$289+3>>0]|0;
 $290 = $6;
 $291 = ((($290)) + 64|0);
 $292 = $3;
 $293 = ((($292)) + 4|0);
 ;HEAP8[$291>>0]=HEAP8[$293>>0]|0;HEAP8[$291+1>>0]=HEAP8[$293+1>>0]|0;HEAP8[$291+2>>0]=HEAP8[$293+2>>0]|0;HEAP8[$291+3>>0]=HEAP8[$293+3>>0]|0;
 $294 = $6;
 $295 = ((($294)) + 68|0);
 $296 = $3;
 ;HEAP8[$295>>0]=HEAP8[$296>>0]|0;HEAP8[$295+1>>0]=HEAP8[$296+1>>0]|0;HEAP8[$295+2>>0]=HEAP8[$296+2>>0]|0;HEAP8[$295+3>>0]=HEAP8[$296+3>>0]|0;
 $297 = $6;
 $298 = ((($297)) + 72|0);
 $299 = $3;
 ;HEAP8[$298>>0]=HEAP8[$299>>0]|0;HEAP8[$298+1>>0]=HEAP8[$299+1>>0]|0;HEAP8[$298+2>>0]=HEAP8[$299+2>>0]|0;HEAP8[$298+3>>0]=HEAP8[$299+3>>0]|0;
 $300 = $6;
 $301 = ((($300)) + 76|0);
 $302 = $3;
 ;HEAP8[$301>>0]=HEAP8[$302>>0]|0;HEAP8[$301+1>>0]=HEAP8[$302+1>>0]|0;HEAP8[$301+2>>0]=HEAP8[$302+2>>0]|0;HEAP8[$301+3>>0]=HEAP8[$302+3>>0]|0;
 $303 = $6;
 $304 = ((($303)) + 92|0);
 _nk_vec2($29,2.0,2.0);
 ;HEAP32[$304>>2]=HEAP32[$29>>2]|0;HEAP32[$304+4>>2]=HEAP32[$29+4>>2]|0;
 $305 = $6;
 $306 = ((($305)) + 108|0);
 _nk_vec2($30,0.0,0.0);
 ;HEAP32[$306>>2]=HEAP32[$30>>2]|0;HEAP32[$306+4>>2]=HEAP32[$30+4>>2]|0;
 $307 = $6;
 $308 = ((($307)) + 116|0);
 _nk_handle_ptr($31,0);
 ;HEAP32[$308>>2]=HEAP32[$31>>2]|0;
 $309 = $6;
 $310 = ((($309)) + 80|0);
 HEAP32[$310>>2] = 18;
 $311 = $6;
 $312 = ((($311)) + 84|0);
 HEAPF32[$312>>2] = 0.0;
 $313 = $6;
 $314 = ((($313)) + 88|0);
 HEAPF32[$314>>2] = 0.0;
 $315 = $6;
 $316 = ((($315)) + 120|0);
 HEAP32[$316>>2] = 0;
 $317 = $6;
 $318 = ((($317)) + 124|0);
 HEAP32[$318>>2] = 0;
 $319 = $4;
 $320 = ((($319)) + 312|0);
 $6 = $320;
 $321 = $6;
 _nk_zero($321,128);
 $322 = $6;
 $323 = $3;
 $324 = ((($323)) + 4|0);
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$324>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$324+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$324+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$324+3>>0]|0;
 _nk_style_item_color($32,$$byval_copy6);
 ;HEAP32[$322>>2]=HEAP32[$32>>2]|0;HEAP32[$322+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$322+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$322+12>>2]=HEAP32[$32+12>>2]|0;HEAP32[$322+16>>2]=HEAP32[$32+16>>2]|0;
 $325 = $6;
 $326 = ((($325)) + 20|0);
 $327 = $3;
 $328 = ((($327)) + 4|0);
 ;HEAP8[$$byval_copy7>>0]=HEAP8[$328>>0]|0;HEAP8[$$byval_copy7+1>>0]=HEAP8[$328+1>>0]|0;HEAP8[$$byval_copy7+2>>0]=HEAP8[$328+2>>0]|0;HEAP8[$$byval_copy7+3>>0]=HEAP8[$328+3>>0]|0;
 _nk_style_item_color($33,$$byval_copy7);
 ;HEAP32[$326>>2]=HEAP32[$33>>2]|0;HEAP32[$326+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$326+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$326+12>>2]=HEAP32[$33+12>>2]|0;HEAP32[$326+16>>2]=HEAP32[$33+16>>2]|0;
 $329 = $6;
 $330 = ((($329)) + 40|0);
 $331 = $3;
 $332 = ((($331)) + 4|0);
 ;HEAP8[$$byval_copy8>>0]=HEAP8[$332>>0]|0;HEAP8[$$byval_copy8+1>>0]=HEAP8[$332+1>>0]|0;HEAP8[$$byval_copy8+2>>0]=HEAP8[$332+2>>0]|0;HEAP8[$$byval_copy8+3>>0]=HEAP8[$332+3>>0]|0;
 _nk_style_item_color($34,$$byval_copy8);
 ;HEAP32[$330>>2]=HEAP32[$34>>2]|0;HEAP32[$330+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$330+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$330+12>>2]=HEAP32[$34+12>>2]|0;HEAP32[$330+16>>2]=HEAP32[$34+16>>2]|0;
 $333 = $6;
 $334 = ((($333)) + 60|0);
 $335 = $3;
 $336 = ((($335)) + 4|0);
 ;HEAP8[$334>>0]=HEAP8[$336>>0]|0;HEAP8[$334+1>>0]=HEAP8[$336+1>>0]|0;HEAP8[$334+2>>0]=HEAP8[$336+2>>0]|0;HEAP8[$334+3>>0]=HEAP8[$336+3>>0]|0;
 $337 = $6;
 $338 = ((($337)) + 64|0);
 $339 = $3;
 $340 = ((($339)) + 4|0);
 ;HEAP8[$338>>0]=HEAP8[$340>>0]|0;HEAP8[$338+1>>0]=HEAP8[$340+1>>0]|0;HEAP8[$338+2>>0]=HEAP8[$340+2>>0]|0;HEAP8[$338+3>>0]=HEAP8[$340+3>>0]|0;
 $341 = $6;
 $342 = ((($341)) + 68|0);
 $343 = $3;
 ;HEAP8[$342>>0]=HEAP8[$343>>0]|0;HEAP8[$342+1>>0]=HEAP8[$343+1>>0]|0;HEAP8[$342+2>>0]=HEAP8[$343+2>>0]|0;HEAP8[$342+3>>0]=HEAP8[$343+3>>0]|0;
 $344 = $6;
 $345 = ((($344)) + 72|0);
 $346 = $3;
 ;HEAP8[$345>>0]=HEAP8[$346>>0]|0;HEAP8[$345+1>>0]=HEAP8[$346+1>>0]|0;HEAP8[$345+2>>0]=HEAP8[$346+2>>0]|0;HEAP8[$345+3>>0]=HEAP8[$346+3>>0]|0;
 $347 = $6;
 $348 = ((($347)) + 76|0);
 $349 = $3;
 ;HEAP8[$348>>0]=HEAP8[$349>>0]|0;HEAP8[$348+1>>0]=HEAP8[$349+1>>0]|0;HEAP8[$348+2>>0]=HEAP8[$349+2>>0]|0;HEAP8[$348+3>>0]=HEAP8[$349+3>>0]|0;
 $350 = $6;
 $351 = ((($350)) + 92|0);
 _nk_vec2($35,2.0,2.0);
 ;HEAP32[$351>>2]=HEAP32[$35>>2]|0;HEAP32[$351+4>>2]=HEAP32[$35+4>>2]|0;
 $352 = $6;
 $353 = ((($352)) + 108|0);
 _nk_vec2($36,0.0,0.0);
 ;HEAP32[$353>>2]=HEAP32[$36>>2]|0;HEAP32[$353+4>>2]=HEAP32[$36+4>>2]|0;
 $354 = $6;
 $355 = ((($354)) + 116|0);
 _nk_handle_ptr($37,0);
 ;HEAP32[$355>>2]=HEAP32[$37>>2]|0;
 $356 = $6;
 $357 = ((($356)) + 80|0);
 HEAP32[$357>>2] = 18;
 $358 = $6;
 $359 = ((($358)) + 84|0);
 HEAPF32[$359>>2] = 0.0;
 $360 = $6;
 $361 = ((($360)) + 88|0);
 HEAPF32[$361>>2] = 1.0;
 $362 = $6;
 $363 = ((($362)) + 120|0);
 HEAP32[$363>>2] = 0;
 $364 = $6;
 $365 = ((($364)) + 124|0);
 HEAP32[$365>>2] = 0;
 $366 = $4;
 $367 = ((($366)) + 600|0);
 $7 = $367;
 $368 = $7;
 _nk_zero($368,160);
 $369 = $7;
 $370 = $3;
 $371 = ((($370)) + 28|0);
 ;HEAP8[$$byval_copy9>>0]=HEAP8[$371>>0]|0;HEAP8[$$byval_copy9+1>>0]=HEAP8[$371+1>>0]|0;HEAP8[$$byval_copy9+2>>0]=HEAP8[$371+2>>0]|0;HEAP8[$$byval_copy9+3>>0]=HEAP8[$371+3>>0]|0;
 _nk_style_item_color($38,$$byval_copy9);
 ;HEAP32[$369>>2]=HEAP32[$38>>2]|0;HEAP32[$369+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$369+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$369+12>>2]=HEAP32[$38+12>>2]|0;HEAP32[$369+16>>2]=HEAP32[$38+16>>2]|0;
 $372 = $7;
 $373 = ((($372)) + 20|0);
 $374 = $3;
 $375 = ((($374)) + 32|0);
 ;HEAP8[$$byval_copy10>>0]=HEAP8[$375>>0]|0;HEAP8[$$byval_copy10+1>>0]=HEAP8[$375+1>>0]|0;HEAP8[$$byval_copy10+2>>0]=HEAP8[$375+2>>0]|0;HEAP8[$$byval_copy10+3>>0]=HEAP8[$375+3>>0]|0;
 _nk_style_item_color($39,$$byval_copy10);
 ;HEAP32[$373>>2]=HEAP32[$39>>2]|0;HEAP32[$373+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$373+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$373+12>>2]=HEAP32[$39+12>>2]|0;HEAP32[$373+16>>2]=HEAP32[$39+16>>2]|0;
 $376 = $7;
 $377 = ((($376)) + 40|0);
 $378 = $3;
 $379 = ((($378)) + 32|0);
 ;HEAP8[$$byval_copy11>>0]=HEAP8[$379>>0]|0;HEAP8[$$byval_copy11+1>>0]=HEAP8[$379+1>>0]|0;HEAP8[$$byval_copy11+2>>0]=HEAP8[$379+2>>0]|0;HEAP8[$$byval_copy11+3>>0]=HEAP8[$379+3>>0]|0;
 _nk_style_item_color($40,$$byval_copy11);
 ;HEAP32[$377>>2]=HEAP32[$40>>2]|0;HEAP32[$377+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$377+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$377+12>>2]=HEAP32[$40+12>>2]|0;HEAP32[$377+16>>2]=HEAP32[$40+16>>2]|0;
 $380 = $7;
 $381 = ((($380)) + 64|0);
 $382 = $3;
 $383 = ((($382)) + 36|0);
 ;HEAP8[$$byval_copy12>>0]=HEAP8[$383>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$383+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$383+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$383+3>>0]|0;
 _nk_style_item_color($41,$$byval_copy12);
 ;HEAP32[$381>>2]=HEAP32[$41>>2]|0;HEAP32[$381+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$381+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$381+12>>2]=HEAP32[$41+12>>2]|0;HEAP32[$381+16>>2]=HEAP32[$41+16>>2]|0;
 $384 = $7;
 $385 = ((($384)) + 84|0);
 $386 = $3;
 $387 = ((($386)) + 36|0);
 ;HEAP8[$$byval_copy13>>0]=HEAP8[$387>>0]|0;HEAP8[$$byval_copy13+1>>0]=HEAP8[$387+1>>0]|0;HEAP8[$$byval_copy13+2>>0]=HEAP8[$387+2>>0]|0;HEAP8[$$byval_copy13+3>>0]=HEAP8[$387+3>>0]|0;
 _nk_style_item_color($42,$$byval_copy13);
 ;HEAP32[$385>>2]=HEAP32[$42>>2]|0;HEAP32[$385+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$385+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$385+12>>2]=HEAP32[$42+12>>2]|0;HEAP32[$385+16>>2]=HEAP32[$42+16>>2]|0;
 $388 = $7;
 $389 = ((($388)) + 148|0);
 _nk_handle_ptr($43,0);
 ;HEAP32[$389>>2]=HEAP32[$43>>2]|0;
 $390 = $7;
 $391 = ((($390)) + 116|0);
 $392 = $3;
 $393 = ((($392)) + 4|0);
 ;HEAP8[$391>>0]=HEAP8[$393>>0]|0;HEAP8[$391+1>>0]=HEAP8[$393+1>>0]|0;HEAP8[$391+2>>0]=HEAP8[$393+2>>0]|0;HEAP8[$391+3>>0]=HEAP8[$393+3>>0]|0;
 $394 = $7;
 $395 = ((($394)) + 104|0);
 $396 = $3;
 ;HEAP8[$395>>0]=HEAP8[$396>>0]|0;HEAP8[$395+1>>0]=HEAP8[$396+1>>0]|0;HEAP8[$395+2>>0]=HEAP8[$396+2>>0]|0;HEAP8[$395+3>>0]=HEAP8[$396+3>>0]|0;
 $397 = $7;
 $398 = ((($397)) + 108|0);
 $399 = $3;
 ;HEAP8[$398>>0]=HEAP8[$399>>0]|0;HEAP8[$398+1>>0]=HEAP8[$399+1>>0]|0;HEAP8[$398+2>>0]=HEAP8[$399+2>>0]|0;HEAP8[$398+3>>0]=HEAP8[$399+3>>0]|0;
 $400 = $7;
 $401 = ((($400)) + 112|0);
 $402 = $3;
 ;HEAP8[$401>>0]=HEAP8[$402>>0]|0;HEAP8[$401+1>>0]=HEAP8[$402+1>>0]|0;HEAP8[$401+2>>0]=HEAP8[$402+2>>0]|0;HEAP8[$401+3>>0]=HEAP8[$402+3>>0]|0;
 $403 = $7;
 $404 = ((($403)) + 124|0);
 _nk_vec2($44,2.0,2.0);
 ;HEAP32[$404>>2]=HEAP32[$44>>2]|0;HEAP32[$404+4>>2]=HEAP32[$44+4>>2]|0;
 $405 = $7;
 $406 = ((($405)) + 132|0);
 _nk_vec2($45,0.0,0.0);
 ;HEAP32[$406>>2]=HEAP32[$45>>2]|0;HEAP32[$406+4>>2]=HEAP32[$45+4>>2]|0;
 $407 = $7;
 $408 = ((($407)) + 60|0);
 _nk_rgba($46,0,0,0,0);
 ;HEAP8[$408>>0]=HEAP8[$46>>0]|0;HEAP8[$408+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$408+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$408+3>>0]=HEAP8[$46+3>>0]|0;
 $409 = $7;
 $410 = ((($409)) + 144|0);
 HEAPF32[$410>>2] = 0.0;
 $411 = $7;
 $412 = ((($411)) + 140|0);
 HEAPF32[$412>>2] = 4.0;
 $413 = $4;
 $414 = ((($413)) + 440|0);
 $7 = $414;
 $415 = $7;
 _nk_zero($415,160);
 $416 = $7;
 $417 = $3;
 $418 = ((($417)) + 28|0);
 ;HEAP8[$$byval_copy14>>0]=HEAP8[$418>>0]|0;HEAP8[$$byval_copy14+1>>0]=HEAP8[$418+1>>0]|0;HEAP8[$$byval_copy14+2>>0]=HEAP8[$418+2>>0]|0;HEAP8[$$byval_copy14+3>>0]=HEAP8[$418+3>>0]|0;
 _nk_style_item_color($47,$$byval_copy14);
 ;HEAP32[$416>>2]=HEAP32[$47>>2]|0;HEAP32[$416+4>>2]=HEAP32[$47+4>>2]|0;HEAP32[$416+8>>2]=HEAP32[$47+8>>2]|0;HEAP32[$416+12>>2]=HEAP32[$47+12>>2]|0;HEAP32[$416+16>>2]=HEAP32[$47+16>>2]|0;
 $419 = $7;
 $420 = ((($419)) + 20|0);
 $421 = $3;
 $422 = ((($421)) + 32|0);
 ;HEAP8[$$byval_copy15>>0]=HEAP8[$422>>0]|0;HEAP8[$$byval_copy15+1>>0]=HEAP8[$422+1>>0]|0;HEAP8[$$byval_copy15+2>>0]=HEAP8[$422+2>>0]|0;HEAP8[$$byval_copy15+3>>0]=HEAP8[$422+3>>0]|0;
 _nk_style_item_color($48,$$byval_copy15);
 ;HEAP32[$420>>2]=HEAP32[$48>>2]|0;HEAP32[$420+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$420+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$420+12>>2]=HEAP32[$48+12>>2]|0;HEAP32[$420+16>>2]=HEAP32[$48+16>>2]|0;
 $423 = $7;
 $424 = ((($423)) + 40|0);
 $425 = $3;
 $426 = ((($425)) + 32|0);
 ;HEAP8[$$byval_copy16>>0]=HEAP8[$426>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$426+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$426+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$426+3>>0]|0;
 _nk_style_item_color($49,$$byval_copy16);
 ;HEAP32[$424>>2]=HEAP32[$49>>2]|0;HEAP32[$424+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$424+8>>2]=HEAP32[$49+8>>2]|0;HEAP32[$424+12>>2]=HEAP32[$49+12>>2]|0;HEAP32[$424+16>>2]=HEAP32[$49+16>>2]|0;
 $427 = $7;
 $428 = ((($427)) + 64|0);
 $429 = $3;
 $430 = ((($429)) + 36|0);
 ;HEAP8[$$byval_copy17>>0]=HEAP8[$430>>0]|0;HEAP8[$$byval_copy17+1>>0]=HEAP8[$430+1>>0]|0;HEAP8[$$byval_copy17+2>>0]=HEAP8[$430+2>>0]|0;HEAP8[$$byval_copy17+3>>0]=HEAP8[$430+3>>0]|0;
 _nk_style_item_color($50,$$byval_copy17);
 ;HEAP32[$428>>2]=HEAP32[$50>>2]|0;HEAP32[$428+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$428+8>>2]=HEAP32[$50+8>>2]|0;HEAP32[$428+12>>2]=HEAP32[$50+12>>2]|0;HEAP32[$428+16>>2]=HEAP32[$50+16>>2]|0;
 $431 = $7;
 $432 = ((($431)) + 84|0);
 $433 = $3;
 $434 = ((($433)) + 36|0);
 ;HEAP8[$$byval_copy18>>0]=HEAP8[$434>>0]|0;HEAP8[$$byval_copy18+1>>0]=HEAP8[$434+1>>0]|0;HEAP8[$$byval_copy18+2>>0]=HEAP8[$434+2>>0]|0;HEAP8[$$byval_copy18+3>>0]=HEAP8[$434+3>>0]|0;
 _nk_style_item_color($51,$$byval_copy18);
 ;HEAP32[$432>>2]=HEAP32[$51>>2]|0;HEAP32[$432+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$432+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$432+12>>2]=HEAP32[$51+12>>2]|0;HEAP32[$432+16>>2]=HEAP32[$51+16>>2]|0;
 $435 = $7;
 $436 = ((($435)) + 148|0);
 _nk_handle_ptr($52,0);
 ;HEAP32[$436>>2]=HEAP32[$52>>2]|0;
 $437 = $7;
 $438 = ((($437)) + 116|0);
 $439 = $3;
 $440 = ((($439)) + 4|0);
 ;HEAP8[$438>>0]=HEAP8[$440>>0]|0;HEAP8[$438+1>>0]=HEAP8[$440+1>>0]|0;HEAP8[$438+2>>0]=HEAP8[$440+2>>0]|0;HEAP8[$438+3>>0]=HEAP8[$440+3>>0]|0;
 $441 = $7;
 $442 = ((($441)) + 104|0);
 $443 = $3;
 ;HEAP8[$442>>0]=HEAP8[$443>>0]|0;HEAP8[$442+1>>0]=HEAP8[$443+1>>0]|0;HEAP8[$442+2>>0]=HEAP8[$443+2>>0]|0;HEAP8[$442+3>>0]=HEAP8[$443+3>>0]|0;
 $444 = $7;
 $445 = ((($444)) + 108|0);
 $446 = $3;
 ;HEAP8[$445>>0]=HEAP8[$446>>0]|0;HEAP8[$445+1>>0]=HEAP8[$446+1>>0]|0;HEAP8[$445+2>>0]=HEAP8[$446+2>>0]|0;HEAP8[$445+3>>0]=HEAP8[$446+3>>0]|0;
 $447 = $7;
 $448 = ((($447)) + 112|0);
 $449 = $3;
 ;HEAP8[$448>>0]=HEAP8[$449>>0]|0;HEAP8[$448+1>>0]=HEAP8[$449+1>>0]|0;HEAP8[$448+2>>0]=HEAP8[$449+2>>0]|0;HEAP8[$448+3>>0]=HEAP8[$449+3>>0]|0;
 $450 = $7;
 $451 = ((($450)) + 124|0);
 _nk_vec2($53,3.0,3.0);
 ;HEAP32[$451>>2]=HEAP32[$53>>2]|0;HEAP32[$451+4>>2]=HEAP32[$53+4>>2]|0;
 $452 = $7;
 $453 = ((($452)) + 132|0);
 _nk_vec2($54,0.0,0.0);
 ;HEAP32[$453>>2]=HEAP32[$54>>2]|0;HEAP32[$453+4>>2]=HEAP32[$54+4>>2]|0;
 $454 = $7;
 $455 = ((($454)) + 60|0);
 _nk_rgba($55,0,0,0,0);
 ;HEAP8[$455>>0]=HEAP8[$55>>0]|0;HEAP8[$455+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$455+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$455+3>>0]=HEAP8[$55+3>>0]|0;
 $456 = $7;
 $457 = ((($456)) + 144|0);
 HEAPF32[$457>>2] = 0.0;
 $458 = $7;
 $459 = ((($458)) + 140|0);
 HEAPF32[$459>>2] = 4.0;
 $460 = $4;
 $461 = ((($460)) + 760|0);
 $8 = $461;
 $462 = $8;
 _nk_zero($462,192);
 $463 = $8;
 $464 = $3;
 $465 = ((($464)) + 40|0);
 ;HEAP8[$$byval_copy19>>0]=HEAP8[$465>>0]|0;HEAP8[$$byval_copy19+1>>0]=HEAP8[$465+1>>0]|0;HEAP8[$$byval_copy19+2>>0]=HEAP8[$465+2>>0]|0;HEAP8[$$byval_copy19+3>>0]=HEAP8[$465+3>>0]|0;
 _nk_style_item_color($56,$$byval_copy19);
 ;HEAP32[$463>>2]=HEAP32[$56>>2]|0;HEAP32[$463+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$463+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$463+12>>2]=HEAP32[$56+12>>2]|0;HEAP32[$463+16>>2]=HEAP32[$56+16>>2]|0;
 $466 = $8;
 $467 = ((($466)) + 20|0);
 $468 = $3;
 $469 = ((($468)) + 40|0);
 ;HEAP8[$$byval_copy20>>0]=HEAP8[$469>>0]|0;HEAP8[$$byval_copy20+1>>0]=HEAP8[$469+1>>0]|0;HEAP8[$$byval_copy20+2>>0]=HEAP8[$469+2>>0]|0;HEAP8[$$byval_copy20+3>>0]=HEAP8[$469+3>>0]|0;
 _nk_style_item_color($57,$$byval_copy20);
 ;HEAP32[$467>>2]=HEAP32[$57>>2]|0;HEAP32[$467+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$467+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$467+12>>2]=HEAP32[$57+12>>2]|0;HEAP32[$467+16>>2]=HEAP32[$57+16>>2]|0;
 $470 = $8;
 $471 = ((($470)) + 40|0);
 $472 = $3;
 $473 = ((($472)) + 40|0);
 ;HEAP8[$$byval_copy21>>0]=HEAP8[$473>>0]|0;HEAP8[$$byval_copy21+1>>0]=HEAP8[$473+1>>0]|0;HEAP8[$$byval_copy21+2>>0]=HEAP8[$473+2>>0]|0;HEAP8[$$byval_copy21+3>>0]=HEAP8[$473+3>>0]|0;
 _nk_style_item_color($58,$$byval_copy21);
 ;HEAP32[$471>>2]=HEAP32[$58>>2]|0;HEAP32[$471+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$471+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$471+12>>2]=HEAP32[$58+12>>2]|0;HEAP32[$471+16>>2]=HEAP32[$58+16>>2]|0;
 $474 = $8;
 $475 = ((($474)) + 60|0);
 $476 = $3;
 $477 = ((($476)) + 44|0);
 ;HEAP8[$$byval_copy22>>0]=HEAP8[$477>>0]|0;HEAP8[$$byval_copy22+1>>0]=HEAP8[$477+1>>0]|0;HEAP8[$$byval_copy22+2>>0]=HEAP8[$477+2>>0]|0;HEAP8[$$byval_copy22+3>>0]=HEAP8[$477+3>>0]|0;
 _nk_style_item_color($59,$$byval_copy22);
 ;HEAP32[$475>>2]=HEAP32[$59>>2]|0;HEAP32[$475+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$475+8>>2]=HEAP32[$59+8>>2]|0;HEAP32[$475+12>>2]=HEAP32[$59+12>>2]|0;HEAP32[$475+16>>2]=HEAP32[$59+16>>2]|0;
 $478 = $8;
 $479 = ((($478)) + 80|0);
 $480 = $3;
 $481 = ((($480)) + 44|0);
 ;HEAP8[$$byval_copy23>>0]=HEAP8[$481>>0]|0;HEAP8[$$byval_copy23+1>>0]=HEAP8[$481+1>>0]|0;HEAP8[$$byval_copy23+2>>0]=HEAP8[$481+2>>0]|0;HEAP8[$$byval_copy23+3>>0]=HEAP8[$481+3>>0]|0;
 _nk_style_item_color($60,$$byval_copy23);
 ;HEAP32[$479>>2]=HEAP32[$60>>2]|0;HEAP32[$479+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$479+8>>2]=HEAP32[$60+8>>2]|0;HEAP32[$479+12>>2]=HEAP32[$60+12>>2]|0;HEAP32[$479+16>>2]=HEAP32[$60+16>>2]|0;
 $482 = $8;
 $483 = ((($482)) + 100|0);
 $484 = $3;
 $485 = ((($484)) + 44|0);
 ;HEAP8[$$byval_copy24>>0]=HEAP8[$485>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$485+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$485+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$485+3>>0]|0;
 _nk_style_item_color($61,$$byval_copy24);
 ;HEAP32[$483>>2]=HEAP32[$61>>2]|0;HEAP32[$483+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$483+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$483+12>>2]=HEAP32[$61+12>>2]|0;HEAP32[$483+16>>2]=HEAP32[$61+16>>2]|0;
 $486 = $8;
 $487 = ((($486)) + 120|0);
 $488 = $3;
 ;HEAP8[$487>>0]=HEAP8[$488>>0]|0;HEAP8[$487+1>>0]=HEAP8[$488+1>>0]|0;HEAP8[$487+2>>0]=HEAP8[$488+2>>0]|0;HEAP8[$487+3>>0]=HEAP8[$488+3>>0]|0;
 $489 = $8;
 $490 = ((($489)) + 124|0);
 $491 = $3;
 ;HEAP8[$490>>0]=HEAP8[$491>>0]|0;HEAP8[$490+1>>0]=HEAP8[$491+1>>0]|0;HEAP8[$490+2>>0]=HEAP8[$491+2>>0]|0;HEAP8[$490+3>>0]=HEAP8[$491+3>>0]|0;
 $492 = $8;
 $493 = ((($492)) + 128|0);
 $494 = $3;
 ;HEAP8[$493>>0]=HEAP8[$494>>0]|0;HEAP8[$493+1>>0]=HEAP8[$494+1>>0]|0;HEAP8[$493+2>>0]=HEAP8[$494+2>>0]|0;HEAP8[$493+3>>0]=HEAP8[$494+3>>0]|0;
 $495 = $8;
 $496 = ((($495)) + 132|0);
 $497 = $3;
 ;HEAP8[$496>>0]=HEAP8[$497>>0]|0;HEAP8[$496+1>>0]=HEAP8[$497+1>>0]|0;HEAP8[$496+2>>0]=HEAP8[$497+2>>0]|0;HEAP8[$496+3>>0]=HEAP8[$497+3>>0]|0;
 $498 = $8;
 $499 = ((($498)) + 136|0);
 $500 = $3;
 ;HEAP8[$499>>0]=HEAP8[$500>>0]|0;HEAP8[$499+1>>0]=HEAP8[$500+1>>0]|0;HEAP8[$499+2>>0]=HEAP8[$500+2>>0]|0;HEAP8[$499+3>>0]=HEAP8[$500+3>>0]|0;
 $501 = $8;
 $502 = ((($501)) + 140|0);
 $503 = $3;
 ;HEAP8[$502>>0]=HEAP8[$503>>0]|0;HEAP8[$502+1>>0]=HEAP8[$503+1>>0]|0;HEAP8[$502+2>>0]=HEAP8[$503+2>>0]|0;HEAP8[$502+3>>0]=HEAP8[$503+3>>0]|0;
 $504 = $8;
 $505 = ((($504)) + 156|0);
 _nk_vec2($62,2.0,2.0);
 ;HEAP32[$505>>2]=HEAP32[$62>>2]|0;HEAP32[$505+4>>2]=HEAP32[$62+4>>2]|0;
 $506 = $8;
 $507 = ((($506)) + 164|0);
 _nk_vec2($63,0.0,0.0);
 ;HEAP32[$507>>2]=HEAP32[$63>>2]|0;HEAP32[$507+4>>2]=HEAP32[$63+4>>2]|0;
 $508 = $8;
 $509 = ((($508)) + 180|0);
 _nk_handle_ptr($64,0);
 ;HEAP32[$509>>2]=HEAP32[$64>>2]|0;
 $510 = $8;
 $511 = ((($510)) + 152|0);
 HEAPF32[$511>>2] = 0.0;
 $512 = $8;
 $513 = ((($512)) + 184|0);
 HEAP32[$513>>2] = 0;
 $514 = $8;
 $515 = ((($514)) + 188|0);
 HEAP32[$515>>2] = 0;
 $516 = $4;
 $517 = ((($516)) + 952|0);
 $9 = $517;
 $518 = $9;
 _nk_zero($518,456);
 $519 = $9;
 _nk_style_item_hide($65);
 ;HEAP32[$519>>2]=HEAP32[$65>>2]|0;HEAP32[$519+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$519+8>>2]=HEAP32[$65+8>>2]|0;HEAP32[$519+12>>2]=HEAP32[$65+12>>2]|0;HEAP32[$519+16>>2]=HEAP32[$65+16>>2]|0;
 $520 = $9;
 $521 = ((($520)) + 20|0);
 _nk_style_item_hide($66);
 ;HEAP32[$521>>2]=HEAP32[$66>>2]|0;HEAP32[$521+4>>2]=HEAP32[$66+4>>2]|0;HEAP32[$521+8>>2]=HEAP32[$66+8>>2]|0;HEAP32[$521+12>>2]=HEAP32[$66+12>>2]|0;HEAP32[$521+16>>2]=HEAP32[$66+16>>2]|0;
 $522 = $9;
 $523 = ((($522)) + 40|0);
 _nk_style_item_hide($67);
 ;HEAP32[$523>>2]=HEAP32[$67>>2]|0;HEAP32[$523+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$523+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$523+12>>2]=HEAP32[$67+12>>2]|0;HEAP32[$523+16>>2]=HEAP32[$67+16>>2]|0;
 $524 = $9;
 $525 = ((($524)) + 64|0);
 $526 = $3;
 $527 = ((($526)) + 48|0);
 ;HEAP8[$525>>0]=HEAP8[$527>>0]|0;HEAP8[$525+1>>0]=HEAP8[$527+1>>0]|0;HEAP8[$525+2>>0]=HEAP8[$527+2>>0]|0;HEAP8[$525+3>>0]=HEAP8[$527+3>>0]|0;
 $528 = $9;
 $529 = ((($528)) + 68|0);
 $530 = $3;
 $531 = ((($530)) + 48|0);
 ;HEAP8[$529>>0]=HEAP8[$531>>0]|0;HEAP8[$529+1>>0]=HEAP8[$531+1>>0]|0;HEAP8[$529+2>>0]=HEAP8[$531+2>>0]|0;HEAP8[$529+3>>0]=HEAP8[$531+3>>0]|0;
 $532 = $9;
 $533 = ((($532)) + 72|0);
 $534 = $3;
 $535 = ((($534)) + 48|0);
 ;HEAP8[$533>>0]=HEAP8[$535>>0]|0;HEAP8[$533+1>>0]=HEAP8[$535+1>>0]|0;HEAP8[$533+2>>0]=HEAP8[$535+2>>0]|0;HEAP8[$533+3>>0]=HEAP8[$535+3>>0]|0;
 $536 = $9;
 $537 = ((($536)) + 76|0);
 $538 = $3;
 $539 = ((($538)) + 52|0);
 ;HEAP8[$537>>0]=HEAP8[$539>>0]|0;HEAP8[$537+1>>0]=HEAP8[$539+1>>0]|0;HEAP8[$537+2>>0]=HEAP8[$539+2>>0]|0;HEAP8[$537+3>>0]=HEAP8[$539+3>>0]|0;
 $540 = $9;
 $541 = ((($540)) + 80|0);
 $542 = $3;
 $543 = ((($542)) + 52|0);
 ;HEAP8[$$byval_copy25>>0]=HEAP8[$543>>0]|0;HEAP8[$$byval_copy25+1>>0]=HEAP8[$543+1>>0]|0;HEAP8[$$byval_copy25+2>>0]=HEAP8[$543+2>>0]|0;HEAP8[$$byval_copy25+3>>0]=HEAP8[$543+3>>0]|0;
 _nk_style_item_color($68,$$byval_copy25);
 ;HEAP32[$541>>2]=HEAP32[$68>>2]|0;HEAP32[$541+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$541+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$541+12>>2]=HEAP32[$68+12>>2]|0;HEAP32[$541+16>>2]=HEAP32[$68+16>>2]|0;
 $544 = $9;
 $545 = ((($544)) + 100|0);
 $546 = $3;
 $547 = ((($546)) + 56|0);
 ;HEAP8[$$byval_copy26>>0]=HEAP8[$547>>0]|0;HEAP8[$$byval_copy26+1>>0]=HEAP8[$547+1>>0]|0;HEAP8[$$byval_copy26+2>>0]=HEAP8[$547+2>>0]|0;HEAP8[$$byval_copy26+3>>0]=HEAP8[$547+3>>0]|0;
 _nk_style_item_color($69,$$byval_copy26);
 ;HEAP32[$545>>2]=HEAP32[$69>>2]|0;HEAP32[$545+4>>2]=HEAP32[$69+4>>2]|0;HEAP32[$545+8>>2]=HEAP32[$69+8>>2]|0;HEAP32[$545+12>>2]=HEAP32[$69+12>>2]|0;HEAP32[$545+16>>2]=HEAP32[$69+16>>2]|0;
 $548 = $9;
 $549 = ((($548)) + 120|0);
 $550 = $3;
 $551 = ((($550)) + 60|0);
 ;HEAP8[$$byval_copy27>>0]=HEAP8[$551>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$551+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$551+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$551+3>>0]|0;
 _nk_style_item_color($70,$$byval_copy27);
 ;HEAP32[$549>>2]=HEAP32[$70>>2]|0;HEAP32[$549+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$549+8>>2]=HEAP32[$70+8>>2]|0;HEAP32[$549+12>>2]=HEAP32[$70+12>>2]|0;HEAP32[$549+16>>2]=HEAP32[$70+16>>2]|0;
 $552 = $9;
 $553 = ((($552)) + 436|0);
 HEAP32[$553>>2] = 10;
 $554 = $9;
 $555 = ((($554)) + 440|0);
 HEAP32[$555>>2] = 9;
 $556 = $9;
 $557 = ((($556)) + 168|0);
 _nk_vec2($71,16.0,16.0);
 ;HEAP32[$557>>2]=HEAP32[$71>>2]|0;HEAP32[$557+4>>2]=HEAP32[$71+4>>2]|0;
 $558 = $9;
 $559 = ((($558)) + 152|0);
 _nk_vec2($72,2.0,2.0);
 ;HEAP32[$559>>2]=HEAP32[$72>>2]|0;HEAP32[$559+4>>2]=HEAP32[$72+4>>2]|0;
 $560 = $9;
 $561 = ((($560)) + 160|0);
 _nk_vec2($73,2.0,2.0);
 ;HEAP32[$561>>2]=HEAP32[$73>>2]|0;HEAP32[$561+4>>2]=HEAP32[$73+4>>2]|0;
 $562 = $9;
 $563 = ((($562)) + 444|0);
 _nk_handle_ptr($74,0);
 ;HEAP32[$563>>2]=HEAP32[$74>>2]|0;
 $564 = $9;
 $565 = ((($564)) + 176|0);
 HEAP32[$565>>2] = 0;
 $566 = $9;
 $567 = ((($566)) + 148|0);
 HEAPF32[$567>>2] = 8.0;
 $568 = $9;
 $569 = ((($568)) + 144|0);
 HEAPF32[$569>>2] = 0.0;
 $570 = $9;
 $571 = ((($570)) + 448|0);
 HEAP32[$571>>2] = 0;
 $572 = $9;
 $573 = ((($572)) + 452|0);
 HEAP32[$573>>2] = 0;
 $574 = $4;
 $575 = ((($574)) + 952|0);
 $576 = ((($575)) + 180|0);
 $6 = $576;
 $577 = $6;
 _nk_rgb($75,40,40,40);
 ;HEAP8[$$byval_copy28>>0]=HEAP8[$75>>0]|0;HEAP8[$$byval_copy28+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$$byval_copy28+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$$byval_copy28+3>>0]=HEAP8[$75+3>>0]|0;
 _nk_style_item_color($76,$$byval_copy28);
 ;HEAP32[$577>>2]=HEAP32[$76>>2]|0;HEAP32[$577+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$577+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$577+12>>2]=HEAP32[$76+12>>2]|0;HEAP32[$577+16>>2]=HEAP32[$76+16>>2]|0;
 $578 = $6;
 $579 = ((($578)) + 20|0);
 _nk_rgb($77,42,42,42);
 ;HEAP8[$$byval_copy29>>0]=HEAP8[$77>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$77+3>>0]|0;
 _nk_style_item_color($78,$$byval_copy29);
 ;HEAP32[$579>>2]=HEAP32[$78>>2]|0;HEAP32[$579+4>>2]=HEAP32[$78+4>>2]|0;HEAP32[$579+8>>2]=HEAP32[$78+8>>2]|0;HEAP32[$579+12>>2]=HEAP32[$78+12>>2]|0;HEAP32[$579+16>>2]=HEAP32[$78+16>>2]|0;
 $580 = $6;
 $581 = ((($580)) + 40|0);
 _nk_rgb($79,44,44,44);
 ;HEAP8[$$byval_copy30>>0]=HEAP8[$79>>0]|0;HEAP8[$$byval_copy30+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$$byval_copy30+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$$byval_copy30+3>>0]=HEAP8[$79+3>>0]|0;
 _nk_style_item_color($80,$$byval_copy30);
 ;HEAP32[$581>>2]=HEAP32[$80>>2]|0;HEAP32[$581+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$581+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$581+12>>2]=HEAP32[$80+12>>2]|0;HEAP32[$581+16>>2]=HEAP32[$80+16>>2]|0;
 $582 = $6;
 $583 = ((($582)) + 60|0);
 _nk_rgb($81,65,65,65);
 ;HEAP8[$583>>0]=HEAP8[$81>>0]|0;HEAP8[$583+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$583+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$583+3>>0]=HEAP8[$81+3>>0]|0;
 $584 = $6;
 $585 = ((($584)) + 64|0);
 _nk_rgb($82,40,40,40);
 ;HEAP8[$585>>0]=HEAP8[$82>>0]|0;HEAP8[$585+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$585+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$585+3>>0]=HEAP8[$82+3>>0]|0;
 $586 = $6;
 $587 = ((($586)) + 68|0);
 _nk_rgb($83,175,175,175);
 ;HEAP8[$587>>0]=HEAP8[$83>>0]|0;HEAP8[$587+1>>0]=HEAP8[$83+1>>0]|0;HEAP8[$587+2>>0]=HEAP8[$83+2>>0]|0;HEAP8[$587+3>>0]=HEAP8[$83+3>>0]|0;
 $588 = $6;
 $589 = ((($588)) + 72|0);
 _nk_rgb($84,175,175,175);
 ;HEAP8[$589>>0]=HEAP8[$84>>0]|0;HEAP8[$589+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$589+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$589+3>>0]=HEAP8[$84+3>>0]|0;
 $590 = $6;
 $591 = ((($590)) + 76|0);
 _nk_rgb($85,175,175,175);
 ;HEAP8[$591>>0]=HEAP8[$85>>0]|0;HEAP8[$591+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$591+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$591+3>>0]=HEAP8[$85+3>>0]|0;
 $592 = $6;
 $593 = ((($592)) + 92|0);
 _nk_vec2($86,8.0,8.0);
 ;HEAP32[$593>>2]=HEAP32[$86>>2]|0;HEAP32[$593+4>>2]=HEAP32[$86+4>>2]|0;
 $594 = $6;
 $595 = ((($594)) + 108|0);
 _nk_vec2($87,0.0,0.0);
 ;HEAP32[$595>>2]=HEAP32[$87>>2]|0;HEAP32[$595+4>>2]=HEAP32[$87+4>>2]|0;
 $596 = $6;
 $597 = ((($596)) + 116|0);
 _nk_handle_ptr($88,0);
 ;HEAP32[$597>>2]=HEAP32[$88>>2]|0;
 $598 = $6;
 $599 = ((($598)) + 80|0);
 HEAP32[$599>>2] = 18;
 $600 = $6;
 $601 = ((($600)) + 84|0);
 HEAPF32[$601>>2] = 1.0;
 $602 = $6;
 $603 = ((($602)) + 88|0);
 HEAPF32[$603>>2] = 0.0;
 $604 = $6;
 $605 = ((($604)) + 120|0);
 HEAP32[$605>>2] = 0;
 $606 = $6;
 $607 = ((($606)) + 124|0);
 HEAP32[$607>>2] = 0;
 $608 = $4;
 $609 = ((($608)) + 952|0);
 $610 = ((($609)) + 308|0);
 $611 = $4;
 $612 = ((($611)) + 952|0);
 $613 = ((($612)) + 180|0);
 dest=$610; src=$613; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $614 = $4;
 $615 = ((($614)) + 1408|0);
 $10 = $615;
 $616 = $10;
 _nk_zero($616,164);
 $617 = $10;
 $618 = $3;
 $619 = ((($618)) + 48|0);
 ;HEAP8[$$byval_copy31>>0]=HEAP8[$619>>0]|0;HEAP8[$$byval_copy31+1>>0]=HEAP8[$619+1>>0]|0;HEAP8[$$byval_copy31+2>>0]=HEAP8[$619+2>>0]|0;HEAP8[$$byval_copy31+3>>0]=HEAP8[$619+3>>0]|0;
 _nk_style_item_color($89,$$byval_copy31);
 ;HEAP32[$617>>2]=HEAP32[$89>>2]|0;HEAP32[$617+4>>2]=HEAP32[$89+4>>2]|0;HEAP32[$617+8>>2]=HEAP32[$89+8>>2]|0;HEAP32[$617+12>>2]=HEAP32[$89+12>>2]|0;HEAP32[$617+16>>2]=HEAP32[$89+16>>2]|0;
 $620 = $10;
 $621 = ((($620)) + 20|0);
 $622 = $3;
 $623 = ((($622)) + 48|0);
 ;HEAP8[$$byval_copy32>>0]=HEAP8[$623>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$623+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$623+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$623+3>>0]|0;
 _nk_style_item_color($90,$$byval_copy32);
 ;HEAP32[$621>>2]=HEAP32[$90>>2]|0;HEAP32[$621+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$621+8>>2]=HEAP32[$90+8>>2]|0;HEAP32[$621+12>>2]=HEAP32[$90+12>>2]|0;HEAP32[$621+16>>2]=HEAP32[$90+16>>2]|0;
 $624 = $10;
 $625 = ((($624)) + 40|0);
 $626 = $3;
 $627 = ((($626)) + 48|0);
 ;HEAP8[$$byval_copy33>>0]=HEAP8[$627>>0]|0;HEAP8[$$byval_copy33+1>>0]=HEAP8[$627+1>>0]|0;HEAP8[$$byval_copy33+2>>0]=HEAP8[$627+2>>0]|0;HEAP8[$$byval_copy33+3>>0]=HEAP8[$627+3>>0]|0;
 _nk_style_item_color($91,$$byval_copy33);
 ;HEAP32[$625>>2]=HEAP32[$91>>2]|0;HEAP32[$625+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$625+8>>2]=HEAP32[$91+8>>2]|0;HEAP32[$625+12>>2]=HEAP32[$91+12>>2]|0;HEAP32[$625+16>>2]=HEAP32[$91+16>>2]|0;
 $628 = $10;
 $629 = ((($628)) + 64|0);
 $630 = $3;
 $631 = ((($630)) + 52|0);
 ;HEAP8[$$byval_copy34>>0]=HEAP8[$631>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$631+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$631+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$631+3>>0]|0;
 _nk_style_item_color($92,$$byval_copy34);
 ;HEAP32[$629>>2]=HEAP32[$92>>2]|0;HEAP32[$629+4>>2]=HEAP32[$92+4>>2]|0;HEAP32[$629+8>>2]=HEAP32[$92+8>>2]|0;HEAP32[$629+12>>2]=HEAP32[$92+12>>2]|0;HEAP32[$629+16>>2]=HEAP32[$92+16>>2]|0;
 $632 = $10;
 $633 = ((($632)) + 84|0);
 $634 = $3;
 $635 = ((($634)) + 56|0);
 ;HEAP8[$$byval_copy35>>0]=HEAP8[$635>>0]|0;HEAP8[$$byval_copy35+1>>0]=HEAP8[$635+1>>0]|0;HEAP8[$$byval_copy35+2>>0]=HEAP8[$635+2>>0]|0;HEAP8[$$byval_copy35+3>>0]=HEAP8[$635+3>>0]|0;
 _nk_style_item_color($93,$$byval_copy35);
 ;HEAP32[$633>>2]=HEAP32[$93>>2]|0;HEAP32[$633+4>>2]=HEAP32[$93+4>>2]|0;HEAP32[$633+8>>2]=HEAP32[$93+8>>2]|0;HEAP32[$633+12>>2]=HEAP32[$93+12>>2]|0;HEAP32[$633+16>>2]=HEAP32[$93+16>>2]|0;
 $636 = $10;
 $637 = ((($636)) + 104|0);
 $638 = $3;
 $639 = ((($638)) + 60|0);
 ;HEAP8[$$byval_copy36>>0]=HEAP8[$639>>0]|0;HEAP8[$$byval_copy36+1>>0]=HEAP8[$639+1>>0]|0;HEAP8[$$byval_copy36+2>>0]=HEAP8[$639+2>>0]|0;HEAP8[$$byval_copy36+3>>0]=HEAP8[$639+3>>0]|0;
 _nk_style_item_color($94,$$byval_copy36);
 ;HEAP32[$637>>2]=HEAP32[$94>>2]|0;HEAP32[$637+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$637+8>>2]=HEAP32[$94+8>>2]|0;HEAP32[$637+12>>2]=HEAP32[$94+12>>2]|0;HEAP32[$637+16>>2]=HEAP32[$94+16>>2]|0;
 $640 = $10;
 $641 = ((($640)) + 60|0);
 _nk_rgba($95,0,0,0,0);
 ;HEAP8[$641>>0]=HEAP8[$95>>0]|0;HEAP8[$641+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$641+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$641+3>>0]=HEAP8[$95+3>>0]|0;
 $642 = $10;
 $643 = ((($642)) + 124|0);
 _nk_rgba($96,0,0,0,0);
 ;HEAP8[$643>>0]=HEAP8[$96>>0]|0;HEAP8[$643+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$643+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$643+3>>0]=HEAP8[$96+3>>0]|0;
 $644 = $10;
 $645 = ((($644)) + 152|0);
 _nk_handle_ptr($97,0);
 ;HEAP32[$645>>2]=HEAP32[$97>>2]|0;
 $646 = $10;
 $647 = ((($646)) + 144|0);
 _nk_vec2($98,4.0,4.0);
 ;HEAP32[$647>>2]=HEAP32[$98>>2]|0;HEAP32[$647+4>>2]=HEAP32[$98+4>>2]|0;
 $648 = $10;
 $649 = ((($648)) + 128|0);
 HEAPF32[$649>>2] = 0.0;
 $650 = $10;
 $651 = ((($650)) + 132|0);
 HEAPF32[$651>>2] = 0.0;
 $652 = $10;
 $653 = ((($652)) + 140|0);
 HEAPF32[$653>>2] = 0.0;
 $654 = $10;
 $655 = ((($654)) + 136|0);
 HEAPF32[$655>>2] = 0.0;
 $656 = $10;
 $657 = ((($656)) + 156|0);
 HEAP32[$657>>2] = 0;
 $658 = $10;
 $659 = ((($658)) + 160|0);
 HEAP32[$659>>2] = 0;
 $660 = $4;
 $661 = ((($660)) + 3132|0);
 $11 = $661;
 $662 = $11;
 _nk_zero($662,432);
 $663 = $11;
 $664 = $3;
 $665 = ((($664)) + 92|0);
 ;HEAP8[$$byval_copy37>>0]=HEAP8[$665>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$665+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$665+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$665+3>>0]|0;
 _nk_style_item_color($99,$$byval_copy37);
 ;HEAP32[$663>>2]=HEAP32[$99>>2]|0;HEAP32[$663+4>>2]=HEAP32[$99+4>>2]|0;HEAP32[$663+8>>2]=HEAP32[$99+8>>2]|0;HEAP32[$663+12>>2]=HEAP32[$99+12>>2]|0;HEAP32[$663+16>>2]=HEAP32[$99+16>>2]|0;
 $666 = $11;
 $667 = ((($666)) + 20|0);
 $668 = $3;
 $669 = ((($668)) + 92|0);
 ;HEAP8[$$byval_copy38>>0]=HEAP8[$669>>0]|0;HEAP8[$$byval_copy38+1>>0]=HEAP8[$669+1>>0]|0;HEAP8[$$byval_copy38+2>>0]=HEAP8[$669+2>>0]|0;HEAP8[$$byval_copy38+3>>0]=HEAP8[$669+3>>0]|0;
 _nk_style_item_color($100,$$byval_copy38);
 ;HEAP32[$667>>2]=HEAP32[$100>>2]|0;HEAP32[$667+4>>2]=HEAP32[$100+4>>2]|0;HEAP32[$667+8>>2]=HEAP32[$100+8>>2]|0;HEAP32[$667+12>>2]=HEAP32[$100+12>>2]|0;HEAP32[$667+16>>2]=HEAP32[$100+16>>2]|0;
 $670 = $11;
 $671 = ((($670)) + 40|0);
 $672 = $3;
 $673 = ((($672)) + 92|0);
 ;HEAP8[$$byval_copy39>>0]=HEAP8[$673>>0]|0;HEAP8[$$byval_copy39+1>>0]=HEAP8[$673+1>>0]|0;HEAP8[$$byval_copy39+2>>0]=HEAP8[$673+2>>0]|0;HEAP8[$$byval_copy39+3>>0]=HEAP8[$673+3>>0]|0;
 _nk_style_item_color($101,$$byval_copy39);
 ;HEAP32[$671>>2]=HEAP32[$101>>2]|0;HEAP32[$671+4>>2]=HEAP32[$101+4>>2]|0;HEAP32[$671+8>>2]=HEAP32[$101+8>>2]|0;HEAP32[$671+12>>2]=HEAP32[$101+12>>2]|0;HEAP32[$671+16>>2]=HEAP32[$101+16>>2]|0;
 $674 = $11;
 $675 = ((($674)) + 64|0);
 $676 = $3;
 $677 = ((($676)) + 96|0);
 ;HEAP8[$$byval_copy40>>0]=HEAP8[$677>>0]|0;HEAP8[$$byval_copy40+1>>0]=HEAP8[$677+1>>0]|0;HEAP8[$$byval_copy40+2>>0]=HEAP8[$677+2>>0]|0;HEAP8[$$byval_copy40+3>>0]=HEAP8[$677+3>>0]|0;
 _nk_style_item_color($102,$$byval_copy40);
 ;HEAP32[$675>>2]=HEAP32[$102>>2]|0;HEAP32[$675+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$675+8>>2]=HEAP32[$102+8>>2]|0;HEAP32[$675+12>>2]=HEAP32[$102+12>>2]|0;HEAP32[$675+16>>2]=HEAP32[$102+16>>2]|0;
 $678 = $11;
 $679 = ((($678)) + 84|0);
 $680 = $3;
 $681 = ((($680)) + 100|0);
 ;HEAP8[$$byval_copy41>>0]=HEAP8[$681>>0]|0;HEAP8[$$byval_copy41+1>>0]=HEAP8[$681+1>>0]|0;HEAP8[$$byval_copy41+2>>0]=HEAP8[$681+2>>0]|0;HEAP8[$$byval_copy41+3>>0]=HEAP8[$681+3>>0]|0;
 _nk_style_item_color($103,$$byval_copy41);
 ;HEAP32[$679>>2]=HEAP32[$103>>2]|0;HEAP32[$679+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$679+8>>2]=HEAP32[$103+8>>2]|0;HEAP32[$679+12>>2]=HEAP32[$103+12>>2]|0;HEAP32[$679+16>>2]=HEAP32[$103+16>>2]|0;
 $682 = $11;
 $683 = ((($682)) + 104|0);
 $684 = $3;
 $685 = ((($684)) + 104|0);
 ;HEAP8[$$byval_copy42>>0]=HEAP8[$685>>0]|0;HEAP8[$$byval_copy42+1>>0]=HEAP8[$685+1>>0]|0;HEAP8[$$byval_copy42+2>>0]=HEAP8[$685+2>>0]|0;HEAP8[$$byval_copy42+3>>0]=HEAP8[$685+3>>0]|0;
 _nk_style_item_color($104,$$byval_copy42);
 ;HEAP32[$683>>2]=HEAP32[$104>>2]|0;HEAP32[$683+4>>2]=HEAP32[$104+4>>2]|0;HEAP32[$683+8>>2]=HEAP32[$104+8>>2]|0;HEAP32[$683+12>>2]=HEAP32[$104+12>>2]|0;HEAP32[$683+16>>2]=HEAP32[$104+16>>2]|0;
 $686 = $11;
 $687 = ((($686)) + 416|0);
 HEAP32[$687>>2] = 3;
 $688 = $11;
 $689 = ((($688)) + 412|0);
 HEAP32[$689>>2] = 3;
 $690 = $11;
 $691 = ((($690)) + 420|0);
 _nk_handle_ptr($105,0);
 ;HEAP32[$691>>2]=HEAP32[$105>>2]|0;
 $692 = $11;
 $693 = ((($692)) + 60|0);
 $694 = $3;
 $695 = ((($694)) + 92|0);
 ;HEAP8[$693>>0]=HEAP8[$695>>0]|0;HEAP8[$693+1>>0]=HEAP8[$695+1>>0]|0;HEAP8[$693+2>>0]=HEAP8[$695+2>>0]|0;HEAP8[$693+3>>0]=HEAP8[$695+3>>0]|0;
 $696 = $11;
 $697 = ((($696)) + 124|0);
 $698 = $3;
 $699 = ((($698)) + 92|0);
 ;HEAP8[$697>>0]=HEAP8[$699>>0]|0;HEAP8[$697+1>>0]=HEAP8[$699+1>>0]|0;HEAP8[$697+2>>0]=HEAP8[$699+2>>0]|0;HEAP8[$697+3>>0]=HEAP8[$699+3>>0]|0;
 $700 = $11;
 $701 = ((($700)) + 144|0);
 _nk_vec2($106,0.0,0.0);
 ;HEAP32[$701>>2]=HEAP32[$106>>2]|0;HEAP32[$701+4>>2]=HEAP32[$106+4>>2]|0;
 $702 = $11;
 $703 = ((($702)) + 152|0);
 HEAP32[$703>>2] = 0;
 $704 = $11;
 $705 = ((($704)) + 128|0);
 HEAPF32[$705>>2] = 0.0;
 $706 = $11;
 $707 = ((($706)) + 132|0);
 HEAPF32[$707>>2] = 0.0;
 $708 = $11;
 $709 = ((($708)) + 136|0);
 HEAPF32[$709>>2] = 0.0;
 $710 = $11;
 $711 = ((($710)) + 140|0);
 HEAPF32[$711>>2] = 0.0;
 $712 = $11;
 $713 = ((($712)) + 424|0);
 HEAP32[$713>>2] = 0;
 $714 = $11;
 $715 = ((($714)) + 428|0);
 HEAP32[$715>>2] = 0;
 $716 = $4;
 $717 = ((($716)) + 3564|0);
 $718 = $4;
 $719 = ((($718)) + 3132|0);
 _memcpy(($717|0),($719|0),432)|0;
 $720 = $4;
 $721 = ((($720)) + 3132|0);
 $722 = ((($721)) + 156|0);
 $6 = $722;
 $723 = $6;
 _nk_rgb($107,40,40,40);
 ;HEAP8[$$byval_copy43>>0]=HEAP8[$107>>0]|0;HEAP8[$$byval_copy43+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$$byval_copy43+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$$byval_copy43+3>>0]=HEAP8[$107+3>>0]|0;
 _nk_style_item_color($108,$$byval_copy43);
 ;HEAP32[$723>>2]=HEAP32[$108>>2]|0;HEAP32[$723+4>>2]=HEAP32[$108+4>>2]|0;HEAP32[$723+8>>2]=HEAP32[$108+8>>2]|0;HEAP32[$723+12>>2]=HEAP32[$108+12>>2]|0;HEAP32[$723+16>>2]=HEAP32[$108+16>>2]|0;
 $724 = $6;
 $725 = ((($724)) + 20|0);
 _nk_rgb($109,42,42,42);
 ;HEAP8[$$byval_copy44>>0]=HEAP8[$109>>0]|0;HEAP8[$$byval_copy44+1>>0]=HEAP8[$109+1>>0]|0;HEAP8[$$byval_copy44+2>>0]=HEAP8[$109+2>>0]|0;HEAP8[$$byval_copy44+3>>0]=HEAP8[$109+3>>0]|0;
 _nk_style_item_color($110,$$byval_copy44);
 ;HEAP32[$725>>2]=HEAP32[$110>>2]|0;HEAP32[$725+4>>2]=HEAP32[$110+4>>2]|0;HEAP32[$725+8>>2]=HEAP32[$110+8>>2]|0;HEAP32[$725+12>>2]=HEAP32[$110+12>>2]|0;HEAP32[$725+16>>2]=HEAP32[$110+16>>2]|0;
 $726 = $6;
 $727 = ((($726)) + 40|0);
 _nk_rgb($111,44,44,44);
 ;HEAP8[$$byval_copy45>>0]=HEAP8[$111>>0]|0;HEAP8[$$byval_copy45+1>>0]=HEAP8[$111+1>>0]|0;HEAP8[$$byval_copy45+2>>0]=HEAP8[$111+2>>0]|0;HEAP8[$$byval_copy45+3>>0]=HEAP8[$111+3>>0]|0;
 _nk_style_item_color($112,$$byval_copy45);
 ;HEAP32[$727>>2]=HEAP32[$112>>2]|0;HEAP32[$727+4>>2]=HEAP32[$112+4>>2]|0;HEAP32[$727+8>>2]=HEAP32[$112+8>>2]|0;HEAP32[$727+12>>2]=HEAP32[$112+12>>2]|0;HEAP32[$727+16>>2]=HEAP32[$112+16>>2]|0;
 $728 = $6;
 $729 = ((($728)) + 60|0);
 _nk_rgb($113,65,65,65);
 ;HEAP8[$729>>0]=HEAP8[$113>>0]|0;HEAP8[$729+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$729+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$729+3>>0]=HEAP8[$113+3>>0]|0;
 $730 = $6;
 $731 = ((($730)) + 64|0);
 _nk_rgb($114,40,40,40);
 ;HEAP8[$731>>0]=HEAP8[$114>>0]|0;HEAP8[$731+1>>0]=HEAP8[$114+1>>0]|0;HEAP8[$731+2>>0]=HEAP8[$114+2>>0]|0;HEAP8[$731+3>>0]=HEAP8[$114+3>>0]|0;
 $732 = $6;
 $733 = ((($732)) + 68|0);
 _nk_rgb($115,175,175,175);
 ;HEAP8[$733>>0]=HEAP8[$115>>0]|0;HEAP8[$733+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$733+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$733+3>>0]=HEAP8[$115+3>>0]|0;
 $734 = $6;
 $735 = ((($734)) + 72|0);
 _nk_rgb($116,175,175,175);
 ;HEAP8[$735>>0]=HEAP8[$116>>0]|0;HEAP8[$735+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$735+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$735+3>>0]=HEAP8[$116+3>>0]|0;
 $736 = $6;
 $737 = ((($736)) + 76|0);
 _nk_rgb($117,175,175,175);
 ;HEAP8[$737>>0]=HEAP8[$117>>0]|0;HEAP8[$737+1>>0]=HEAP8[$117+1>>0]|0;HEAP8[$737+2>>0]=HEAP8[$117+2>>0]|0;HEAP8[$737+3>>0]=HEAP8[$117+3>>0]|0;
 $738 = $6;
 $739 = ((($738)) + 92|0);
 _nk_vec2($118,4.0,4.0);
 ;HEAP32[$739>>2]=HEAP32[$118>>2]|0;HEAP32[$739+4>>2]=HEAP32[$118+4>>2]|0;
 $740 = $6;
 $741 = ((($740)) + 108|0);
 _nk_vec2($119,0.0,0.0);
 ;HEAP32[$741>>2]=HEAP32[$119>>2]|0;HEAP32[$741+4>>2]=HEAP32[$119+4>>2]|0;
 $742 = $6;
 $743 = ((($742)) + 116|0);
 _nk_handle_ptr($120,0);
 ;HEAP32[$743>>2]=HEAP32[$120>>2]|0;
 $744 = $6;
 $745 = ((($744)) + 80|0);
 HEAP32[$745>>2] = 18;
 $746 = $6;
 $747 = ((($746)) + 84|0);
 HEAPF32[$747>>2] = 1.0;
 $748 = $6;
 $749 = ((($748)) + 88|0);
 HEAPF32[$749>>2] = 0.0;
 $750 = $6;
 $751 = ((($750)) + 120|0);
 HEAP32[$751>>2] = 0;
 $752 = $6;
 $753 = ((($752)) + 124|0);
 HEAP32[$753>>2] = 0;
 $754 = $4;
 $755 = ((($754)) + 3132|0);
 $756 = ((($755)) + 284|0);
 $757 = $4;
 $758 = ((($757)) + 3132|0);
 $759 = ((($758)) + 156|0);
 dest=$756; src=$759; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $760 = $4;
 $761 = ((($760)) + 3564|0);
 $762 = ((($761)) + 156|0);
 $763 = $4;
 $764 = ((($763)) + 3132|0);
 $765 = ((($764)) + 156|0);
 dest=$762; src=$765; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $766 = $4;
 $767 = ((($766)) + 3564|0);
 $768 = ((($767)) + 284|0);
 $769 = $4;
 $770 = ((($769)) + 3132|0);
 $771 = ((($770)) + 156|0);
 dest=$768; src=$771; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $772 = $4;
 $773 = ((($772)) + 2512|0);
 $12 = $773;
 $774 = $12;
 _nk_zero($774,572);
 $775 = $12;
 $776 = $3;
 $777 = ((($776)) + 68|0);
 ;HEAP8[$$byval_copy46>>0]=HEAP8[$777>>0]|0;HEAP8[$$byval_copy46+1>>0]=HEAP8[$777+1>>0]|0;HEAP8[$$byval_copy46+2>>0]=HEAP8[$777+2>>0]|0;HEAP8[$$byval_copy46+3>>0]=HEAP8[$777+3>>0]|0;
 _nk_style_item_color($121,$$byval_copy46);
 ;HEAP32[$775>>2]=HEAP32[$121>>2]|0;HEAP32[$775+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$775+8>>2]=HEAP32[$121+8>>2]|0;HEAP32[$775+12>>2]=HEAP32[$121+12>>2]|0;HEAP32[$775+16>>2]=HEAP32[$121+16>>2]|0;
 $778 = $12;
 $779 = ((($778)) + 20|0);
 $780 = $3;
 $781 = ((($780)) + 68|0);
 ;HEAP8[$$byval_copy47>>0]=HEAP8[$781>>0]|0;HEAP8[$$byval_copy47+1>>0]=HEAP8[$781+1>>0]|0;HEAP8[$$byval_copy47+2>>0]=HEAP8[$781+2>>0]|0;HEAP8[$$byval_copy47+3>>0]=HEAP8[$781+3>>0]|0;
 _nk_style_item_color($122,$$byval_copy47);
 ;HEAP32[$779>>2]=HEAP32[$122>>2]|0;HEAP32[$779+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$779+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$779+12>>2]=HEAP32[$122+12>>2]|0;HEAP32[$779+16>>2]=HEAP32[$122+16>>2]|0;
 $782 = $12;
 $783 = ((($782)) + 40|0);
 $784 = $3;
 $785 = ((($784)) + 68|0);
 ;HEAP8[$$byval_copy48>>0]=HEAP8[$785>>0]|0;HEAP8[$$byval_copy48+1>>0]=HEAP8[$785+1>>0]|0;HEAP8[$$byval_copy48+2>>0]=HEAP8[$785+2>>0]|0;HEAP8[$$byval_copy48+3>>0]=HEAP8[$785+3>>0]|0;
 _nk_style_item_color($123,$$byval_copy48);
 ;HEAP32[$783>>2]=HEAP32[$123>>2]|0;HEAP32[$783+4>>2]=HEAP32[$123+4>>2]|0;HEAP32[$783+8>>2]=HEAP32[$123+8>>2]|0;HEAP32[$783+12>>2]=HEAP32[$123+12>>2]|0;HEAP32[$783+16>>2]=HEAP32[$123+16>>2]|0;
 $786 = $12;
 $787 = ((($786)) + 496|0);
 $788 = $3;
 ;HEAP8[$787>>0]=HEAP8[$788>>0]|0;HEAP8[$787+1>>0]=HEAP8[$788+1>>0]|0;HEAP8[$787+2>>0]=HEAP8[$788+2>>0]|0;HEAP8[$787+3>>0]=HEAP8[$788+3>>0]|0;
 $789 = $12;
 $790 = ((($789)) + 500|0);
 $791 = $3;
 ;HEAP8[$790>>0]=HEAP8[$791>>0]|0;HEAP8[$790+1>>0]=HEAP8[$791+1>>0]|0;HEAP8[$790+2>>0]=HEAP8[$791+2>>0]|0;HEAP8[$790+3>>0]=HEAP8[$791+3>>0]|0;
 $792 = $12;
 $793 = ((($792)) + 504|0);
 $794 = $3;
 $795 = ((($794)) + 68|0);
 ;HEAP8[$793>>0]=HEAP8[$795>>0]|0;HEAP8[$793+1>>0]=HEAP8[$795+1>>0]|0;HEAP8[$793+2>>0]=HEAP8[$795+2>>0]|0;HEAP8[$793+3>>0]=HEAP8[$795+3>>0]|0;
 $796 = $12;
 $797 = ((($796)) + 508|0);
 $798 = $3;
 $799 = ((($798)) + 68|0);
 ;HEAP8[$797>>0]=HEAP8[$799>>0]|0;HEAP8[$797+1>>0]=HEAP8[$799+1>>0]|0;HEAP8[$797+2>>0]=HEAP8[$799+2>>0]|0;HEAP8[$797+3>>0]=HEAP8[$799+3>>0]|0;
 $800 = $12;
 $801 = ((($800)) + 60|0);
 $802 = $3;
 $803 = ((($802)) + 12|0);
 ;HEAP8[$801>>0]=HEAP8[$803>>0]|0;HEAP8[$801+1>>0]=HEAP8[$803+1>>0]|0;HEAP8[$801+2>>0]=HEAP8[$803+2>>0]|0;HEAP8[$801+3>>0]=HEAP8[$803+3>>0]|0;
 $804 = $12;
 $805 = ((($804)) + 512|0);
 $806 = $3;
 ;HEAP8[$805>>0]=HEAP8[$806>>0]|0;HEAP8[$805+1>>0]=HEAP8[$806+1>>0]|0;HEAP8[$805+2>>0]=HEAP8[$806+2>>0]|0;HEAP8[$805+3>>0]=HEAP8[$806+3>>0]|0;
 $807 = $12;
 $808 = ((($807)) + 516|0);
 $809 = $3;
 ;HEAP8[$808>>0]=HEAP8[$809>>0]|0;HEAP8[$808+1>>0]=HEAP8[$809+1>>0]|0;HEAP8[$808+2>>0]=HEAP8[$809+2>>0]|0;HEAP8[$808+3>>0]=HEAP8[$809+3>>0]|0;
 $810 = $12;
 $811 = ((($810)) + 520|0);
 $812 = $3;
 ;HEAP8[$811>>0]=HEAP8[$812>>0]|0;HEAP8[$811+1>>0]=HEAP8[$812+1>>0]|0;HEAP8[$811+2>>0]=HEAP8[$812+2>>0]|0;HEAP8[$811+3>>0]=HEAP8[$812+3>>0]|0;
 $813 = $12;
 $814 = ((($813)) + 524|0);
 $815 = $3;
 ;HEAP8[$814>>0]=HEAP8[$815>>0]|0;HEAP8[$814+1>>0]=HEAP8[$815+1>>0]|0;HEAP8[$814+2>>0]=HEAP8[$815+2>>0]|0;HEAP8[$814+3>>0]=HEAP8[$815+3>>0]|0;
 $816 = $12;
 $817 = ((($816)) + 528|0);
 $818 = $3;
 ;HEAP8[$817>>0]=HEAP8[$818>>0]|0;HEAP8[$817+1>>0]=HEAP8[$818+1>>0]|0;HEAP8[$817+2>>0]=HEAP8[$818+2>>0]|0;HEAP8[$817+3>>0]=HEAP8[$818+3>>0]|0;
 $819 = $12;
 $820 = ((($819)) + 532|0);
 $821 = $3;
 $822 = ((($821)) + 68|0);
 ;HEAP8[$820>>0]=HEAP8[$822>>0]|0;HEAP8[$820+1>>0]=HEAP8[$822+1>>0]|0;HEAP8[$820+2>>0]=HEAP8[$822+2>>0]|0;HEAP8[$820+3>>0]=HEAP8[$822+3>>0]|0;
 $823 = $12;
 $824 = ((($823)) + 536|0);
 $825 = $3;
 $826 = ((($825)) + 68|0);
 ;HEAP8[$824>>0]=HEAP8[$826>>0]|0;HEAP8[$824+1>>0]=HEAP8[$826+1>>0]|0;HEAP8[$824+2>>0]=HEAP8[$826+2>>0]|0;HEAP8[$824+3>>0]=HEAP8[$826+3>>0]|0;
 $827 = $12;
 $828 = ((($827)) + 552|0);
 _nk_vec2($124,10.0,10.0);
 ;HEAP32[$828>>2]=HEAP32[$124>>2]|0;HEAP32[$828+4>>2]=HEAP32[$124+4>>2]|0;
 $829 = $12;
 $830 = ((($829)) + 64|0);
 $831 = $4;
 $832 = ((($831)) + 3564|0);
 _memcpy(($830|0),($832|0),432)|0;
 $833 = $12;
 $834 = ((($833)) + 560|0);
 _nk_vec2($125,4.0,4.0);
 ;HEAP32[$834>>2]=HEAP32[$125>>2]|0;HEAP32[$834+4>>2]=HEAP32[$125+4>>2]|0;
 $835 = $12;
 $836 = ((($835)) + 568|0);
 HEAPF32[$836>>2] = 2.0;
 $837 = $12;
 $838 = ((($837)) + 548|0);
 HEAPF32[$838>>2] = 4.0;
 $839 = $12;
 $840 = ((($839)) + 540|0);
 HEAPF32[$840>>2] = 1.0;
 $841 = $12;
 $842 = ((($841)) + 544|0);
 HEAPF32[$842>>2] = 0.0;
 $843 = $4;
 $844 = ((($843)) + 1572|0);
 $13 = $844;
 $845 = $13;
 _nk_zero($845,940);
 $846 = $13;
 $847 = $3;
 $848 = ((($847)) + 64|0);
 ;HEAP8[$$byval_copy49>>0]=HEAP8[$848>>0]|0;HEAP8[$$byval_copy49+1>>0]=HEAP8[$848+1>>0]|0;HEAP8[$$byval_copy49+2>>0]=HEAP8[$848+2>>0]|0;HEAP8[$$byval_copy49+3>>0]=HEAP8[$848+3>>0]|0;
 _nk_style_item_color($126,$$byval_copy49);
 ;HEAP32[$846>>2]=HEAP32[$126>>2]|0;HEAP32[$846+4>>2]=HEAP32[$126+4>>2]|0;HEAP32[$846+8>>2]=HEAP32[$126+8>>2]|0;HEAP32[$846+12>>2]=HEAP32[$126+12>>2]|0;HEAP32[$846+16>>2]=HEAP32[$126+16>>2]|0;
 $849 = $13;
 $850 = ((($849)) + 20|0);
 $851 = $3;
 $852 = ((($851)) + 64|0);
 ;HEAP8[$$byval_copy50>>0]=HEAP8[$852>>0]|0;HEAP8[$$byval_copy50+1>>0]=HEAP8[$852+1>>0]|0;HEAP8[$$byval_copy50+2>>0]=HEAP8[$852+2>>0]|0;HEAP8[$$byval_copy50+3>>0]=HEAP8[$852+3>>0]|0;
 _nk_style_item_color($127,$$byval_copy50);
 ;HEAP32[$850>>2]=HEAP32[$127>>2]|0;HEAP32[$850+4>>2]=HEAP32[$127+4>>2]|0;HEAP32[$850+8>>2]=HEAP32[$127+8>>2]|0;HEAP32[$850+12>>2]=HEAP32[$127+12>>2]|0;HEAP32[$850+16>>2]=HEAP32[$127+16>>2]|0;
 $853 = $13;
 $854 = ((($853)) + 40|0);
 $855 = $3;
 $856 = ((($855)) + 64|0);
 ;HEAP8[$$byval_copy51>>0]=HEAP8[$856>>0]|0;HEAP8[$$byval_copy51+1>>0]=HEAP8[$856+1>>0]|0;HEAP8[$$byval_copy51+2>>0]=HEAP8[$856+2>>0]|0;HEAP8[$$byval_copy51+3>>0]=HEAP8[$856+3>>0]|0;
 _nk_style_item_color($128,$$byval_copy51);
 ;HEAP32[$854>>2]=HEAP32[$128>>2]|0;HEAP32[$854+4>>2]=HEAP32[$128+4>>2]|0;HEAP32[$854+8>>2]=HEAP32[$128+8>>2]|0;HEAP32[$854+12>>2]=HEAP32[$128+12>>2]|0;HEAP32[$854+16>>2]=HEAP32[$128+16>>2]|0;
 $857 = $13;
 $858 = ((($857)) + 60|0);
 $859 = $3;
 $860 = ((($859)) + 12|0);
 ;HEAP8[$858>>0]=HEAP8[$860>>0]|0;HEAP8[$858+1>>0]=HEAP8[$860+1>>0]|0;HEAP8[$858+2>>0]=HEAP8[$860+2>>0]|0;HEAP8[$858+3>>0]=HEAP8[$860+3>>0]|0;
 $861 = $13;
 $862 = ((($861)) + 64|0);
 $863 = $3;
 ;HEAP8[$862>>0]=HEAP8[$863>>0]|0;HEAP8[$862+1>>0]=HEAP8[$863+1>>0]|0;HEAP8[$862+2>>0]=HEAP8[$863+2>>0]|0;HEAP8[$862+3>>0]=HEAP8[$863+3>>0]|0;
 $864 = $13;
 $865 = ((($864)) + 68|0);
 $866 = $3;
 ;HEAP8[$865>>0]=HEAP8[$866>>0]|0;HEAP8[$865+1>>0]=HEAP8[$866+1>>0]|0;HEAP8[$865+2>>0]=HEAP8[$866+2>>0]|0;HEAP8[$865+3>>0]=HEAP8[$866+3>>0]|0;
 $867 = $13;
 $868 = ((($867)) + 72|0);
 $869 = $3;
 ;HEAP8[$868>>0]=HEAP8[$869>>0]|0;HEAP8[$868+1>>0]=HEAP8[$869+1>>0]|0;HEAP8[$868+2>>0]=HEAP8[$869+2>>0]|0;HEAP8[$868+3>>0]=HEAP8[$869+3>>0]|0;
 $870 = $13;
 $871 = ((($870)) + 76|0);
 HEAP32[$871>>2] = 9;
 $872 = $13;
 $873 = ((($872)) + 80|0);
 HEAP32[$873>>2] = 10;
 $874 = $13;
 $875 = ((($874)) + 928|0);
 _nk_handle_ptr($129,0);
 ;HEAP32[$875>>2]=HEAP32[$129>>2]|0;
 $876 = $13;
 $877 = ((($876)) + 92|0);
 _nk_vec2($130,4.0,4.0);
 ;HEAP32[$877>>2]=HEAP32[$130>>2]|0;HEAP32[$877+4>>2]=HEAP32[$130+4>>2]|0;
 $878 = $13;
 $879 = ((($878)) + 84|0);
 HEAPF32[$879>>2] = 1.0;
 $880 = $13;
 $881 = ((($880)) + 88|0);
 HEAPF32[$881>>2] = 10.0;
 $882 = $13;
 $883 = ((($882)) + 932|0);
 HEAP32[$883>>2] = 0;
 $884 = $13;
 $885 = ((($884)) + 936|0);
 HEAP32[$885>>2] = 0;
 $886 = $4;
 $887 = ((($886)) + 1572|0);
 $888 = ((($887)) + 800|0);
 $6 = $888;
 $889 = $6;
 _nk_zero($889,128);
 $890 = $6;
 $891 = $3;
 $892 = ((($891)) + 64|0);
 ;HEAP8[$$byval_copy52>>0]=HEAP8[$892>>0]|0;HEAP8[$$byval_copy52+1>>0]=HEAP8[$892+1>>0]|0;HEAP8[$$byval_copy52+2>>0]=HEAP8[$892+2>>0]|0;HEAP8[$$byval_copy52+3>>0]=HEAP8[$892+3>>0]|0;
 _nk_style_item_color($131,$$byval_copy52);
 ;HEAP32[$890>>2]=HEAP32[$131>>2]|0;HEAP32[$890+4>>2]=HEAP32[$131+4>>2]|0;HEAP32[$890+8>>2]=HEAP32[$131+8>>2]|0;HEAP32[$890+12>>2]=HEAP32[$131+12>>2]|0;HEAP32[$890+16>>2]=HEAP32[$131+16>>2]|0;
 $893 = $6;
 $894 = ((($893)) + 20|0);
 $895 = $3;
 $896 = ((($895)) + 64|0);
 ;HEAP8[$$byval_copy53>>0]=HEAP8[$896>>0]|0;HEAP8[$$byval_copy53+1>>0]=HEAP8[$896+1>>0]|0;HEAP8[$$byval_copy53+2>>0]=HEAP8[$896+2>>0]|0;HEAP8[$$byval_copy53+3>>0]=HEAP8[$896+3>>0]|0;
 _nk_style_item_color($132,$$byval_copy53);
 ;HEAP32[$894>>2]=HEAP32[$132>>2]|0;HEAP32[$894+4>>2]=HEAP32[$132+4>>2]|0;HEAP32[$894+8>>2]=HEAP32[$132+8>>2]|0;HEAP32[$894+12>>2]=HEAP32[$132+12>>2]|0;HEAP32[$894+16>>2]=HEAP32[$132+16>>2]|0;
 $897 = $6;
 $898 = ((($897)) + 40|0);
 $899 = $3;
 $900 = ((($899)) + 64|0);
 ;HEAP8[$$byval_copy54>>0]=HEAP8[$900>>0]|0;HEAP8[$$byval_copy54+1>>0]=HEAP8[$900+1>>0]|0;HEAP8[$$byval_copy54+2>>0]=HEAP8[$900+2>>0]|0;HEAP8[$$byval_copy54+3>>0]=HEAP8[$900+3>>0]|0;
 _nk_style_item_color($133,$$byval_copy54);
 ;HEAP32[$898>>2]=HEAP32[$133>>2]|0;HEAP32[$898+4>>2]=HEAP32[$133+4>>2]|0;HEAP32[$898+8>>2]=HEAP32[$133+8>>2]|0;HEAP32[$898+12>>2]=HEAP32[$133+12>>2]|0;HEAP32[$898+16>>2]=HEAP32[$133+16>>2]|0;
 $901 = $6;
 $902 = ((($901)) + 60|0);
 _nk_rgba($134,0,0,0,0);
 ;HEAP8[$902>>0]=HEAP8[$134>>0]|0;HEAP8[$902+1>>0]=HEAP8[$134+1>>0]|0;HEAP8[$902+2>>0]=HEAP8[$134+2>>0]|0;HEAP8[$902+3>>0]=HEAP8[$134+3>>0]|0;
 $903 = $6;
 $904 = ((($903)) + 64|0);
 $905 = $3;
 $906 = ((($905)) + 64|0);
 ;HEAP8[$904>>0]=HEAP8[$906>>0]|0;HEAP8[$904+1>>0]=HEAP8[$906+1>>0]|0;HEAP8[$904+2>>0]=HEAP8[$906+2>>0]|0;HEAP8[$904+3>>0]=HEAP8[$906+3>>0]|0;
 $907 = $6;
 $908 = ((($907)) + 68|0);
 $909 = $3;
 ;HEAP8[$908>>0]=HEAP8[$909>>0]|0;HEAP8[$908+1>>0]=HEAP8[$909+1>>0]|0;HEAP8[$908+2>>0]=HEAP8[$909+2>>0]|0;HEAP8[$908+3>>0]=HEAP8[$909+3>>0]|0;
 $910 = $6;
 $911 = ((($910)) + 72|0);
 $912 = $3;
 ;HEAP8[$911>>0]=HEAP8[$912>>0]|0;HEAP8[$911+1>>0]=HEAP8[$912+1>>0]|0;HEAP8[$911+2>>0]=HEAP8[$912+2>>0]|0;HEAP8[$911+3>>0]=HEAP8[$912+3>>0]|0;
 $913 = $6;
 $914 = ((($913)) + 76|0);
 $915 = $3;
 ;HEAP8[$914>>0]=HEAP8[$915>>0]|0;HEAP8[$914+1>>0]=HEAP8[$915+1>>0]|0;HEAP8[$914+2>>0]=HEAP8[$915+2>>0]|0;HEAP8[$914+3>>0]=HEAP8[$915+3>>0]|0;
 $916 = $6;
 $917 = ((($916)) + 92|0);
 _nk_vec2($135,0.0,0.0);
 ;HEAP32[$917>>2]=HEAP32[$135>>2]|0;HEAP32[$917+4>>2]=HEAP32[$135+4>>2]|0;
 $918 = $6;
 $919 = ((($918)) + 108|0);
 _nk_vec2($136,0.0,0.0);
 ;HEAP32[$919>>2]=HEAP32[$136>>2]|0;HEAP32[$919+4>>2]=HEAP32[$136+4>>2]|0;
 $920 = $6;
 $921 = ((($920)) + 116|0);
 _nk_handle_ptr($137,0);
 ;HEAP32[$921>>2]=HEAP32[$137>>2]|0;
 $922 = $6;
 $923 = ((($922)) + 80|0);
 HEAP32[$923>>2] = 18;
 $924 = $6;
 $925 = ((($924)) + 84|0);
 HEAPF32[$925>>2] = 0.0;
 $926 = $6;
 $927 = ((($926)) + 88|0);
 HEAPF32[$927>>2] = 0.0;
 $928 = $6;
 $929 = ((($928)) + 120|0);
 HEAP32[$929>>2] = 0;
 $930 = $6;
 $931 = ((($930)) + 124|0);
 HEAP32[$931>>2] = 0;
 $932 = $4;
 $933 = ((($932)) + 1572|0);
 $934 = ((($933)) + 672|0);
 $935 = $4;
 $936 = ((($935)) + 1572|0);
 $937 = ((($936)) + 800|0);
 dest=$934; src=$937; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $938 = $4;
 $939 = ((($938)) + 1572|0);
 $940 = ((($939)) + 100|0);
 $12 = $940;
 $941 = $12;
 _nk_zero($941,572);
 $942 = $12;
 $943 = $3;
 $944 = ((($943)) + 64|0);
 ;HEAP8[$$byval_copy55>>0]=HEAP8[$944>>0]|0;HEAP8[$$byval_copy55+1>>0]=HEAP8[$944+1>>0]|0;HEAP8[$$byval_copy55+2>>0]=HEAP8[$944+2>>0]|0;HEAP8[$$byval_copy55+3>>0]=HEAP8[$944+3>>0]|0;
 _nk_style_item_color($138,$$byval_copy55);
 ;HEAP32[$942>>2]=HEAP32[$138>>2]|0;HEAP32[$942+4>>2]=HEAP32[$138+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[$138+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[$138+12>>2]|0;HEAP32[$942+16>>2]=HEAP32[$138+16>>2]|0;
 $945 = $12;
 $946 = ((($945)) + 20|0);
 $947 = $3;
 $948 = ((($947)) + 64|0);
 ;HEAP8[$$byval_copy56>>0]=HEAP8[$948>>0]|0;HEAP8[$$byval_copy56+1>>0]=HEAP8[$948+1>>0]|0;HEAP8[$$byval_copy56+2>>0]=HEAP8[$948+2>>0]|0;HEAP8[$$byval_copy56+3>>0]=HEAP8[$948+3>>0]|0;
 _nk_style_item_color($139,$$byval_copy56);
 ;HEAP32[$946>>2]=HEAP32[$139>>2]|0;HEAP32[$946+4>>2]=HEAP32[$139+4>>2]|0;HEAP32[$946+8>>2]=HEAP32[$139+8>>2]|0;HEAP32[$946+12>>2]=HEAP32[$139+12>>2]|0;HEAP32[$946+16>>2]=HEAP32[$139+16>>2]|0;
 $949 = $12;
 $950 = ((($949)) + 40|0);
 $951 = $3;
 $952 = ((($951)) + 64|0);
 ;HEAP8[$$byval_copy57>>0]=HEAP8[$952>>0]|0;HEAP8[$$byval_copy57+1>>0]=HEAP8[$952+1>>0]|0;HEAP8[$$byval_copy57+2>>0]=HEAP8[$952+2>>0]|0;HEAP8[$$byval_copy57+3>>0]=HEAP8[$952+3>>0]|0;
 _nk_style_item_color($140,$$byval_copy57);
 ;HEAP32[$950>>2]=HEAP32[$140>>2]|0;HEAP32[$950+4>>2]=HEAP32[$140+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[$140+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[$140+12>>2]|0;HEAP32[$950+16>>2]=HEAP32[$140+16>>2]|0;
 $953 = $12;
 $954 = ((($953)) + 60|0);
 _nk_rgba($141,0,0,0,0);
 ;HEAP8[$954>>0]=HEAP8[$141>>0]|0;HEAP8[$954+1>>0]=HEAP8[$141+1>>0]|0;HEAP8[$954+2>>0]=HEAP8[$141+2>>0]|0;HEAP8[$954+3>>0]=HEAP8[$141+3>>0]|0;
 $955 = $12;
 $956 = ((($955)) + 496|0);
 $957 = $3;
 ;HEAP8[$956>>0]=HEAP8[$957>>0]|0;HEAP8[$956+1>>0]=HEAP8[$957+1>>0]|0;HEAP8[$956+2>>0]=HEAP8[$957+2>>0]|0;HEAP8[$956+3>>0]=HEAP8[$957+3>>0]|0;
 $958 = $12;
 $959 = ((($958)) + 500|0);
 $960 = $3;
 ;HEAP8[$959>>0]=HEAP8[$960>>0]|0;HEAP8[$959+1>>0]=HEAP8[$960+1>>0]|0;HEAP8[$959+2>>0]=HEAP8[$960+2>>0]|0;HEAP8[$959+3>>0]=HEAP8[$960+3>>0]|0;
 $961 = $12;
 $962 = ((($961)) + 504|0);
 $963 = $3;
 $964 = ((($963)) + 68|0);
 ;HEAP8[$962>>0]=HEAP8[$964>>0]|0;HEAP8[$962+1>>0]=HEAP8[$964+1>>0]|0;HEAP8[$962+2>>0]=HEAP8[$964+2>>0]|0;HEAP8[$962+3>>0]=HEAP8[$964+3>>0]|0;
 $965 = $12;
 $966 = ((($965)) + 508|0);
 $967 = $3;
 $968 = ((($967)) + 68|0);
 ;HEAP8[$966>>0]=HEAP8[$968>>0]|0;HEAP8[$966+1>>0]=HEAP8[$968+1>>0]|0;HEAP8[$966+2>>0]=HEAP8[$968+2>>0]|0;HEAP8[$966+3>>0]=HEAP8[$968+3>>0]|0;
 $969 = $12;
 $970 = ((($969)) + 512|0);
 $971 = $3;
 ;HEAP8[$970>>0]=HEAP8[$971>>0]|0;HEAP8[$970+1>>0]=HEAP8[$971+1>>0]|0;HEAP8[$970+2>>0]=HEAP8[$971+2>>0]|0;HEAP8[$970+3>>0]=HEAP8[$971+3>>0]|0;
 $972 = $12;
 $973 = ((($972)) + 516|0);
 $974 = $3;
 ;HEAP8[$973>>0]=HEAP8[$974>>0]|0;HEAP8[$973+1>>0]=HEAP8[$974+1>>0]|0;HEAP8[$973+2>>0]=HEAP8[$974+2>>0]|0;HEAP8[$973+3>>0]=HEAP8[$974+3>>0]|0;
 $975 = $12;
 $976 = ((($975)) + 520|0);
 $977 = $3;
 ;HEAP8[$976>>0]=HEAP8[$977>>0]|0;HEAP8[$976+1>>0]=HEAP8[$977+1>>0]|0;HEAP8[$976+2>>0]=HEAP8[$977+2>>0]|0;HEAP8[$976+3>>0]=HEAP8[$977+3>>0]|0;
 $978 = $12;
 $979 = ((($978)) + 524|0);
 $980 = $3;
 ;HEAP8[$979>>0]=HEAP8[$980>>0]|0;HEAP8[$979+1>>0]=HEAP8[$980+1>>0]|0;HEAP8[$979+2>>0]=HEAP8[$980+2>>0]|0;HEAP8[$979+3>>0]=HEAP8[$980+3>>0]|0;
 $981 = $12;
 $982 = ((($981)) + 528|0);
 $983 = $3;
 ;HEAP8[$982>>0]=HEAP8[$983>>0]|0;HEAP8[$982+1>>0]=HEAP8[$983+1>>0]|0;HEAP8[$982+2>>0]=HEAP8[$983+2>>0]|0;HEAP8[$982+3>>0]=HEAP8[$983+3>>0]|0;
 $984 = $12;
 $985 = ((($984)) + 532|0);
 $986 = $3;
 $987 = ((($986)) + 68|0);
 ;HEAP8[$985>>0]=HEAP8[$987>>0]|0;HEAP8[$985+1>>0]=HEAP8[$987+1>>0]|0;HEAP8[$985+2>>0]=HEAP8[$987+2>>0]|0;HEAP8[$985+3>>0]=HEAP8[$987+3>>0]|0;
 $988 = $12;
 $989 = ((($988)) + 536|0);
 $990 = $3;
 $991 = ((($990)) + 68|0);
 ;HEAP8[$989>>0]=HEAP8[$991>>0]|0;HEAP8[$989+1>>0]=HEAP8[$991+1>>0]|0;HEAP8[$989+2>>0]=HEAP8[$991+2>>0]|0;HEAP8[$989+3>>0]=HEAP8[$991+3>>0]|0;
 $992 = $12;
 $993 = ((($992)) + 560|0);
 _nk_vec2($142,0.0,0.0);
 ;HEAP32[$993>>2]=HEAP32[$142>>2]|0;HEAP32[$993+4>>2]=HEAP32[$142+4>>2]|0;
 $994 = $12;
 $995 = ((($994)) + 548|0);
 HEAPF32[$995>>2] = 8.0;
 $996 = $12;
 $997 = ((($996)) + 540|0);
 HEAPF32[$997>>2] = 0.0;
 $998 = $12;
 $999 = ((($998)) + 544|0);
 HEAPF32[$999>>2] = 0.0;
 $1000 = $4;
 $1001 = ((($1000)) + 3084|0);
 $15 = $1001;
 $1002 = $15;
 _nk_zero($1002,48);
 $1003 = $15;
 $1004 = $3;
 $1005 = ((($1004)) + 80|0);
 ;HEAP8[$$byval_copy58>>0]=HEAP8[$1005>>0]|0;HEAP8[$$byval_copy58+1>>0]=HEAP8[$1005+1>>0]|0;HEAP8[$$byval_copy58+2>>0]=HEAP8[$1005+2>>0]|0;HEAP8[$$byval_copy58+3>>0]=HEAP8[$1005+3>>0]|0;
 _nk_style_item_color($143,$$byval_copy58);
 ;HEAP32[$1003>>2]=HEAP32[$143>>2]|0;HEAP32[$1003+4>>2]=HEAP32[$143+4>>2]|0;HEAP32[$1003+8>>2]=HEAP32[$143+8>>2]|0;HEAP32[$1003+12>>2]=HEAP32[$143+12>>2]|0;HEAP32[$1003+16>>2]=HEAP32[$143+16>>2]|0;
 $1006 = $15;
 $1007 = ((($1006)) + 20|0);
 $1008 = $3;
 $1009 = ((($1008)) + 12|0);
 ;HEAP8[$1007>>0]=HEAP8[$1009>>0]|0;HEAP8[$1007+1>>0]=HEAP8[$1009+1>>0]|0;HEAP8[$1007+2>>0]=HEAP8[$1009+2>>0]|0;HEAP8[$1007+3>>0]=HEAP8[$1009+3>>0]|0;
 $1010 = $15;
 $1011 = ((($1010)) + 24|0);
 $1012 = $3;
 $1013 = ((($1012)) + 88|0);
 ;HEAP8[$1011>>0]=HEAP8[$1013>>0]|0;HEAP8[$1011+1>>0]=HEAP8[$1013+1>>0]|0;HEAP8[$1011+2>>0]=HEAP8[$1013+2>>0]|0;HEAP8[$1011+3>>0]=HEAP8[$1013+3>>0]|0;
 $1014 = $15;
 $1015 = ((($1014)) + 28|0);
 $1016 = $3;
 $1017 = ((($1016)) + 84|0);
 ;HEAP8[$1015>>0]=HEAP8[$1017>>0]|0;HEAP8[$1015+1>>0]=HEAP8[$1017+1>>0]|0;HEAP8[$1015+2>>0]=HEAP8[$1017+2>>0]|0;HEAP8[$1015+3>>0]=HEAP8[$1017+3>>0]|0;
 $1018 = $15;
 $1019 = ((($1018)) + 40|0);
 _nk_vec2($144,4.0,4.0);
 ;HEAP32[$1019>>2]=HEAP32[$144>>2]|0;HEAP32[$1019+4>>2]=HEAP32[$144+4>>2]|0;
 $1020 = $15;
 $1021 = ((($1020)) + 32|0);
 HEAPF32[$1021>>2] = 0.0;
 $1022 = $15;
 $1023 = ((($1022)) + 36|0);
 HEAPF32[$1023>>2] = 0.0;
 $1024 = $4;
 $1025 = ((($1024)) + 4572|0);
 $14 = $1025;
 $1026 = $14;
 $1027 = $3;
 $1028 = ((($1027)) + 76|0);
 ;HEAP8[$$byval_copy59>>0]=HEAP8[$1028>>0]|0;HEAP8[$$byval_copy59+1>>0]=HEAP8[$1028+1>>0]|0;HEAP8[$$byval_copy59+2>>0]=HEAP8[$1028+2>>0]|0;HEAP8[$$byval_copy59+3>>0]=HEAP8[$1028+3>>0]|0;
 _nk_style_item_color($145,$$byval_copy59);
 ;HEAP32[$1026>>2]=HEAP32[$145>>2]|0;HEAP32[$1026+4>>2]=HEAP32[$145+4>>2]|0;HEAP32[$1026+8>>2]=HEAP32[$145+8>>2]|0;HEAP32[$1026+12>>2]=HEAP32[$145+12>>2]|0;HEAP32[$1026+16>>2]=HEAP32[$145+16>>2]|0;
 $1029 = $14;
 $1030 = ((($1029)) + 20|0);
 $1031 = $3;
 $1032 = ((($1031)) + 76|0);
 ;HEAP8[$$byval_copy60>>0]=HEAP8[$1032>>0]|0;HEAP8[$$byval_copy60+1>>0]=HEAP8[$1032+1>>0]|0;HEAP8[$$byval_copy60+2>>0]=HEAP8[$1032+2>>0]|0;HEAP8[$$byval_copy60+3>>0]=HEAP8[$1032+3>>0]|0;
 _nk_style_item_color($146,$$byval_copy60);
 ;HEAP32[$1030>>2]=HEAP32[$146>>2]|0;HEAP32[$1030+4>>2]=HEAP32[$146+4>>2]|0;HEAP32[$1030+8>>2]=HEAP32[$146+8>>2]|0;HEAP32[$1030+12>>2]=HEAP32[$146+12>>2]|0;HEAP32[$1030+16>>2]=HEAP32[$146+16>>2]|0;
 $1033 = $14;
 $1034 = ((($1033)) + 40|0);
 $1035 = $3;
 $1036 = ((($1035)) + 76|0);
 ;HEAP8[$$byval_copy61>>0]=HEAP8[$1036>>0]|0;HEAP8[$$byval_copy61+1>>0]=HEAP8[$1036+1>>0]|0;HEAP8[$$byval_copy61+2>>0]=HEAP8[$1036+2>>0]|0;HEAP8[$$byval_copy61+3>>0]=HEAP8[$1036+3>>0]|0;
 _nk_style_item_color($147,$$byval_copy61);
 ;HEAP32[$1034>>2]=HEAP32[$147>>2]|0;HEAP32[$1034+4>>2]=HEAP32[$147+4>>2]|0;HEAP32[$1034+8>>2]=HEAP32[$147+8>>2]|0;HEAP32[$1034+12>>2]=HEAP32[$147+12>>2]|0;HEAP32[$1034+16>>2]=HEAP32[$147+16>>2]|0;
 $1037 = $14;
 $1038 = ((($1037)) + 60|0);
 $1039 = $3;
 $1040 = ((($1039)) + 12|0);
 ;HEAP8[$1038>>0]=HEAP8[$1040>>0]|0;HEAP8[$1038+1>>0]=HEAP8[$1040+1>>0]|0;HEAP8[$1038+2>>0]=HEAP8[$1040+2>>0]|0;HEAP8[$1038+3>>0]=HEAP8[$1040+3>>0]|0;
 $1041 = $14;
 $1042 = ((($1041)) + 64|0);
 $1043 = $3;
 ;HEAP8[$1042>>0]=HEAP8[$1043>>0]|0;HEAP8[$1042+1>>0]=HEAP8[$1043+1>>0]|0;HEAP8[$1042+2>>0]=HEAP8[$1043+2>>0]|0;HEAP8[$1042+3>>0]=HEAP8[$1043+3>>0]|0;
 $1044 = $14;
 $1045 = ((($1044)) + 68|0);
 $1046 = $3;
 ;HEAP8[$1045>>0]=HEAP8[$1046>>0]|0;HEAP8[$1045+1>>0]=HEAP8[$1046+1>>0]|0;HEAP8[$1045+2>>0]=HEAP8[$1046+2>>0]|0;HEAP8[$1045+3>>0]=HEAP8[$1046+3>>0]|0;
 $1047 = $14;
 $1048 = ((($1047)) + 72|0);
 $1049 = $3;
 ;HEAP8[$1048>>0]=HEAP8[$1049>>0]|0;HEAP8[$1048+1>>0]=HEAP8[$1049+1>>0]|0;HEAP8[$1048+2>>0]=HEAP8[$1049+2>>0]|0;HEAP8[$1048+3>>0]=HEAP8[$1049+3>>0]|0;
 $1050 = $14;
 $1051 = ((($1050)) + 216|0);
 HEAP32[$1051>>2] = 8;
 $1052 = $14;
 $1053 = ((($1052)) + 220|0);
 HEAP32[$1053>>2] = 8;
 $1054 = $14;
 $1055 = ((($1054)) + 224|0);
 HEAP32[$1055>>2] = 8;
 $1056 = $14;
 $1057 = ((($1056)) + 236|0);
 _nk_vec2($148,4.0,4.0);
 ;HEAP32[$1057>>2]=HEAP32[$148>>2]|0;HEAP32[$1057+4>>2]=HEAP32[$148+4>>2]|0;
 $1058 = $14;
 $1059 = ((($1058)) + 244|0);
 _nk_vec2($149,0.0,4.0);
 ;HEAP32[$1059>>2]=HEAP32[$149>>2]|0;HEAP32[$1059+4>>2]=HEAP32[$149+4>>2]|0;
 $1060 = $14;
 $1061 = ((($1060)) + 252|0);
 _nk_vec2($150,4.0,0.0);
 ;HEAP32[$1061>>2]=HEAP32[$150>>2]|0;HEAP32[$1061+4>>2]=HEAP32[$150+4>>2]|0;
 $1062 = $14;
 $1063 = ((($1062)) + 228|0);
 HEAPF32[$1063>>2] = 1.0;
 $1064 = $14;
 $1065 = ((($1064)) + 232|0);
 HEAPF32[$1065>>2] = 0.0;
 $1066 = $4;
 $1067 = ((($1066)) + 4572|0);
 $1068 = ((($1067)) + 88|0);
 $6 = $1068;
 $1069 = $6;
 _nk_zero($1069,128);
 $1070 = $6;
 $1071 = $3;
 $1072 = ((($1071)) + 76|0);
 ;HEAP8[$$byval_copy62>>0]=HEAP8[$1072>>0]|0;HEAP8[$$byval_copy62+1>>0]=HEAP8[$1072+1>>0]|0;HEAP8[$$byval_copy62+2>>0]=HEAP8[$1072+2>>0]|0;HEAP8[$$byval_copy62+3>>0]=HEAP8[$1072+3>>0]|0;
 _nk_style_item_color($151,$$byval_copy62);
 ;HEAP32[$1070>>2]=HEAP32[$151>>2]|0;HEAP32[$1070+4>>2]=HEAP32[$151+4>>2]|0;HEAP32[$1070+8>>2]=HEAP32[$151+8>>2]|0;HEAP32[$1070+12>>2]=HEAP32[$151+12>>2]|0;HEAP32[$1070+16>>2]=HEAP32[$151+16>>2]|0;
 $1073 = $6;
 $1074 = ((($1073)) + 20|0);
 $1075 = $3;
 $1076 = ((($1075)) + 76|0);
 ;HEAP8[$$byval_copy63>>0]=HEAP8[$1076>>0]|0;HEAP8[$$byval_copy63+1>>0]=HEAP8[$1076+1>>0]|0;HEAP8[$$byval_copy63+2>>0]=HEAP8[$1076+2>>0]|0;HEAP8[$$byval_copy63+3>>0]=HEAP8[$1076+3>>0]|0;
 _nk_style_item_color($152,$$byval_copy63);
 ;HEAP32[$1074>>2]=HEAP32[$152>>2]|0;HEAP32[$1074+4>>2]=HEAP32[$152+4>>2]|0;HEAP32[$1074+8>>2]=HEAP32[$152+8>>2]|0;HEAP32[$1074+12>>2]=HEAP32[$152+12>>2]|0;HEAP32[$1074+16>>2]=HEAP32[$152+16>>2]|0;
 $1077 = $6;
 $1078 = ((($1077)) + 40|0);
 $1079 = $3;
 $1080 = ((($1079)) + 76|0);
 ;HEAP8[$$byval_copy64>>0]=HEAP8[$1080>>0]|0;HEAP8[$$byval_copy64+1>>0]=HEAP8[$1080+1>>0]|0;HEAP8[$$byval_copy64+2>>0]=HEAP8[$1080+2>>0]|0;HEAP8[$$byval_copy64+3>>0]=HEAP8[$1080+3>>0]|0;
 _nk_style_item_color($153,$$byval_copy64);
 ;HEAP32[$1078>>2]=HEAP32[$153>>2]|0;HEAP32[$1078+4>>2]=HEAP32[$153+4>>2]|0;HEAP32[$1078+8>>2]=HEAP32[$153+8>>2]|0;HEAP32[$1078+12>>2]=HEAP32[$153+12>>2]|0;HEAP32[$1078+16>>2]=HEAP32[$153+16>>2]|0;
 $1081 = $6;
 $1082 = ((($1081)) + 60|0);
 _nk_rgba($154,0,0,0,0);
 ;HEAP8[$1082>>0]=HEAP8[$154>>0]|0;HEAP8[$1082+1>>0]=HEAP8[$154+1>>0]|0;HEAP8[$1082+2>>0]=HEAP8[$154+2>>0]|0;HEAP8[$1082+3>>0]=HEAP8[$154+3>>0]|0;
 $1083 = $6;
 $1084 = ((($1083)) + 64|0);
 $1085 = $3;
 $1086 = ((($1085)) + 76|0);
 ;HEAP8[$1084>>0]=HEAP8[$1086>>0]|0;HEAP8[$1084+1>>0]=HEAP8[$1086+1>>0]|0;HEAP8[$1084+2>>0]=HEAP8[$1086+2>>0]|0;HEAP8[$1084+3>>0]=HEAP8[$1086+3>>0]|0;
 $1087 = $6;
 $1088 = ((($1087)) + 68|0);
 $1089 = $3;
 ;HEAP8[$1088>>0]=HEAP8[$1089>>0]|0;HEAP8[$1088+1>>0]=HEAP8[$1089+1>>0]|0;HEAP8[$1088+2>>0]=HEAP8[$1089+2>>0]|0;HEAP8[$1088+3>>0]=HEAP8[$1089+3>>0]|0;
 $1090 = $6;
 $1091 = ((($1090)) + 72|0);
 $1092 = $3;
 ;HEAP8[$1091>>0]=HEAP8[$1092>>0]|0;HEAP8[$1091+1>>0]=HEAP8[$1092+1>>0]|0;HEAP8[$1091+2>>0]=HEAP8[$1092+2>>0]|0;HEAP8[$1091+3>>0]=HEAP8[$1092+3>>0]|0;
 $1093 = $6;
 $1094 = ((($1093)) + 76|0);
 $1095 = $3;
 ;HEAP8[$1094>>0]=HEAP8[$1095>>0]|0;HEAP8[$1094+1>>0]=HEAP8[$1095+1>>0]|0;HEAP8[$1094+2>>0]=HEAP8[$1095+2>>0]|0;HEAP8[$1094+3>>0]=HEAP8[$1095+3>>0]|0;
 $1096 = $6;
 $1097 = ((($1096)) + 92|0);
 _nk_vec2($155,2.0,2.0);
 ;HEAP32[$1097>>2]=HEAP32[$155>>2]|0;HEAP32[$1097+4>>2]=HEAP32[$155+4>>2]|0;
 $1098 = $6;
 $1099 = ((($1098)) + 108|0);
 _nk_vec2($156,0.0,0.0);
 ;HEAP32[$1099>>2]=HEAP32[$156>>2]|0;HEAP32[$1099+4>>2]=HEAP32[$156+4>>2]|0;
 $1100 = $6;
 $1101 = ((($1100)) + 116|0);
 _nk_handle_ptr($157,0);
 ;HEAP32[$1101>>2]=HEAP32[$157>>2]|0;
 $1102 = $6;
 $1103 = ((($1102)) + 80|0);
 HEAP32[$1103>>2] = 18;
 $1104 = $6;
 $1105 = ((($1104)) + 84|0);
 HEAPF32[$1105>>2] = 0.0;
 $1106 = $6;
 $1107 = ((($1106)) + 88|0);
 HEAPF32[$1107>>2] = 0.0;
 $1108 = $6;
 $1109 = ((($1108)) + 120|0);
 HEAP32[$1109>>2] = 0;
 $1110 = $6;
 $1111 = ((($1110)) + 124|0);
 HEAP32[$1111>>2] = 0;
 $1112 = $4;
 $1113 = ((($1112)) + 3996|0);
 $16 = $1113;
 $1114 = $16;
 $1115 = $3;
 $1116 = ((($1115)) + 108|0);
 ;HEAP8[$$byval_copy65>>0]=HEAP8[$1116>>0]|0;HEAP8[$$byval_copy65+1>>0]=HEAP8[$1116+1>>0]|0;HEAP8[$$byval_copy65+2>>0]=HEAP8[$1116+2>>0]|0;HEAP8[$$byval_copy65+3>>0]=HEAP8[$1116+3>>0]|0;
 _nk_style_item_color($158,$$byval_copy65);
 ;HEAP32[$1114>>2]=HEAP32[$158>>2]|0;HEAP32[$1114+4>>2]=HEAP32[$158+4>>2]|0;HEAP32[$1114+8>>2]=HEAP32[$158+8>>2]|0;HEAP32[$1114+12>>2]=HEAP32[$158+12>>2]|0;HEAP32[$1114+16>>2]=HEAP32[$158+16>>2]|0;
 $1117 = $16;
 $1118 = ((($1117)) + 20|0);
 $1119 = $3;
 $1120 = ((($1119)) + 12|0);
 ;HEAP8[$1118>>0]=HEAP8[$1120>>0]|0;HEAP8[$1118+1>>0]=HEAP8[$1120+1>>0]|0;HEAP8[$1118+2>>0]=HEAP8[$1120+2>>0]|0;HEAP8[$1118+3>>0]=HEAP8[$1120+3>>0]|0;
 $1121 = $16;
 $1122 = ((($1121)) + 24|0);
 $1123 = $3;
 ;HEAP8[$1122>>0]=HEAP8[$1123>>0]|0;HEAP8[$1122+1>>0]=HEAP8[$1123+1>>0]|0;HEAP8[$1122+2>>0]=HEAP8[$1123+2>>0]|0;HEAP8[$1122+3>>0]=HEAP8[$1123+3>>0]|0;
 $1124 = $16;
 $1125 = ((($1124)) + 540|0);
 HEAP32[$1125>>2] = 10;
 $1126 = $16;
 $1127 = ((($1126)) + 544|0);
 HEAP32[$1127>>2] = 8;
 $1128 = $16;
 $1129 = ((($1128)) + 560|0);
 _nk_vec2($159,4.0,4.0);
 ;HEAP32[$1129>>2]=HEAP32[$159>>2]|0;HEAP32[$1129+4>>2]=HEAP32[$159+4>>2]|0;
 $1130 = $16;
 $1131 = ((($1130)) + 568|0);
 _nk_vec2($160,4.0,4.0);
 ;HEAP32[$1131>>2]=HEAP32[$160>>2]|0;HEAP32[$1131+4>>2]=HEAP32[$160+4>>2]|0;
 $1132 = $16;
 $1133 = ((($1132)) + 556|0);
 HEAPF32[$1133>>2] = 10.0;
 $1134 = $16;
 $1135 = ((($1134)) + 548|0);
 HEAPF32[$1135>>2] = 1.0;
 $1136 = $16;
 $1137 = ((($1136)) + 552|0);
 HEAPF32[$1137>>2] = 0.0;
 $1138 = $4;
 $1139 = ((($1138)) + 3996|0);
 $1140 = ((($1139)) + 156|0);
 $6 = $1140;
 $1141 = $6;
 _nk_zero($1141,128);
 $1142 = $6;
 $1143 = $3;
 $1144 = ((($1143)) + 108|0);
 ;HEAP8[$$byval_copy66>>0]=HEAP8[$1144>>0]|0;HEAP8[$$byval_copy66+1>>0]=HEAP8[$1144+1>>0]|0;HEAP8[$$byval_copy66+2>>0]=HEAP8[$1144+2>>0]|0;HEAP8[$$byval_copy66+3>>0]=HEAP8[$1144+3>>0]|0;
 _nk_style_item_color($161,$$byval_copy66);
 ;HEAP32[$1142>>2]=HEAP32[$161>>2]|0;HEAP32[$1142+4>>2]=HEAP32[$161+4>>2]|0;HEAP32[$1142+8>>2]=HEAP32[$161+8>>2]|0;HEAP32[$1142+12>>2]=HEAP32[$161+12>>2]|0;HEAP32[$1142+16>>2]=HEAP32[$161+16>>2]|0;
 $1145 = $6;
 $1146 = ((($1145)) + 20|0);
 $1147 = $3;
 $1148 = ((($1147)) + 108|0);
 ;HEAP8[$$byval_copy67>>0]=HEAP8[$1148>>0]|0;HEAP8[$$byval_copy67+1>>0]=HEAP8[$1148+1>>0]|0;HEAP8[$$byval_copy67+2>>0]=HEAP8[$1148+2>>0]|0;HEAP8[$$byval_copy67+3>>0]=HEAP8[$1148+3>>0]|0;
 _nk_style_item_color($162,$$byval_copy67);
 ;HEAP32[$1146>>2]=HEAP32[$162>>2]|0;HEAP32[$1146+4>>2]=HEAP32[$162+4>>2]|0;HEAP32[$1146+8>>2]=HEAP32[$162+8>>2]|0;HEAP32[$1146+12>>2]=HEAP32[$162+12>>2]|0;HEAP32[$1146+16>>2]=HEAP32[$162+16>>2]|0;
 $1149 = $6;
 $1150 = ((($1149)) + 40|0);
 $1151 = $3;
 $1152 = ((($1151)) + 108|0);
 ;HEAP8[$$byval_copy68>>0]=HEAP8[$1152>>0]|0;HEAP8[$$byval_copy68+1>>0]=HEAP8[$1152+1>>0]|0;HEAP8[$$byval_copy68+2>>0]=HEAP8[$1152+2>>0]|0;HEAP8[$$byval_copy68+3>>0]=HEAP8[$1152+3>>0]|0;
 _nk_style_item_color($163,$$byval_copy68);
 ;HEAP32[$1150>>2]=HEAP32[$163>>2]|0;HEAP32[$1150+4>>2]=HEAP32[$163+4>>2]|0;HEAP32[$1150+8>>2]=HEAP32[$163+8>>2]|0;HEAP32[$1150+12>>2]=HEAP32[$163+12>>2]|0;HEAP32[$1150+16>>2]=HEAP32[$163+16>>2]|0;
 $1153 = $6;
 $1154 = ((($1153)) + 60|0);
 _nk_rgba($164,0,0,0,0);
 ;HEAP8[$1154>>0]=HEAP8[$164>>0]|0;HEAP8[$1154+1>>0]=HEAP8[$164+1>>0]|0;HEAP8[$1154+2>>0]=HEAP8[$164+2>>0]|0;HEAP8[$1154+3>>0]=HEAP8[$164+3>>0]|0;
 $1155 = $6;
 $1156 = ((($1155)) + 64|0);
 $1157 = $3;
 $1158 = ((($1157)) + 108|0);
 ;HEAP8[$1156>>0]=HEAP8[$1158>>0]|0;HEAP8[$1156+1>>0]=HEAP8[$1158+1>>0]|0;HEAP8[$1156+2>>0]=HEAP8[$1158+2>>0]|0;HEAP8[$1156+3>>0]=HEAP8[$1158+3>>0]|0;
 $1159 = $6;
 $1160 = ((($1159)) + 68|0);
 $1161 = $3;
 ;HEAP8[$1160>>0]=HEAP8[$1161>>0]|0;HEAP8[$1160+1>>0]=HEAP8[$1161+1>>0]|0;HEAP8[$1160+2>>0]=HEAP8[$1161+2>>0]|0;HEAP8[$1160+3>>0]=HEAP8[$1161+3>>0]|0;
 $1162 = $6;
 $1163 = ((($1162)) + 72|0);
 $1164 = $3;
 ;HEAP8[$1163>>0]=HEAP8[$1164>>0]|0;HEAP8[$1163+1>>0]=HEAP8[$1164+1>>0]|0;HEAP8[$1163+2>>0]=HEAP8[$1164+2>>0]|0;HEAP8[$1163+3>>0]=HEAP8[$1164+3>>0]|0;
 $1165 = $6;
 $1166 = ((($1165)) + 76|0);
 $1167 = $3;
 ;HEAP8[$1166>>0]=HEAP8[$1167>>0]|0;HEAP8[$1166+1>>0]=HEAP8[$1167+1>>0]|0;HEAP8[$1166+2>>0]=HEAP8[$1167+2>>0]|0;HEAP8[$1166+3>>0]=HEAP8[$1167+3>>0]|0;
 $1168 = $6;
 $1169 = ((($1168)) + 92|0);
 _nk_vec2($165,2.0,2.0);
 ;HEAP32[$1169>>2]=HEAP32[$165>>2]|0;HEAP32[$1169+4>>2]=HEAP32[$165+4>>2]|0;
 $1170 = $6;
 $1171 = ((($1170)) + 108|0);
 _nk_vec2($166,0.0,0.0);
 ;HEAP32[$1171>>2]=HEAP32[$166>>2]|0;HEAP32[$1171+4>>2]=HEAP32[$166+4>>2]|0;
 $1172 = $6;
 $1173 = ((($1172)) + 116|0);
 _nk_handle_ptr($167,0);
 ;HEAP32[$1173>>2]=HEAP32[$167>>2]|0;
 $1174 = $6;
 $1175 = ((($1174)) + 80|0);
 HEAP32[$1175>>2] = 18;
 $1176 = $6;
 $1177 = ((($1176)) + 84|0);
 HEAPF32[$1177>>2] = 0.0;
 $1178 = $6;
 $1179 = ((($1178)) + 88|0);
 HEAPF32[$1179>>2] = 0.0;
 $1180 = $6;
 $1181 = ((($1180)) + 120|0);
 HEAP32[$1181>>2] = 0;
 $1182 = $6;
 $1183 = ((($1182)) + 124|0);
 HEAP32[$1183>>2] = 0;
 $1184 = $4;
 $1185 = ((($1184)) + 3996|0);
 $1186 = ((($1185)) + 28|0);
 $1187 = $6;
 dest=$1186; src=$1187; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $1188 = $4;
 $1189 = ((($1188)) + 3996|0);
 $1190 = ((($1189)) + 412|0);
 $6 = $1190;
 $1191 = $6;
 _nk_zero($1191,128);
 $1192 = $6;
 $1193 = $3;
 $1194 = ((($1193)) + 4|0);
 ;HEAP8[$$byval_copy69>>0]=HEAP8[$1194>>0]|0;HEAP8[$$byval_copy69+1>>0]=HEAP8[$1194+1>>0]|0;HEAP8[$$byval_copy69+2>>0]=HEAP8[$1194+2>>0]|0;HEAP8[$$byval_copy69+3>>0]=HEAP8[$1194+3>>0]|0;
 _nk_style_item_color($168,$$byval_copy69);
 ;HEAP32[$1192>>2]=HEAP32[$168>>2]|0;HEAP32[$1192+4>>2]=HEAP32[$168+4>>2]|0;HEAP32[$1192+8>>2]=HEAP32[$168+8>>2]|0;HEAP32[$1192+12>>2]=HEAP32[$168+12>>2]|0;HEAP32[$1192+16>>2]=HEAP32[$168+16>>2]|0;
 $1195 = $6;
 $1196 = ((($1195)) + 20|0);
 $1197 = $3;
 $1198 = ((($1197)) + 4|0);
 ;HEAP8[$$byval_copy70>>0]=HEAP8[$1198>>0]|0;HEAP8[$$byval_copy70+1>>0]=HEAP8[$1198+1>>0]|0;HEAP8[$$byval_copy70+2>>0]=HEAP8[$1198+2>>0]|0;HEAP8[$$byval_copy70+3>>0]=HEAP8[$1198+3>>0]|0;
 _nk_style_item_color($169,$$byval_copy70);
 ;HEAP32[$1196>>2]=HEAP32[$169>>2]|0;HEAP32[$1196+4>>2]=HEAP32[$169+4>>2]|0;HEAP32[$1196+8>>2]=HEAP32[$169+8>>2]|0;HEAP32[$1196+12>>2]=HEAP32[$169+12>>2]|0;HEAP32[$1196+16>>2]=HEAP32[$169+16>>2]|0;
 $1199 = $6;
 $1200 = ((($1199)) + 40|0);
 $1201 = $3;
 $1202 = ((($1201)) + 4|0);
 ;HEAP8[$$byval_copy71>>0]=HEAP8[$1202>>0]|0;HEAP8[$$byval_copy71+1>>0]=HEAP8[$1202+1>>0]|0;HEAP8[$$byval_copy71+2>>0]=HEAP8[$1202+2>>0]|0;HEAP8[$$byval_copy71+3>>0]=HEAP8[$1202+3>>0]|0;
 _nk_style_item_color($170,$$byval_copy71);
 ;HEAP32[$1200>>2]=HEAP32[$170>>2]|0;HEAP32[$1200+4>>2]=HEAP32[$170+4>>2]|0;HEAP32[$1200+8>>2]=HEAP32[$170+8>>2]|0;HEAP32[$1200+12>>2]=HEAP32[$170+12>>2]|0;HEAP32[$1200+16>>2]=HEAP32[$170+16>>2]|0;
 $1203 = $6;
 $1204 = ((($1203)) + 60|0);
 _nk_rgba($171,0,0,0,0);
 ;HEAP8[$1204>>0]=HEAP8[$171>>0]|0;HEAP8[$1204+1>>0]=HEAP8[$171+1>>0]|0;HEAP8[$1204+2>>0]=HEAP8[$171+2>>0]|0;HEAP8[$1204+3>>0]=HEAP8[$171+3>>0]|0;
 $1205 = $6;
 $1206 = ((($1205)) + 64|0);
 $1207 = $3;
 $1208 = ((($1207)) + 108|0);
 ;HEAP8[$1206>>0]=HEAP8[$1208>>0]|0;HEAP8[$1206+1>>0]=HEAP8[$1208+1>>0]|0;HEAP8[$1206+2>>0]=HEAP8[$1208+2>>0]|0;HEAP8[$1206+3>>0]=HEAP8[$1208+3>>0]|0;
 $1209 = $6;
 $1210 = ((($1209)) + 68|0);
 $1211 = $3;
 ;HEAP8[$1210>>0]=HEAP8[$1211>>0]|0;HEAP8[$1210+1>>0]=HEAP8[$1211+1>>0]|0;HEAP8[$1210+2>>0]=HEAP8[$1211+2>>0]|0;HEAP8[$1210+3>>0]=HEAP8[$1211+3>>0]|0;
 $1212 = $6;
 $1213 = ((($1212)) + 72|0);
 $1214 = $3;
 ;HEAP8[$1213>>0]=HEAP8[$1214>>0]|0;HEAP8[$1213+1>>0]=HEAP8[$1214+1>>0]|0;HEAP8[$1213+2>>0]=HEAP8[$1214+2>>0]|0;HEAP8[$1213+3>>0]=HEAP8[$1214+3>>0]|0;
 $1215 = $6;
 $1216 = ((($1215)) + 76|0);
 $1217 = $3;
 ;HEAP8[$1216>>0]=HEAP8[$1217>>0]|0;HEAP8[$1216+1>>0]=HEAP8[$1217+1>>0]|0;HEAP8[$1216+2>>0]=HEAP8[$1217+2>>0]|0;HEAP8[$1216+3>>0]=HEAP8[$1217+3>>0]|0;
 $1218 = $6;
 $1219 = ((($1218)) + 92|0);
 _nk_vec2($172,2.0,2.0);
 ;HEAP32[$1219>>2]=HEAP32[$172>>2]|0;HEAP32[$1219+4>>2]=HEAP32[$172+4>>2]|0;
 $1220 = $6;
 $1221 = ((($1220)) + 108|0);
 _nk_vec2($173,0.0,0.0);
 ;HEAP32[$1221>>2]=HEAP32[$173>>2]|0;HEAP32[$1221+4>>2]=HEAP32[$173+4>>2]|0;
 $1222 = $6;
 $1223 = ((($1222)) + 116|0);
 _nk_handle_ptr($174,0);
 ;HEAP32[$1223>>2]=HEAP32[$174>>2]|0;
 $1224 = $6;
 $1225 = ((($1224)) + 80|0);
 HEAP32[$1225>>2] = 18;
 $1226 = $6;
 $1227 = ((($1226)) + 84|0);
 HEAPF32[$1227>>2] = 0.0;
 $1228 = $6;
 $1229 = ((($1228)) + 88|0);
 HEAPF32[$1229>>2] = 0.0;
 $1230 = $6;
 $1231 = ((($1230)) + 120|0);
 HEAP32[$1231>>2] = 0;
 $1232 = $6;
 $1233 = ((($1232)) + 124|0);
 HEAP32[$1233>>2] = 0;
 $1234 = $4;
 $1235 = ((($1234)) + 3996|0);
 $1236 = ((($1235)) + 284|0);
 $1237 = $6;
 dest=$1236; src=$1237; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $1238 = $4;
 $1239 = ((($1238)) + 4832|0);
 $17 = $1239;
 $1240 = $17;
 $1241 = ((($1240)) + 340|0);
 HEAP32[$1241>>2] = 1;
 $1242 = $17;
 $1243 = ((($1242)) + 316|0);
 HEAP32[$1243>>2] = 1;
 $1244 = $17;
 $1245 = ((($1244)) + 320|0);
 HEAP32[$1245>>2] = 12;
 $1246 = $17;
 $1247 = ((($1246)) + 324|0);
 HEAP32[$1247>>2] = 11;
 $1248 = $17;
 $1249 = $3;
 $1250 = ((($1249)) + 8|0);
 ;HEAP8[$$byval_copy72>>0]=HEAP8[$1250>>0]|0;HEAP8[$$byval_copy72+1>>0]=HEAP8[$1250+1>>0]|0;HEAP8[$$byval_copy72+2>>0]=HEAP8[$1250+2>>0]|0;HEAP8[$$byval_copy72+3>>0]=HEAP8[$1250+3>>0]|0;
 _nk_style_item_color($175,$$byval_copy72);
 ;HEAP32[$1248>>2]=HEAP32[$175>>2]|0;HEAP32[$1248+4>>2]=HEAP32[$175+4>>2]|0;HEAP32[$1248+8>>2]=HEAP32[$175+8>>2]|0;HEAP32[$1248+12>>2]=HEAP32[$175+12>>2]|0;HEAP32[$1248+16>>2]=HEAP32[$175+16>>2]|0;
 $1251 = $17;
 $1252 = ((($1251)) + 20|0);
 $1253 = $3;
 $1254 = ((($1253)) + 8|0);
 ;HEAP8[$$byval_copy73>>0]=HEAP8[$1254>>0]|0;HEAP8[$$byval_copy73+1>>0]=HEAP8[$1254+1>>0]|0;HEAP8[$$byval_copy73+2>>0]=HEAP8[$1254+2>>0]|0;HEAP8[$$byval_copy73+3>>0]=HEAP8[$1254+3>>0]|0;
 _nk_style_item_color($176,$$byval_copy73);
 ;HEAP32[$1252>>2]=HEAP32[$176>>2]|0;HEAP32[$1252+4>>2]=HEAP32[$176+4>>2]|0;HEAP32[$1252+8>>2]=HEAP32[$176+8>>2]|0;HEAP32[$1252+12>>2]=HEAP32[$176+12>>2]|0;HEAP32[$1252+16>>2]=HEAP32[$176+16>>2]|0;
 $1255 = $17;
 $1256 = ((($1255)) + 40|0);
 $1257 = $3;
 $1258 = ((($1257)) + 8|0);
 ;HEAP8[$$byval_copy74>>0]=HEAP8[$1258>>0]|0;HEAP8[$$byval_copy74+1>>0]=HEAP8[$1258+1>>0]|0;HEAP8[$$byval_copy74+2>>0]=HEAP8[$1258+2>>0]|0;HEAP8[$$byval_copy74+3>>0]=HEAP8[$1258+3>>0]|0;
 _nk_style_item_color($177,$$byval_copy74);
 ;HEAP32[$1256>>2]=HEAP32[$177>>2]|0;HEAP32[$1256+4>>2]=HEAP32[$177+4>>2]|0;HEAP32[$1256+8>>2]=HEAP32[$177+8>>2]|0;HEAP32[$1256+12>>2]=HEAP32[$177+12>>2]|0;HEAP32[$1256+16>>2]=HEAP32[$177+16>>2]|0;
 $1259 = $17;
 $1260 = ((($1259)) + 328|0);
 $1261 = $3;
 ;HEAP8[$1260>>0]=HEAP8[$1261>>0]|0;HEAP8[$1260+1>>0]=HEAP8[$1261+1>>0]|0;HEAP8[$1260+2>>0]=HEAP8[$1261+2>>0]|0;HEAP8[$1260+3>>0]=HEAP8[$1261+3>>0]|0;
 $1262 = $17;
 $1263 = ((($1262)) + 332|0);
 $1264 = $3;
 ;HEAP8[$1263>>0]=HEAP8[$1264>>0]|0;HEAP8[$1263+1>>0]=HEAP8[$1264+1>>0]|0;HEAP8[$1263+2>>0]=HEAP8[$1264+2>>0]|0;HEAP8[$1263+3>>0]=HEAP8[$1264+3>>0]|0;
 $1265 = $17;
 $1266 = ((($1265)) + 336|0);
 $1267 = $3;
 ;HEAP8[$1266>>0]=HEAP8[$1267>>0]|0;HEAP8[$1266+1>>0]=HEAP8[$1267+1>>0]|0;HEAP8[$1266+2>>0]=HEAP8[$1267+2>>0]|0;HEAP8[$1266+3>>0]=HEAP8[$1267+3>>0]|0;
 $1268 = $17;
 $1269 = ((($1268)) + 352|0);
 _nk_vec2($178,4.0,4.0);
 ;HEAP32[$1269>>2]=HEAP32[$178>>2]|0;HEAP32[$1269+4>>2]=HEAP32[$178+4>>2]|0;
 $1270 = $17;
 $1271 = ((($1270)) + 344|0);
 _nk_vec2($179,4.0,4.0);
 ;HEAP32[$1271>>2]=HEAP32[$179>>2]|0;HEAP32[$1271+4>>2]=HEAP32[$179+4>>2]|0;
 $1272 = $17;
 $1273 = ((($1272)) + 360|0);
 _nk_vec2($180,0.0,0.0);
 ;HEAP32[$1273>>2]=HEAP32[$180>>2]|0;HEAP32[$1273+4>>2]=HEAP32[$180+4>>2]|0;
 $1274 = $4;
 $1275 = ((($1274)) + 4832|0);
 $1276 = ((($1275)) + 60|0);
 $6 = $1276;
 $1277 = $6;
 _nk_zero($1277,128);
 $1278 = $6;
 $1279 = $3;
 $1280 = ((($1279)) + 8|0);
 ;HEAP8[$$byval_copy75>>0]=HEAP8[$1280>>0]|0;HEAP8[$$byval_copy75+1>>0]=HEAP8[$1280+1>>0]|0;HEAP8[$$byval_copy75+2>>0]=HEAP8[$1280+2>>0]|0;HEAP8[$$byval_copy75+3>>0]=HEAP8[$1280+3>>0]|0;
 _nk_style_item_color($181,$$byval_copy75);
 ;HEAP32[$1278>>2]=HEAP32[$181>>2]|0;HEAP32[$1278+4>>2]=HEAP32[$181+4>>2]|0;HEAP32[$1278+8>>2]=HEAP32[$181+8>>2]|0;HEAP32[$1278+12>>2]=HEAP32[$181+12>>2]|0;HEAP32[$1278+16>>2]=HEAP32[$181+16>>2]|0;
 $1281 = $6;
 $1282 = ((($1281)) + 20|0);
 $1283 = $3;
 $1284 = ((($1283)) + 8|0);
 ;HEAP8[$$byval_copy76>>0]=HEAP8[$1284>>0]|0;HEAP8[$$byval_copy76+1>>0]=HEAP8[$1284+1>>0]|0;HEAP8[$$byval_copy76+2>>0]=HEAP8[$1284+2>>0]|0;HEAP8[$$byval_copy76+3>>0]=HEAP8[$1284+3>>0]|0;
 _nk_style_item_color($182,$$byval_copy76);
 ;HEAP32[$1282>>2]=HEAP32[$182>>2]|0;HEAP32[$1282+4>>2]=HEAP32[$182+4>>2]|0;HEAP32[$1282+8>>2]=HEAP32[$182+8>>2]|0;HEAP32[$1282+12>>2]=HEAP32[$182+12>>2]|0;HEAP32[$1282+16>>2]=HEAP32[$182+16>>2]|0;
 $1285 = $6;
 $1286 = ((($1285)) + 40|0);
 $1287 = $3;
 $1288 = ((($1287)) + 8|0);
 ;HEAP8[$$byval_copy77>>0]=HEAP8[$1288>>0]|0;HEAP8[$$byval_copy77+1>>0]=HEAP8[$1288+1>>0]|0;HEAP8[$$byval_copy77+2>>0]=HEAP8[$1288+2>>0]|0;HEAP8[$$byval_copy77+3>>0]=HEAP8[$1288+3>>0]|0;
 _nk_style_item_color($183,$$byval_copy77);
 ;HEAP32[$1286>>2]=HEAP32[$183>>2]|0;HEAP32[$1286+4>>2]=HEAP32[$183+4>>2]|0;HEAP32[$1286+8>>2]=HEAP32[$183+8>>2]|0;HEAP32[$1286+12>>2]=HEAP32[$183+12>>2]|0;HEAP32[$1286+16>>2]=HEAP32[$183+16>>2]|0;
 $1289 = $6;
 $1290 = ((($1289)) + 60|0);
 _nk_rgba($184,0,0,0,0);
 ;HEAP8[$1290>>0]=HEAP8[$184>>0]|0;HEAP8[$1290+1>>0]=HEAP8[$184+1>>0]|0;HEAP8[$1290+2>>0]=HEAP8[$184+2>>0]|0;HEAP8[$1290+3>>0]=HEAP8[$184+3>>0]|0;
 $1291 = $6;
 $1292 = ((($1291)) + 64|0);
 $1293 = $3;
 $1294 = ((($1293)) + 8|0);
 ;HEAP8[$1292>>0]=HEAP8[$1294>>0]|0;HEAP8[$1292+1>>0]=HEAP8[$1294+1>>0]|0;HEAP8[$1292+2>>0]=HEAP8[$1294+2>>0]|0;HEAP8[$1292+3>>0]=HEAP8[$1294+3>>0]|0;
 $1295 = $6;
 $1296 = ((($1295)) + 68|0);
 $1297 = $3;
 ;HEAP8[$1296>>0]=HEAP8[$1297>>0]|0;HEAP8[$1296+1>>0]=HEAP8[$1297+1>>0]|0;HEAP8[$1296+2>>0]=HEAP8[$1297+2>>0]|0;HEAP8[$1296+3>>0]=HEAP8[$1297+3>>0]|0;
 $1298 = $6;
 $1299 = ((($1298)) + 72|0);
 $1300 = $3;
 ;HEAP8[$1299>>0]=HEAP8[$1300>>0]|0;HEAP8[$1299+1>>0]=HEAP8[$1300+1>>0]|0;HEAP8[$1299+2>>0]=HEAP8[$1300+2>>0]|0;HEAP8[$1299+3>>0]=HEAP8[$1300+3>>0]|0;
 $1301 = $6;
 $1302 = ((($1301)) + 76|0);
 $1303 = $3;
 ;HEAP8[$1302>>0]=HEAP8[$1303>>0]|0;HEAP8[$1302+1>>0]=HEAP8[$1303+1>>0]|0;HEAP8[$1302+2>>0]=HEAP8[$1303+2>>0]|0;HEAP8[$1302+3>>0]=HEAP8[$1303+3>>0]|0;
 $1304 = $6;
 $1305 = ((($1304)) + 92|0);
 _nk_vec2($185,0.0,0.0);
 ;HEAP32[$1305>>2]=HEAP32[$185>>2]|0;HEAP32[$1305+4>>2]=HEAP32[$185+4>>2]|0;
 $1306 = $6;
 $1307 = ((($1306)) + 108|0);
 _nk_vec2($186,0.0,0.0);
 ;HEAP32[$1307>>2]=HEAP32[$186>>2]|0;HEAP32[$1307+4>>2]=HEAP32[$186+4>>2]|0;
 $1308 = $6;
 $1309 = ((($1308)) + 116|0);
 _nk_handle_ptr($187,0);
 ;HEAP32[$1309>>2]=HEAP32[$187>>2]|0;
 $1310 = $6;
 $1311 = ((($1310)) + 80|0);
 HEAP32[$1311>>2] = 18;
 $1312 = $6;
 $1313 = ((($1312)) + 84|0);
 HEAPF32[$1313>>2] = 0.0;
 $1314 = $6;
 $1315 = ((($1314)) + 88|0);
 HEAPF32[$1315>>2] = 0.0;
 $1316 = $6;
 $1317 = ((($1316)) + 120|0);
 HEAP32[$1317>>2] = 0;
 $1318 = $6;
 $1319 = ((($1318)) + 124|0);
 HEAP32[$1319>>2] = 0;
 $1320 = $4;
 $1321 = ((($1320)) + 4832|0);
 $1322 = ((($1321)) + 188|0);
 $6 = $1322;
 $1323 = $6;
 _nk_zero($1323,128);
 $1324 = $6;
 $1325 = $3;
 $1326 = ((($1325)) + 8|0);
 ;HEAP8[$$byval_copy78>>0]=HEAP8[$1326>>0]|0;HEAP8[$$byval_copy78+1>>0]=HEAP8[$1326+1>>0]|0;HEAP8[$$byval_copy78+2>>0]=HEAP8[$1326+2>>0]|0;HEAP8[$$byval_copy78+3>>0]=HEAP8[$1326+3>>0]|0;
 _nk_style_item_color($188,$$byval_copy78);
 ;HEAP32[$1324>>2]=HEAP32[$188>>2]|0;HEAP32[$1324+4>>2]=HEAP32[$188+4>>2]|0;HEAP32[$1324+8>>2]=HEAP32[$188+8>>2]|0;HEAP32[$1324+12>>2]=HEAP32[$188+12>>2]|0;HEAP32[$1324+16>>2]=HEAP32[$188+16>>2]|0;
 $1327 = $6;
 $1328 = ((($1327)) + 20|0);
 $1329 = $3;
 $1330 = ((($1329)) + 8|0);
 ;HEAP8[$$byval_copy79>>0]=HEAP8[$1330>>0]|0;HEAP8[$$byval_copy79+1>>0]=HEAP8[$1330+1>>0]|0;HEAP8[$$byval_copy79+2>>0]=HEAP8[$1330+2>>0]|0;HEAP8[$$byval_copy79+3>>0]=HEAP8[$1330+3>>0]|0;
 _nk_style_item_color($189,$$byval_copy79);
 ;HEAP32[$1328>>2]=HEAP32[$189>>2]|0;HEAP32[$1328+4>>2]=HEAP32[$189+4>>2]|0;HEAP32[$1328+8>>2]=HEAP32[$189+8>>2]|0;HEAP32[$1328+12>>2]=HEAP32[$189+12>>2]|0;HEAP32[$1328+16>>2]=HEAP32[$189+16>>2]|0;
 $1331 = $6;
 $1332 = ((($1331)) + 40|0);
 $1333 = $3;
 $1334 = ((($1333)) + 8|0);
 ;HEAP8[$$byval_copy80>>0]=HEAP8[$1334>>0]|0;HEAP8[$$byval_copy80+1>>0]=HEAP8[$1334+1>>0]|0;HEAP8[$$byval_copy80+2>>0]=HEAP8[$1334+2>>0]|0;HEAP8[$$byval_copy80+3>>0]=HEAP8[$1334+3>>0]|0;
 _nk_style_item_color($190,$$byval_copy80);
 ;HEAP32[$1332>>2]=HEAP32[$190>>2]|0;HEAP32[$1332+4>>2]=HEAP32[$190+4>>2]|0;HEAP32[$1332+8>>2]=HEAP32[$190+8>>2]|0;HEAP32[$1332+12>>2]=HEAP32[$190+12>>2]|0;HEAP32[$1332+16>>2]=HEAP32[$190+16>>2]|0;
 $1335 = $6;
 $1336 = ((($1335)) + 60|0);
 _nk_rgba($191,0,0,0,0);
 ;HEAP8[$1336>>0]=HEAP8[$191>>0]|0;HEAP8[$1336+1>>0]=HEAP8[$191+1>>0]|0;HEAP8[$1336+2>>0]=HEAP8[$191+2>>0]|0;HEAP8[$1336+3>>0]=HEAP8[$191+3>>0]|0;
 $1337 = $6;
 $1338 = ((($1337)) + 64|0);
 $1339 = $3;
 $1340 = ((($1339)) + 8|0);
 ;HEAP8[$1338>>0]=HEAP8[$1340>>0]|0;HEAP8[$1338+1>>0]=HEAP8[$1340+1>>0]|0;HEAP8[$1338+2>>0]=HEAP8[$1340+2>>0]|0;HEAP8[$1338+3>>0]=HEAP8[$1340+3>>0]|0;
 $1341 = $6;
 $1342 = ((($1341)) + 68|0);
 $1343 = $3;
 ;HEAP8[$1342>>0]=HEAP8[$1343>>0]|0;HEAP8[$1342+1>>0]=HEAP8[$1343+1>>0]|0;HEAP8[$1342+2>>0]=HEAP8[$1343+2>>0]|0;HEAP8[$1342+3>>0]=HEAP8[$1343+3>>0]|0;
 $1344 = $6;
 $1345 = ((($1344)) + 72|0);
 $1346 = $3;
 ;HEAP8[$1345>>0]=HEAP8[$1346>>0]|0;HEAP8[$1345+1>>0]=HEAP8[$1346+1>>0]|0;HEAP8[$1345+2>>0]=HEAP8[$1346+2>>0]|0;HEAP8[$1345+3>>0]=HEAP8[$1346+3>>0]|0;
 $1347 = $6;
 $1348 = ((($1347)) + 76|0);
 $1349 = $3;
 ;HEAP8[$1348>>0]=HEAP8[$1349>>0]|0;HEAP8[$1348+1>>0]=HEAP8[$1349+1>>0]|0;HEAP8[$1348+2>>0]=HEAP8[$1349+2>>0]|0;HEAP8[$1348+3>>0]=HEAP8[$1349+3>>0]|0;
 $1350 = $6;
 $1351 = ((($1350)) + 92|0);
 _nk_vec2($192,0.0,0.0);
 ;HEAP32[$1351>>2]=HEAP32[$192>>2]|0;HEAP32[$1351+4>>2]=HEAP32[$192+4>>2]|0;
 $1352 = $6;
 $1353 = ((($1352)) + 108|0);
 _nk_vec2($193,0.0,0.0);
 ;HEAP32[$1353>>2]=HEAP32[$193>>2]|0;HEAP32[$1353+4>>2]=HEAP32[$193+4>>2]|0;
 $1354 = $6;
 $1355 = ((($1354)) + 116|0);
 _nk_handle_ptr($194,0);
 ;HEAP32[$1355>>2]=HEAP32[$194>>2]|0;
 $1356 = $6;
 $1357 = ((($1356)) + 80|0);
 HEAP32[$1357>>2] = 18;
 $1358 = $6;
 $1359 = ((($1358)) + 84|0);
 HEAPF32[$1359>>2] = 0.0;
 $1360 = $6;
 $1361 = ((($1360)) + 88|0);
 HEAPF32[$1361>>2] = 0.0;
 $1362 = $6;
 $1363 = ((($1362)) + 120|0);
 HEAP32[$1363>>2] = 0;
 $1364 = $6;
 $1365 = ((($1364)) + 124|0);
 HEAP32[$1365>>2] = 0;
 $1366 = $17;
 $1367 = ((($1366)) + 388|0);
 $1368 = $3;
 $1369 = ((($1368)) + 4|0);
 ;HEAP8[$1367>>0]=HEAP8[$1369>>0]|0;HEAP8[$1367+1>>0]=HEAP8[$1369+1>>0]|0;HEAP8[$1367+2>>0]=HEAP8[$1369+2>>0]|0;HEAP8[$1367+3>>0]=HEAP8[$1369+3>>0]|0;
 $1370 = $17;
 $1371 = ((($1370)) + 368|0);
 $1372 = $3;
 $1373 = ((($1372)) + 4|0);
 ;HEAP8[$$byval_copy81>>0]=HEAP8[$1373>>0]|0;HEAP8[$$byval_copy81+1>>0]=HEAP8[$1373+1>>0]|0;HEAP8[$$byval_copy81+2>>0]=HEAP8[$1373+2>>0]|0;HEAP8[$$byval_copy81+3>>0]=HEAP8[$1373+3>>0]|0;
 _nk_style_item_color($195,$$byval_copy81);
 ;HEAP32[$1371>>2]=HEAP32[$195>>2]|0;HEAP32[$1371+4>>2]=HEAP32[$195+4>>2]|0;HEAP32[$1371+8>>2]=HEAP32[$195+8>>2]|0;HEAP32[$1371+12>>2]=HEAP32[$195+12>>2]|0;HEAP32[$1371+16>>2]=HEAP32[$195+16>>2]|0;
 $1374 = $17;
 $1375 = ((($1374)) + 392|0);
 $1376 = $3;
 $1377 = ((($1376)) + 12|0);
 ;HEAP8[$1375>>0]=HEAP8[$1377>>0]|0;HEAP8[$1375+1>>0]=HEAP8[$1377+1>>0]|0;HEAP8[$1375+2>>0]=HEAP8[$1377+2>>0]|0;HEAP8[$1375+3>>0]=HEAP8[$1377+3>>0]|0;
 $1378 = $17;
 $1379 = ((($1378)) + 396|0);
 $1380 = $3;
 $1381 = ((($1380)) + 12|0);
 ;HEAP8[$1379>>0]=HEAP8[$1381>>0]|0;HEAP8[$1379+1>>0]=HEAP8[$1381+1>>0]|0;HEAP8[$1379+2>>0]=HEAP8[$1381+2>>0]|0;HEAP8[$1379+3>>0]=HEAP8[$1381+3>>0]|0;
 $1382 = $17;
 $1383 = ((($1382)) + 400|0);
 $1384 = $3;
 $1385 = ((($1384)) + 12|0);
 ;HEAP8[$1383>>0]=HEAP8[$1385>>0]|0;HEAP8[$1383+1>>0]=HEAP8[$1385+1>>0]|0;HEAP8[$1383+2>>0]=HEAP8[$1385+2>>0]|0;HEAP8[$1383+3>>0]=HEAP8[$1385+3>>0]|0;
 $1386 = $17;
 $1387 = ((($1386)) + 404|0);
 $1388 = $3;
 $1389 = ((($1388)) + 12|0);
 ;HEAP8[$1387>>0]=HEAP8[$1389>>0]|0;HEAP8[$1387+1>>0]=HEAP8[$1389+1>>0]|0;HEAP8[$1387+2>>0]=HEAP8[$1389+2>>0]|0;HEAP8[$1387+3>>0]=HEAP8[$1389+3>>0]|0;
 $1390 = $17;
 $1391 = ((($1390)) + 408|0);
 $1392 = $3;
 $1393 = ((($1392)) + 12|0);
 ;HEAP8[$1391>>0]=HEAP8[$1393>>0]|0;HEAP8[$1391+1>>0]=HEAP8[$1393+1>>0]|0;HEAP8[$1391+2>>0]=HEAP8[$1393+2>>0]|0;HEAP8[$1391+3>>0]=HEAP8[$1393+3>>0]|0;
 $1394 = $17;
 $1395 = ((($1394)) + 412|0);
 $1396 = $3;
 $1397 = ((($1396)) + 12|0);
 ;HEAP8[$1395>>0]=HEAP8[$1397>>0]|0;HEAP8[$1395+1>>0]=HEAP8[$1397+1>>0]|0;HEAP8[$1395+2>>0]=HEAP8[$1397+2>>0]|0;HEAP8[$1395+3>>0]=HEAP8[$1397+3>>0]|0;
 $1398 = $17;
 $1399 = ((($1398)) + 416|0);
 $1400 = $3;
 $1401 = ((($1400)) + 12|0);
 ;HEAP8[$1399>>0]=HEAP8[$1401>>0]|0;HEAP8[$1399+1>>0]=HEAP8[$1401+1>>0]|0;HEAP8[$1399+2>>0]=HEAP8[$1401+2>>0]|0;HEAP8[$1399+3>>0]=HEAP8[$1401+3>>0]|0;
 $1402 = $17;
 $1403 = ((($1402)) + 420|0);
 $1404 = $3;
 ;HEAP8[$$byval_copy82>>0]=HEAP8[$1404>>0]|0;HEAP8[$$byval_copy82+1>>0]=HEAP8[$1404+1>>0]|0;HEAP8[$$byval_copy82+2>>0]=HEAP8[$1404+2>>0]|0;HEAP8[$$byval_copy82+3>>0]=HEAP8[$1404+3>>0]|0;
 _nk_style_item_color($196,$$byval_copy82);
 ;HEAP32[$1403>>2]=HEAP32[$196>>2]|0;HEAP32[$1403+4>>2]=HEAP32[$196+4>>2]|0;HEAP32[$1403+8>>2]=HEAP32[$196+8>>2]|0;HEAP32[$1403+12>>2]=HEAP32[$196+12>>2]|0;HEAP32[$1403+16>>2]=HEAP32[$196+16>>2]|0;
 $1405 = $17;
 $1406 = ((($1405)) + 468|0);
 HEAPF32[$1406>>2] = 0.0;
 $1407 = $17;
 $1408 = ((($1407)) + 472|0);
 _nk_vec2($197,4.0,4.0);
 ;HEAP32[$1408>>2]=HEAP32[$197>>2]|0;HEAP32[$1408+4>>2]=HEAP32[$197+4>>2]|0;
 $1409 = $17;
 $1410 = ((($1409)) + 480|0);
 _nk_vec2($198,10.0,10.0);
 ;HEAP32[$1410>>2]=HEAP32[$198>>2]|0;HEAP32[$1410+4>>2]=HEAP32[$198+4>>2]|0;
 $1411 = $17;
 $1412 = ((($1411)) + 488|0);
 _nk_vec2($199,64.0,64.0);
 ;HEAP32[$1412>>2]=HEAP32[$199>>2]|0;HEAP32[$1412+4>>2]=HEAP32[$199+4>>2]|0;
 $1413 = $17;
 $1414 = ((($1413)) + 444|0);
 HEAPF32[$1414>>2] = 1.0;
 $1415 = $17;
 $1416 = ((($1415)) + 448|0);
 HEAPF32[$1416>>2] = 1.0;
 $1417 = $17;
 $1418 = ((($1417)) + 452|0);
 HEAPF32[$1418>>2] = 1.0;
 $1419 = $17;
 $1420 = ((($1419)) + 456|0);
 HEAPF32[$1420>>2] = 1.0;
 $1421 = $17;
 $1422 = ((($1421)) + 460|0);
 HEAPF32[$1422>>2] = 1.0;
 $1423 = $17;
 $1424 = ((($1423)) + 464|0);
 HEAPF32[$1424>>2] = 1.0;
 $1425 = $17;
 $1426 = ((($1425)) + 440|0);
 HEAPF32[$1426>>2] = 2.0;
 $1427 = $17;
 $1428 = ((($1427)) + 496|0);
 _nk_vec2($200,4.0,4.0);
 ;HEAP32[$1428>>2]=HEAP32[$200>>2]|0;HEAP32[$1428+4>>2]=HEAP32[$200+4>>2]|0;
 $1429 = $17;
 $1430 = ((($1429)) + 504|0);
 _nk_vec2($201,4.0,4.0);
 ;HEAP32[$1430>>2]=HEAP32[$201>>2]|0;HEAP32[$1430+4>>2]=HEAP32[$201+4>>2]|0;
 $1431 = $17;
 $1432 = ((($1431)) + 512|0);
 _nk_vec2($202,4.0,4.0);
 ;HEAP32[$1432>>2]=HEAP32[$202>>2]|0;HEAP32[$1432+4>>2]=HEAP32[$202+4>>2]|0;
 $1433 = $17;
 $1434 = ((($1433)) + 520|0);
 _nk_vec2($203,4.0,4.0);
 ;HEAP32[$1434>>2]=HEAP32[$203>>2]|0;HEAP32[$1434+4>>2]=HEAP32[$203+4>>2]|0;
 $1435 = $17;
 $1436 = ((($1435)) + 528|0);
 _nk_vec2($204,4.0,4.0);
 ;HEAP32[$1436>>2]=HEAP32[$204>>2]|0;HEAP32[$1436+4>>2]=HEAP32[$204+4>>2]|0;
 $1437 = $17;
 $1438 = ((($1437)) + 536|0);
 _nk_vec2($205,4.0,4.0);
 ;HEAP32[$1438>>2]=HEAP32[$205>>2]|0;HEAP32[$1438+4>>2]=HEAP32[$205+4>>2]|0;
 $1439 = $17;
 $1440 = ((($1439)) + 544|0);
 _nk_vec2($206,4.0,4.0);
 ;HEAP32[$1440>>2]=HEAP32[$206>>2]|0;HEAP32[$1440+4>>2]=HEAP32[$206+4>>2]|0;
 STACKTOP = sp;return;
}
function _nk_style_item_color($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 ;HEAP8[$3>>0]=HEAP8[$1>>0]|0;HEAP8[$3+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$1+3>>0]|0;
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
 STACKTOP = sp;return;
}
function _nk_style_item_hide($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = sp + 20|0;
 HEAP32[$1>>2] = 0;
 $3 = ((($1)) + 4|0);
 _nk_rgba($2,0,0,0,0);
 ;HEAP8[$3>>0]=HEAP8[$2>>0]|0;HEAP8[$3+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$2+3>>0]|0;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$1+16>>2]|0;
 STACKTOP = sp;return;
}
function _nk_style_set_font($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),15711,(18446|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 340|0);
 $4 = $10;
 $11 = $3;
 $12 = $4;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = ((($13)) + 5804|0);
 $15 = ((($14)) + 1364|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_style_push_float($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((2989|0),(1320|0),15793,(18551|0));
  // unreachable;
 }
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 $13 = $4;
 $14 = ((($13)) + 5804|0);
 $15 = ((($14)) + 388|0);
 $7 = $15;
 $16 = $7;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)<(32);
 if (!($18)) {
  ___assert_fail((18464|0),(1320|0),15793,(18551|0));
  // unreachable;
 }
 $19 = $7;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>=(32);
 if ($21) {
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 } else {
  $22 = $7;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$22>>2] = $24;
  $25 = $7;
  $26 = ((($25)) + 4|0);
  $27 = (($26) + ($23<<3)|0);
  $8 = $27;
  $28 = $5;
  $29 = $8;
  HEAP32[$29>>2] = $28;
  $30 = $5;
  $31 = +HEAPF32[$30>>2];
  $32 = $8;
  $33 = ((($32)) + 4|0);
  HEAPF32[$33>>2] = $31;
  $34 = $6;
  $35 = $5;
  HEAPF32[$35>>2] = $34;
  $3 = 1;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _nk_style_push_vec2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2989|0),(1320|0),15794,(18571|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 $12 = $4;
 $13 = ((($12)) + 5804|0);
 $14 = ((($13)) + 648|0);
 $6 = $14;
 $15 = $6;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<(16);
 if (!($17)) {
  ___assert_fail((18464|0),(1320|0),15794,(18571|0));
  // unreachable;
 }
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>=(16);
 if ($20) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 } else {
  $21 = $6;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$21>>2] = $23;
  $24 = $6;
  $25 = ((($24)) + 4|0);
  $26 = (($25) + (($22*12)|0)|0);
  $7 = $26;
  $27 = $5;
  $28 = $7;
  HEAP32[$28>>2] = $27;
  $29 = $7;
  $30 = ((($29)) + 4|0);
  $31 = $5;
  ;HEAP32[$30>>2]=HEAP32[$31>>2]|0;HEAP32[$30+4>>2]=HEAP32[$31+4>>2]|0;
  $32 = $5;
  ;HEAP32[$32>>2]=HEAP32[$2>>2]|0;HEAP32[$32+4>>2]=HEAP32[$2+4>>2]|0;
  $3 = 1;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _nk_style_pop_float($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),15799,(18611|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $1 = 0;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 $9 = $2;
 $10 = ((($9)) + 5804|0);
 $11 = ((($10)) + 388|0);
 $3 = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  ___assert_fail((18590|0),(1320|0),15799,(18611|0));
  // unreachable;
 }
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<(1);
 if ($17) {
  $1 = 0;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 } else {
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + -1)|0;
  HEAP32[$18>>2] = $20;
  $21 = $3;
  $22 = ((($21)) + 4|0);
  $23 = (($22) + ($20<<3)|0);
  $4 = $23;
  $24 = $4;
  $25 = ((($24)) + 4|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $4;
  $28 = HEAP32[$27>>2]|0;
  HEAPF32[$28>>2] = $26;
  $1 = 1;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _nk_style_pop_vec2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),15800,(18630|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $1 = 0;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 }
 $9 = $2;
 $10 = ((($9)) + 5804|0);
 $11 = ((($10)) + 648|0);
 $3 = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  ___assert_fail((18590|0),(1320|0),15800,(18630|0));
  // unreachable;
 }
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<(1);
 if ($17) {
  $1 = 0;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 } else {
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + -1)|0;
  HEAP32[$18>>2] = $20;
  $21 = $3;
  $22 = ((($21)) + 4|0);
  $23 = (($22) + (($20*12)|0)|0);
  $4 = $23;
  $24 = $4;
  $25 = HEAP32[$24>>2]|0;
  $26 = $4;
  $27 = ((($26)) + 4|0);
  ;HEAP32[$25>>2]=HEAP32[$27>>2]|0;HEAP32[$25+4>>2]=HEAP32[$27+4>>2]|0;
  $1 = 1;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _nk_init_default($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 8;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 9;
 $7 = $2;
 $8 = $3;
 $9 = (_nk_init($7,$4,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _nk_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((3129|0),(1320|0),15998,(18648|0));
  // unreachable;
 }
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $4;
  $12 = $6;
  _nk_setup($11,$12);
  $13 = $4;
  $14 = ((($13)) + 5724|0);
  $15 = $5;
  _nk_buffer_init($14,$15,4096);
  $16 = $4;
  $17 = ((($16)) + 12856|0);
  $18 = $5;
  _nk_pool_init($17,$18,16);
  $19 = $4;
  $20 = ((($19)) + 12852|0);
  HEAP32[$20>>2] = 1;
  $3 = 1;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 } else {
  $3 = 0;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _nk_setup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),15937,(23892|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 _nk_zero($8,12924);
 $9 = $2;
 _nk_style_default($9);
 $10 = $2;
 $11 = ((($10)) + 12920|0);
 HEAP32[$11>>2] = 1;
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $3;
  $15 = $2;
  $16 = ((($15)) + 340|0);
  HEAP32[$16>>2] = $14;
 }
 $17 = $2;
 $18 = ((($17)) + 7308|0);
 _nk_draw_list_init($18);
 STACKTOP = sp;return;
}
function _nk_pool_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 _nk_zero($6,40);
 $7 = $3;
 $8 = $4;
 ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
 $9 = $5;
 $10 = $3;
 $11 = ((($10)) + 28|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = 1;
 $14 = $3;
 $15 = ((($14)) + 20|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((2989|0),(1320|0),16021,(18656|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 5724|0);
 _nk_buffer_free($7);
 $8 = $1;
 $9 = ((($8)) + 12852|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 12856|0);
  _nk_pool_free($13);
 }
 $14 = $1;
 _nk_zero($14,340);
 $15 = $1;
 $16 = ((($15)) + 340|0);
 _nk_zero($16,5384);
 $17 = $1;
 $18 = ((($17)) + 5724|0);
 _nk_zero($18,60);
 $19 = $1;
 $20 = ((($19)) + 12920|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 $22 = ((($21)) + 12848|0);
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 12896|0);
 HEAP32[$24>>2] = 0;
 $25 = $1;
 $26 = ((($25)) + 12900|0);
 HEAP32[$26>>2] = 0;
 $27 = $1;
 $28 = ((($27)) + 12904|0);
 HEAP32[$28>>2] = 0;
 $29 = $1;
 $30 = ((($29)) + 12908|0);
 HEAP32[$30>>2] = 0;
 $31 = $1;
 $32 = ((($31)) + 12912|0);
 HEAP32[$32>>2] = 0;
 $33 = $1;
 $34 = ((($33)) + 12916|0);
 HEAP32[$34>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_pool_free($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$old = 0, $$old1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = $3;
 $14 = ($13|0)!=(0|0);
 $or$cond = $12 & $14;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = $3;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $2 = $17;
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = $3;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vii[$20 & 31]($$byval_copy,$22);
  $23 = $2;
  $3 = $23;
  $$old = $3;
  $$old1 = ($$old|0)!=(0|0);
  if (!($$old1)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _nk_clear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),16046,(18664|0));
  // unreachable;
 }
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ((($10)) + 12852|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = $1;
 $15 = ((($14)) + 5724|0);
 if ($13) {
  _nk_buffer_clear($15);
 } else {
  _nk_buffer_reset($15,0);
 }
 $16 = $1;
 $17 = ((($16)) + 12848|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = ((($18)) + 5724|0);
 $20 = ((($19)) + 52|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 $22 = ((($21)) + 5796|0);
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 340|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = ((($27)) + 340|0);
 $29 = ((($28)) + 32|0);
 HEAP32[$29>>2] = $26;
 $30 = $1;
 $31 = ((($30)) + 12808|0);
 _nk_memset($31,0,40);
 $32 = $1;
 $33 = ((($32)) + 7308|0);
 _nk_draw_list_clear($33);
 $34 = $1;
 $35 = ((($34)) + 12896|0);
 $36 = HEAP32[$35>>2]|0;
 $2 = $36;
 while(1) {
  $37 = $2;
  $38 = ($37|0)!=(0|0);
  if (!($38)) {
   break;
  }
  $39 = $2;
  $40 = ((($39)) + 72|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 & 16384;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = $2;
   $45 = ((($44)) + 72|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 & 8192;
   $48 = ($47|0)!=(0);
   if (!($48)) {
    $49 = $2;
    $50 = ((($49)) + 348|0);
    $51 = HEAP32[$50>>2]|0;
    $2 = $51;
    continue;
   }
  }
  $52 = $2;
  $53 = ((($52)) + 244|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)!=(0|0);
  if ($55) {
   $56 = $2;
   $57 = ((($56)) + 244|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$58>>2]|0;
   $60 = $1;
   $61 = ((($60)) + 12920|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($59|0)!=($62|0);
   if ($63) {
    $64 = $1;
    $65 = $2;
    $66 = ((($65)) + 244|0);
    $67 = HEAP32[$66>>2]|0;
    _nk_free_window($64,$67);
    $68 = $2;
    $69 = ((($68)) + 244|0);
    HEAP32[$69>>2] = 0;
   }
  }
  $70 = $2;
  $71 = ((($70)) + 340|0);
  $72 = HEAP32[$71>>2]|0;
  $5 = $72;
  while(1) {
   $73 = $5;
   $74 = ($73|0)!=(0|0);
   if (!($74)) {
    break;
   }
   $75 = $5;
   $76 = ((($75)) + 364|0);
   $77 = HEAP32[$76>>2]|0;
   $4 = $77;
   $78 = $5;
   $79 = HEAP32[$78>>2]|0;
   $80 = $1;
   $81 = ((($80)) + 12920|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($79|0)!=($82|0);
   if ($83) {
    $84 = $2;
    $85 = $5;
    _nk_remove_table($84,$85);
    $86 = $5;
    _nk_zero($86,372);
    $87 = $1;
    $88 = $5;
    _nk_free_table($87,$88);
    $89 = $5;
    $90 = $2;
    $91 = ((($90)) + 340|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($89|0)==($92|0);
    if ($93) {
     $94 = $4;
     $95 = $2;
     $96 = ((($95)) + 340|0);
     HEAP32[$96>>2] = $94;
    }
   }
   $97 = $4;
   $5 = $97;
  }
  $98 = $2;
  $99 = HEAP32[$98>>2]|0;
  $100 = $1;
  $101 = ((($100)) + 12920|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($99|0)!=($102|0);
  if (!($103)) {
   $104 = $2;
   $105 = ((($104)) + 72|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 & 8192;
   $108 = ($107|0)!=(0);
   if (!($108)) {
    $117 = $2;
    $118 = ((($117)) + 348|0);
    $119 = HEAP32[$118>>2]|0;
    $2 = $119;
    continue;
   }
  }
  $109 = $2;
  $110 = ((($109)) + 348|0);
  $111 = HEAP32[$110>>2]|0;
  $3 = $111;
  $112 = $1;
  $113 = $2;
  _nk_remove_window($112,$113);
  $114 = $1;
  $115 = $2;
  _nk_free_window($114,$115);
  $116 = $3;
  $2 = $116;
 }
 $120 = $1;
 $121 = ((($120)) + 12920|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) + 1)|0;
 HEAP32[$121>>2] = $123;
 STACKTOP = sp;return;
}
function _nk_memset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $6 = $9;
 $7 = 0;
 $8 = 0;
 $10 = $4;
 $11 = $10&255;
 $12 = $11&255;
 $7 = $12;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $7;
  $15 = $14 << 8;
  $16 = $7;
  $17 = $15 | $16;
  $7 = $17;
  $18 = $7;
  $19 = $18 << 16;
  $20 = $7;
  $21 = $19 | $20;
  $7 = $21;
 }
 $22 = $3;
 $6 = $22;
 $23 = $5;
 $24 = ($23>>>0)<(12);
 if ($24) {
  while(1) {
   $25 = $5;
   $26 = (($25) + -1)|0;
   $5 = $26;
   $27 = ($25|0)!=(0);
   if (!($27)) {
    break;
   }
   $28 = $4;
   $29 = $28&255;
   $30 = $6;
   $31 = ((($30)) + 1|0);
   $6 = $31;
   HEAP8[$30>>0] = $29;
  }
  STACKTOP = sp;return;
 }
 $32 = $6;
 $33 = $32;
 $34 = $33 & 3;
 $8 = $34;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $8;
  $37 = (4 - ($36))|0;
  $8 = $37;
  $38 = $8;
  $39 = $5;
  $40 = (($39) - ($38))|0;
  $5 = $40;
  while(1) {
   $41 = $4;
   $42 = $41&255;
   $43 = $6;
   $44 = ((($43)) + 1|0);
   $6 = $44;
   HEAP8[$43>>0] = $42;
   $45 = $8;
   $46 = (($45) + -1)|0;
   $8 = $46;
   $47 = ($46|0)!=(0);
   if (!($47)) {
    break;
   }
  }
 }
 $48 = $5;
 $49 = (($48>>>0) / 4)&-1;
 $8 = $49;
 while(1) {
  $50 = $7;
  $51 = $6;
  HEAP32[$51>>2] = $50;
  $52 = $6;
  $53 = ((($52)) + 4|0);
  $6 = $53;
  $54 = $8;
  $55 = (($54) + -1)|0;
  $8 = $55;
  $56 = ($55|0)!=(0);
  if (!($56)) {
   break;
  }
 }
 $57 = $5;
 $58 = $57 & 3;
 $8 = $58;
 $59 = $8;
 $60 = ($59|0)!=(0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $61 = $4;
  $62 = $61&255;
  $63 = $6;
  $64 = ((($63)) + 1|0);
  $6 = $64;
  HEAP8[$63>>0] = $62;
  $65 = $8;
  $66 = (($65) + -1)|0;
  $8 = $66;
  $67 = ($66|0)!=(0);
  if (!($67)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _nk_free_window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ((($8)) + 340|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $3;
 $12 = ((($11)) + 244|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $2;
  $16 = $3;
  $17 = ((($16)) + 244|0);
  $18 = HEAP32[$17>>2]|0;
  _nk_free_window($15,$18);
  $19 = $3;
  $20 = ((($19)) + 244|0);
  HEAP32[$20>>2] = 0;
 }
 $21 = $3;
 $22 = ((($21)) + 348|0);
 HEAP32[$22>>2] = 0;
 $23 = $3;
 $24 = ((($23)) + 352|0);
 HEAP32[$24>>2] = 0;
 while(1) {
  $25 = $5;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $5;
  $28 = ((($27)) + 364|0);
  $29 = HEAP32[$28>>2]|0;
  $4 = $29;
  $30 = $3;
  $31 = $5;
  _nk_remove_table($30,$31);
  $32 = $2;
  $33 = $5;
  _nk_free_table($32,$33);
  $34 = $5;
  $35 = $3;
  $36 = ((($35)) + 340|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)==($37|0);
  if ($38) {
   $39 = $4;
   $40 = $3;
   $41 = ((($40)) + 340|0);
   HEAP32[$41>>2] = $39;
  }
  $42 = $4;
  $5 = $42;
 }
 $43 = $3;
 $6 = $43;
 $44 = $6;
 $7 = $44;
 $45 = $2;
 $46 = $7;
 _nk_free_page_element($45,$46);
 STACKTOP = sp;return;
}
function _nk_remove_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 340|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = ($6|0)==($7|0);
 if ($8) {
  $9 = $3;
  $10 = ((($9)) + 364|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = ((($12)) + 340|0);
  HEAP32[$13>>2] = $11;
 }
 $14 = $3;
 $15 = ((($14)) + 364|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 368|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $3;
  $22 = ((($21)) + 364|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 368|0);
  HEAP32[$24>>2] = $20;
 }
 $25 = $3;
 $26 = ((($25)) + 368|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $36 = $3;
  $37 = ((($36)) + 364|0);
  HEAP32[$37>>2] = 0;
  $38 = $3;
  $39 = ((($38)) + 368|0);
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 }
 $29 = $3;
 $30 = ((($29)) + 364|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $3;
 $33 = ((($32)) + 368|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 364|0);
 HEAP32[$35>>2] = $31;
 $36 = $3;
 $37 = ((($36)) + 364|0);
 HEAP32[$37>>2] = 0;
 $38 = $3;
 $39 = ((($38)) + 368|0);
 HEAP32[$39>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_free_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $4 = $6;
 $7 = $4;
 $5 = $7;
 $8 = $2;
 $9 = $5;
 _nk_free_page_element($8,$9);
 STACKTOP = sp;return;
}
function _nk_remove_window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 12896|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if ($8) {
  label = 3;
 } else {
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 12900|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)==($12|0);
  if ($13) {
   label = 3;
  } else {
   $50 = $3;
   $51 = ((($50)) + 348|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)!=(0|0);
   if ($53) {
    $54 = $3;
    $55 = ((($54)) + 352|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $3;
    $58 = ((($57)) + 348|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($59)) + 352|0);
    HEAP32[$60>>2] = $56;
   }
   $61 = $3;
   $62 = ((($61)) + 352|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0|0);
   if ($64) {
    $65 = $3;
    $66 = ((($65)) + 348|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $3;
    $69 = ((($68)) + 352|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 348|0);
    HEAP32[$71>>2] = $67;
   }
  }
 }
 if ((label|0) == 3) {
  $14 = $3;
  $15 = $2;
  $16 = ((($15)) + 12896|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)==($17|0);
  if ($18) {
   $19 = $3;
   $20 = ((($19)) + 348|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $2;
   $23 = ((($22)) + 12896|0);
   HEAP32[$23>>2] = $21;
   $24 = $3;
   $25 = ((($24)) + 348|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)!=(0|0);
   if ($27) {
    $28 = $3;
    $29 = ((($28)) + 348|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 352|0);
    HEAP32[$31>>2] = 0;
   }
  }
  $32 = $3;
  $33 = $2;
  $34 = ((($33)) + 12900|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)==($35|0);
  if ($36) {
   $37 = $3;
   $38 = ((($37)) + 352|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $2;
   $41 = ((($40)) + 12900|0);
   HEAP32[$41>>2] = $39;
   $42 = $3;
   $43 = ((($42)) + 352|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)!=(0|0);
   if ($45) {
    $46 = $3;
    $47 = ((($46)) + 352|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 348|0);
    HEAP32[$49>>2] = 0;
   }
  }
 }
 $72 = $3;
 $73 = $2;
 $74 = ((($73)) + 12904|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($72|0)==($75|0);
 if ($76) {
  label = 15;
 } else {
  $77 = $2;
  $78 = ((($77)) + 12904|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)!=(0|0);
  if (!($80)) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $81 = $2;
  $82 = ((($81)) + 12900|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $2;
  $85 = ((($84)) + 12904|0);
  HEAP32[$85>>2] = $83;
  $86 = $2;
  $87 = ((($86)) + 12900|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)!=(0|0);
  if ($89) {
   $90 = $2;
   $91 = ((($90)) + 12900|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 72|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $94 & -2049;
   HEAP32[$93>>2] = $95;
  }
 }
 $96 = $3;
 $97 = ((($96)) + 348|0);
 HEAP32[$97>>2] = 0;
 $98 = $3;
 $99 = ((($98)) + 352|0);
 HEAP32[$99>>2] = 0;
 $100 = $2;
 $101 = ((($100)) + 12916|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + -1)|0;
 HEAP32[$101>>2] = $103;
 STACKTOP = sp;return;
}
function _nk_build($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $nk_white$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $nk_white$byval_copy = sp + 64|0;
 $$byval_copy = sp + 48|0;
 $6 = sp + 8|0;
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 340|0);
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 340|0);
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 340|0);
  $19 = ((($18)) + 32|0);
  HEAP32[$19>>2] = $16;
 }
 $20 = $1;
 $21 = ((($20)) + 340|0);
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $1;
  $26 = ((($25)) + 260|0);
  $27 = ((($26)) + 77|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)!=(0);
  if (!($29)) {
   $30 = $1;
   $31 = ((($30)) + 340|0);
   $32 = ((($31)) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $1;
    $36 = ((($35)) + 340|0);
    $37 = ((($36)) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    $7 = $38;
    $39 = $1;
    $40 = ((($39)) + 12808|0);
    $41 = $1;
    $42 = ((($41)) + 5724|0);
    _nk_command_buffer_init($40,$42,0);
    $43 = $1;
    $44 = $1;
    $45 = ((($44)) + 12808|0);
    _nk_start_buffer($43,$45);
    $46 = $1;
    $47 = ((($46)) + 260|0);
    $48 = ((($47)) + 48|0);
    $49 = +HEAPF32[$48>>2];
    $50 = $7;
    $51 = ((($50)) + 24|0);
    $52 = +HEAPF32[$51>>2];
    $53 = $49 - $52;
    HEAPF32[$6>>2] = $53;
    $54 = $1;
    $55 = ((($54)) + 260|0);
    $56 = ((($55)) + 48|0);
    $57 = ((($56)) + 4|0);
    $58 = +HEAPF32[$57>>2];
    $59 = $7;
    $60 = ((($59)) + 24|0);
    $61 = ((($60)) + 4|0);
    $62 = +HEAPF32[$61>>2];
    $63 = $58 - $62;
    $64 = ((($6)) + 4|0);
    HEAPF32[$64>>2] = $63;
    $65 = $7;
    $66 = ((($65)) + 16|0);
    $67 = +HEAPF32[$66>>2];
    $68 = ((($6)) + 8|0);
    HEAPF32[$68>>2] = $67;
    $69 = $7;
    $70 = ((($69)) + 16|0);
    $71 = ((($70)) + 4|0);
    $72 = +HEAPF32[$71>>2];
    $73 = ((($6)) + 12|0);
    HEAPF32[$73>>2] = $72;
    $74 = $1;
    $75 = ((($74)) + 12808|0);
    $76 = $7;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$6+12>>2]|0;
    ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
    _nk_draw_image($75,$$byval_copy,$76,$nk_white$byval_copy);
    $77 = $1;
    $78 = $1;
    $79 = ((($78)) + 12808|0);
    _nk_finish_buffer($77,$79);
   }
  }
 }
 $80 = $1;
 $81 = ((($80)) + 12896|0);
 $82 = HEAP32[$81>>2]|0;
 $2 = $82;
 $83 = $1;
 $84 = ((($83)) + 5724|0);
 $85 = ((($84)) + 32|0);
 $86 = HEAP32[$85>>2]|0;
 $5 = $86;
 while(1) {
  $87 = $2;
  $88 = ($87|0)!=(0|0);
  if (!($88)) {
   break;
  }
  $89 = $2;
  $90 = ((($89)) + 348|0);
  $91 = HEAP32[$90>>2]|0;
  $3 = $91;
  $92 = $2;
  $93 = ((($92)) + 100|0);
  $94 = ((($93)) + 36|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $2;
  $97 = ((($96)) + 100|0);
  $98 = ((($97)) + 28|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($95|0)==($99|0);
  if (!($100)) {
   $101 = $2;
   $102 = ((($101)) + 72|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103 & 4096;
   $105 = ($104|0)!=(0);
   if (!($105)) {
    $107 = $5;
    $108 = $2;
    $109 = ((($108)) + 100|0);
    $110 = ((($109)) + 36|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($107) + ($111)|0);
    $4 = $112;
    while(1) {
     $113 = $3;
     $114 = ($113|0)!=(0|0);
     if ($114) {
      $115 = $3;
      $116 = ((($115)) + 100|0);
      $117 = ((($116)) + 36|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = $3;
      $120 = ((($119)) + 100|0);
      $121 = ((($120)) + 28|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($118|0)==($122|0);
      if ($123) {
       $160 = 1;
      } else {
       $124 = $3;
       $125 = ((($124)) + 72|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = $126 & 4096;
       $128 = ($127|0)!=(0);
       $160 = $128;
      }
     } else {
      $160 = 0;
     }
     $129 = $3;
     if (!($160)) {
      break;
     }
     $130 = ((($129)) + 348|0);
     $131 = HEAP32[$130>>2]|0;
     $3 = $131;
    }
    $132 = ($129|0)!=(0|0);
    do {
     if ($132) {
      $133 = $3;
      $134 = ((($133)) + 100|0);
      $135 = ((($134)) + 28|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $4;
      $138 = ((($137)) + 4|0);
      HEAP32[$138>>2] = $136;
     } else {
      $139 = $1;
      $140 = ((($139)) + 12808|0);
      $141 = ((($140)) + 32|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = $1;
      $144 = ((($143)) + 12808|0);
      $145 = ((($144)) + 28|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($142|0)!=($146|0);
      $148 = $1;
      if ($147) {
       $149 = ((($148)) + 12808|0);
       $150 = ((($149)) + 28|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = $4;
       $153 = ((($152)) + 4|0);
       HEAP32[$153>>2] = $151;
       break;
      } else {
       $154 = ((($148)) + 5724|0);
       $155 = ((($154)) + 44|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = $4;
       $158 = ((($157)) + 4|0);
       HEAP32[$158>>2] = $156;
       break;
      }
     }
    } while(0);
    $159 = $3;
    $2 = $159;
    continue;
   }
  }
  $106 = $3;
  $2 = $106;
 }
 STACKTOP = sp;return;
}
function _nk_begin($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = $5;
 $10 = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $11 = (_nk_begin_titled($7,$8,$9,$$byval_copy,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _nk_begin_titled($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy8 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0;
 var $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0.0, $299 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0, $387 = 0.0, $388 = 0.0;
 var $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0.0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0.0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy8 = sp + 128|0;
 $$byval_copy = sp + 112|0;
 $20 = sp + 32|0;
 $21 = sp + 16|0;
 $22 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $4;
 $14 = 0;
 $23 = $6;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((2989|0),(1320|0),17220,(18692|0));
  // unreachable;
 }
 $25 = $7;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((18708|0),(1320|0),17221,(18692|0));
  // unreachable;
 }
 $27 = $8;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  ___assert_fail((18713|0),(1320|0),17222,(18692|0));
  // unreachable;
 }
 $29 = $6;
 $30 = ((($29)) + 340|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  ___assert_fail((18719|0),(1320|0),17223,(18692|0));
  // unreachable;
 }
 $33 = $6;
 $34 = ((($33)) + 340|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  ___assert_fail((18719|0),(1320|0),17223,(18692|0));
  // unreachable;
 }
 $39 = $6;
 $40 = ((($39)) + 12908|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  ___assert_fail((18808|0),(1320|0),17224,(18692|0));
  // unreachable;
 }
 $43 = $6;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $6;
  $46 = ((($45)) + 12908|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  $49 = $8;
  $50 = ($49|0)!=(0|0);
  $or$cond = $48 & $50;
  $51 = $7;
  $52 = ($51|0)!=(0|0);
  $or$cond3 = $or$cond & $52;
  if ($or$cond3) {
   $53 = $6;
   $54 = ((($53)) + 340|0);
   $11 = $54;
   $55 = $7;
   $56 = (_nk_strlen($55)|0);
   $13 = $56;
   $57 = $7;
   $58 = $13;
   $59 = (_nk_murmur_hash($57,$58,64)|0);
   $12 = $59;
   $60 = $6;
   $61 = $12;
   $62 = $7;
   $63 = (_nk_find_window($60,$61,$62)|0);
   $10 = $63;
   $64 = $10;
   $65 = ($64|0)!=(0|0);
   if ($65) {
    $112 = $10;
    $113 = ((($112)) + 72|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $114 & -1024;
    HEAP32[$113>>2] = $115;
    $116 = $9;
    $117 = $10;
    $118 = ((($117)) + 72|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $119 | $116;
    HEAP32[$118>>2] = $120;
    $121 = $10;
    $122 = ((($121)) + 72|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $123 & 6;
    $125 = ($124|0)!=(0);
    if (!($125)) {
     $126 = $10;
     $127 = ((($126)) + 76|0);
     ;HEAP32[$127>>2]=HEAP32[$3>>2]|0;HEAP32[$127+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$127+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$127+12>>2]=HEAP32[$3+12>>2]|0;
    }
    $128 = $10;
    $129 = HEAP32[$128>>2]|0;
    $130 = $6;
    $131 = ((($130)) + 12920|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ($129|0)!=($132|0);
    if (!($133)) {
     ___assert_fail((18875|0),(1320|0),17267,(18692|0));
     // unreachable;
    }
    $134 = $6;
    $135 = ((($134)) + 12920|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $10;
    HEAP32[$137>>2] = $136;
    $138 = $6;
    $139 = ((($138)) + 12904|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)!=(0|0);
    if (!($141)) {
     $142 = $10;
     $143 = $6;
     $144 = ((($143)) + 12904|0);
     HEAP32[$144>>2] = $142;
    }
   } else {
    $66 = $7;
    $67 = (_nk_strlen($66)|0);
    $15 = $67;
    $68 = $6;
    $69 = (_nk_create_window($68)|0);
    $10 = $69;
    $70 = $10;
    $71 = ($70|0)!=(0|0);
    if (!($71)) {
     ___assert_fail((18871|0),(1320|0),17237,(18692|0));
     // unreachable;
    }
    $72 = $10;
    $73 = ($72|0)!=(0|0);
    if (!($73)) {
     $5 = 0;
     $558 = $5;
     STACKTOP = sp;return ($558|0);
    }
    $74 = $9;
    $75 = $74 & 256;
    $76 = ($75|0)!=(0);
    $77 = $6;
    $78 = $10;
    if ($76) {
     _nk_insert_window($77,$78,1);
    } else {
     _nk_insert_window($77,$78,0);
    }
    $79 = $10;
    $80 = ((($79)) + 100|0);
    $81 = $6;
    $82 = ((($81)) + 5724|0);
    _nk_command_buffer_init($80,$82,1);
    $83 = $9;
    $84 = $10;
    $85 = ((($84)) + 72|0);
    HEAP32[$85>>2] = $83;
    $86 = $10;
    $87 = ((($86)) + 76|0);
    ;HEAP32[$87>>2]=HEAP32[$3>>2]|0;HEAP32[$87+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$87+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$87+12>>2]=HEAP32[$3+12>>2]|0;
    $88 = $12;
    $89 = $10;
    $90 = ((($89)) + 4|0);
    HEAP32[$90>>2] = $88;
    $91 = $15;
    $92 = ($91>>>0)<(63);
    $93 = $15;
    $94 = $92 ? $93 : 63;
    $15 = $94;
    $95 = $10;
    $96 = ((($95)) + 8|0);
    $97 = $7;
    $98 = $15;
    (_nk_memcopy($96,$97,$98)|0);
    $99 = $15;
    $100 = $10;
    $101 = ((($100)) + 8|0);
    $102 = (($101) + ($99)|0);
    HEAP8[$102>>0] = 0;
    $103 = $10;
    $104 = ((($103)) + 244|0);
    HEAP32[$104>>2] = 0;
    $105 = $6;
    $106 = ((($105)) + 12904|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)!=(0|0);
    if (!($108)) {
     $109 = $10;
     $110 = $6;
     $111 = ((($110)) + 12904|0);
     HEAP32[$111>>2] = $109;
    }
   }
   $145 = $10;
   $146 = ((($145)) + 72|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $147 & 4096;
   $149 = ($148|0)!=(0);
   $150 = $10;
   if ($149) {
    $151 = $6;
    $152 = ((($151)) + 12908|0);
    HEAP32[$152>>2] = $150;
    $5 = 0;
    $558 = $5;
    STACKTOP = sp;return ($558|0);
   }
   $153 = ((($150)) + 72|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $154 & 4096;
   $156 = ($155|0)!=(0);
   if (!($156)) {
    $157 = $10;
    $18 = $157;
    $158 = $6;
    $159 = ((($158)) + 340|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ((($160)) + 4|0);
    $162 = +HEAPF32[$161>>2];
    $163 = $11;
    $164 = ((($163)) + 4832|0);
    $165 = ((($164)) + 344|0);
    $166 = ((($165)) + 4|0);
    $167 = +HEAPF32[$166>>2];
    $168 = 2.0 * $167;
    $169 = $162 + $168;
    $170 = $11;
    $171 = ((($170)) + 4832|0);
    $172 = ((($171)) + 352|0);
    $173 = ((($172)) + 4|0);
    $174 = +HEAPF32[$173>>2];
    $175 = 2.0 * $174;
    $176 = $169 + $175;
    $19 = $176;
    $177 = $10;
    $178 = ((($177)) + 72|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = $179 & 16384;
    $181 = ($180|0)!=(0);
    $182 = $10;
    $183 = ((($182)) + 76|0);
    if ($181) {
     $184 = +HEAPF32[$183>>2];
     $185 = $10;
     $186 = ((($185)) + 76|0);
     $187 = ((($186)) + 4|0);
     $188 = +HEAPF32[$187>>2];
     $189 = $10;
     $190 = ((($189)) + 76|0);
     $191 = ((($190)) + 8|0);
     $192 = +HEAPF32[$191>>2];
     $193 = $19;
     _nk_rect($20,$184,$188,$192,$193);
    } else {
     ;HEAP32[$20>>2]=HEAP32[$183>>2]|0;HEAP32[$20+4>>2]=HEAP32[$183+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$183+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[$183+12>>2]|0;
    }
    $194 = $6;
    $195 = $10;
    _nk_start($194,$195);
    $196 = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$20+12>>2]|0;
    $197 = (_nk_input_has_mouse_click_down_in_rect($196,0,$$byval_copy,1)|0);
    $16 = $197;
    $198 = $16;
    $199 = ($198|0)!=(0);
    if ($199) {
     $200 = $6;
     $201 = ((($200)) + 260|0);
     $202 = ((($201)) + 4|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)!=(0);
     $206 = $204;
    } else {
     $206 = 0;
    }
    $205 = $206&1;
    $16 = $205;
    $207 = $6;
    ;HEAP32[$$byval_copy8>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$20+12>>2]|0;
    $208 = (_nk_input_is_mouse_hovering_rect($207,$$byval_copy8)|0);
    $17 = $208;
    $209 = $10;
    $210 = $6;
    $211 = ((($210)) + 12904|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ($209|0)!=($212|0);
    $214 = $17;
    $215 = ($214|0)!=(0);
    $or$cond5 = $213 & $215;
    L58: do {
     if ($or$cond5) {
      $216 = $6;
      $217 = ((($216)) + 260|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ($218|0)!=(0);
      if (!($219)) {
       $220 = $10;
       $221 = ((($220)) + 348|0);
       $222 = HEAP32[$221>>2]|0;
       $18 = $222;
       while(1) {
        $223 = $18;
        $224 = ($223|0)!=(0|0);
        if (!($224)) {
         break L58;
        }
        $225 = $18;
        $226 = ((($225)) + 72|0);
        $227 = HEAP32[$226>>2]|0;
        $228 = $227 & 16384;
        $229 = ($228|0)!=(0);
        $230 = $18;
        $231 = ((($230)) + 76|0);
        if ($229) {
         $232 = +HEAPF32[$231>>2];
         $233 = $18;
         $234 = ((($233)) + 76|0);
         $235 = ((($234)) + 4|0);
         $236 = +HEAPF32[$235>>2];
         $237 = $18;
         $238 = ((($237)) + 76|0);
         $239 = ((($238)) + 8|0);
         $240 = +HEAPF32[$239>>2];
         $241 = $19;
         _nk_rect($21,$232,$236,$240,$241);
        } else {
         ;HEAP32[$21>>2]=HEAP32[$231>>2]|0;HEAP32[$21+4>>2]=HEAP32[$231+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$231+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$231+12>>2]|0;
        }
        $242 = +HEAPF32[$21>>2];
        $243 = +HEAPF32[$20>>2];
        $244 = ((($20)) + 8|0);
        $245 = +HEAPF32[$244>>2];
        $246 = $243 + $245;
        $247 = $242 > $246;
        do {
         if (!($247)) {
          $248 = +HEAPF32[$21>>2];
          $249 = ((($21)) + 8|0);
          $250 = +HEAPF32[$249>>2];
          $251 = $248 + $250;
          $252 = +HEAPF32[$20>>2];
          $253 = $251 < $252;
          if ($253) {
           break;
          }
          $254 = ((($21)) + 4|0);
          $255 = +HEAPF32[$254>>2];
          $256 = ((($20)) + 4|0);
          $257 = +HEAPF32[$256>>2];
          $258 = ((($20)) + 12|0);
          $259 = +HEAPF32[$258>>2];
          $260 = $257 + $259;
          $261 = $255 > $260;
          if ($261) {
           break;
          }
          $262 = ((($21)) + 4|0);
          $263 = +HEAPF32[$262>>2];
          $264 = ((($21)) + 12|0);
          $265 = +HEAPF32[$264>>2];
          $266 = $263 + $265;
          $267 = ((($20)) + 4|0);
          $268 = +HEAPF32[$267>>2];
          $269 = $266 < $268;
          if ($269) {
           break;
          }
          $270 = $18;
          $271 = ((($270)) + 72|0);
          $272 = HEAP32[$271>>2]|0;
          $273 = $272 & 4096;
          $274 = ($273|0)!=(0);
          if (!($274)) {
           break L58;
          }
          $275 = $18;
          $276 = ((($275)) + 72|0);
          $277 = HEAP32[$276>>2]|0;
          $278 = $277 & 256;
          $279 = ($278|0)!=(0);
          if (!($279)) {
           break L58;
          }
         }
        } while(0);
        $280 = $18;
        $281 = ((($280)) + 244|0);
        $282 = HEAP32[$281>>2]|0;
        $283 = ($282|0)!=(0|0);
        do {
         if ($283) {
          $284 = $18;
          $285 = ((($284)) + 244|0);
          $286 = ((($285)) + 12|0);
          $287 = HEAP32[$286>>2]|0;
          $288 = ($287|0)!=(0);
          if (!($288)) {
           break;
          }
          $289 = $18;
          $290 = ((($289)) + 72|0);
          $291 = HEAP32[$290>>2]|0;
          $292 = $291 & 4096;
          $293 = ($292|0)!=(0);
          if ($293) {
           break;
          }
          $294 = $18;
          $295 = ((($294)) + 244|0);
          $296 = HEAP32[$295>>2]|0;
          $297 = ((($296)) + 76|0);
          $298 = +HEAPF32[$297>>2];
          $299 = $10;
          $300 = ((($299)) + 76|0);
          $301 = +HEAPF32[$300>>2];
          $302 = ((($20)) + 8|0);
          $303 = +HEAPF32[$302>>2];
          $304 = $301 + $303;
          $305 = $298 > $304;
          if ($305) {
           break;
          }
          $306 = $18;
          $307 = ((($306)) + 244|0);
          $308 = HEAP32[$307>>2]|0;
          $309 = ((($308)) + 76|0);
          $310 = +HEAPF32[$309>>2];
          $311 = $18;
          $312 = ((($311)) + 244|0);
          $313 = HEAP32[$312>>2]|0;
          $314 = ((($313)) + 76|0);
          $315 = ((($314)) + 8|0);
          $316 = +HEAPF32[$315>>2];
          $317 = $310 + $316;
          $318 = $10;
          $319 = ((($318)) + 76|0);
          $320 = +HEAPF32[$319>>2];
          $321 = $317 < $320;
          if ($321) {
           break;
          }
          $322 = $18;
          $323 = ((($322)) + 244|0);
          $324 = HEAP32[$323>>2]|0;
          $325 = ((($324)) + 76|0);
          $326 = ((($325)) + 4|0);
          $327 = +HEAPF32[$326>>2];
          $328 = ((($20)) + 4|0);
          $329 = +HEAPF32[$328>>2];
          $330 = ((($20)) + 12|0);
          $331 = +HEAPF32[$330>>2];
          $332 = $329 + $331;
          $333 = $327 > $332;
          if ($333) {
           break;
          }
          $334 = $18;
          $335 = ((($334)) + 244|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ((($336)) + 76|0);
          $338 = ((($337)) + 4|0);
          $339 = +HEAPF32[$338>>2];
          $340 = $18;
          $341 = ((($340)) + 244|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ((($342)) + 76|0);
          $344 = ((($343)) + 12|0);
          $345 = +HEAPF32[$344>>2];
          $346 = $339 + $345;
          $347 = ((($20)) + 4|0);
          $348 = +HEAPF32[$347>>2];
          $349 = $346 < $348;
          if (!($349)) {
           break L58;
          }
         }
        } while(0);
        $350 = $18;
        $351 = ((($350)) + 348|0);
        $352 = HEAP32[$351>>2]|0;
        $18 = $352;
       }
      }
     }
    } while(0);
    $353 = $18;
    $354 = ($353|0)!=(0|0);
    $355 = $16;
    $356 = ($355|0)!=(0);
    $or$cond7 = $354 & $356;
    L84: do {
     if ($or$cond7) {
      $357 = $10;
      $358 = $6;
      $359 = ((($358)) + 12900|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = ($357|0)!=($360|0);
      if ($361) {
       $362 = $18;
       $363 = ((($362)) + 72|0);
       $364 = HEAP32[$363>>2]|0;
       $365 = $364 & 256;
       $366 = ($365|0)!=(0);
       if (!($366)) {
        $367 = $10;
        $368 = ((($367)) + 348|0);
        $369 = HEAP32[$368>>2]|0;
        $18 = $369;
        while(1) {
         $370 = $18;
         $371 = ($370|0)!=(0|0);
         if (!($371)) {
          break L84;
         }
         $372 = $18;
         $373 = ((($372)) + 72|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 & 16384;
         $376 = ($375|0)!=(0);
         $377 = $18;
         $378 = ((($377)) + 76|0);
         if ($376) {
          $379 = +HEAPF32[$378>>2];
          $380 = $18;
          $381 = ((($380)) + 76|0);
          $382 = ((($381)) + 4|0);
          $383 = +HEAPF32[$382>>2];
          $384 = $18;
          $385 = ((($384)) + 76|0);
          $386 = ((($385)) + 8|0);
          $387 = +HEAPF32[$386>>2];
          $388 = $19;
          _nk_rect($22,$379,$383,$387,$388);
         } else {
          ;HEAP32[$22>>2]=HEAP32[$378>>2]|0;HEAP32[$22+4>>2]=HEAP32[$378+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$378+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$378+12>>2]|0;
         }
         $389 = +HEAPF32[$22>>2];
         $390 = $6;
         $391 = ((($390)) + 260|0);
         $392 = ((($391)) + 48|0);
         $393 = +HEAPF32[$392>>2];
         $394 = $389 <= $393;
         do {
          if ($394) {
           $395 = $6;
           $396 = ((($395)) + 260|0);
           $397 = ((($396)) + 48|0);
           $398 = +HEAPF32[$397>>2];
           $399 = +HEAPF32[$22>>2];
           $400 = ((($22)) + 8|0);
           $401 = +HEAPF32[$400>>2];
           $402 = $399 + $401;
           $403 = $398 <= $402;
           if (!($403)) {
            break;
           }
           $404 = ((($22)) + 4|0);
           $405 = +HEAPF32[$404>>2];
           $406 = $6;
           $407 = ((($406)) + 260|0);
           $408 = ((($407)) + 48|0);
           $409 = ((($408)) + 4|0);
           $410 = +HEAPF32[$409>>2];
           $411 = $405 <= $410;
           if (!($411)) {
            break;
           }
           $412 = $6;
           $413 = ((($412)) + 260|0);
           $414 = ((($413)) + 48|0);
           $415 = ((($414)) + 4|0);
           $416 = +HEAPF32[$415>>2];
           $417 = ((($22)) + 4|0);
           $418 = +HEAPF32[$417>>2];
           $419 = ((($22)) + 12|0);
           $420 = +HEAPF32[$419>>2];
           $421 = $418 + $420;
           $422 = $416 <= $421;
           if (!($422)) {
            break;
           }
           $423 = $18;
           $424 = ((($423)) + 72|0);
           $425 = HEAP32[$424>>2]|0;
           $426 = $425 & 4096;
           $427 = ($426|0)!=(0);
           if (!($427)) {
            break L84;
           }
          }
         } while(0);
         $428 = $18;
         $429 = ((($428)) + 244|0);
         $430 = HEAP32[$429>>2]|0;
         $431 = ($430|0)!=(0|0);
         do {
          if ($431) {
           $432 = $18;
           $433 = ((($432)) + 244|0);
           $434 = ((($433)) + 12|0);
           $435 = HEAP32[$434>>2]|0;
           $436 = ($435|0)!=(0);
           if (!($436)) {
            break;
           }
           $437 = $18;
           $438 = ((($437)) + 72|0);
           $439 = HEAP32[$438>>2]|0;
           $440 = $439 & 4096;
           $441 = ($440|0)!=(0);
           if ($441) {
            break;
           }
           $442 = $18;
           $443 = ((($442)) + 244|0);
           $444 = HEAP32[$443>>2]|0;
           $445 = ((($444)) + 76|0);
           $446 = +HEAPF32[$445>>2];
           $447 = +HEAPF32[$20>>2];
           $448 = ((($20)) + 8|0);
           $449 = +HEAPF32[$448>>2];
           $450 = $447 + $449;
           $451 = $446 > $450;
           if ($451) {
            break;
           }
           $452 = $18;
           $453 = ((($452)) + 244|0);
           $454 = HEAP32[$453>>2]|0;
           $455 = ((($454)) + 76|0);
           $456 = +HEAPF32[$455>>2];
           $457 = $18;
           $458 = ((($457)) + 244|0);
           $459 = HEAP32[$458>>2]|0;
           $460 = ((($459)) + 76|0);
           $461 = ((($460)) + 8|0);
           $462 = +HEAPF32[$461>>2];
           $463 = $456 + $462;
           $464 = +HEAPF32[$20>>2];
           $465 = $463 < $464;
           if ($465) {
            break;
           }
           $466 = $18;
           $467 = ((($466)) + 244|0);
           $468 = HEAP32[$467>>2]|0;
           $469 = ((($468)) + 76|0);
           $470 = ((($469)) + 4|0);
           $471 = +HEAPF32[$470>>2];
           $472 = ((($20)) + 4|0);
           $473 = +HEAPF32[$472>>2];
           $474 = ((($20)) + 12|0);
           $475 = +HEAPF32[$474>>2];
           $476 = $473 + $475;
           $477 = $471 > $476;
           if ($477) {
            break;
           }
           $478 = $18;
           $479 = ((($478)) + 244|0);
           $480 = HEAP32[$479>>2]|0;
           $481 = ((($480)) + 76|0);
           $482 = ((($481)) + 4|0);
           $483 = +HEAPF32[$482>>2];
           $484 = $18;
           $485 = ((($484)) + 244|0);
           $486 = HEAP32[$485>>2]|0;
           $487 = ((($486)) + 76|0);
           $488 = ((($487)) + 12|0);
           $489 = +HEAPF32[$488>>2];
           $490 = $483 + $489;
           $491 = ((($20)) + 4|0);
           $492 = +HEAPF32[$491>>2];
           $493 = $490 < $492;
           if (!($493)) {
            break L84;
           }
          }
         } while(0);
         $494 = $18;
         $495 = ((($494)) + 348|0);
         $496 = HEAP32[$495>>2]|0;
         $18 = $496;
        }
       }
      }
     }
    } while(0);
    $497 = $18;
    $498 = ($497|0)!=(0|0);
    if (!($498)) {
     $499 = $6;
     $500 = ((($499)) + 12900|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = $10;
     $503 = ($501|0)!=($502|0);
     if ($503) {
      $504 = $10;
      $505 = ((($504)) + 72|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = $506 & 256;
      $508 = ($507|0)!=(0);
      if (!($508)) {
       $509 = $6;
       $510 = $10;
       _nk_remove_window($509,$510);
       $511 = $6;
       $512 = $10;
       _nk_insert_window($511,$512,0);
      }
      $513 = $10;
      $514 = ((($513)) + 72|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = $515 & -2049;
      HEAP32[$514>>2] = $516;
      $517 = $10;
      $518 = $6;
      $519 = ((($518)) + 12904|0);
      HEAP32[$519>>2] = $517;
     }
    }
    $520 = $6;
    $521 = ((($520)) + 12900|0);
    $522 = HEAP32[$521>>2]|0;
    $523 = $10;
    $524 = ($522|0)!=($523|0);
    if ($524) {
     $525 = $10;
     $526 = ((($525)) + 72|0);
     $527 = HEAP32[$526>>2]|0;
     $528 = $527 & 256;
     $529 = ($528|0)!=(0);
     if (!($529)) {
      $530 = $10;
      $531 = ((($530)) + 72|0);
      $532 = HEAP32[$531>>2]|0;
      $533 = $532 | 2048;
      HEAP32[$531>>2] = $533;
     }
    }
   }
   $534 = $6;
   $535 = (_nk_create_panel($534)|0);
   $536 = $10;
   $537 = ((($536)) + 140|0);
   HEAP32[$537>>2] = $535;
   $538 = $10;
   $539 = $6;
   $540 = ((($539)) + 12908|0);
   HEAP32[$540>>2] = $538;
   $541 = $6;
   $542 = $8;
   $543 = (_nk_panel_begin($541,$542,1)|0);
   $14 = $543;
   $544 = $10;
   $545 = ((($544)) + 92|0);
   $546 = $10;
   $547 = ((($546)) + 140|0);
   $548 = HEAP32[$547>>2]|0;
   $549 = ((($548)) + 24|0);
   HEAP32[$549>>2] = $545;
   $550 = $10;
   $551 = ((($550)) + 92|0);
   $552 = ((($551)) + 4|0);
   $553 = $10;
   $554 = ((($553)) + 140|0);
   $555 = HEAP32[$554>>2]|0;
   $556 = ((($555)) + 28|0);
   HEAP32[$556>>2] = $552;
   $557 = $14;
   $5 = $557;
   $558 = $5;
   STACKTOP = sp;return ($558|0);
  }
 }
 $5 = 0;
 $558 = $5;
 STACKTOP = sp;return ($558|0);
}
function _nk_find_window($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 12896|0);
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 while(1) {
  $12 = $7;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   label = 9;
   break;
  }
  $14 = $7;
  $15 = $7;
  $16 = ((($15)) + 348|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)!=($17|0);
  if (!($18)) {
   label = 4;
   break;
  }
  $19 = $7;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = ($21|0)==($22|0);
  if ($23) {
   $24 = $7;
   $25 = ((($24)) + 8|0);
   $26 = (_nk_strlen($25)|0);
   $8 = $26;
   $27 = $7;
   $28 = ((($27)) + 8|0);
   $29 = $6;
   $30 = $8;
   $31 = (_nk_stricmpn($28,$29,$30)|0);
   $32 = ($31|0)!=(0);
   if (!($32)) {
    label = 7;
    break;
   }
  }
  $34 = $7;
  $35 = ((($34)) + 348|0);
  $36 = HEAP32[$35>>2]|0;
  $7 = $36;
 }
 if ((label|0) == 4) {
  ___assert_fail((23934|0),(1320|0),17112,(23953|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  $33 = $7;
  $3 = $33;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 9) {
  $3 = 0;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _nk_create_window($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_nk_create_page_element($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  $9 = ((($8)) + 12920|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  HEAP32[$11>>2] = $10;
  $12 = $3;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $1 = 0;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _nk_insert_window($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2989|0),(1320|0),17132,(24057|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((18871|0),(1320|0),17133,(24057|0));
  // unreachable;
 }
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 $or$cond = $13 & $15;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $16 = $3;
 $17 = ((($16)) + 12896|0);
 $18 = HEAP32[$17>>2]|0;
 $6 = $18;
 while(1) {
  $19 = $6;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   label = 14;
   break;
  }
  $21 = $6;
  $22 = $6;
  $23 = ((($22)) + 348|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)!=($24|0);
  if (!($25)) {
   label = 9;
   break;
  }
  $26 = $6;
  $27 = $4;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   label = 11;
   break;
  }
  $29 = $6;
  $30 = $4;
  $31 = ($29|0)==($30|0);
  if ($31) {
   label = 20;
   break;
  }
  $32 = $6;
  $33 = ((($32)) + 348|0);
  $34 = HEAP32[$33>>2]|0;
  $6 = $34;
 }
 if ((label|0) == 9) {
  ___assert_fail((23934|0),(1320|0),17138,(24057|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  ___assert_fail((24074|0),(1320|0),17139,(24057|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  $35 = $3;
  $36 = ((($35)) + 12896|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0|0);
  if (!($38)) {
   $39 = $4;
   $40 = ((($39)) + 348|0);
   HEAP32[$40>>2] = 0;
   $41 = $4;
   $42 = ((($41)) + 352|0);
   HEAP32[$42>>2] = 0;
   $43 = $4;
   $44 = $3;
   $45 = ((($44)) + 12896|0);
   HEAP32[$45>>2] = $43;
   $46 = $4;
   $47 = $3;
   $48 = ((($47)) + 12900|0);
   HEAP32[$48>>2] = $46;
   $49 = $3;
   $50 = ((($49)) + 12916|0);
   HEAP32[$50>>2] = 1;
   STACKTOP = sp;return;
  }
  $51 = $5;
  $52 = ($51|0)==(0);
  $53 = $3;
  $54 = ((($53)) + 12900|0);
  $55 = HEAP32[$54>>2]|0;
  if ($52) {
   $7 = $55;
   $56 = $7;
   $57 = ((($56)) + 72|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 | 2048;
   HEAP32[$57>>2] = $59;
   $60 = $4;
   $61 = $7;
   $62 = ((($61)) + 348|0);
   HEAP32[$62>>2] = $60;
   $63 = $3;
   $64 = ((($63)) + 12900|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $4;
   $67 = ((($66)) + 352|0);
   HEAP32[$67>>2] = $65;
   $68 = $4;
   $69 = ((($68)) + 348|0);
   HEAP32[$69>>2] = 0;
   $70 = $4;
   $71 = $3;
   $72 = ((($71)) + 12900|0);
   HEAP32[$72>>2] = $70;
   $73 = $3;
   $74 = ((($73)) + 12900|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $3;
   $77 = ((($76)) + 12904|0);
   HEAP32[$77>>2] = $75;
   $78 = $3;
   $79 = ((($78)) + 12900|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($80)) + 72|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 & -2049;
   HEAP32[$81>>2] = $83;
  } else {
   $84 = ((($55)) + 72|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $85 | 2048;
   HEAP32[$84>>2] = $86;
   $87 = $4;
   $88 = $3;
   $89 = ((($88)) + 12896|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ((($90)) + 352|0);
   HEAP32[$91>>2] = $87;
   $92 = $3;
   $93 = ((($92)) + 12896|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $4;
   $96 = ((($95)) + 348|0);
   HEAP32[$96>>2] = $94;
   $97 = $4;
   $98 = ((($97)) + 352|0);
   HEAP32[$98>>2] = 0;
   $99 = $4;
   $100 = $3;
   $101 = ((($100)) + 12896|0);
   HEAP32[$101>>2] = $99;
   $102 = $3;
   $103 = ((($102)) + 12896|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 72|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 & -2049;
   HEAP32[$105>>2] = $107;
  }
  $108 = $3;
  $109 = ((($108)) + 12916|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + 1)|0;
  HEAP32[$109>>2] = $111;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return;
 }
}
function _nk_command_buffer_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((24086|0),(1320|0),6043,(24093|0));
  // unreachable;
 }
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((1473|0),(1320|0),6044,(24093|0));
  // unreachable;
 }
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $14 = $4;
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = $5;
 $17 = $3;
 $18 = ((($17)) + 20|0);
 HEAP32[$18>>2] = $16;
 $19 = $4;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $3;
 $23 = ((($22)) + 28|0);
 HEAP32[$23>>2] = $21;
 $24 = $4;
 $25 = ((($24)) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $3;
 $28 = ((($27)) + 32|0);
 HEAP32[$28>>2] = $26;
 $29 = $4;
 $30 = ((($29)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $3;
 $33 = ((($32)) + 36|0);
 HEAP32[$33>>2] = $31;
 STACKTOP = sp;return;
}
function _nk_start($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),16123,(24116|0));
  // unreachable;
 }
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  $9 = $3;
  $10 = ((($9)) + 100|0);
  _nk_start_buffer($8,$10);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18871|0),(1320|0),16124,(24116|0));
  // unreachable;
 }
}
function _nk_create_panel($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_nk_create_page_element($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  _nk_zero($8,380);
  $9 = $3;
  $1 = $9;
 } else {
  $1 = 0;
 }
 $10 = $1;
 STACKTOP = sp;return ($10|0);
}
function _nk_panel_begin($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0;
 var $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0.0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0.0;
 var $359 = 0.0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0;
 var $377 = 0.0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0;
 var $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0.0, $484 = 0.0;
 var $485 = 0.0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0;
 var $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0, $567 = 0.0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0.0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0.0, $584 = 0, $585 = 0, $586 = 0, $587 = 0.0, $588 = 0.0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0.0;
 var $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0, $646 = 0;
 var $647 = 0.0, $648 = 0.0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0.0, $667 = 0.0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0.0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0.0, $717 = 0.0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0.0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0.0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0.0, $752 = 0, $753 = 0, $754 = 0.0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0.0, $764 = 0, $765 = 0, $766 = 0, $767 = 0.0, $768 = 0.0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $nk_white$byval_copy = 0, $nk_white$byval_copy12 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $$byval_copy15 = sp + 408|0;
 $$byval_copy14 = sp + 440|0;
 $$byval_copy13 = sp + 392|0;
 $nk_white$byval_copy12 = sp + 436|0;
 $$byval_copy11 = sp + 376|0;
 $$byval_copy10 = sp + 360|0;
 $$byval_copy9 = sp + 352|0;
 $$byval_copy8 = sp + 336|0;
 $$byval_copy7 = sp + 320|0;
 $$byval_copy6 = sp + 432|0;
 $$byval_copy5 = sp + 304|0;
 $nk_white$byval_copy = sp + 428|0;
 $$byval_copy4 = sp + 288|0;
 $$byval_copy3 = sp + 272|0;
 $$byval_copy2 = sp + 256|0;
 $$byval_copy = sp + 240|0;
 $13 = sp + 192|0;
 $14 = sp + 184|0;
 $15 = sp + 176|0;
 $18 = sp + 152|0;
 $19 = sp + 136|0;
 $20 = sp + 120|0;
 $21 = sp + 104|0;
 $23 = sp + 424|0;
 $24 = sp + 80|0;
 $25 = sp + 72|0;
 $26 = sp + 68|0;
 $28 = sp + 48|0;
 $30 = sp + 32|0;
 $31 = sp + 16|0;
 $32 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $33 = $4;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  ___assert_fail((2989|0),(1320|0),16386,(24125|0));
  // unreachable;
 }
 $35 = $4;
 $36 = ((($35)) + 12908|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  ___assert_fail((19010|0),(1320|0),16387,(24125|0));
  // unreachable;
 }
 $39 = $4;
 $40 = ((($39)) + 12908|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 140|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  ___assert_fail((18968|0),(1320|0),16388,(24125|0));
  // unreachable;
 }
 $45 = $4;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $4;
  $48 = ((($47)) + 12908|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0|0);
  if ($50) {
   $51 = $4;
   $52 = ((($51)) + 12908|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 140|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(0|0);
   if ($56) {
    $57 = $4;
    $58 = ((($57)) + 12908|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($59)) + 140|0);
    $61 = HEAP32[$60>>2]|0;
    _nk_zero($61,364);
    $62 = $4;
    $63 = ((($62)) + 12908|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ((($64)) + 72|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $66 & 4096;
    $68 = ($67|0)!=(0);
    if ($68) {
     $3 = 0;
     $785 = $3;
     STACKTOP = sp;return ($785|0);
    }
    $69 = $4;
    $70 = ((($69)) + 340|0);
    $11 = $70;
    $71 = $11;
    $72 = HEAP32[$71>>2]|0;
    $12 = $72;
    $73 = $4;
    $7 = $73;
    $74 = $4;
    $75 = ((($74)) + 12908|0);
    $76 = HEAP32[$75>>2]|0;
    $8 = $76;
    $77 = $8;
    $78 = ((($77)) + 140|0);
    $79 = HEAP32[$78>>2]|0;
    $9 = $79;
    $80 = $8;
    $81 = ((($80)) + 100|0);
    $10 = $81;
    $82 = $11;
    $83 = ((($82)) + 4832|0);
    $84 = ((($83)) + 480|0);
    ;HEAP32[$13>>2]=HEAP32[$84>>2]|0;HEAP32[$13+4>>2]=HEAP32[$84+4>>2]|0;
    $85 = $11;
    $86 = $6;
    _nk_panel_get_padding($15,$85,$86);
    ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;
    $87 = $8;
    $88 = ((($87)) + 72|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $89 & 2;
    $91 = ($90|0)!=(0);
    if ($91) {
     $92 = $8;
     $93 = ((($92)) + 72|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $94 & 2048;
     $96 = ($95|0)!=(0);
     if (!($96)) {
      $97 = $8;
      $98 = ((($97)) + 76|0);
      $99 = +HEAPF32[$98>>2];
      HEAPF32[$18>>2] = $99;
      $100 = $8;
      $101 = ((($100)) + 76|0);
      $102 = ((($101)) + 4|0);
      $103 = +HEAPF32[$102>>2];
      $104 = ((($18)) + 4|0);
      HEAPF32[$104>>2] = $103;
      $105 = $8;
      $106 = ((($105)) + 76|0);
      $107 = ((($106)) + 8|0);
      $108 = +HEAPF32[$107>>2];
      $109 = ((($18)) + 8|0);
      HEAPF32[$109>>2] = $108;
      $110 = $8;
      $111 = ((($110)) + 72|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = $5;
      $114 = (_nk_panel_has_header($112,$113)|0);
      $115 = ($114|0)!=(0);
      if ($115) {
       $116 = $12;
       $117 = ((($116)) + 4|0);
       $118 = +HEAPF32[$117>>2];
       $119 = $11;
       $120 = ((($119)) + 4832|0);
       $121 = ((($120)) + 344|0);
       $122 = ((($121)) + 4|0);
       $123 = +HEAPF32[$122>>2];
       $124 = 2.0 * $123;
       $125 = $118 + $124;
       $126 = ((($18)) + 12|0);
       HEAPF32[$126>>2] = $125;
       $127 = $11;
       $128 = ((($127)) + 4832|0);
       $129 = ((($128)) + 352|0);
       $130 = ((($129)) + 4|0);
       $131 = +HEAPF32[$130>>2];
       $132 = 2.0 * $131;
       $133 = ((($18)) + 12|0);
       $134 = +HEAPF32[$133>>2];
       $135 = $134 + $132;
       HEAPF32[$133>>2] = $135;
      } else {
       $136 = ((($14)) + 4|0);
       $137 = +HEAPF32[$136>>2];
       $138 = ((($18)) + 12|0);
       HEAPF32[$138>>2] = $137;
      }
      $139 = $7;
      $140 = ((($139)) + 260|0);
      $141 = HEAP32[$140>>2]|0;
      $16 = $141;
      $142 = $7;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$18+12>>2]|0;
      $143 = (_nk_input_has_mouse_click_down_in_rect($142,0,$$byval_copy,1)|0);
      $17 = $143;
      $144 = $16;
      $145 = ($144|0)!=(0);
      $146 = $17;
      $147 = ($146|0)!=(0);
      $or$cond = $145 & $147;
      if ($or$cond) {
       $148 = $8;
       $149 = ((($148)) + 76|0);
       $150 = +HEAPF32[$149>>2];
       $151 = $7;
       $152 = ((($151)) + 260|0);
       $153 = ((($152)) + 64|0);
       $154 = +HEAPF32[$153>>2];
       $155 = $150 + $154;
       $156 = $8;
       $157 = ((($156)) + 76|0);
       HEAPF32[$157>>2] = $155;
       $158 = $8;
       $159 = ((($158)) + 76|0);
       $160 = ((($159)) + 4|0);
       $161 = +HEAPF32[$160>>2];
       $162 = $7;
       $163 = ((($162)) + 260|0);
       $164 = ((($163)) + 64|0);
       $165 = ((($164)) + 4|0);
       $166 = +HEAPF32[$165>>2];
       $167 = $161 + $166;
       $168 = $8;
       $169 = ((($168)) + 76|0);
       $170 = ((($169)) + 4|0);
       HEAPF32[$170>>2] = $167;
       $171 = $7;
       $172 = ((($171)) + 260|0);
       $173 = ((($172)) + 64|0);
       $174 = +HEAPF32[$173>>2];
       $175 = $7;
       $176 = ((($175)) + 260|0);
       $177 = ((($176)) + 8|0);
       $178 = +HEAPF32[$177>>2];
       $179 = $178 + $174;
       HEAPF32[$177>>2] = $179;
       $180 = $7;
       $181 = ((($180)) + 260|0);
       $182 = ((($181)) + 64|0);
       $183 = ((($182)) + 4|0);
       $184 = +HEAPF32[$183>>2];
       $185 = $7;
       $186 = ((($185)) + 260|0);
       $187 = ((($186)) + 8|0);
       $188 = ((($187)) + 4|0);
       $189 = +HEAPF32[$188>>2];
       $190 = $189 + $184;
       HEAPF32[$188>>2] = $190;
       $191 = $4;
       $192 = ((($191)) + 340|0);
       $193 = ((($192)) + 4|0);
       $194 = ((($193)) + 8|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $4;
       $197 = ((($196)) + 340|0);
       $198 = ((($197)) + 32|0);
       HEAP32[$198>>2] = $195;
      }
     }
    }
    $199 = $6;
    $200 = $9;
    HEAP32[$200>>2] = $199;
    $201 = $8;
    $202 = ((($201)) + 72|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = $9;
    $205 = ((($204)) + 4|0);
    HEAP32[$205>>2] = $203;
    $206 = $9;
    $207 = ((($206)) + 8|0);
    $208 = $8;
    $209 = ((($208)) + 76|0);
    ;HEAP32[$207>>2]=HEAP32[$209>>2]|0;HEAP32[$207+4>>2]=HEAP32[$209+4>>2]|0;HEAP32[$207+8>>2]=HEAP32[$209+8>>2]|0;HEAP32[$207+12>>2]=HEAP32[$209+12>>2]|0;
    $210 = +HEAPF32[$14>>2];
    $211 = $9;
    $212 = ((($211)) + 8|0);
    $213 = +HEAPF32[$212>>2];
    $214 = $213 + $210;
    HEAPF32[$212>>2] = $214;
    $215 = +HEAPF32[$14>>2];
    $216 = 2.0 * $215;
    $217 = $9;
    $218 = ((($217)) + 8|0);
    $219 = ((($218)) + 8|0);
    $220 = +HEAPF32[$219>>2];
    $221 = $220 - $216;
    HEAPF32[$219>>2] = $221;
    $222 = $8;
    $223 = ((($222)) + 72|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $224 & 1;
    $226 = ($225|0)!=(0);
    if ($226) {
     $227 = $11;
     $228 = $8;
     $229 = ((($228)) + 72|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $6;
     $232 = (+_nk_panel_get_border($227,$230,$231));
     $233 = $9;
     $234 = ((($233)) + 52|0);
     HEAPF32[$234>>2] = $232;
     $235 = $9;
     $236 = ((($235)) + 8|0);
     $237 = $9;
     $238 = ((($237)) + 8|0);
     $239 = $9;
     $240 = ((($239)) + 52|0);
     $241 = +HEAPF32[$240>>2];
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$238>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$238+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$238+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$238+12>>2]|0;
     _nk_shrink_rect($19,$$byval_copy2,$241);
     ;HEAP32[$236>>2]=HEAP32[$19>>2]|0;HEAP32[$236+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$236+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$236+12>>2]=HEAP32[$19+12>>2]|0;
    } else {
     $242 = $9;
     $243 = ((($242)) + 52|0);
     HEAPF32[$243>>2] = 0.0;
    }
    $244 = $9;
    $245 = ((($244)) + 8|0);
    $246 = ((($245)) + 4|0);
    $247 = +HEAPF32[$246>>2];
    $248 = $9;
    $249 = ((($248)) + 36|0);
    HEAPF32[$249>>2] = $247;
    $250 = $9;
    $251 = ((($250)) + 8|0);
    $252 = +HEAPF32[$251>>2];
    $253 = $9;
    $254 = ((($253)) + 32|0);
    HEAPF32[$254>>2] = $252;
    $255 = $9;
    $256 = ((($255)) + 40|0);
    HEAPF32[$256>>2] = 0.0;
    $257 = $9;
    $258 = ((($257)) + 48|0);
    HEAPF32[$258>>2] = 0.0;
    $259 = $9;
    $260 = ((($259)) + 44|0);
    HEAPF32[$260>>2] = 0.0;
    $261 = $9;
    $262 = ((($261)) + 100|0);
    $263 = ((($262)) + 4|0);
    HEAP32[$263>>2] = 0;
    $264 = $9;
    $265 = ((($264)) + 100|0);
    $266 = ((($265)) + 12|0);
    HEAP32[$266>>2] = 0;
    $267 = $9;
    $268 = ((($267)) + 100|0);
    $269 = ((($268)) + 16|0);
    HEAP32[$269>>2] = 0;
    $270 = $9;
    $271 = ((($270)) + 100|0);
    $272 = ((($271)) + 20|0);
    HEAPF32[$272>>2] = 0.0;
    $273 = $9;
    $274 = ((($273)) + 100|0);
    $275 = ((($274)) + 52|0);
    HEAP32[$275>>2] = 0;
    $276 = ((($14)) + 4|0);
    $277 = +HEAPF32[$276>>2];
    $278 = $9;
    $279 = ((($278)) + 100|0);
    $280 = ((($279)) + 8|0);
    HEAPF32[$280>>2] = $277;
    $281 = $9;
    $282 = ((($281)) + 56|0);
    HEAP32[$282>>2] = 1;
    $283 = $8;
    $284 = ((($283)) + 72|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = $285 & 32;
    $287 = ($286|0)!=(0);
    if (!($287)) {
     $288 = +HEAPF32[$13>>2];
     $289 = $9;
     $290 = ((($289)) + 8|0);
     $291 = ((($290)) + 8|0);
     $292 = +HEAPF32[$291>>2];
     $293 = $292 - $288;
     HEAPF32[$291>>2] = $293;
    }
    $294 = $6;
    $295 = (_nk_panel_is_nonblock($294)|0);
    $296 = ($295|0)!=(0);
    if (!($296)) {
     $297 = $9;
     $298 = ((($297)) + 44|0);
     HEAPF32[$298>>2] = 0.0;
     $299 = $8;
     $300 = ((($299)) + 72|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = $301 & 32;
     $303 = ($302|0)!=(0);
     if ($303) {
      $304 = $8;
      $305 = ((($304)) + 72|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = $306 & 4;
      $308 = ($307|0)!=(0);
      if ($308) {
       label = 28;
      }
     } else {
      label = 28;
     }
     if ((label|0) == 28) {
      $309 = ((($13)) + 4|0);
      $310 = +HEAPF32[$309>>2];
      $311 = $9;
      $312 = ((($311)) + 44|0);
      HEAPF32[$312>>2] = $310;
     }
     $313 = $9;
     $314 = ((($313)) + 44|0);
     $315 = +HEAPF32[$314>>2];
     $316 = $9;
     $317 = ((($316)) + 8|0);
     $318 = ((($317)) + 12|0);
     $319 = +HEAPF32[$318>>2];
     $320 = $319 - $315;
     HEAPF32[$318>>2] = $320;
    }
    $321 = $8;
    $322 = ((($321)) + 72|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = $5;
    $325 = (_nk_panel_has_header($323,$324)|0);
    $326 = ($325|0)!=(0);
    if ($326) {
     $22 = 0;
     $327 = $8;
     $328 = ((($327)) + 76|0);
     $329 = +HEAPF32[$328>>2];
     HEAPF32[$21>>2] = $329;
     $330 = $8;
     $331 = ((($330)) + 76|0);
     $332 = ((($331)) + 4|0);
     $333 = +HEAPF32[$332>>2];
     $334 = ((($21)) + 4|0);
     HEAPF32[$334>>2] = $333;
     $335 = $8;
     $336 = ((($335)) + 76|0);
     $337 = ((($336)) + 8|0);
     $338 = +HEAPF32[$337>>2];
     $339 = ((($21)) + 8|0);
     HEAPF32[$339>>2] = $338;
     $340 = $12;
     $341 = ((($340)) + 4|0);
     $342 = +HEAPF32[$341>>2];
     $343 = $11;
     $344 = ((($343)) + 4832|0);
     $345 = ((($344)) + 344|0);
     $346 = ((($345)) + 4|0);
     $347 = +HEAPF32[$346>>2];
     $348 = 2.0 * $347;
     $349 = $342 + $348;
     $350 = ((($21)) + 12|0);
     HEAPF32[$350>>2] = $349;
     $351 = $11;
     $352 = ((($351)) + 4832|0);
     $353 = ((($352)) + 352|0);
     $354 = ((($353)) + 4|0);
     $355 = +HEAPF32[$354>>2];
     $356 = 2.0 * $355;
     $357 = ((($21)) + 12|0);
     $358 = +HEAPF32[$357>>2];
     $359 = $358 + $356;
     HEAPF32[$357>>2] = $359;
     $360 = ((($21)) + 12|0);
     $361 = +HEAPF32[$360>>2];
     $362 = $9;
     $363 = ((($362)) + 48|0);
     HEAPF32[$363>>2] = $361;
     $364 = ((($21)) + 12|0);
     $365 = +HEAPF32[$364>>2];
     $366 = $9;
     $367 = ((($366)) + 8|0);
     $368 = ((($367)) + 4|0);
     $369 = +HEAPF32[$368>>2];
     $370 = $369 + $365;
     HEAPF32[$368>>2] = $370;
     $371 = ((($21)) + 12|0);
     $372 = +HEAPF32[$371>>2];
     $373 = $9;
     $374 = ((($373)) + 8|0);
     $375 = ((($374)) + 12|0);
     $376 = +HEAPF32[$375>>2];
     $377 = $376 - $372;
     HEAPF32[$375>>2] = $377;
     $378 = ((($21)) + 12|0);
     $379 = +HEAPF32[$378>>2];
     $380 = $9;
     $381 = ((($380)) + 36|0);
     $382 = +HEAPF32[$381>>2];
     $383 = $382 + $379;
     HEAPF32[$381>>2] = $383;
     $384 = $4;
     $385 = ((($384)) + 12904|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = $8;
     $388 = ($386|0)==($387|0);
     do {
      if ($388) {
       $389 = $11;
       $390 = ((($389)) + 4832|0);
       $391 = ((($390)) + 40|0);
       $22 = $391;
       $392 = ((($20)) + 12|0);
       $393 = $11;
       $394 = ((($393)) + 4832|0);
       $395 = ((($394)) + 336|0);
       ;HEAP32[$392>>2]=HEAP32[$395>>2]|0;
      } else {
       $396 = $4;
       ;HEAP32[$$byval_copy3>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$21+12>>2]|0;
       $397 = (_nk_input_is_mouse_hovering_rect($396,$$byval_copy3)|0);
       $398 = ($397|0)!=(0);
       $399 = $11;
       $400 = ((($399)) + 4832|0);
       if ($398) {
        $401 = ((($400)) + 20|0);
        $22 = $401;
        $402 = ((($20)) + 12|0);
        $403 = $11;
        $404 = ((($403)) + 4832|0);
        $405 = ((($404)) + 332|0);
        ;HEAP32[$402>>2]=HEAP32[$405>>2]|0;
        break;
       } else {
        $22 = $400;
        $406 = ((($20)) + 12|0);
        $407 = $11;
        $408 = ((($407)) + 4832|0);
        $409 = ((($408)) + 328|0);
        ;HEAP32[$406>>2]=HEAP32[$409>>2]|0;
        break;
       }
      }
     } while(0);
     $410 = ((($21)) + 12|0);
     $411 = +HEAPF32[$410>>2];
     $412 = $411 + 1.0;
     HEAPF32[$410>>2] = $412;
     $413 = $22;
     $414 = HEAP32[$413>>2]|0;
     $415 = ($414|0)==(1);
     $416 = ((($20)) + 8|0);
     if ($415) {
      _nk_rgba($23,0,0,0,0);
      ;HEAP8[$416>>0]=HEAP8[$23>>0]|0;HEAP8[$416+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$416+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$416+3>>0]=HEAP8[$23+3>>0]|0;
      $417 = $8;
      $418 = ((($417)) + 100|0);
      $419 = $22;
      $420 = ((($419)) + 4|0);
      ;HEAP32[$$byval_copy4>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$21+12>>2]|0;
      ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
      _nk_draw_image($418,$$byval_copy4,$420,$nk_white$byval_copy);
     } else {
      $421 = $22;
      $422 = ((($421)) + 4|0);
      ;HEAP32[$416>>2]=HEAP32[$422>>2]|0;
      $423 = $10;
      $424 = $22;
      $425 = ((($424)) + 4|0);
      ;HEAP32[$$byval_copy5>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$21+12>>2]|0;
      ;HEAP8[$$byval_copy6>>0]=HEAP8[$425>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$425+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$425+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$425+3>>0]|0;
      _nk_fill_rect($423,$$byval_copy5,0.0,$$byval_copy6);
     }
     $426 = ((($21)) + 4|0);
     $427 = +HEAPF32[$426>>2];
     $428 = $11;
     $429 = ((($428)) + 4832|0);
     $430 = ((($429)) + 344|0);
     $431 = ((($430)) + 4|0);
     $432 = +HEAPF32[$431>>2];
     $433 = $427 + $432;
     $434 = ((($24)) + 4|0);
     HEAPF32[$434>>2] = $433;
     $435 = ((($21)) + 12|0);
     $436 = +HEAPF32[$435>>2];
     $437 = $11;
     $438 = ((($437)) + 4832|0);
     $439 = ((($438)) + 344|0);
     $440 = ((($439)) + 4|0);
     $441 = +HEAPF32[$440>>2];
     $442 = 2.0 * $441;
     $443 = $436 - $442;
     $444 = ((($24)) + 12|0);
     HEAPF32[$444>>2] = $443;
     $445 = ((($24)) + 12|0);
     $446 = +HEAPF32[$445>>2];
     $447 = ((($24)) + 8|0);
     HEAPF32[$447>>2] = $446;
     $448 = $8;
     $449 = ((($448)) + 72|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = $450 & 8;
     $452 = ($451|0)!=(0);
     do {
      if ($452) {
       HEAP32[$25>>2] = 0;
       $453 = $11;
       $454 = ((($453)) + 4832|0);
       $455 = ((($454)) + 340|0);
       $456 = HEAP32[$455>>2]|0;
       $457 = ($456|0)==(1);
       if ($457) {
        $458 = ((($21)) + 8|0);
        $459 = +HEAPF32[$458>>2];
        $460 = +HEAPF32[$21>>2];
        $461 = $459 + $460;
        $462 = ((($24)) + 8|0);
        $463 = +HEAPF32[$462>>2];
        $464 = $11;
        $465 = ((($464)) + 4832|0);
        $466 = ((($465)) + 344|0);
        $467 = +HEAPF32[$466>>2];
        $468 = $463 + $467;
        $469 = $461 - $468;
        HEAPF32[$24>>2] = $469;
        $470 = ((($24)) + 8|0);
        $471 = +HEAPF32[$470>>2];
        $472 = $11;
        $473 = ((($472)) + 4832|0);
        $474 = ((($473)) + 360|0);
        $475 = +HEAPF32[$474>>2];
        $476 = $471 + $475;
        $477 = $11;
        $478 = ((($477)) + 4832|0);
        $479 = ((($478)) + 344|0);
        $480 = +HEAPF32[$479>>2];
        $481 = $476 + $480;
        $482 = ((($21)) + 8|0);
        $483 = +HEAPF32[$482>>2];
        $484 = $483 - $481;
        HEAPF32[$482>>2] = $484;
       } else {
        $485 = +HEAPF32[$21>>2];
        $486 = $11;
        $487 = ((($486)) + 4832|0);
        $488 = ((($487)) + 344|0);
        $489 = +HEAPF32[$488>>2];
        $490 = $485 + $489;
        HEAPF32[$24>>2] = $490;
        $491 = ((($24)) + 8|0);
        $492 = +HEAPF32[$491>>2];
        $493 = $11;
        $494 = ((($493)) + 4832|0);
        $495 = ((($494)) + 360|0);
        $496 = +HEAPF32[$495>>2];
        $497 = $492 + $496;
        $498 = $11;
        $499 = ((($498)) + 4832|0);
        $500 = ((($499)) + 344|0);
        $501 = +HEAPF32[$500>>2];
        $502 = $497 + $501;
        $503 = +HEAPF32[$21>>2];
        $504 = $503 + $502;
        HEAPF32[$21>>2] = $504;
       }
       $505 = $8;
       $506 = ((($505)) + 100|0);
       $507 = $11;
       $508 = ((($507)) + 4832|0);
       $509 = ((($508)) + 316|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = $11;
       $512 = ((($511)) + 4832|0);
       $513 = ((($512)) + 60|0);
       $514 = $7;
       $515 = $11;
       $516 = HEAP32[$515>>2]|0;
       ;HEAP32[$$byval_copy7>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$24+12>>2]|0;
       $517 = (_nk_do_button_symbol($25,$506,$$byval_copy7,$510,0,$513,$514,$516)|0);
       $518 = ($517|0)!=(0);
       if ($518) {
        $519 = $8;
        $520 = ((($519)) + 72|0);
        $521 = HEAP32[$520>>2]|0;
        $522 = $521 & 2048;
        $523 = ($522|0)!=(0);
        if ($523) {
         break;
        }
        $524 = $9;
        $525 = ((($524)) + 4|0);
        $526 = HEAP32[$525>>2]|0;
        $527 = $526 | 4096;
        HEAP32[$525>>2] = $527;
        $528 = $9;
        $529 = ((($528)) + 4|0);
        $530 = HEAP32[$529>>2]|0;
        $531 = $530 | 8192;
        HEAP32[$529>>2] = $531;
        $532 = $9;
        $533 = ((($532)) + 4|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = $534 & -16385;
        HEAP32[$533>>2] = $535;
       }
      }
     } while(0);
     $536 = $8;
     $537 = ((($536)) + 72|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = $538 & 16;
     $540 = ($539|0)!=(0);
     do {
      if ($540) {
       HEAP32[$26>>2] = 0;
       $541 = $11;
       $542 = ((($541)) + 4832|0);
       $543 = ((($542)) + 340|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = ($544|0)==(1);
       if ($545) {
        $546 = ((($21)) + 8|0);
        $547 = +HEAPF32[$546>>2];
        $548 = +HEAPF32[$21>>2];
        $549 = $547 + $548;
        $550 = ((($24)) + 8|0);
        $551 = +HEAPF32[$550>>2];
        $552 = $549 - $551;
        HEAPF32[$24>>2] = $552;
        $553 = $8;
        $554 = ((($553)) + 72|0);
        $555 = HEAP32[$554>>2]|0;
        $556 = $555 & 8;
        $557 = ($556|0)!=(0);
        if (!($557)) {
         $558 = $11;
         $559 = ((($558)) + 4832|0);
         $560 = ((($559)) + 344|0);
         $561 = +HEAPF32[$560>>2];
         $562 = +HEAPF32[$24>>2];
         $563 = $562 - $561;
         HEAPF32[$24>>2] = $563;
         $564 = $11;
         $565 = ((($564)) + 4832|0);
         $566 = ((($565)) + 344|0);
         $567 = +HEAPF32[$566>>2];
         $568 = ((($21)) + 8|0);
         $569 = +HEAPF32[$568>>2];
         $570 = $569 - $567;
         HEAPF32[$568>>2] = $570;
        }
        $571 = ((($24)) + 8|0);
        $572 = +HEAPF32[$571>>2];
        $573 = $11;
        $574 = ((($573)) + 4832|0);
        $575 = ((($574)) + 360|0);
        $576 = +HEAPF32[$575>>2];
        $577 = $572 + $576;
        $578 = ((($21)) + 8|0);
        $579 = +HEAPF32[$578>>2];
        $580 = $579 - $577;
        HEAPF32[$578>>2] = $580;
       } else {
        $581 = +HEAPF32[$21>>2];
        HEAPF32[$24>>2] = $581;
        $582 = ((($24)) + 8|0);
        $583 = +HEAPF32[$582>>2];
        $584 = $11;
        $585 = ((($584)) + 4832|0);
        $586 = ((($585)) + 360|0);
        $587 = +HEAPF32[$586>>2];
        $588 = $583 + $587;
        $589 = $11;
        $590 = ((($589)) + 4832|0);
        $591 = ((($590)) + 344|0);
        $592 = +HEAPF32[$591>>2];
        $593 = $588 + $592;
        $594 = +HEAPF32[$21>>2];
        $595 = $594 + $593;
        HEAPF32[$21>>2] = $595;
       }
       $596 = $8;
       $597 = ((($596)) + 100|0);
       $598 = $9;
       $599 = ((($598)) + 4|0);
       $600 = HEAP32[$599>>2]|0;
       $601 = $600 & 16384;
       $602 = ($601|0)!=(0);
       $603 = $11;
       $604 = ((($603)) + 4832|0);
       if ($602) {
        $605 = ((($604)) + 324|0);
        $606 = HEAP32[$605>>2]|0;
        $615 = $606;
       } else {
        $607 = ((($604)) + 320|0);
        $608 = HEAP32[$607>>2]|0;
        $615 = $608;
       }
       $609 = $11;
       $610 = ((($609)) + 4832|0);
       $611 = ((($610)) + 188|0);
       $612 = $7;
       $613 = $11;
       $614 = HEAP32[$613>>2]|0;
       ;HEAP32[$$byval_copy8>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$24+12>>2]|0;
       $616 = (_nk_do_button_symbol($26,$597,$$byval_copy8,$615,0,$611,$612,$614)|0);
       $617 = ($616|0)!=(0);
       if (!($617)) {
        break;
       }
       $618 = $8;
       $619 = ((($618)) + 72|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = $620 & 2048;
       $622 = ($621|0)!=(0);
       if ($622) {
        break;
       }
       $623 = $9;
       $624 = ((($623)) + 4|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = $625 & 16384;
       $627 = ($626|0)!=(0);
       $628 = $9;
       $629 = ((($628)) + 4|0);
       $630 = HEAP32[$629>>2]|0;
       $631 = $630 & -16385;
       $632 = $630 | 16384;
       $633 = $627 ? $631 : $632;
       $634 = $9;
       $635 = ((($634)) + 4|0);
       HEAP32[$635>>2] = $633;
      }
     } while(0);
     $636 = $5;
     $637 = (_nk_strlen($636)|0);
     $27 = $637;
     ;HEAP32[$28>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;HEAP32[$28+12>>2]=0|0;
     $638 = $12;
     $639 = ((($638)) + 8|0);
     $640 = HEAP32[$639>>2]|0;
     $641 = $12;
     $642 = $12;
     $643 = ((($642)) + 4|0);
     $644 = +HEAPF32[$643>>2];
     $645 = $5;
     $646 = $27;
     ;HEAP32[$$byval_copy9>>2]=HEAP32[$641>>2]|0;
     $647 = (+FUNCTION_TABLE_didii[$640 & 15]($$byval_copy9,$644,$645,$646));
     $29 = $647;
     _nk_vec2($30,0.0,0.0);
     ;HEAP32[$20>>2]=HEAP32[$30>>2]|0;HEAP32[$20+4>>2]=HEAP32[$30+4>>2]|0;
     $648 = +HEAPF32[$21>>2];
     $649 = $11;
     $650 = ((($649)) + 4832|0);
     $651 = ((($650)) + 344|0);
     $652 = +HEAPF32[$651>>2];
     $653 = $648 + $652;
     HEAPF32[$28>>2] = $653;
     $654 = $11;
     $655 = ((($654)) + 4832|0);
     $656 = ((($655)) + 352|0);
     $657 = +HEAPF32[$656>>2];
     $658 = +HEAPF32[$28>>2];
     $659 = $658 + $657;
     HEAPF32[$28>>2] = $659;
     $660 = ((($21)) + 4|0);
     $661 = +HEAPF32[$660>>2];
     $662 = $11;
     $663 = ((($662)) + 4832|0);
     $664 = ((($663)) + 352|0);
     $665 = ((($664)) + 4|0);
     $666 = +HEAPF32[$665>>2];
     $667 = $661 + $666;
     $668 = ((($28)) + 4|0);
     HEAPF32[$668>>2] = $667;
     $669 = $12;
     $670 = ((($669)) + 4|0);
     $671 = +HEAPF32[$670>>2];
     $672 = $11;
     $673 = ((($672)) + 4832|0);
     $674 = ((($673)) + 352|0);
     $675 = ((($674)) + 4|0);
     $676 = +HEAPF32[$675>>2];
     $677 = 2.0 * $676;
     $678 = $671 + $677;
     $679 = ((($28)) + 12|0);
     HEAPF32[$679>>2] = $678;
     $680 = $29;
     $681 = $11;
     $682 = ((($681)) + 4832|0);
     $683 = ((($682)) + 360|0);
     $684 = +HEAPF32[$683>>2];
     $685 = 2.0 * $684;
     $686 = $680 + $685;
     $687 = ((($28)) + 8|0);
     HEAPF32[$687>>2] = $686;
     $688 = $10;
     $689 = $5;
     $690 = $27;
     $691 = $12;
     ;HEAP32[$$byval_copy10>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$28+12>>2]|0;
     _nk_widget_text($688,$$byval_copy10,$689,$690,$20,17,$691);
    }
    $692 = $9;
    $693 = ((($692)) + 4|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = $694 & 16384;
    $696 = ($695|0)!=(0);
    do {
     if (!($696)) {
      $697 = $9;
      $698 = ((($697)) + 4|0);
      $699 = HEAP32[$698>>2]|0;
      $700 = $699 & 1024;
      $701 = ($700|0)!=(0);
      if (!($701)) {
       $702 = $8;
       $703 = ((($702)) + 76|0);
       $704 = +HEAPF32[$703>>2];
       HEAPF32[$31>>2] = $704;
       $705 = $8;
       $706 = ((($705)) + 76|0);
       $707 = ((($706)) + 8|0);
       $708 = +HEAPF32[$707>>2];
       $709 = ((($31)) + 8|0);
       HEAPF32[$709>>2] = $708;
       $710 = $8;
       $711 = ((($710)) + 76|0);
       $712 = ((($711)) + 4|0);
       $713 = +HEAPF32[$712>>2];
       $714 = $9;
       $715 = ((($714)) + 48|0);
       $716 = +HEAPF32[$715>>2];
       $717 = $713 + $716;
       $718 = ((($31)) + 4|0);
       HEAPF32[$718>>2] = $717;
       $719 = $8;
       $720 = ((($719)) + 76|0);
       $721 = ((($720)) + 12|0);
       $722 = +HEAPF32[$721>>2];
       $723 = $9;
       $724 = ((($723)) + 48|0);
       $725 = +HEAPF32[$724>>2];
       $726 = $722 - $725;
       $727 = ((($31)) + 12|0);
       HEAPF32[$727>>2] = $726;
       $728 = $11;
       $729 = ((($728)) + 4832|0);
       $730 = ((($729)) + 368|0);
       $731 = HEAP32[$730>>2]|0;
       $732 = ($731|0)==(1);
       $733 = $10;
       $734 = $11;
       $735 = ((($734)) + 4832|0);
       $736 = ((($735)) + 368|0);
       $737 = ((($736)) + 4|0);
       if ($732) {
        ;HEAP32[$$byval_copy11>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$31+12>>2]|0;
        ;HEAP8[$nk_white$byval_copy12>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy12+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy12+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy12+3>>0]=HEAP8[19725+3>>0]|0;
        _nk_draw_image($733,$$byval_copy11,$737,$nk_white$byval_copy12);
        break;
       } else {
        ;HEAP32[$$byval_copy13>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy13+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy13+12>>2]=HEAP32[$31+12>>2]|0;
        ;HEAP8[$$byval_copy14>>0]=HEAP8[$737>>0]|0;HEAP8[$$byval_copy14+1>>0]=HEAP8[$737+1>>0]|0;HEAP8[$$byval_copy14+2>>0]=HEAP8[$737+2>>0]|0;HEAP8[$$byval_copy14+3>>0]=HEAP8[$737+3>>0]|0;
        _nk_fill_rect($733,$$byval_copy13,0.0,$$byval_copy14);
        break;
       }
      }
     }
    } while(0);
    $738 = $9;
    $739 = ((($738)) + 60|0);
    $740 = $9;
    $741 = ((($740)) + 8|0);
    ;HEAP32[$739>>2]=HEAP32[$741>>2]|0;HEAP32[$739+4>>2]=HEAP32[$741+4>>2]|0;HEAP32[$739+8>>2]=HEAP32[$741+8>>2]|0;HEAP32[$739+12>>2]=HEAP32[$741+12>>2]|0;
    $742 = $8;
    $743 = ((($742)) + 100|0);
    $744 = ((($743)) + 4|0);
    $745 = $9;
    $746 = ((($745)) + 60|0);
    $747 = +HEAPF32[$746>>2];
    $748 = $9;
    $749 = ((($748)) + 60|0);
    $750 = ((($749)) + 4|0);
    $751 = +HEAPF32[$750>>2];
    $752 = $9;
    $753 = ((($752)) + 60|0);
    $754 = +HEAPF32[$753>>2];
    $755 = $9;
    $756 = ((($755)) + 60|0);
    $757 = ((($756)) + 8|0);
    $758 = +HEAPF32[$757>>2];
    $759 = $754 + $758;
    $760 = $9;
    $761 = ((($760)) + 60|0);
    $762 = ((($761)) + 4|0);
    $763 = +HEAPF32[$762>>2];
    $764 = $9;
    $765 = ((($764)) + 60|0);
    $766 = ((($765)) + 12|0);
    $767 = +HEAPF32[$766>>2];
    $768 = $763 + $767;
    _nk_unify($32,$744,$747,$751,$759,$768);
    $769 = $10;
    ;HEAP32[$$byval_copy15>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$byval_copy15+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$$byval_copy15+12>>2]=HEAP32[$32+12>>2]|0;
    _nk_push_scissor($769,$$byval_copy15);
    $770 = $9;
    $771 = ((($770)) + 60|0);
    ;HEAP32[$771>>2]=HEAP32[$32>>2]|0;HEAP32[$771+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$771+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$771+12>>2]=HEAP32[$32+12>>2]|0;
    $772 = $9;
    $773 = ((($772)) + 4|0);
    $774 = HEAP32[$773>>2]|0;
    $775 = $774 & 4096;
    $776 = ($775|0)!=(0);
    if ($776) {
     $784 = 0;
    } else {
     $777 = $9;
     $778 = ((($777)) + 4|0);
     $779 = HEAP32[$778>>2]|0;
     $780 = $779 & 16384;
     $781 = ($780|0)!=(0);
     $782 = $781 ^ 1;
     $784 = $782;
    }
    $783 = $784&1;
    $3 = $783;
    $785 = $3;
    STACKTOP = sp;return ($785|0);
   }
  }
 }
 $3 = 0;
 $785 = $3;
 STACKTOP = sp;return ($785|0);
}
function _nk_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),17357,(18896|0));
  // unreachable;
 }
 $5 = $1;
 $6 = ((($5)) + 12908|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((18903|0),(1320|0),17358,(18896|0));
  // unreachable;
 }
 $9 = $1;
 $10 = ((($9)) + 12908|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((18968|0),(1320|0),17359,(18896|0));
  // unreachable;
 }
 $15 = $1;
 $16 = ((($15)) + 12908|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 140|0);
 $19 = HEAP32[$18>>2]|0;
 $2 = $19;
 $20 = $1;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $2;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(1);
 if ($28) {
  $29 = $1;
  $30 = ((($29)) + 12908|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 72|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 & 4096;
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $1;
   $37 = ((($36)) + 12908|0);
   HEAP32[$37>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $38 = $1;
 _nk_panel_end($38);
 $39 = $1;
 $40 = $1;
 $41 = ((($40)) + 12908|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 140|0);
 $44 = HEAP32[$43>>2]|0;
 _nk_free_panel($39,$44);
 $45 = $1;
 $46 = ((($45)) + 12908|0);
 HEAP32[$46>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_panel_end($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0.0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0;
 var $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0;
 var $150 = 0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0;
 var $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0.0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0;
 var $277 = 0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0;
 var $295 = 0.0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0.0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0;
 var $475 = 0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0;
 var $493 = 0.0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0.0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0.0, $585 = 0.0, $586 = 0, $587 = 0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0.0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0.0, $603 = 0.0, $604 = 0, $605 = 0, $606 = 0.0, $607 = 0.0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0.0, $622 = 0, $623 = 0, $624 = 0, $625 = 0.0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0, $648 = 0.0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0;
 var $655 = 0, $656 = 0, $657 = 0.0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0;
 var $673 = 0.0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0;
 var $691 = 0.0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0.0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0, $716 = 0, $717 = 0.0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0.0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0.0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0.0, $743 = 0.0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0.0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0.0, $762 = 0.0;
 var $763 = 0.0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0.0, $774 = 0, $775 = 0.0, $776 = 0.0, $777 = 0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0;
 var $781 = 0.0, $782 = 0.0, $783 = 0, $784 = 0.0, $785 = 0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0, $79 = 0, $790 = 0.0, $791 = 0, $792 = 0.0, $793 = 0.0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0.0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0.0, $821 = 0, $822 = 0, $823 = 0, $824 = 0.0, $825 = 0.0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0.0, $831 = 0, $832 = 0, $833 = 0, $834 = 0.0;
 var $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0.0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0.0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0.0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0.0, $857 = 0.0, $858 = 0, $859 = 0, $86 = 0.0, $860 = 0, $861 = 0, $862 = 0.0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0.0, $868 = 0.0, $869 = 0, $87 = 0, $870 = 0.0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0.0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0.0, $884 = 0, $885 = 0, $886 = 0, $887 = 0.0, $888 = 0.0, $889 = 0;
 var $89 = 0.0, $890 = 0.0, $891 = 0.0, $892 = 0.0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0.0, $898 = 0, $899 = 0, $9 = 0, $90 = 0.0, $900 = 0, $901 = 0, $902 = 0.0, $903 = 0.0, $904 = 0, $905 = 0.0, $906 = 0.0;
 var $907 = 0.0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $nk_null_rect$byval_copy = 0, $nk_white$byval_copy = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $$byval_copy30 = sp + 320|0;
 $$byval_copy29 = sp + 376|0;
 $nk_white$byval_copy = sp + 372|0;
 $$byval_copy28 = sp + 304|0;
 $$byval_copy27 = sp + 368|0;
 $$byval_copy26 = sp + 364|0;
 $$byval_copy25 = sp + 360|0;
 $$byval_copy24 = sp + 356|0;
 $$byval_copy23 = sp + 288|0;
 $$byval_copy22 = sp + 272|0;
 $$byval_copy21 = sp + 256|0;
 $$byval_copy20 = sp + 352|0;
 $$byval_copy19 = sp + 240|0;
 $$byval_copy18 = sp + 348|0;
 $$byval_copy17 = sp + 224|0;
 $$byval_copy16 = sp + 344|0;
 $$byval_copy15 = sp + 208|0;
 $$byval_copy14 = sp + 340|0;
 $$byval_copy = sp + 192|0;
 $nk_null_rect$byval_copy = sp + 176|0;
 $7 = sp + 144|0;
 $8 = sp + 136|0;
 $9 = sp + 128|0;
 $10 = sp + 112|0;
 $11 = sp + 96|0;
 $17 = sp + 68|0;
 $20 = sp + 56|0;
 $24 = sp + 336|0;
 $26 = sp + 24|0;
 $28 = sp + 8|0;
 $1 = $0;
 $31 = $1;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  ___assert_fail((2989|0),(1320|0),16605,(24140|0));
  // unreachable;
 }
 $33 = $1;
 $34 = ((($33)) + 12908|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  ___assert_fail((19010|0),(1320|0),16606,(24140|0));
  // unreachable;
 }
 $37 = $1;
 $38 = ((($37)) + 12908|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 140|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  ___assert_fail((18968|0),(1320|0),16607,(24140|0));
  // unreachable;
 }
 $43 = $1;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $1;
 $46 = ((($45)) + 12908|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = $1;
 $50 = ((($49)) + 12908|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 140|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $1;
 $56 = ((($55)) + 12908|0);
 $57 = HEAP32[$56>>2]|0;
 $3 = $57;
 $58 = $3;
 $59 = ((($58)) + 140|0);
 $60 = HEAP32[$59>>2]|0;
 $4 = $60;
 $61 = $1;
 $62 = ((($61)) + 340|0);
 $5 = $62;
 $63 = $3;
 $64 = ((($63)) + 100|0);
 $6 = $64;
 $65 = $4;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 & 2048;
 $69 = ($68|0)!=(0);
 $70 = $1;
 $71 = $69 ? 0 : $70;
 $2 = $71;
 $72 = $4;
 $73 = HEAP32[$72>>2]|0;
 $74 = (_nk_panel_is_sub($73)|0);
 $75 = ($74|0)!=(0);
 if (!($75)) {
  $76 = $6;
  ;HEAP32[$nk_null_rect$byval_copy>>2]=HEAP32[8>>2]|0;HEAP32[$nk_null_rect$byval_copy+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$nk_null_rect$byval_copy+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$nk_null_rect$byval_copy+12>>2]=HEAP32[8+12>>2]|0;
  _nk_push_scissor($76,$nk_null_rect$byval_copy);
 }
 $77 = $5;
 $78 = ((($77)) + 4832|0);
 $79 = ((($78)) + 480|0);
 ;HEAP32[$7>>2]=HEAP32[$79>>2]|0;HEAP32[$7+4>>2]=HEAP32[$79+4>>2]|0;
 $80 = $5;
 $81 = $4;
 $82 = HEAP32[$81>>2]|0;
 _nk_panel_get_padding($9,$80,$82);
 ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;
 $83 = $4;
 $84 = ((($83)) + 100|0);
 $85 = ((($84)) + 8|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $4;
 $88 = ((($87)) + 36|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $89 + $86;
 HEAPF32[$88>>2] = $90;
 $91 = $4;
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $93 & 1024;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $4;
  $97 = ((($96)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 & 16384;
  $100 = ($99|0)!=(0);
  if (!($100)) {
   $101 = $4;
   $102 = ((($101)) + 36|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $4;
   $105 = ((($104)) + 8|0);
   $106 = ((($105)) + 4|0);
   $107 = +HEAPF32[$106>>2];
   $108 = $4;
   $109 = ((($108)) + 8|0);
   $110 = ((($109)) + 12|0);
   $111 = +HEAPF32[$110>>2];
   $112 = $107 + $111;
   $113 = $103 < $112;
   if ($113) {
    $114 = $4;
    $115 = ((($114)) + 36|0);
    $116 = +HEAPF32[$115>>2];
    $117 = $4;
    $118 = ((($117)) + 8|0);
    $119 = ((($118)) + 4|0);
    $120 = +HEAPF32[$119>>2];
    $121 = $116 - $120;
    $122 = $4;
    $123 = ((($122)) + 8|0);
    $124 = ((($123)) + 12|0);
    HEAPF32[$124>>2] = $121;
   }
   $125 = $3;
   $126 = ((($125)) + 76|0);
   $127 = +HEAPF32[$126>>2];
   HEAPF32[$10>>2] = $127;
   $128 = $4;
   $129 = ((($128)) + 8|0);
   $130 = ((($129)) + 4|0);
   $131 = +HEAPF32[$130>>2];
   $132 = ((($10)) + 4|0);
   HEAPF32[$132>>2] = $131;
   $133 = ((($8)) + 4|0);
   $134 = +HEAPF32[$133>>2];
   $135 = ((($10)) + 12|0);
   HEAPF32[$135>>2] = $134;
   $136 = $3;
   $137 = ((($136)) + 76|0);
   $138 = ((($137)) + 8|0);
   $139 = +HEAPF32[$138>>2];
   $140 = ((($10)) + 8|0);
   HEAPF32[$140>>2] = $139;
   $141 = $6;
   $142 = $5;
   $143 = ((($142)) + 4832|0);
   $144 = ((($143)) + 388|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$10+12>>2]|0;
   ;HEAP8[$$byval_copy14>>0]=HEAP8[$144>>0]|0;HEAP8[$$byval_copy14+1>>0]=HEAP8[$144+1>>0]|0;HEAP8[$$byval_copy14+2>>0]=HEAP8[$144+2>>0]|0;HEAP8[$$byval_copy14+3>>0]=HEAP8[$144+3>>0]|0;
   _nk_fill_rect($141,$$byval_copy,0.0,$$byval_copy14);
   $145 = $3;
   $146 = ((($145)) + 76|0);
   $147 = +HEAPF32[$146>>2];
   HEAPF32[$10>>2] = $147;
   $148 = $4;
   $149 = ((($148)) + 8|0);
   $150 = ((($149)) + 4|0);
   $151 = +HEAPF32[$150>>2];
   $152 = ((($10)) + 4|0);
   HEAPF32[$152>>2] = $151;
   $153 = +HEAPF32[$8>>2];
   $154 = $4;
   $155 = ((($154)) + 52|0);
   $156 = +HEAPF32[$155>>2];
   $157 = $153 + $156;
   $158 = ((($10)) + 8|0);
   HEAPF32[$158>>2] = $157;
   $159 = $4;
   $160 = ((($159)) + 8|0);
   $161 = ((($160)) + 12|0);
   $162 = +HEAPF32[$161>>2];
   $163 = ((($10)) + 12|0);
   HEAPF32[$163>>2] = $162;
   $164 = $6;
   $165 = $5;
   $166 = ((($165)) + 4832|0);
   $167 = ((($166)) + 388|0);
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy15+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy15+12>>2]=HEAP32[$10+12>>2]|0;
   ;HEAP8[$$byval_copy16>>0]=HEAP8[$167>>0]|0;HEAP8[$$byval_copy16+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$$byval_copy16+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$$byval_copy16+3>>0]=HEAP8[$167+3>>0]|0;
   _nk_fill_rect($164,$$byval_copy15,0.0,$$byval_copy16);
   $168 = $4;
   $169 = ((($168)) + 8|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $4;
   $172 = ((($171)) + 8|0);
   $173 = ((($172)) + 8|0);
   $174 = +HEAPF32[$173>>2];
   $175 = $170 + $174;
   $176 = $4;
   $177 = ((($176)) + 52|0);
   $178 = +HEAPF32[$177>>2];
   $179 = $175 - $178;
   HEAPF32[$10>>2] = $179;
   $180 = $4;
   $181 = ((($180)) + 8|0);
   $182 = ((($181)) + 4|0);
   $183 = +HEAPF32[$182>>2];
   $184 = ((($10)) + 4|0);
   HEAPF32[$184>>2] = $183;
   $185 = +HEAPF32[$8>>2];
   $186 = $4;
   $187 = ((($186)) + 52|0);
   $188 = +HEAPF32[$187>>2];
   $189 = $185 + $188;
   $190 = ((($10)) + 8|0);
   HEAPF32[$190>>2] = $189;
   $191 = $4;
   $192 = ((($191)) + 8|0);
   $193 = ((($192)) + 12|0);
   $194 = +HEAPF32[$193>>2];
   $195 = ((($10)) + 12|0);
   HEAPF32[$195>>2] = $194;
   $196 = $4;
   $197 = ((($196)) + 28|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = HEAP32[$198>>2]|0;
   $200 = ($199|0)==(0);
   if ($200) {
    $201 = $4;
    $202 = ((($201)) + 4|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = $203 & 32;
    $205 = ($204|0)!=(0);
    if (!($205)) {
     $206 = +HEAPF32[$7>>2];
     $207 = ((($10)) + 8|0);
     $208 = +HEAPF32[$207>>2];
     $209 = $208 + $206;
     HEAPF32[$207>>2] = $209;
    }
   }
   $210 = $6;
   $211 = $5;
   $212 = ((($211)) + 4832|0);
   $213 = ((($212)) + 388|0);
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy17+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy17+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy17+12>>2]=HEAP32[$10+12>>2]|0;
   ;HEAP8[$$byval_copy18>>0]=HEAP8[$213>>0]|0;HEAP8[$$byval_copy18+1>>0]=HEAP8[$213+1>>0]|0;HEAP8[$$byval_copy18+2>>0]=HEAP8[$213+2>>0]|0;HEAP8[$$byval_copy18+3>>0]=HEAP8[$213+3>>0]|0;
   _nk_fill_rect($210,$$byval_copy17,0.0,$$byval_copy18);
   $214 = $4;
   $215 = ((($214)) + 24|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = HEAP32[$216>>2]|0;
   $218 = ($217|0)!=(0);
   if ($218) {
    $219 = $4;
    $220 = ((($219)) + 4|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $221 & 32;
    $223 = ($222|0)!=(0);
    if (!($223)) {
     $224 = $3;
     $225 = ((($224)) + 76|0);
     $226 = +HEAPF32[$225>>2];
     HEAPF32[$10>>2] = $226;
     $227 = $4;
     $228 = ((($227)) + 8|0);
     $229 = ((($228)) + 4|0);
     $230 = +HEAPF32[$229>>2];
     $231 = $4;
     $232 = ((($231)) + 8|0);
     $233 = ((($232)) + 12|0);
     $234 = +HEAPF32[$233>>2];
     $235 = $230 + $234;
     $236 = ((($10)) + 4|0);
     HEAPF32[$236>>2] = $235;
     $237 = $3;
     $238 = ((($237)) + 76|0);
     $239 = ((($238)) + 8|0);
     $240 = +HEAPF32[$239>>2];
     $241 = ((($10)) + 8|0);
     HEAPF32[$241>>2] = $240;
     $242 = ((($7)) + 4|0);
     $243 = +HEAPF32[$242>>2];
     $244 = ((($10)) + 12|0);
     HEAPF32[$244>>2] = $243;
     $245 = $6;
     $246 = $5;
     $247 = ((($246)) + 4832|0);
     $248 = ((($247)) + 388|0);
     ;HEAP32[$$byval_copy19>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy19+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy19+12>>2]=HEAP32[$10+12>>2]|0;
     ;HEAP8[$$byval_copy20>>0]=HEAP8[$248>>0]|0;HEAP8[$$byval_copy20+1>>0]=HEAP8[$248+1>>0]|0;HEAP8[$$byval_copy20+2>>0]=HEAP8[$248+2>>0]|0;HEAP8[$$byval_copy20+3>>0]=HEAP8[$248+3>>0]|0;
     _nk_fill_rect($245,$$byval_copy19,0.0,$$byval_copy20);
    }
   }
  }
 }
 $249 = $4;
 $250 = ((($249)) + 4|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = $251 & 32;
 $253 = ($252|0)!=(0);
 if (!($253)) {
  $254 = $4;
  $255 = ((($254)) + 4|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = $256 & 16384;
  $258 = ($257|0)!=(0);
  if (!($258)) {
   $259 = $3;
   $260 = ((($259)) + 144|0);
   $261 = +HEAPF32[$260>>2];
   $262 = $261 < 4.0;
   if ($262) {
    HEAP32[$17>>2] = 0;
    $263 = $4;
    $264 = ((($263)) + 8|0);
    $265 = +HEAPF32[$264>>2];
    $266 = $4;
    $267 = ((($266)) + 8|0);
    $268 = ((($267)) + 8|0);
    $269 = +HEAPF32[$268>>2];
    $270 = $265 + $269;
    $271 = +HEAPF32[$8>>2];
    $272 = $270 + $271;
    HEAPF32[$11>>2] = $272;
    $273 = $4;
    $274 = ((($273)) + 8|0);
    $275 = ((($274)) + 4|0);
    $276 = +HEAPF32[$275>>2];
    $277 = ((($11)) + 4|0);
    HEAPF32[$277>>2] = $276;
    $278 = +HEAPF32[$7>>2];
    $279 = ((($11)) + 8|0);
    HEAPF32[$279>>2] = $278;
    $280 = $4;
    $281 = ((($280)) + 8|0);
    $282 = ((($281)) + 12|0);
    $283 = +HEAPF32[$282>>2];
    $284 = ((($11)) + 12|0);
    HEAPF32[$284>>2] = $283;
    $285 = $4;
    $286 = ((($285)) + 28|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = HEAP32[$287>>2]|0;
    $289 = (+($288>>>0));
    $14 = $289;
    $290 = ((($11)) + 12|0);
    $291 = +HEAPF32[$290>>2];
    $292 = $291 * 0.10000000149011612;
    $15 = $292;
    $293 = ((($11)) + 12|0);
    $294 = +HEAPF32[$293>>2];
    $295 = $294 * 0.0099999997764825821;
    $16 = $295;
    $296 = $4;
    $297 = ((($296)) + 36|0);
    $298 = +HEAPF32[$297>>2];
    $299 = ((($11)) + 4|0);
    $300 = +HEAPF32[$299>>2];
    $301 = $298 - $300;
    $302 = (~~(($301)));
    $303 = (+($302|0));
    $13 = $303;
    $304 = $4;
    $305 = HEAP32[$304>>2]|0;
    $306 = (_nk_panel_is_sub($305)|0);
    $307 = ($306|0)!=(0);
    do {
     if ($307) {
      $308 = $3;
      $18 = $308;
      $309 = $3;
      $310 = ((($309)) + 140|0);
      $311 = HEAP32[$310>>2]|0;
      $19 = $311;
      while(1) {
       $312 = $19;
       $313 = ((($312)) + 360|0);
       $314 = HEAP32[$313>>2]|0;
       $315 = ($314|0)!=(0|0);
       if (!($315)) {
        break;
       }
       $316 = $19;
       $317 = ((($316)) + 360|0);
       $318 = HEAP32[$317>>2]|0;
       $19 = $318;
      }
      while(1) {
       $319 = $18;
       $320 = ((($319)) + 356|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = ($321|0)!=(0|0);
       if (!($322)) {
        break;
       }
       $323 = $18;
       $324 = ((($323)) + 356|0);
       $325 = HEAP32[$324>>2]|0;
       $18 = $325;
      }
      $12 = 0;
      $326 = $18;
      $327 = $1;
      $328 = ((($327)) + 12904|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = ($326|0)==($329|0);
      if ($330) {
       $331 = $4;
       $332 = ((($331)) + 56|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = ($333|0)!=(0);
       if ($334) {
        $335 = $2;
        $336 = $4;
        $337 = ((($336)) + 8|0);
        ;HEAP32[$$byval_copy21>>2]=HEAP32[$337>>2]|0;HEAP32[$$byval_copy21+4>>2]=HEAP32[$337+4>>2]|0;HEAP32[$$byval_copy21+8>>2]=HEAP32[$337+8>>2]|0;HEAP32[$$byval_copy21+12>>2]=HEAP32[$337+12>>2]|0;
        $338 = (_nk_input_is_mouse_hovering_rect($335,$$byval_copy21)|0);
        $339 = ($338|0)!=(0);
        if ($339) {
         $340 = $19;
         $341 = ((($340)) + 60|0);
         $342 = +HEAPF32[$341>>2];
         $343 = $4;
         $344 = ((($343)) + 8|0);
         $345 = +HEAPF32[$344>>2];
         $346 = $4;
         $347 = ((($346)) + 8|0);
         $348 = ((($347)) + 8|0);
         $349 = +HEAPF32[$348>>2];
         $350 = $345 + $349;
         $351 = $342 > $350;
         if (!($351)) {
          $352 = $19;
          $353 = ((($352)) + 60|0);
          $354 = +HEAPF32[$353>>2];
          $355 = $19;
          $356 = ((($355)) + 60|0);
          $357 = ((($356)) + 8|0);
          $358 = +HEAPF32[$357>>2];
          $359 = $354 + $358;
          $360 = $4;
          $361 = ((($360)) + 8|0);
          $362 = +HEAPF32[$361>>2];
          $363 = $359 < $362;
          if (!($363)) {
           $364 = $19;
           $365 = ((($364)) + 60|0);
           $366 = ((($365)) + 4|0);
           $367 = +HEAPF32[$366>>2];
           $368 = $4;
           $369 = ((($368)) + 8|0);
           $370 = ((($369)) + 4|0);
           $371 = +HEAPF32[$370>>2];
           $372 = $4;
           $373 = ((($372)) + 8|0);
           $374 = ((($373)) + 12|0);
           $375 = +HEAPF32[$374>>2];
           $376 = $371 + $375;
           $377 = $367 > $376;
           if (!($377)) {
            $378 = $19;
            $379 = ((($378)) + 60|0);
            $380 = ((($379)) + 4|0);
            $381 = +HEAPF32[$380>>2];
            $382 = $19;
            $383 = ((($382)) + 60|0);
            $384 = ((($383)) + 12|0);
            $385 = +HEAPF32[$384>>2];
            $386 = $381 + $385;
            $387 = $4;
            $388 = ((($387)) + 8|0);
            $389 = ((($388)) + 4|0);
            $390 = +HEAPF32[$389>>2];
            $391 = $386 < $390;
            if ($391) {
             break;
            }
            $392 = $3;
            $393 = ((($392)) + 140|0);
            $394 = HEAP32[$393>>2]|0;
            $19 = $394;
            while(1) {
             $395 = $19;
             $396 = ((($395)) + 360|0);
             $397 = HEAP32[$396>>2]|0;
             $398 = ($397|0)!=(0|0);
             $399 = $19;
             $400 = ((($399)) + 56|0);
             HEAP32[$400>>2] = 0;
             if (!($398)) {
              break;
             }
             $401 = $19;
             $402 = ((($401)) + 360|0);
             $403 = HEAP32[$402>>2]|0;
             $19 = $403;
            }
            $12 = 1;
           }
          }
         }
        }
       }
      }
     } else {
      $404 = $4;
      $405 = HEAP32[$404>>2]|0;
      $406 = (_nk_panel_is_sub($405)|0);
      $407 = ($406|0)!=(0);
      if ($407) {
       $12 = 0;
       break;
      }
      $408 = $3;
      $409 = $1;
      $410 = ((($409)) + 12904|0);
      $411 = HEAP32[$410>>2]|0;
      $412 = ($408|0)==($411|0);
      if ($412) {
       $413 = $4;
       $414 = ((($413)) + 56|0);
       $415 = HEAP32[$414>>2]|0;
       $416 = ($415|0)!=(0);
       $418 = $416;
      } else {
       $418 = 0;
      }
      $417 = $418&1;
      $12 = $417;
      $419 = $2;
      $420 = ($419|0)!=(0|0);
      if ($420) {
       $421 = $2;
       $422 = ((($421)) + 260|0);
       $423 = ((($422)) + 72|0);
       $424 = +HEAPF32[$423>>2];
       $425 = $424 > 0.0;
       $426 = $12;
       $427 = ($426|0)!=(0);
       $or$cond = $425 & $427;
       if ($or$cond) {
        $428 = $3;
        $429 = ((($428)) + 336|0);
        HEAP32[$429>>2] = 1;
        break;
       }
      }
      $430 = $3;
      $431 = ((($430)) + 336|0);
      HEAP32[$431>>2] = 0;
     }
    } while(0);
    $432 = $6;
    $433 = $12;
    $434 = $14;
    $435 = $13;
    $436 = $15;
    $437 = $16;
    $438 = $1;
    $439 = ((($438)) + 340|0);
    $440 = ((($439)) + 3564|0);
    $441 = $2;
    $442 = $5;
    $443 = HEAP32[$442>>2]|0;
    ;HEAP32[$$byval_copy22>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy22+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$$byval_copy22+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$$byval_copy22+12>>2]=HEAP32[$11+12>>2]|0;
    $444 = (+_nk_do_scrollbarv($17,$432,$$byval_copy22,$433,$434,$435,$436,$437,$440,$441,$443));
    $14 = $444;
    $445 = $14;
    $446 = (~~(($445))>>>0);
    $447 = $4;
    $448 = ((($447)) + 28|0);
    $449 = HEAP32[$448>>2]|0;
    HEAP32[$449>>2] = $446;
    $450 = $2;
    $451 = ($450|0)!=(0|0);
    $452 = $12;
    $453 = ($452|0)!=(0);
    $or$cond3 = $451 & $453;
    if ($or$cond3) {
     $454 = $2;
     $455 = ((($454)) + 260|0);
     $456 = ((($455)) + 72|0);
     HEAPF32[$456>>2] = 0.0;
    }
    HEAP32[$20>>2] = 0;
    $457 = $4;
    $458 = ((($457)) + 8|0);
    $459 = +HEAPF32[$458>>2];
    HEAPF32[$11>>2] = $459;
    $460 = $4;
    $461 = ((($460)) + 8|0);
    $462 = ((($461)) + 4|0);
    $463 = +HEAPF32[$462>>2];
    $464 = $4;
    $465 = ((($464)) + 8|0);
    $466 = ((($465)) + 12|0);
    $467 = +HEAPF32[$466>>2];
    $468 = $463 + $467;
    $469 = ((($11)) + 4|0);
    HEAPF32[$469>>2] = $468;
    $470 = $4;
    $471 = ((($470)) + 8|0);
    $472 = ((($471)) + 8|0);
    $473 = +HEAPF32[$472>>2];
    $474 = ((($11)) + 8|0);
    HEAPF32[$474>>2] = $473;
    $475 = ((($7)) + 4|0);
    $476 = +HEAPF32[$475>>2];
    $477 = ((($11)) + 12|0);
    HEAPF32[$477>>2] = $476;
    $478 = $4;
    $479 = ((($478)) + 24|0);
    $480 = HEAP32[$479>>2]|0;
    $481 = HEAP32[$480>>2]|0;
    $482 = (+($481>>>0));
    $14 = $482;
    $483 = $4;
    $484 = ((($483)) + 40|0);
    $485 = +HEAPF32[$484>>2];
    $486 = +HEAPF32[$11>>2];
    $487 = $485 - $486;
    $488 = (~~(($487)));
    $489 = (+($488|0));
    $13 = $489;
    $490 = $4;
    $491 = ((($490)) + 40|0);
    $492 = +HEAPF32[$491>>2];
    $493 = $492 * 0.05000000074505806;
    $15 = $493;
    $494 = $4;
    $495 = ((($494)) + 40|0);
    $496 = +HEAPF32[$495>>2];
    $497 = $496 * 0.004999999888241291;
    $16 = $497;
    $12 = 0;
    $498 = $6;
    $499 = $12;
    $500 = $14;
    $501 = $13;
    $502 = $15;
    $503 = $16;
    $504 = $1;
    $505 = ((($504)) + 340|0);
    $506 = ((($505)) + 3132|0);
    $507 = $2;
    $508 = $5;
    $509 = HEAP32[$508>>2]|0;
    ;HEAP32[$$byval_copy23>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$$byval_copy23+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$$byval_copy23+12>>2]=HEAP32[$11+12>>2]|0;
    $510 = (+_nk_do_scrollbarh($20,$498,$$byval_copy23,$499,$500,$501,$502,$503,$506,$507,$509));
    $14 = $510;
    $511 = $14;
    $512 = (~~(($511))>>>0);
    $513 = $4;
    $514 = ((($513)) + 24|0);
    $515 = HEAP32[$514>>2]|0;
    HEAP32[$515>>2] = $512;
   }
  }
 }
 $516 = $3;
 $517 = ((($516)) + 72|0);
 $518 = HEAP32[$517>>2]|0;
 $519 = $518 & 128;
 $520 = ($519|0)!=(0);
 do {
  if ($520) {
   $521 = $1;
   $522 = ((($521)) + 260|0);
   $523 = ((($522)) + 64|0);
   $524 = +HEAPF32[$523>>2];
   $525 = $524 != 0.0;
   if ($525) {
    $538 = 1;
   } else {
    $526 = $1;
    $527 = ((($526)) + 260|0);
    $528 = ((($527)) + 64|0);
    $529 = ((($528)) + 4|0);
    $530 = +HEAPF32[$529>>2];
    $531 = $530 != 0.0;
    if ($531) {
     $538 = 1;
    } else {
     $532 = $1;
     $533 = ((($532)) + 260|0);
     $534 = ((($533)) + 72|0);
     $535 = +HEAPF32[$534>>2];
     $536 = $535 != 0.0;
     $538 = $536;
    }
   }
   $537 = $538&1;
   $21 = $537;
   $539 = $1;
   $540 = (_nk_window_is_hovered($539)|0);
   $22 = $540;
   $541 = $1;
   $542 = ((($541)) + 5796|0);
   $543 = HEAP32[$542>>2]|0;
   $544 = $543 & 2;
   $23 = $544;
   $545 = $21;
   $546 = ($545|0)==(0);
   $547 = $22;
   $548 = ($547|0)!=(0);
   $or$cond5 = $546 & $548;
   if (!($or$cond5)) {
    $549 = $22;
    $550 = ($549|0)!=(0);
    $551 = $23;
    $552 = ($551|0)!=(0);
    $or$cond7 = $550 | $552;
    if ($or$cond7) {
     $560 = $3;
     $561 = ((($560)) + 144|0);
     HEAPF32[$561>>2] = 0.0;
     break;
    }
   }
   $553 = $1;
   $554 = ((($553)) + 7304|0);
   $555 = +HEAPF32[$554>>2];
   $556 = $3;
   $557 = ((($556)) + 144|0);
   $558 = +HEAPF32[$557>>2];
   $559 = $558 + $555;
   HEAPF32[$557>>2] = $559;
  } else {
   $562 = $3;
   $563 = ((($562)) + 144|0);
   HEAPF32[$563>>2] = 0.0;
  }
 } while(0);
 $564 = $4;
 $565 = ((($564)) + 4|0);
 $566 = HEAP32[$565>>2]|0;
 $567 = $566 & 1;
 $568 = ($567|0)!=(0);
 if ($568) {
  $569 = $5;
  $570 = $4;
  $571 = HEAP32[$570>>2]|0;
  _nk_panel_get_border_color($24,$569,$571);
  $572 = $4;
  $573 = ((($572)) + 4|0);
  $574 = HEAP32[$573>>2]|0;
  $575 = $574 & 16384;
  $576 = ($575|0)!=(0);
  do {
   if ($576) {
    $577 = $5;
    $578 = ((($577)) + 4832|0);
    $579 = ((($578)) + 440|0);
    $580 = +HEAPF32[$579>>2];
    $581 = $3;
    $582 = ((($581)) + 76|0);
    $583 = ((($582)) + 4|0);
    $584 = +HEAPF32[$583>>2];
    $585 = $580 + $584;
    $586 = $4;
    $587 = ((($586)) + 48|0);
    $588 = +HEAPF32[$587>>2];
    $589 = $585 + $588;
    $617 = $589;
   } else {
    $590 = $4;
    $591 = ((($590)) + 4|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = $592 & 1024;
    $594 = ($593|0)!=(0);
    if ($594) {
     $595 = $4;
     $596 = ((($595)) + 8|0);
     $597 = ((($596)) + 4|0);
     $598 = +HEAPF32[$597>>2];
     $599 = $4;
     $600 = ((($599)) + 8|0);
     $601 = ((($600)) + 12|0);
     $602 = +HEAPF32[$601>>2];
     $603 = $598 + $602;
     $604 = $4;
     $605 = ((($604)) + 44|0);
     $606 = +HEAPF32[$605>>2];
     $607 = $603 + $606;
     $617 = $607;
     break;
    } else {
     $608 = $3;
     $609 = ((($608)) + 76|0);
     $610 = ((($609)) + 4|0);
     $611 = +HEAPF32[$610>>2];
     $612 = $3;
     $613 = ((($612)) + 76|0);
     $614 = ((($613)) + 12|0);
     $615 = +HEAPF32[$614>>2];
     $616 = $611 + $615;
     $617 = $616;
     break;
    }
   }
  } while(0);
  $25 = $617;
  $618 = $6;
  $619 = $3;
  $620 = ((($619)) + 76|0);
  $621 = +HEAPF32[$620>>2];
  $622 = $3;
  $623 = ((($622)) + 76|0);
  $624 = ((($623)) + 4|0);
  $625 = +HEAPF32[$624>>2];
  $626 = $3;
  $627 = ((($626)) + 76|0);
  $628 = +HEAPF32[$627>>2];
  $629 = $3;
  $630 = ((($629)) + 76|0);
  $631 = ((($630)) + 8|0);
  $632 = +HEAPF32[$631>>2];
  $633 = $628 + $632;
  $634 = $3;
  $635 = ((($634)) + 76|0);
  $636 = ((($635)) + 4|0);
  $637 = +HEAPF32[$636>>2];
  $638 = $4;
  $639 = ((($638)) + 52|0);
  $640 = +HEAPF32[$639>>2];
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$24+3>>0]|0;
  _nk_stroke_line($618,$621,$625,$633,$637,$640,$$byval_copy24);
  $641 = $6;
  $642 = $3;
  $643 = ((($642)) + 76|0);
  $644 = +HEAPF32[$643>>2];
  $645 = $25;
  $646 = $3;
  $647 = ((($646)) + 76|0);
  $648 = +HEAPF32[$647>>2];
  $649 = $3;
  $650 = ((($649)) + 76|0);
  $651 = ((($650)) + 8|0);
  $652 = +HEAPF32[$651>>2];
  $653 = $648 + $652;
  $654 = $25;
  $655 = $4;
  $656 = ((($655)) + 52|0);
  $657 = +HEAPF32[$656>>2];
  ;HEAP8[$$byval_copy25>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy25+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy25+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy25+3>>0]=HEAP8[$24+3>>0]|0;
  _nk_stroke_line($641,$644,$645,$653,$654,$657,$$byval_copy25);
  $658 = $6;
  $659 = $3;
  $660 = ((($659)) + 76|0);
  $661 = +HEAPF32[$660>>2];
  $662 = $4;
  $663 = ((($662)) + 52|0);
  $664 = +HEAPF32[$663>>2];
  $665 = $664 * 0.5;
  $666 = $661 + $665;
  $667 = $3;
  $668 = ((($667)) + 76|0);
  $669 = ((($668)) + 4|0);
  $670 = +HEAPF32[$669>>2];
  $671 = $3;
  $672 = ((($671)) + 76|0);
  $673 = +HEAPF32[$672>>2];
  $674 = $4;
  $675 = ((($674)) + 52|0);
  $676 = +HEAPF32[$675>>2];
  $677 = $676 * 0.5;
  $678 = $673 + $677;
  $679 = $25;
  $680 = $4;
  $681 = ((($680)) + 52|0);
  $682 = +HEAPF32[$681>>2];
  ;HEAP8[$$byval_copy26>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy26+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy26+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy26+3>>0]=HEAP8[$24+3>>0]|0;
  _nk_stroke_line($658,$666,$670,$678,$679,$682,$$byval_copy26);
  $683 = $6;
  $684 = $3;
  $685 = ((($684)) + 76|0);
  $686 = +HEAPF32[$685>>2];
  $687 = $3;
  $688 = ((($687)) + 76|0);
  $689 = ((($688)) + 8|0);
  $690 = +HEAPF32[$689>>2];
  $691 = $686 + $690;
  $692 = $4;
  $693 = ((($692)) + 52|0);
  $694 = +HEAPF32[$693>>2];
  $695 = $694 * 0.5;
  $696 = $691 - $695;
  $697 = $3;
  $698 = ((($697)) + 76|0);
  $699 = ((($698)) + 4|0);
  $700 = +HEAPF32[$699>>2];
  $701 = $3;
  $702 = ((($701)) + 76|0);
  $703 = +HEAPF32[$702>>2];
  $704 = $3;
  $705 = ((($704)) + 76|0);
  $706 = ((($705)) + 8|0);
  $707 = +HEAPF32[$706>>2];
  $708 = $703 + $707;
  $709 = $4;
  $710 = ((($709)) + 52|0);
  $711 = +HEAPF32[$710>>2];
  $712 = $711 * 0.5;
  $713 = $708 - $712;
  $714 = $25;
  $715 = $4;
  $716 = ((($715)) + 52|0);
  $717 = +HEAPF32[$716>>2];
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$24+3>>0]|0;
  _nk_stroke_line($683,$696,$700,$713,$714,$717,$$byval_copy27);
 }
 $718 = $4;
 $719 = ((($718)) + 4|0);
 $720 = HEAP32[$719>>2]|0;
 $721 = $720 & 4;
 $722 = ($721|0)!=(0);
 $723 = $2;
 $724 = ($723|0)!=(0|0);
 $or$cond9 = $722 & $724;
 if ($or$cond9) {
  $725 = $4;
  $726 = ((($725)) + 4|0);
  $727 = HEAP32[$726>>2]|0;
  $728 = $727 & 16384;
  $729 = ($728|0)!=(0);
  if (!($729)) {
   $730 = +HEAPF32[$7>>2];
   $731 = ((($26)) + 8|0);
   HEAPF32[$731>>2] = $730;
   $732 = ((($7)) + 4|0);
   $733 = +HEAPF32[$732>>2];
   $734 = ((($26)) + 12|0);
   HEAPF32[$734>>2] = $733;
   $735 = $4;
   $736 = ((($735)) + 8|0);
   $737 = ((($736)) + 4|0);
   $738 = +HEAPF32[$737>>2];
   $739 = $4;
   $740 = ((($739)) + 8|0);
   $741 = ((($740)) + 12|0);
   $742 = +HEAPF32[$741>>2];
   $743 = $738 + $742;
   $744 = ((($26)) + 4|0);
   HEAPF32[$744>>2] = $743;
   $745 = $4;
   $746 = ((($745)) + 8|0);
   $747 = +HEAPF32[$746>>2];
   $748 = $4;
   $749 = ((($748)) + 8|0);
   $750 = ((($749)) + 8|0);
   $751 = +HEAPF32[$750>>2];
   $752 = $747 + $751;
   $753 = +HEAPF32[$8>>2];
   $754 = $752 + $753;
   HEAPF32[$26>>2] = $754;
   $755 = $4;
   $756 = ((($755)) + 4|0);
   $757 = HEAP32[$756>>2]|0;
   $758 = $757 & 32;
   $759 = ($758|0)!=(0);
   if ($759) {
    $760 = ((($26)) + 8|0);
    $761 = +HEAPF32[$760>>2];
    $762 = +HEAPF32[$26>>2];
    $763 = $762 - $761;
    HEAPF32[$26>>2] = $763;
   }
   $764 = $5;
   $765 = ((($764)) + 4832|0);
   $766 = ((($765)) + 420|0);
   $27 = $766;
   $767 = $27;
   $768 = HEAP32[$767>>2]|0;
   $769 = ($768|0)==(1);
   $770 = $6;
   if ($769) {
    $771 = $27;
    $772 = ((($771)) + 4|0);
    ;HEAP32[$$byval_copy28>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy28+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy28+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$byval_copy28+12>>2]=HEAP32[$26+12>>2]|0;
    ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
    _nk_draw_image($770,$$byval_copy28,$772,$nk_white$byval_copy);
   } else {
    $773 = +HEAPF32[$26>>2];
    $774 = ((($26)) + 8|0);
    $775 = +HEAPF32[$774>>2];
    $776 = $773 + $775;
    $777 = ((($26)) + 4|0);
    $778 = +HEAPF32[$777>>2];
    $779 = +HEAPF32[$26>>2];
    $780 = ((($26)) + 8|0);
    $781 = +HEAPF32[$780>>2];
    $782 = $779 + $781;
    $783 = ((($26)) + 4|0);
    $784 = +HEAPF32[$783>>2];
    $785 = ((($26)) + 12|0);
    $786 = +HEAPF32[$785>>2];
    $787 = $784 + $786;
    $788 = +HEAPF32[$26>>2];
    $789 = ((($26)) + 4|0);
    $790 = +HEAPF32[$789>>2];
    $791 = ((($26)) + 12|0);
    $792 = +HEAPF32[$791>>2];
    $793 = $790 + $792;
    $794 = $27;
    $795 = ((($794)) + 4|0);
    ;HEAP8[$$byval_copy29>>0]=HEAP8[$795>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$795+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$795+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$795+3>>0]|0;
    _nk_fill_triangle($770,$776,$778,$782,$787,$788,$793,$$byval_copy29);
   }
   $796 = $3;
   $797 = ((($796)) + 72|0);
   $798 = HEAP32[$797>>2]|0;
   $799 = $798 & 2048;
   $800 = ($799|0)!=(0);
   if (!($800)) {
    $801 = $5;
    $802 = ((($801)) + 4832|0);
    $803 = ((($802)) + 488|0);
    ;HEAP32[$28>>2]=HEAP32[$803>>2]|0;HEAP32[$28+4>>2]=HEAP32[$803+4>>2]|0;
    $804 = $2;
    $805 = ((($804)) + 260|0);
    $806 = HEAP32[$805>>2]|0;
    $29 = $806;
    $807 = $2;
    ;HEAP32[$$byval_copy30>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[$26+12>>2]|0;
    $808 = (_nk_input_has_mouse_click_down_in_rect($807,0,$$byval_copy30,1)|0);
    $30 = $808;
    $809 = $2;
    $810 = (_nk_input_is_mouse_down($809,0)|0);
    $811 = ($810|0)!=(0);
    $812 = $29;
    $813 = ($812|0)!=(0);
    $or$cond11 = $811 & $813;
    $814 = $30;
    $815 = ($814|0)!=(0);
    $or$cond13 = $or$cond11 & $815;
    if ($or$cond13) {
     $816 = +HEAPF32[$28>>2];
     $817 = $3;
     $818 = ((($817)) + 76|0);
     $819 = ((($818)) + 8|0);
     $820 = +HEAPF32[$819>>2];
     $821 = $2;
     $822 = ((($821)) + 260|0);
     $823 = ((($822)) + 64|0);
     $824 = +HEAPF32[$823>>2];
     $825 = $820 + $824;
     $826 = $816 < $825;
     if ($826) {
      $827 = $3;
      $828 = ((($827)) + 76|0);
      $829 = ((($828)) + 8|0);
      $830 = +HEAPF32[$829>>2];
      $831 = $2;
      $832 = ((($831)) + 260|0);
      $833 = ((($832)) + 64|0);
      $834 = +HEAPF32[$833>>2];
      $835 = $830 + $834;
      $840 = $835;
     } else {
      $836 = +HEAPF32[$28>>2];
      $840 = $836;
     }
     $837 = $3;
     $838 = ((($837)) + 76|0);
     $839 = ((($838)) + 8|0);
     HEAPF32[$839>>2] = $840;
     $841 = $4;
     $842 = ((($841)) + 4|0);
     $843 = HEAP32[$842>>2]|0;
     $844 = $843 & 1024;
     $845 = ($844|0)!=(0);
     if (!($845)) {
      $846 = ((($28)) + 4|0);
      $847 = +HEAPF32[$846>>2];
      $848 = $3;
      $849 = ((($848)) + 76|0);
      $850 = ((($849)) + 12|0);
      $851 = +HEAPF32[$850>>2];
      $852 = $2;
      $853 = ((($852)) + 260|0);
      $854 = ((($853)) + 64|0);
      $855 = ((($854)) + 4|0);
      $856 = +HEAPF32[$855>>2];
      $857 = $851 + $856;
      $858 = $847 < $857;
      if ($858) {
       $859 = $3;
       $860 = ((($859)) + 76|0);
       $861 = ((($860)) + 12|0);
       $862 = +HEAPF32[$861>>2];
       $863 = $2;
       $864 = ((($863)) + 260|0);
       $865 = ((($864)) + 64|0);
       $866 = ((($865)) + 4|0);
       $867 = +HEAPF32[$866>>2];
       $868 = $862 + $867;
       $874 = $868;
      } else {
       $869 = ((($28)) + 4|0);
       $870 = +HEAPF32[$869>>2];
       $874 = $870;
      }
      $871 = $3;
      $872 = ((($871)) + 76|0);
      $873 = ((($872)) + 12|0);
      HEAPF32[$873>>2] = $874;
     }
     $875 = $1;
     $876 = ((($875)) + 340|0);
     $877 = ((($876)) + 4|0);
     $878 = ((($877)) + 24|0);
     $879 = HEAP32[$878>>2]|0;
     $880 = $1;
     $881 = ((($880)) + 340|0);
     $882 = ((($881)) + 32|0);
     HEAP32[$882>>2] = $879;
     $883 = +HEAPF32[$26>>2];
     $884 = $2;
     $885 = ((($884)) + 260|0);
     $886 = ((($885)) + 64|0);
     $887 = +HEAPF32[$886>>2];
     $888 = $883 + $887;
     $889 = ((($26)) + 8|0);
     $890 = +HEAPF32[$889>>2];
     $891 = $890 / 2.0;
     $892 = $888 + $891;
     $893 = $2;
     $894 = ((($893)) + 260|0);
     $895 = ((($894)) + 8|0);
     HEAPF32[$895>>2] = $892;
     $896 = ((($26)) + 4|0);
     $897 = +HEAPF32[$896>>2];
     $898 = $2;
     $899 = ((($898)) + 260|0);
     $900 = ((($899)) + 64|0);
     $901 = ((($900)) + 4|0);
     $902 = +HEAPF32[$901>>2];
     $903 = $897 + $902;
     $904 = ((($26)) + 12|0);
     $905 = +HEAPF32[$904>>2];
     $906 = $905 / 2.0;
     $907 = $903 + $906;
     $908 = $2;
     $909 = ((($908)) + 260|0);
     $910 = ((($909)) + 8|0);
     $911 = ((($910)) + 4|0);
     HEAPF32[$911>>2] = $907;
    }
   }
  }
 }
 $912 = $4;
 $913 = HEAP32[$912>>2]|0;
 $914 = (_nk_panel_is_sub($913)|0);
 $915 = ($914|0)!=(0);
 do {
  if (!($915)) {
   $916 = $4;
   $917 = ((($916)) + 4|0);
   $918 = HEAP32[$917>>2]|0;
   $919 = $918 & 4096;
   $920 = ($919|0)!=(0);
   if ($920) {
    $921 = $3;
    $922 = ((($921)) + 100|0);
    _nk_command_buffer_reset($922);
    break;
   } else {
    $923 = $1;
    $924 = $3;
    _nk_finish($923,$924);
    break;
   }
  }
 } while(0);
 $925 = $4;
 $926 = ((($925)) + 4|0);
 $927 = HEAP32[$926>>2]|0;
 $928 = $927 & 32768;
 $929 = ($928|0)!=(0);
 if ($929) {
  $930 = $4;
  $931 = ((($930)) + 4|0);
  $932 = HEAP32[$931>>2]|0;
  $933 = $932 & -2049;
  HEAP32[$931>>2] = $933;
  $934 = $4;
  $935 = ((($934)) + 4|0);
  $936 = HEAP32[$935>>2]|0;
  $937 = $936 & -32769;
  HEAP32[$935>>2] = $937;
 }
 $938 = $4;
 $939 = ((($938)) + 4|0);
 $940 = HEAP32[$939>>2]|0;
 $941 = $3;
 $942 = ((($941)) + 72|0);
 HEAP32[$942>>2] = $940;
 $943 = $3;
 $944 = ((($943)) + 148|0);
 $945 = HEAP32[$944>>2]|0;
 $946 = ($945|0)!=(0);
 if ($946) {
  $947 = $3;
  $948 = ((($947)) + 148|0);
  $949 = ((($948)) + 88|0);
  $950 = HEAP32[$949>>2]|0;
  $951 = $3;
  $952 = ((($951)) + 148|0);
  $953 = ((($952)) + 84|0);
  $954 = HEAP32[$953>>2]|0;
  $955 = ($950|0)!=($954|0);
  if ($955) {
   $956 = $3;
   $957 = ((($956)) + 148|0);
   $958 = HEAP32[$957>>2]|0;
   $959 = $3;
   $960 = ((($959)) + 148|0);
   $961 = ((($960)) + 4|0);
   $962 = HEAP32[$961>>2]|0;
   $963 = ($958|0)==($962|0);
   if ($963) {
    $964 = $3;
    $965 = ((($964)) + 148|0);
    _nk_zero($965,96);
   } else {
    label = 97;
   }
  } else {
   label = 97;
  }
 } else {
  label = 97;
 }
 if ((label|0) == 97) {
  $966 = $3;
  $967 = ((($966)) + 148|0);
  $968 = ((($967)) + 84|0);
  $969 = HEAP32[$968>>2]|0;
  $970 = $3;
  $971 = ((($970)) + 148|0);
  $972 = ((($971)) + 88|0);
  HEAP32[$972>>2] = $969;
  $973 = $3;
  $974 = ((($973)) + 148|0);
  $975 = HEAP32[$974>>2]|0;
  $976 = $3;
  $977 = ((($976)) + 148|0);
  $978 = ((($977)) + 4|0);
  HEAP32[$978>>2] = $975;
  $979 = $3;
  $980 = ((($979)) + 148|0);
  $981 = ((($980)) + 84|0);
  HEAP32[$981>>2] = 0;
 }
 $982 = $3;
 $983 = ((($982)) + 292|0);
 $984 = ((($983)) + 12|0);
 $985 = HEAP32[$984>>2]|0;
 $986 = ($985|0)!=(0);
 if ($986) {
  $987 = $3;
  $988 = ((($987)) + 292|0);
  $989 = ((($988)) + 8|0);
  $990 = HEAP32[$989>>2]|0;
  $991 = $3;
  $992 = ((($991)) + 292|0);
  $993 = ((($992)) + 4|0);
  $994 = HEAP32[$993>>2]|0;
  $995 = ($990|0)!=($994|0);
  if ($995) {
   $996 = $3;
   $997 = ((($996)) + 292|0);
   $998 = ((($997)) + 12|0);
   $999 = HEAP32[$998>>2]|0;
   $1000 = $3;
   $1001 = ((($1000)) + 292|0);
   $1002 = ((($1001)) + 16|0);
   $1003 = HEAP32[$1002>>2]|0;
   $1004 = ($999|0)==($1003|0);
   if ($1004) {
    $1005 = $3;
    $1006 = ((($1005)) + 292|0);
    _nk_zero($1006,44);
   } else {
    label = 102;
   }
  } else {
   label = 102;
  }
 } else {
  label = 102;
 }
 if ((label|0) == 102) {
  $1007 = $3;
  $1008 = ((($1007)) + 292|0);
  $1009 = ((($1008)) + 4|0);
  $1010 = HEAP32[$1009>>2]|0;
  $1011 = $3;
  $1012 = ((($1011)) + 292|0);
  $1013 = ((($1012)) + 8|0);
  HEAP32[$1013>>2] = $1010;
  $1014 = $3;
  $1015 = ((($1014)) + 292|0);
  $1016 = ((($1015)) + 12|0);
  $1017 = HEAP32[$1016>>2]|0;
  $1018 = $3;
  $1019 = ((($1018)) + 292|0);
  $1020 = ((($1019)) + 16|0);
  HEAP32[$1020>>2] = $1017;
  $1021 = $3;
  $1022 = ((($1021)) + 292|0);
  $1023 = ((($1022)) + 4|0);
  HEAP32[$1023>>2] = 0;
 }
 $1024 = $3;
 $1025 = ((($1024)) + 244|0);
 $1026 = ((($1025)) + 28|0);
 $1027 = HEAP32[$1026>>2]|0;
 $1028 = ($1027|0)!=(0);
 if ($1028) {
  $1029 = $3;
  $1030 = ((($1029)) + 244|0);
  $1031 = ((($1030)) + 24|0);
  $1032 = HEAP32[$1031>>2]|0;
  $1033 = $3;
  $1034 = ((($1033)) + 244|0);
  $1035 = ((($1034)) + 20|0);
  $1036 = HEAP32[$1035>>2]|0;
  $1037 = ($1032|0)!=($1036|0);
  if ($1037) {
   $1038 = $3;
   $1039 = ((($1038)) + 244|0);
   $1040 = ((($1039)) + 20|0);
   HEAP32[$1040>>2] = 0;
   $1041 = $3;
   $1042 = ((($1041)) + 244|0);
   $1043 = ((($1042)) + 24|0);
   HEAP32[$1043>>2] = 0;
   $1044 = $3;
   $1045 = ((($1044)) + 244|0);
   $1046 = ((($1045)) + 28|0);
   HEAP32[$1046>>2] = 0;
  } else {
   label = 106;
  }
 } else {
  label = 106;
 }
 if ((label|0) == 106) {
  $1047 = $3;
  $1048 = ((($1047)) + 244|0);
  $1049 = ((($1048)) + 20|0);
  $1050 = HEAP32[$1049>>2]|0;
  $1051 = $3;
  $1052 = ((($1051)) + 244|0);
  $1053 = ((($1052)) + 24|0);
  HEAP32[$1053>>2] = $1050;
  $1054 = $3;
  $1055 = ((($1054)) + 244|0);
  $1056 = ((($1055)) + 20|0);
  HEAP32[$1056>>2] = 0;
 }
 $1057 = $3;
 $1058 = ((($1057)) + 244|0);
 $1059 = ((($1058)) + 16|0);
 HEAP32[$1059>>2] = 0;
 $1060 = $4;
 $1061 = ((($1060)) + 100|0);
 $1062 = ((($1061)) + 52|0);
 $1063 = HEAP32[$1062>>2]|0;
 $1064 = ($1063|0)!=(0);
 if ($1064) {
  ___assert_fail((24153|0),(1320|0),16882,(24140|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _nk_free_panel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $4 = $6;
 $7 = $4;
 $5 = $7;
 $8 = $2;
 $9 = $5;
 _nk_free_page_element($8,$9);
 STACKTOP = sp;return;
}
function _nk_window_get_bounds($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),17375,(18989|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ((($5)) + 12908|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((19010|0),(1320|0),17376,(18989|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 12908|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $2;
   $16 = ((($15)) + 12908|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 76|0);
   ;HEAP32[$0>>2]=HEAP32[$18>>2]|0;HEAP32[$0+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$18+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _nk_rect($0,0.0,0.0,0.0,0.0);
 STACKTOP = sp;return;
}
function _nk_window_get_content_region($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),17420,(19023|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ((($5)) + 12908|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((19010|0),(1320|0),17421,(19023|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 12908|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $2;
   $16 = ((($15)) + 12908|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 140|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 60|0);
   ;HEAP32[$0>>2]=HEAP32[$20>>2]|0;HEAP32[$0+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$20+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _nk_rect($0,0.0,0.0,0.0,0.0);
 STACKTOP = sp;return;
}
function _nk_window_get_canvas($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),17460,(19052|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ((($5)) + 12908|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((19010|0),(1320|0),17461,(19052|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ((($9)) + 12908|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((18968|0),(1320|0),17462,(19052|0));
  // unreachable;
 }
 $15 = $2;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 12908|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $2;
   $22 = ((($21)) + 12908|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 100|0);
   $1 = $24;
   $25 = $1;
   STACKTOP = sp;return ($25|0);
  }
 }
 $1 = 0;
 $25 = $1;
 STACKTOP = sp;return ($25|0);
}
function _nk_window_get_panel($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),17470,(19073|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ((($5)) + 12908|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((19010|0),(1320|0),17471,(19073|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 12908|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $2;
   $16 = ((($15)) + 12908|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 140|0);
   $19 = HEAP32[$18>>2]|0;
   $1 = $19;
   $20 = $1;
   STACKTOP = sp;return ($20|0);
  }
 }
 $1 = 0;
 $20 = $1;
 STACKTOP = sp;return ($20|0);
}
function _nk_window_is_hovered($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),17489,(19093|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ((($5)) + 12908|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((19010|0),(1320|0),17490,(19093|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 12908|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $2;
   $16 = $2;
   $17 = ((($16)) + 12908|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 76|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$19+12>>2]|0;
   $20 = (_nk_input_is_mouse_hovering_rect($15,$$byval_copy)|0);
   $1 = $20;
   $21 = $1;
   STACKTOP = sp;return ($21|0);
  }
 }
 $1 = 0;
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _nk_window_is_closed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2989|0),(1320|0),17550,(19114|0));
  // unreachable;
 }
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $2 = 1;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $12 = $4;
 $13 = (_nk_strlen($12)|0);
 $5 = $13;
 $14 = $4;
 $15 = $5;
 $16 = (_nk_murmur_hash($14,$15,64)|0);
 $6 = $16;
 $17 = $3;
 $18 = $6;
 $19 = $4;
 $20 = (_nk_find_window($17,$18,$19)|0);
 $7 = $20;
 $21 = $7;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $7;
  $24 = ((($23)) + 72|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 8192;
  $2 = $26;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 } else {
  $2 = 1;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _nk_menubar_begin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),17725,(19134|0));
  // unreachable;
 }
 $5 = $1;
 $6 = ((($5)) + 12908|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((19010|0),(1320|0),17726,(19134|0));
  // unreachable;
 }
 $9 = $1;
 $10 = ((($9)) + 12908|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((18968|0),(1320|0),17727,(19134|0));
  // unreachable;
 }
 $15 = $1;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $1;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = ((($27)) + 12908|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 140|0);
 $31 = HEAP32[$30>>2]|0;
 $2 = $31;
 $32 = $2;
 $33 = ((($32)) + 36|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $2;
 $36 = ((($35)) + 8|0);
 $37 = ((($36)) + 4|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $34 == $38;
 if (!($39)) {
  ___assert_fail((19151|0),(1320|0),17732,(19134|0));
  // unreachable;
 }
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 4096;
 $44 = ($43|0)!=(0);
 if ($44) {
  STACKTOP = sp;return;
 }
 $45 = $2;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 16384;
 $49 = ($48|0)!=(0);
 if ($49) {
  STACKTOP = sp;return;
 }
 $50 = $2;
 $51 = ((($50)) + 32|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $2;
 $54 = ((($53)) + 76|0);
 HEAPF32[$54>>2] = $52;
 $55 = $2;
 $56 = ((($55)) + 36|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $2;
 $59 = ((($58)) + 100|0);
 $60 = ((($59)) + 8|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $57 + $61;
 $63 = $2;
 $64 = ((($63)) + 76|0);
 $65 = ((($64)) + 4|0);
 HEAPF32[$65>>2] = $62;
 $66 = $2;
 $67 = ((($66)) + 8|0);
 $68 = ((($67)) + 8|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $2;
 $71 = ((($70)) + 76|0);
 $72 = ((($71)) + 8|0);
 HEAPF32[$72>>2] = $69;
 $73 = $2;
 $74 = ((($73)) + 24|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$75>>2]|0;
 $77 = $2;
 $78 = ((($77)) + 76|0);
 $79 = ((($78)) + 16|0);
 HEAP32[$79>>2] = $76;
 $80 = $2;
 $81 = ((($80)) + 28|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[$82>>2]|0;
 $84 = $2;
 $85 = ((($84)) + 76|0);
 $86 = ((($85)) + 16|0);
 $87 = ((($86)) + 4|0);
 HEAP32[$87>>2] = $83;
 $88 = $2;
 $89 = ((($88)) + 28|0);
 $90 = HEAP32[$89>>2]|0;
 HEAP32[$90>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_menubar_end($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $1 = $0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),17766,(19184|0));
  // unreachable;
 }
 $7 = $1;
 $8 = ((($7)) + 12908|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((19010|0),(1320|0),17767,(19184|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ((($11)) + 12908|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 140|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((18968|0),(1320|0),17768,(19184|0));
  // unreachable;
 }
 $17 = $1;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $1;
 $20 = ((($19)) + 12908|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 $24 = ((($23)) + 12908|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 140|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($29)) + 12908|0);
 $31 = HEAP32[$30>>2]|0;
 $2 = $31;
 $32 = $2;
 $33 = ((($32)) + 100|0);
 $4 = $33;
 $34 = $2;
 $35 = ((($34)) + 140|0);
 $36 = HEAP32[$35>>2]|0;
 $3 = $36;
 $37 = $3;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 4096;
 $41 = ($40|0)!=(0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = $3;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 & 16384;
 $46 = ($45|0)!=(0);
 if ($46) {
  STACKTOP = sp;return;
 }
 $47 = $3;
 $48 = ((($47)) + 36|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $3;
 $51 = ((($50)) + 76|0);
 $52 = ((($51)) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $49 - $53;
 $55 = $3;
 $56 = ((($55)) + 76|0);
 $57 = ((($56)) + 12|0);
 HEAPF32[$57>>2] = $54;
 $58 = $3;
 $59 = ((($58)) + 76|0);
 $60 = ((($59)) + 12|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $1;
 $63 = ((($62)) + 340|0);
 $64 = ((($63)) + 4832|0);
 $65 = ((($64)) + 472|0);
 $66 = ((($65)) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $61 + $67;
 $69 = $3;
 $70 = ((($69)) + 100|0);
 $71 = ((($70)) + 8|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $68 + $72;
 $74 = $3;
 $75 = ((($74)) + 8|0);
 $76 = ((($75)) + 4|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $77 + $73;
 HEAPF32[$76>>2] = $78;
 $79 = $3;
 $80 = ((($79)) + 76|0);
 $81 = ((($80)) + 12|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $1;
 $84 = ((($83)) + 340|0);
 $85 = ((($84)) + 4832|0);
 $86 = ((($85)) + 472|0);
 $87 = ((($86)) + 4|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $82 + $88;
 $90 = $3;
 $91 = ((($90)) + 100|0);
 $92 = ((($91)) + 8|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $89 + $93;
 $95 = $3;
 $96 = ((($95)) + 8|0);
 $97 = ((($96)) + 12|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $98 - $94;
 HEAPF32[$97>>2] = $99;
 $100 = $3;
 $101 = ((($100)) + 76|0);
 $102 = ((($101)) + 16|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $3;
 $105 = ((($104)) + 24|0);
 $106 = HEAP32[$105>>2]|0;
 HEAP32[$106>>2] = $103;
 $107 = $3;
 $108 = ((($107)) + 76|0);
 $109 = ((($108)) + 16|0);
 $110 = ((($109)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $3;
 $113 = ((($112)) + 28|0);
 $114 = HEAP32[$113>>2]|0;
 HEAP32[$114>>2] = $111;
 $115 = $3;
 $116 = ((($115)) + 8|0);
 $117 = ((($116)) + 4|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $3;
 $120 = ((($119)) + 100|0);
 $121 = ((($120)) + 8|0);
 $122 = +HEAPF32[$121>>2];
 $123 = $118 - $122;
 $124 = $3;
 $125 = ((($124)) + 36|0);
 HEAPF32[$125>>2] = $123;
 $126 = $3;
 $127 = ((($126)) + 8|0);
 $128 = ((($127)) + 4|0);
 $129 = +HEAPF32[$128>>2];
 $130 = $3;
 $131 = ((($130)) + 60|0);
 $132 = ((($131)) + 4|0);
 HEAPF32[$132>>2] = $129;
 $133 = $3;
 $134 = ((($133)) + 8|0);
 $135 = ((($134)) + 12|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $3;
 $138 = ((($137)) + 60|0);
 $139 = ((($138)) + 12|0);
 HEAPF32[$139>>2] = $136;
 $140 = $4;
 $141 = $3;
 $142 = ((($141)) + 60|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$142>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$142+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$142+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$142+12>>2]|0;
 _nk_push_scissor($140,$$byval_copy);
 STACKTOP = sp;return;
}
function _nk_layout_row_dynamic($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _nk_row_layout($6,0,$7,$8,0);
 STACKTOP = sp;return;
}
function _nk_row_layout($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((2989|0),(1320|0),17860,(24249|0));
  // unreachable;
 }
 $13 = $5;
 $14 = ((($13)) + 12908|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((19010|0),(1320|0),17861,(24249|0));
  // unreachable;
 }
 $17 = $5;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 140|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((18968|0),(1320|0),17862,(24249|0));
  // unreachable;
 }
 $23 = $5;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $5;
 $26 = ((($25)) + 12908|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $5;
 $30 = ((($29)) + 12908|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 140|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $5;
 $36 = ((($35)) + 12908|0);
 $37 = HEAP32[$36>>2]|0;
 $10 = $37;
 $38 = $5;
 $39 = $10;
 $40 = $7;
 $41 = $8;
 _nk_panel_layout($38,$39,$40,$41);
 $42 = $6;
 $43 = ($42|0)==(0);
 $44 = $10;
 $45 = ((($44)) + 140|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 100|0);
 if ($43) {
  HEAP32[$47>>2] = 0;
 } else {
  HEAP32[$47>>2] = 4;
 }
 $48 = $10;
 $49 = ((($48)) + 140|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 100|0);
 $52 = ((($51)) + 16|0);
 HEAP32[$52>>2] = 0;
 $53 = $10;
 $54 = ((($53)) + 140|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 100|0);
 $57 = ((($56)) + 32|0);
 HEAPF32[$57>>2] = 0.0;
 $58 = $10;
 $59 = ((($58)) + 140|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 100|0);
 $62 = ((($61)) + 28|0);
 HEAPF32[$62>>2] = 0.0;
 $63 = $9;
 $64 = (+($63|0));
 $65 = $10;
 $66 = ((($65)) + 140|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 100|0);
 $69 = ((($68)) + 20|0);
 HEAPF32[$69>>2] = $64;
 STACKTOP = sp;return;
}
function _nk_layout_row_static($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $7;
 $11 = $6;
 _nk_row_layout($8,1,$9,$10,$11);
 STACKTOP = sp;return;
}
function _nk_layout_row_begin($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((2989|0),(1320|0),17908,(19199|0));
  // unreachable;
 }
 $12 = $4;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((19010|0),(1320|0),17909,(19199|0));
  // unreachable;
 }
 $16 = $4;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 140|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((18968|0),(1320|0),17910,(19199|0));
  // unreachable;
 }
 $22 = $4;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $4;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $4;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 140|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $4;
 $35 = ((($34)) + 12908|0);
 $36 = HEAP32[$35>>2]|0;
 $8 = $36;
 $37 = $8;
 $38 = ((($37)) + 140|0);
 $39 = HEAP32[$38>>2]|0;
 $9 = $39;
 $40 = $4;
 $41 = $8;
 $42 = $6;
 $43 = $7;
 _nk_panel_layout($40,$41,$42,$43);
 $44 = $5;
 $45 = ($44|0)==(0);
 $46 = $9;
 $47 = ((($46)) + 100|0);
 if ($45) {
  HEAP32[$47>>2] = 1;
 } else {
  HEAP32[$47>>2] = 5;
 }
 $48 = $9;
 $49 = ((($48)) + 100|0);
 $50 = ((($49)) + 16|0);
 HEAP32[$50>>2] = 0;
 $51 = $9;
 $52 = ((($51)) + 100|0);
 $53 = ((($52)) + 32|0);
 HEAPF32[$53>>2] = 0.0;
 $54 = $9;
 $55 = ((($54)) + 100|0);
 $56 = ((($55)) + 20|0);
 HEAPF32[$56>>2] = 0.0;
 $57 = $9;
 $58 = ((($57)) + 100|0);
 $59 = ((($58)) + 28|0);
 HEAPF32[$59>>2] = 0.0;
 $60 = $7;
 $61 = $9;
 $62 = ((($61)) + 100|0);
 $63 = ((($62)) + 12|0);
 HEAP32[$63>>2] = $60;
 STACKTOP = sp;return;
}
function _nk_panel_layout($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy1 = sp + 76|0;
 $$byval_copy = sp + 56|0;
 $11 = sp + 16|0;
 $12 = sp + 72|0;
 $13 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2989|0),(1320|0),17815,(24263|0));
  // unreachable;
 }
 $16 = $4;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((19010|0),(1320|0),17816,(24263|0));
  // unreachable;
 }
 $20 = $4;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((18968|0),(1320|0),17817,(24263|0));
  // unreachable;
 }
 $26 = $4;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $4;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $4;
 $33 = ((($32)) + 12908|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 140|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $5;
 $39 = ((($38)) + 140|0);
 $40 = HEAP32[$39>>2]|0;
 $8 = $40;
 $41 = $4;
 $42 = ((($41)) + 340|0);
 $9 = $42;
 $43 = $5;
 $44 = ((($43)) + 100|0);
 $10 = $44;
 $45 = $9;
 $46 = ((($45)) + 4832|0);
 $47 = ((($46)) + 388|0);
 ;HEAP8[$12>>0]=HEAP8[$47>>0]|0;HEAP8[$12+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$47+3>>0]|0;
 $48 = $9;
 $49 = ((($48)) + 4832|0);
 $50 = ((($49)) + 472|0);
 ;HEAP32[$11>>2]=HEAP32[$50>>2]|0;HEAP32[$11+4>>2]=HEAP32[$50+4>>2]|0;
 $51 = $8;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 & 16384;
 $55 = ($54|0)!=(0);
 if ($55) {
  ___assert_fail((19527|0),(1320|0),17833,(24263|0));
  // unreachable;
 }
 $56 = $8;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & 4096;
 $60 = ($59|0)!=(0);
 if ($60) {
  ___assert_fail((19566|0),(1320|0),17834,(24263|0));
  // unreachable;
 }
 $61 = $8;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 & 8192;
 $65 = ($64|0)!=(0);
 if ($65) {
  ___assert_fail((19602|0),(1320|0),17835,(24263|0));
  // unreachable;
 }
 $66 = $8;
 $67 = ((($66)) + 100|0);
 $68 = ((($67)) + 4|0);
 HEAP32[$68>>2] = 0;
 $69 = $8;
 $70 = ((($69)) + 100|0);
 $71 = ((($70)) + 8|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $8;
 $74 = ((($73)) + 36|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $75 + $72;
 HEAPF32[$74>>2] = $76;
 $77 = $7;
 $78 = $8;
 $79 = ((($78)) + 100|0);
 $80 = ((($79)) + 12|0);
 HEAP32[$80>>2] = $77;
 $81 = $6;
 $82 = ((($11)) + 4|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $81 + $83;
 $85 = $8;
 $86 = ((($85)) + 100|0);
 $87 = ((($86)) + 8|0);
 HEAPF32[$87>>2] = $84;
 $88 = $8;
 $89 = ((($88)) + 100|0);
 $90 = ((($89)) + 28|0);
 HEAPF32[$90>>2] = 0.0;
 $91 = $8;
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $93 & 1024;
 $95 = ($94|0)!=(0);
 if (!($95)) {
  STACKTOP = sp;return;
 }
 $96 = $5;
 $97 = ((($96)) + 76|0);
 $98 = +HEAPF32[$97>>2];
 HEAPF32[$13>>2] = $98;
 $99 = $5;
 $100 = ((($99)) + 76|0);
 $101 = ((($100)) + 8|0);
 $102 = +HEAPF32[$101>>2];
 $103 = ((($13)) + 8|0);
 HEAPF32[$103>>2] = $102;
 $104 = $8;
 $105 = ((($104)) + 36|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $106 - 1.0;
 $108 = ((($13)) + 4|0);
 HEAPF32[$108>>2] = $107;
 $109 = $8;
 $110 = ((($109)) + 100|0);
 $111 = ((($110)) + 8|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $112 + 1.0;
 $114 = ((($13)) + 12|0);
 HEAPF32[$114>>2] = $113;
 $115 = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$12+3>>0]|0;
 _nk_fill_rect($115,$$byval_copy,0.0,$$byval_copy1);
 STACKTOP = sp;return;
}
function _nk_layout_row_push($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((2989|0),(1320|0),17934,(19219|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ((($9)) + 12908|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((19010|0),(1320|0),17935,(19219|0));
  // unreachable;
 }
 $13 = $2;
 $14 = ((($13)) + 12908|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((18968|0),(1320|0),17936,(19219|0));
  // unreachable;
 }
 $19 = $2;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $2;
 $26 = ((($25)) + 12908|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 140|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $2;
 $32 = ((($31)) + 12908|0);
 $33 = HEAP32[$32>>2]|0;
 $4 = $33;
 $34 = $4;
 $35 = ((($34)) + 140|0);
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = ((($37)) + 100|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(1);
 $41 = $3;
 if (!($40)) {
  $72 = $5;
  $73 = ((($72)) + 100|0);
  $74 = ((($73)) + 20|0);
  HEAPF32[$74>>2] = $41;
  STACKTOP = sp;return;
 }
 $6 = $41;
 $42 = $6;
 $43 = $5;
 $44 = ((($43)) + 100|0);
 $45 = ((($44)) + 32|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $42 + $46;
 $48 = $47 > 1.0;
 if ($48) {
  STACKTOP = sp;return;
 }
 $49 = $6;
 $50 = $49 > 0.0;
 if (!($50)) {
  $64 = $5;
  $65 = ((($64)) + 100|0);
  $66 = ((($65)) + 32|0);
  $67 = +HEAPF32[$66>>2];
  $68 = 1.0 - $67;
  $69 = $5;
  $70 = ((($69)) + 100|0);
  $71 = ((($70)) + 20|0);
  HEAPF32[$71>>2] = $68;
  STACKTOP = sp;return;
 }
 $51 = $6;
 $52 = 1.0 < $51;
 $53 = $6;
 $54 = $52 ? 1.0 : $53;
 $55 = 0.0 < $54;
 if ($55) {
  $56 = $6;
  $57 = 1.0 < $56;
  $58 = $6;
  $59 = $57 ? 1.0 : $58;
  $63 = $59;
 } else {
  $63 = 0.0;
 }
 $60 = $5;
 $61 = ((($60)) + 100|0);
 $62 = ((($61)) + 20|0);
 HEAPF32[$62>>2] = $63;
 STACKTOP = sp;return;
}
function _nk_layout_row_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),17957,(19238|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 12908|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((19010|0),(1320|0),17958,(19238|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 12908|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 140|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((18968|0),(1320|0),17959,(19238|0));
  // unreachable;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $1;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 140|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $1;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $2 = $30;
 $31 = $2;
 $32 = ((($31)) + 140|0);
 $33 = HEAP32[$32>>2]|0;
 $3 = $33;
 $34 = $3;
 $35 = ((($34)) + 100|0);
 $36 = ((($35)) + 20|0);
 HEAPF32[$36>>2] = 0.0;
 $37 = $3;
 $38 = ((($37)) + 100|0);
 $39 = ((($38)) + 28|0);
 HEAPF32[$39>>2] = 0.0;
 STACKTOP = sp;return;
}
function _nk_layout_row($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((2989|0),(1320|0),17978,(19256|0));
  // unreachable;
 }
 $17 = $5;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((19010|0),(1320|0),17979,(19256|0));
  // unreachable;
 }
 $21 = $5;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((18968|0),(1320|0),17980,(19256|0));
  // unreachable;
 }
 $27 = $5;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $5;
 $30 = ((($29)) + 12908|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $5;
 $34 = ((($33)) + 12908|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 140|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = $5;
 $40 = ((($39)) + 12908|0);
 $41 = HEAP32[$40>>2]|0;
 $12 = $41;
 $42 = $12;
 $43 = ((($42)) + 140|0);
 $44 = HEAP32[$43>>2]|0;
 $13 = $44;
 $45 = $5;
 $46 = $12;
 $47 = $7;
 $48 = $8;
 _nk_panel_layout($45,$46,$47,$48);
 $49 = $6;
 $50 = ($49|0)==(0);
 if ($50) {
  $14 = 0.0;
  $51 = $9;
  $52 = $13;
  $53 = ((($52)) + 100|0);
  $54 = ((($53)) + 16|0);
  HEAP32[$54>>2] = $51;
  $10 = 0;
  while(1) {
   $55 = $10;
   $56 = $8;
   $57 = ($55|0)<($56|0);
   if (!($57)) {
    break;
   }
   $58 = $10;
   $59 = $9;
   $60 = (($59) + ($58<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $61 < 0.0;
   if ($62) {
    $63 = $11;
    $64 = (($63) + 1)|0;
    $11 = $64;
   } else {
    $65 = $10;
    $66 = $9;
    $67 = (($66) + ($65<<2)|0);
    $68 = +HEAPF32[$67>>2];
    $69 = $14;
    $70 = $69 + $68;
    $14 = $70;
   }
   $71 = $10;
   $72 = (($71) + 1)|0;
   $10 = $72;
  }
  $73 = $14;
  $74 = 1.0 - $73;
  $75 = 1.0 < $74;
  $76 = $14;
  $77 = 1.0 - $76;
  $78 = $75 ? 1.0 : $77;
  $79 = 0.0 < $78;
  if ($79) {
   $80 = $14;
   $81 = 1.0 - $80;
   $82 = 1.0 < $81;
   $83 = $14;
   $84 = 1.0 - $83;
   $85 = $82 ? 1.0 : $84;
   $86 = $85;
  } else {
   $86 = 0.0;
  }
  $14 = $86;
  $87 = $13;
  $88 = ((($87)) + 100|0);
  HEAP32[$88>>2] = 3;
  $89 = $14;
  $90 = $89 > 0.0;
  $91 = $11;
  $92 = ($91|0)>(0);
  $or$cond = $90 & $92;
  if ($or$cond) {
   $93 = $14;
   $94 = $11;
   $95 = (+($94|0));
   $96 = $93 / $95;
   $100 = $96;
  } else {
   $100 = 0.0;
  }
  $97 = $13;
  $98 = ((($97)) + 100|0);
  $99 = ((($98)) + 20|0);
  HEAPF32[$99>>2] = $100;
 } else {
  $101 = $9;
  $102 = $13;
  $103 = ((($102)) + 100|0);
  $104 = ((($103)) + 16|0);
  HEAP32[$104>>2] = $101;
  $105 = $13;
  $106 = ((($105)) + 100|0);
  HEAP32[$106>>2] = 7;
  $107 = $13;
  $108 = ((($107)) + 100|0);
  $109 = ((($108)) + 20|0);
  HEAPF32[$109>>2] = 0.0;
  $110 = $13;
  $111 = ((($110)) + 100|0);
  $112 = ((($111)) + 28|0);
  HEAPF32[$112>>2] = 0.0;
 }
 $113 = $13;
 $114 = ((($113)) + 100|0);
 $115 = ((($114)) + 28|0);
 HEAPF32[$115>>2] = 0.0;
 $116 = $13;
 $117 = ((($116)) + 100|0);
 $118 = ((($117)) + 32|0);
 HEAPF32[$118>>2] = 0.0;
 STACKTOP = sp;return;
}
function _nk_layout_space_begin($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((2989|0),(1320|0),18016,(19270|0));
  // unreachable;
 }
 $12 = $4;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((19010|0),(1320|0),18017,(19270|0));
  // unreachable;
 }
 $16 = $4;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 140|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((18968|0),(1320|0),18018,(19270|0));
  // unreachable;
 }
 $22 = $4;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $4;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $4;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 140|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $4;
 $35 = ((($34)) + 12908|0);
 $36 = HEAP32[$35>>2]|0;
 $8 = $36;
 $37 = $8;
 $38 = ((($37)) + 140|0);
 $39 = HEAP32[$38>>2]|0;
 $9 = $39;
 $40 = $4;
 $41 = $8;
 $42 = $6;
 $43 = $7;
 _nk_panel_layout($40,$41,$42,$43);
 $44 = $5;
 $45 = ($44|0)==(1);
 $46 = $9;
 $47 = ((($46)) + 100|0);
 if ($45) {
  HEAP32[$47>>2] = 6;
 } else {
  HEAP32[$47>>2] = 2;
 }
 $48 = $9;
 $49 = ((($48)) + 100|0);
 $50 = ((($49)) + 16|0);
 HEAP32[$50>>2] = 0;
 $51 = $9;
 $52 = ((($51)) + 100|0);
 $53 = ((($52)) + 32|0);
 HEAPF32[$53>>2] = 0.0;
 $54 = $9;
 $55 = ((($54)) + 100|0);
 $56 = ((($55)) + 20|0);
 HEAPF32[$56>>2] = 0.0;
 $57 = $9;
 $58 = ((($57)) + 100|0);
 $59 = ((($58)) + 28|0);
 HEAPF32[$59>>2] = 0.0;
 STACKTOP = sp;return;
}
function _nk_layout_space_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),18041,(19292|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 12908|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((19010|0),(1320|0),18042,(19292|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 12908|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 140|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((18968|0),(1320|0),18043,(19292|0));
  // unreachable;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $1;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 140|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $1;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $2 = $30;
 $31 = $2;
 $32 = ((($31)) + 140|0);
 $33 = HEAP32[$32>>2]|0;
 $3 = $33;
 $34 = $3;
 $35 = ((($34)) + 100|0);
 $36 = ((($35)) + 20|0);
 HEAPF32[$36>>2] = 0.0;
 $37 = $3;
 $38 = ((($37)) + 100|0);
 $39 = ((($38)) + 24|0);
 HEAPF32[$39>>2] = 0.0;
 $40 = $3;
 $41 = ((($40)) + 100|0);
 $42 = ((($41)) + 28|0);
 HEAPF32[$42>>2] = 0.0;
 $43 = $3;
 $44 = ((($43)) + 100|0);
 $45 = ((($44)) + 36|0);
 _nk_zero($45,16);
 STACKTOP = sp;return;
}
function _nk_layout_space_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),18061,(19312|0));
  // unreachable;
 }
 $7 = $2;
 $8 = ((($7)) + 12908|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((19010|0),(1320|0),18062,(19312|0));
  // unreachable;
 }
 $11 = $2;
 $12 = ((($11)) + 12908|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 140|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((18968|0),(1320|0),18063,(19312|0));
  // unreachable;
 }
 $17 = $2;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $2;
 $20 = ((($19)) + 12908|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $2;
 $24 = ((($23)) + 12908|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 140|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $2;
 $30 = ((($29)) + 12908|0);
 $31 = HEAP32[$30>>2]|0;
 $3 = $31;
 $32 = $3;
 $33 = ((($32)) + 140|0);
 $34 = HEAP32[$33>>2]|0;
 $4 = $34;
 $35 = $4;
 $36 = ((($35)) + 100|0);
 $37 = ((($36)) + 36|0);
 ;HEAP32[$37>>2]=HEAP32[$1>>2]|0;HEAP32[$37+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$37+12>>2]=HEAP32[$1+12>>2]|0;
 STACKTOP = sp;return;
}
function _nk_layout_space_bounds($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $1;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),18079,(19333|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ((($8)) + 12908|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((19010|0),(1320|0),18080,(19333|0));
  // unreachable;
 }
 $12 = $2;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 140|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $2;
  $19 = ((($18)) + 12908|0);
  $20 = HEAP32[$19>>2]|0;
  $4 = $20;
  $21 = $4;
  $22 = ((($21)) + 140|0);
  $23 = HEAP32[$22>>2]|0;
  $5 = $23;
  $24 = $5;
  $25 = ((($24)) + 60|0);
  $26 = +HEAPF32[$25>>2];
  HEAPF32[$3>>2] = $26;
  $27 = $5;
  $28 = ((($27)) + 60|0);
  $29 = ((($28)) + 4|0);
  $30 = +HEAPF32[$29>>2];
  $31 = ((($3)) + 4|0);
  HEAPF32[$31>>2] = $30;
  $32 = $5;
  $33 = ((($32)) + 60|0);
  $34 = ((($33)) + 8|0);
  $35 = +HEAPF32[$34>>2];
  $36 = ((($3)) + 8|0);
  HEAPF32[$36>>2] = $35;
  $37 = $5;
  $38 = ((($37)) + 100|0);
  $39 = ((($38)) + 8|0);
  $40 = +HEAPF32[$39>>2];
  $41 = ((($3)) + 12|0);
  HEAPF32[$41>>2] = $40;
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18968|0),(1320|0),18081,(19333|0));
  // unreachable;
 }
}
function _nk_layout_space_to_screen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),18098,(19356|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 12908|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((19010|0),(1320|0),18099,(19356|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 140|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 12908|0);
  $20 = HEAP32[$19>>2]|0;
  $4 = $20;
  $21 = $4;
  $22 = ((($21)) + 140|0);
  $23 = HEAP32[$22>>2]|0;
  $5 = $23;
  $24 = $5;
  $25 = ((($24)) + 32|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $5;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (+($30>>>0));
  $32 = $26 - $31;
  $33 = +HEAPF32[$2>>2];
  $34 = $33 + $32;
  HEAPF32[$2>>2] = $34;
  $35 = $5;
  $36 = ((($35)) + 36|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $5;
  $39 = ((($38)) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  $42 = (+($41>>>0));
  $43 = $37 - $42;
  $44 = ((($2)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $45 + $43;
  HEAPF32[$44>>2] = $46;
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18968|0),(1320|0),18100,(19356|0));
  // unreachable;
 }
}
function _nk_layout_space_rect_to_screen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),18132,(19382|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 12908|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((19010|0),(1320|0),18133,(19382|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 140|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 12908|0);
  $20 = HEAP32[$19>>2]|0;
  $4 = $20;
  $21 = $4;
  $22 = ((($21)) + 140|0);
  $23 = HEAP32[$22>>2]|0;
  $5 = $23;
  $24 = $5;
  $25 = ((($24)) + 32|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $5;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (+($30>>>0));
  $32 = $26 - $31;
  $33 = +HEAPF32[$2>>2];
  $34 = $33 + $32;
  HEAPF32[$2>>2] = $34;
  $35 = $5;
  $36 = ((($35)) + 36|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $5;
  $39 = ((($38)) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  $42 = (+($41>>>0));
  $43 = $37 - $42;
  $44 = ((($2)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $45 + $43;
  HEAPF32[$44>>2] = $46;
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18968|0),(1320|0),18134,(19382|0));
  // unreachable;
 }
}
function _nk_layout_space_rect_to_local($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),18149,(19413|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 12908|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((19010|0),(1320|0),18150,(19413|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 140|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 12908|0);
  $20 = HEAP32[$19>>2]|0;
  $4 = $20;
  $21 = $4;
  $22 = ((($21)) + 140|0);
  $23 = HEAP32[$22>>2]|0;
  $5 = $23;
  $24 = $5;
  $25 = ((($24)) + 32|0);
  $26 = +HEAPF32[$25>>2];
  $27 = -$26;
  $28 = $5;
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = (+($31>>>0));
  $33 = $27 + $32;
  $34 = +HEAPF32[$2>>2];
  $35 = $34 + $33;
  HEAPF32[$2>>2] = $35;
  $36 = $5;
  $37 = ((($36)) + 36|0);
  $38 = +HEAPF32[$37>>2];
  $39 = -$38;
  $40 = $5;
  $41 = ((($40)) + 28|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = (+($43>>>0));
  $45 = $39 + $44;
  $46 = ((($2)) + 4|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $47 + $45;
  HEAPF32[$46>>2] = $48;
  ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18968|0),(1320|0),18151,(19413|0));
  // unreachable;
 }
}
function _nk_tree_state_base($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy11 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0;
 var $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $nk_white$byval_copy = 0, $nk_white$byval_copy10 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $$byval_copy11 = sp + 280|0;
 $nk_white$byval_copy10 = sp + 312|0;
 $$byval_copy9 = sp + 264|0;
 $$byval_copy8 = sp + 248|0;
 $$byval_copy7 = sp + 232|0;
 $$byval_copy6 = sp + 308|0;
 $$byval_copy5 = sp + 216|0;
 $$byval_copy4 = sp + 200|0;
 $$byval_copy3 = sp + 304|0;
 $$byval_copy2 = sp + 184|0;
 $nk_white$byval_copy = sp + 300|0;
 $$byval_copy = sp + 168|0;
 $18 = sp + 104|0;
 $19 = sp + 88|0;
 $20 = sp + 72|0;
 $21 = sp + 56|0;
 $22 = sp + 48|0;
 $25 = sp + 296|0;
 $26 = sp + 24|0;
 $27 = sp + 8|0;
 $28 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;
 HEAP32[$22>>2] = 0;
 $29 = $6;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((2989|0),(1320|0),18368,(24279|0));
  // unreachable;
 }
 $31 = $6;
 $32 = ((($31)) + 12908|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  ___assert_fail((19010|0),(1320|0),18369,(24279|0));
  // unreachable;
 }
 $35 = $6;
 $36 = ((($35)) + 12908|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 140|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  ___assert_fail((18968|0),(1320|0),18370,(24279|0));
  // unreachable;
 }
 $41 = $6;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $6;
  $44 = ((($43)) + 12908|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0|0);
  if ($46) {
   $47 = $6;
   $48 = ((($47)) + 12908|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 140|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $53 = $6;
    $54 = ((($53)) + 12908|0);
    $55 = HEAP32[$54>>2]|0;
    $11 = $55;
    $56 = $11;
    $57 = ((($56)) + 140|0);
    $58 = HEAP32[$57>>2]|0;
    $12 = $58;
    $59 = $11;
    $60 = ((($59)) + 100|0);
    $14 = $60;
    $61 = $6;
    $62 = ((($61)) + 340|0);
    $13 = $62;
    $63 = $13;
    $64 = ((($63)) + 4832|0);
    $65 = ((($64)) + 472|0);
    ;HEAP32[$18>>2]=HEAP32[$65>>2]|0;HEAP32[$18+4>>2]=HEAP32[$65+4>>2]|0;
    $66 = $6;
    $67 = $13;
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($68)) + 4|0);
    $70 = +HEAPF32[$69>>2];
    $71 = $13;
    $72 = ((($71)) + 3996|0);
    $73 = ((($72)) + 560|0);
    $74 = ((($73)) + 4|0);
    $75 = +HEAPF32[$74>>2];
    $76 = 2.0 * $75;
    $77 = $70 + $76;
    _nk_layout_row_dynamic($66,$77,1);
    $78 = $6;
    $79 = (_nk_widget($19,$78)|0);
    $23 = $79;
    $80 = $7;
    $81 = ($80|0)==(1);
    do {
     if ($81) {
      $82 = $13;
      $83 = ((($82)) + 3996|0);
      $24 = $83;
      $84 = $24;
      $85 = HEAP32[$84>>2]|0;
      $86 = ($85|0)==(1);
      if ($86) {
       $87 = $14;
       $88 = $24;
       $89 = ((($88)) + 4|0);
       ;HEAP32[$$byval_copy>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$19+12>>2]|0;
       ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
       _nk_draw_image($87,$$byval_copy,$89,$nk_white$byval_copy);
       $90 = ((($21)) + 8|0);
       _nk_rgba($25,0,0,0,0);
       ;HEAP8[$90>>0]=HEAP8[$25>>0]|0;HEAP8[$90+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$90+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$90+3>>0]=HEAP8[$25+3>>0]|0;
       break;
      } else {
       $91 = ((($21)) + 8|0);
       $92 = $24;
       $93 = ((($92)) + 4|0);
       ;HEAP32[$91>>2]=HEAP32[$93>>2]|0;
       $94 = $14;
       $95 = $13;
       $96 = ((($95)) + 3996|0);
       $97 = ((($96)) + 20|0);
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$19+12>>2]|0;
       ;HEAP8[$$byval_copy3>>0]=HEAP8[$97>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$97+3>>0]|0;
       _nk_fill_rect($94,$$byval_copy2,0.0,$$byval_copy3);
       $98 = $14;
       $99 = $13;
       $100 = ((($99)) + 3996|0);
       $101 = ((($100)) + 548|0);
       $102 = +HEAPF32[$101>>2];
       ;HEAP32[$$byval_copy4>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$19+12>>2]|0;
       _nk_shrink_rect($26,$$byval_copy4,$102);
       $103 = $13;
       $104 = ((($103)) + 3996|0);
       $105 = ((($104)) + 552|0);
       $106 = +HEAPF32[$105>>2];
       $107 = $24;
       $108 = ((($107)) + 4|0);
       ;HEAP32[$$byval_copy5>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$26+12>>2]|0;
       ;HEAP8[$$byval_copy6>>0]=HEAP8[$108>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$108+3>>0]|0;
       _nk_fill_rect($98,$$byval_copy5,$106,$$byval_copy6);
       break;
      }
     } else {
      $109 = ((($21)) + 8|0);
      $110 = $13;
      $111 = ((($110)) + 4832|0);
      $112 = ((($111)) + 388|0);
      ;HEAP32[$109>>2]=HEAP32[$112>>2]|0;
     }
    } while(0);
    $113 = $12;
    $114 = ((($113)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $115 & 2048;
    $117 = ($116|0)!=(0);
    $118 = $6;
    $119 = $117 ? 0 : $118;
    $15 = $119;
    $120 = $15;
    $121 = ($120|0)!=(0|0);
    $122 = $23;
    $123 = ($122|0)==(1);
    $or$cond = $121 & $123;
    $124 = $6;
    $125 = $or$cond ? $124 : 0;
    $15 = $125;
    $126 = $15;
    ;HEAP32[$$byval_copy7>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$19+12>>2]|0;
    $127 = (_nk_button_behavior($22,$$byval_copy7,$126,0)|0);
    $128 = ($127|0)!=(0);
    if ($128) {
     $129 = $10;
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(1);
     $132 = $131 ? 0 : 1;
     $133 = $10;
     HEAP32[$133>>2] = $132;
    }
    $134 = $10;
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)==(1);
    $137 = $13;
    $138 = ((($137)) + 3996|0);
    do {
     if ($136) {
      $139 = ((($138)) + 544|0);
      $140 = HEAP32[$139>>2]|0;
      $17 = $140;
      $141 = $7;
      $142 = ($141|0)==(1);
      $143 = $13;
      $144 = ((($143)) + 3996|0);
      if ($142) {
       $145 = ((($144)) + 28|0);
       $16 = $145;
       break;
      } else {
       $146 = ((($144)) + 284|0);
       $16 = $146;
       break;
      }
     } else {
      $147 = ((($138)) + 540|0);
      $148 = HEAP32[$147>>2]|0;
      $17 = $148;
      $149 = $7;
      $150 = ($149|0)==(1);
      $151 = $13;
      $152 = ((($151)) + 3996|0);
      if ($150) {
       $153 = ((($152)) + 156|0);
       $16 = $153;
       break;
      } else {
       $154 = ((($152)) + 412|0);
       $16 = $154;
       break;
      }
     }
    } while(0);
    $155 = $13;
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($156)) + 4|0);
    $158 = +HEAPF32[$157>>2];
    $159 = ((($20)) + 12|0);
    HEAPF32[$159>>2] = $158;
    $160 = ((($20)) + 8|0);
    HEAPF32[$160>>2] = $158;
    $161 = ((($19)) + 4|0);
    $162 = +HEAPF32[$161>>2];
    $163 = $13;
    $164 = ((($163)) + 3996|0);
    $165 = ((($164)) + 560|0);
    $166 = ((($165)) + 4|0);
    $167 = +HEAPF32[$166>>2];
    $168 = $162 + $167;
    $169 = ((($20)) + 4|0);
    HEAPF32[$169>>2] = $168;
    $170 = +HEAPF32[$19>>2];
    $171 = $13;
    $172 = ((($171)) + 3996|0);
    $173 = ((($172)) + 560|0);
    $174 = +HEAPF32[$173>>2];
    $175 = $170 + $174;
    HEAPF32[$20>>2] = $175;
    $176 = $11;
    $177 = ((($176)) + 100|0);
    $178 = $17;
    $179 = $16;
    $180 = $13;
    $181 = HEAP32[$180>>2]|0;
    ;HEAP32[$$byval_copy8>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$20+12>>2]|0;
    (_nk_do_button_symbol($22,$177,$$byval_copy8,$178,0,$179,0,$181)|0);
    $182 = $8;
    $183 = ($182|0)!=(0|0);
    if ($183) {
     $184 = +HEAPF32[$20>>2];
     $185 = ((($20)) + 8|0);
     $186 = +HEAPF32[$185>>2];
     $187 = $184 + $186;
     $188 = +HEAPF32[$18>>2];
     $189 = 4.0 * $188;
     $190 = $187 + $189;
     HEAPF32[$20>>2] = $190;
     $191 = $11;
     $192 = ((($191)) + 100|0);
     $193 = $8;
     ;HEAP32[$$byval_copy9>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$20+12>>2]|0;
     ;HEAP8[$nk_white$byval_copy10>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy10+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy10+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy10+3>>0]=HEAP8[19725+3>>0]|0;
     _nk_draw_image($192,$$byval_copy9,$193,$nk_white$byval_copy10);
     $194 = $13;
     $195 = HEAP32[$194>>2]|0;
     $196 = ((($195)) + 4|0);
     $197 = +HEAPF32[$196>>2];
     $198 = $13;
     $199 = ((($198)) + 3996|0);
     $200 = ((($199)) + 568|0);
     $201 = +HEAPF32[$200>>2];
     $202 = $197 + $201;
     $203 = ((($20)) + 8|0);
     HEAPF32[$203>>2] = $202;
    }
    $204 = ((($19)) + 8|0);
    $205 = +HEAPF32[$204>>2];
    $206 = ((($20)) + 8|0);
    $207 = +HEAPF32[$206>>2];
    $208 = +HEAPF32[$18>>2];
    $209 = $207 + $208;
    $210 = $205 < $209;
    if ($210) {
     $211 = ((($20)) + 8|0);
     $212 = +HEAPF32[$211>>2];
     $213 = +HEAPF32[$18>>2];
     $214 = $212 + $213;
     $218 = $214;
    } else {
     $215 = ((($19)) + 8|0);
     $216 = +HEAPF32[$215>>2];
     $218 = $216;
    }
    $217 = ((($19)) + 8|0);
    HEAPF32[$217>>2] = $218;
    $219 = +HEAPF32[$20>>2];
    $220 = ((($20)) + 8|0);
    $221 = +HEAPF32[$220>>2];
    $222 = $219 + $221;
    $223 = +HEAPF32[$18>>2];
    $224 = $222 + $223;
    HEAPF32[$27>>2] = $224;
    $225 = ((($20)) + 4|0);
    $226 = +HEAPF32[$225>>2];
    $227 = ((($27)) + 4|0);
    HEAPF32[$227>>2] = $226;
    $228 = ((($19)) + 8|0);
    $229 = +HEAPF32[$228>>2];
    $230 = ((($20)) + 8|0);
    $231 = +HEAPF32[$230>>2];
    $232 = ((($18)) + 4|0);
    $233 = +HEAPF32[$232>>2];
    $234 = $231 + $233;
    $235 = $13;
    $236 = ((($235)) + 3996|0);
    $237 = ((($236)) + 556|0);
    $238 = +HEAPF32[$237>>2];
    $239 = $234 + $238;
    $240 = $229 - $239;
    $241 = ((($27)) + 8|0);
    HEAPF32[$241>>2] = $240;
    $242 = $13;
    $243 = HEAP32[$242>>2]|0;
    $244 = ((($243)) + 4|0);
    $245 = +HEAPF32[$244>>2];
    $246 = ((($27)) + 12|0);
    HEAPF32[$246>>2] = $245;
    $247 = ((($21)) + 12|0);
    $248 = $13;
    $249 = ((($248)) + 3996|0);
    $250 = ((($249)) + 24|0);
    ;HEAP32[$247>>2]=HEAP32[$250>>2]|0;
    _nk_vec2($28,0.0,0.0);
    ;HEAP32[$21>>2]=HEAP32[$28>>2]|0;HEAP32[$21+4>>2]=HEAP32[$28+4>>2]|0;
    $251 = $14;
    $252 = $9;
    $253 = $9;
    $254 = (_nk_strlen($253)|0);
    $255 = $13;
    $256 = HEAP32[$255>>2]|0;
    ;HEAP32[$$byval_copy11>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$27+12>>2]|0;
    _nk_widget_text($251,$$byval_copy11,$252,$254,$21,17,$256);
    $257 = $10;
    $258 = HEAP32[$257>>2]|0;
    $259 = ($258|0)==(1);
    if (!($259)) {
     $5 = 0;
     $314 = $5;
     STACKTOP = sp;return ($314|0);
    }
    $260 = +HEAPF32[$19>>2];
    $261 = $12;
    $262 = ((($261)) + 24|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = HEAP32[$263>>2]|0;
    $265 = (+($264>>>0));
    $266 = $260 + $265;
    $267 = $13;
    $268 = ((($267)) + 3996|0);
    $269 = ((($268)) + 556|0);
    $270 = +HEAPF32[$269>>2];
    $271 = $266 + $270;
    $272 = $12;
    $273 = ((($272)) + 32|0);
    HEAPF32[$273>>2] = $271;
    $274 = $12;
    $275 = ((($274)) + 8|0);
    $276 = ((($275)) + 8|0);
    $277 = +HEAPF32[$276>>2];
    $278 = $13;
    $279 = ((($278)) + 3996|0);
    $280 = ((($279)) + 556|0);
    $281 = +HEAPF32[$280>>2];
    $282 = $277 < $281;
    if ($282) {
     $283 = $13;
     $284 = ((($283)) + 3996|0);
     $285 = ((($284)) + 556|0);
     $286 = +HEAPF32[$285>>2];
     $294 = $286;
    } else {
     $287 = $12;
     $288 = ((($287)) + 8|0);
     $289 = ((($288)) + 8|0);
     $290 = +HEAPF32[$289>>2];
     $294 = $290;
    }
    $291 = $12;
    $292 = ((($291)) + 8|0);
    $293 = ((($292)) + 8|0);
    HEAPF32[$293>>2] = $294;
    $295 = $13;
    $296 = ((($295)) + 3996|0);
    $297 = ((($296)) + 556|0);
    $298 = +HEAPF32[$297>>2];
    $299 = $13;
    $300 = ((($299)) + 4832|0);
    $301 = ((($300)) + 496|0);
    $302 = +HEAPF32[$301>>2];
    $303 = $298 + $302;
    $304 = $12;
    $305 = ((($304)) + 8|0);
    $306 = ((($305)) + 8|0);
    $307 = +HEAPF32[$306>>2];
    $308 = $307 - $303;
    HEAPF32[$306>>2] = $308;
    $309 = $12;
    $310 = ((($309)) + 100|0);
    $311 = ((($310)) + 52|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = (($312) + 1)|0;
    HEAP32[$311>>2] = $313;
    $5 = 1;
    $314 = $5;
    STACKTOP = sp;return ($314|0);
   }
  }
 }
 $5 = 0;
 $314 = $5;
 STACKTOP = sp;return ($314|0);
}
function _nk_tree_state_pop($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),18491,(19443|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 12908|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((19010|0),(1320|0),18492,(19443|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 12908|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 140|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((18968|0),(1320|0),18493,(19443|0));
  // unreachable;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $1;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 140|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $1;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $2 = $30;
 $31 = $2;
 $32 = ((($31)) + 140|0);
 $33 = HEAP32[$32>>2]|0;
 $3 = $33;
 $34 = $1;
 $35 = ((($34)) + 340|0);
 $36 = ((($35)) + 3996|0);
 $37 = ((($36)) + 556|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $1;
 $40 = ((($39)) + 340|0);
 $41 = ((($40)) + 4832|0);
 $42 = ((($41)) + 496|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $38 + $43;
 $45 = $3;
 $46 = ((($45)) + 32|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $47 - $44;
 HEAPF32[$46>>2] = $48;
 $49 = $1;
 $50 = ((($49)) + 340|0);
 $51 = ((($50)) + 3996|0);
 $52 = ((($51)) + 556|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $1;
 $55 = ((($54)) + 340|0);
 $56 = ((($55)) + 4832|0);
 $57 = ((($56)) + 496|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $53 + $58;
 $60 = $3;
 $61 = ((($60)) + 8|0);
 $62 = ((($61)) + 8|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $63 + $59;
 HEAPF32[$62>>2] = $64;
 $65 = $3;
 $66 = ((($65)) + 100|0);
 $67 = ((($66)) + 52|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0);
 if (!($69)) {
  ___assert_fail((19461|0),(1320|0),18501,(19443|0));
  // unreachable;
 }
 $70 = $3;
 $71 = ((($70)) + 100|0);
 $72 = ((($71)) + 52|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + -1)|0;
 HEAP32[$72>>2] = $74;
 STACKTOP = sp;return;
}
function _nk_tree_push_hashed($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 $18 = $11;
 $19 = $12;
 $20 = $13;
 $21 = (_nk_tree_base($14,$15,0,$16,$17,$18,$19,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function _nk_tree_base($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $20 = $8;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $17 = 0;
 $18 = 0;
 $19 = 0;
 $23 = $13;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $31 = $13;
  $32 = $14;
  $33 = $15;
  $34 = (_nk_murmur_hash($31,$32,$33)|0);
  $18 = $34;
 } else {
  $25 = $11;
  $26 = (_nk_strlen($25)|0);
  $17 = $26;
  $27 = $11;
  $28 = $17;
  $29 = $15;
  $30 = (_nk_murmur_hash($27,$28,$29)|0);
  $18 = $30;
 }
 $35 = $16;
 $36 = $18;
 $37 = (_nk_find_value($35,$36)|0);
 $19 = $37;
 $38 = $19;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $46 = $8;
  $47 = $9;
  $48 = $10;
  $49 = $11;
  $50 = $19;
  $51 = (_nk_tree_state_base($46,$47,$48,$49,$50)|0);
  STACKTOP = sp;return ($51|0);
 }
 $40 = $8;
 $41 = $16;
 $42 = $18;
 $43 = (_nk_add_value($40,$41,$42,0)|0);
 $19 = $43;
 $44 = $12;
 $45 = $19;
 HEAP32[$45>>2] = $44;
 $46 = $8;
 $47 = $9;
 $48 = $10;
 $49 = $11;
 $50 = $19;
 $51 = (_nk_tree_state_base($46,$47,$48,$49,$50)|0);
 STACKTOP = sp;return ($51|0);
}
function _nk_tree_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _nk_tree_state_pop($2);
 STACKTOP = sp;return;
}
function _nk_widget_bounds($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $2 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),18530,(19484|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ((($6)) + 12908|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((19010|0),(1320|0),18531,(19484|0));
  // unreachable;
 }
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 12908|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = $2;
   _nk_layout_peek($3,$16);
   ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;
   STACKTOP = sp;return;
  }
 }
 _nk_rect($0,0.0,0.0,0.0,0.0);
 STACKTOP = sp;return;
}
function _nk_layout_peek($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2989|0),(1320|0),18329,(24298|0));
  // unreachable;
 }
 $10 = $3;
 $11 = ((($10)) + 12908|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((19010|0),(1320|0),18330,(24298|0));
  // unreachable;
 }
 $14 = $3;
 $15 = ((($14)) + 12908|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 140|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((18968|0),(1320|0),18331,(24298|0));
  // unreachable;
 }
 $20 = $3;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $3;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $3;
 $27 = ((($26)) + 12908|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 140|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $3;
 $33 = ((($32)) + 12908|0);
 $34 = HEAP32[$33>>2]|0;
 $6 = $34;
 $35 = $6;
 $36 = ((($35)) + 140|0);
 $37 = HEAP32[$36>>2]|0;
 $7 = $37;
 $38 = $7;
 $39 = ((($38)) + 36|0);
 $40 = +HEAPF32[$39>>2];
 $4 = $40;
 $41 = $7;
 $42 = ((($41)) + 100|0);
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $5 = $44;
 $45 = $7;
 $46 = ((($45)) + 100|0);
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $7;
 $50 = ((($49)) + 100|0);
 $51 = ((($50)) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($48|0)>=($52|0);
 if ($53) {
  $54 = $7;
  $55 = ((($54)) + 100|0);
  $56 = ((($55)) + 8|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $7;
  $59 = ((($58)) + 36|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $60 + $57;
  HEAPF32[$59>>2] = $61;
  $62 = $7;
  $63 = ((($62)) + 100|0);
  $64 = ((($63)) + 4|0);
  HEAP32[$64>>2] = 0;
 }
 $65 = $2;
 $66 = $3;
 $67 = $6;
 _nk_layout_widget_space($65,$66,$67,0);
 $68 = $4;
 $69 = $7;
 $70 = ((($69)) + 36|0);
 HEAPF32[$70>>2] = $68;
 $71 = $5;
 $72 = $7;
 $73 = ((($72)) + 100|0);
 $74 = ((($73)) + 4|0);
 HEAP32[$74>>2] = $71;
 STACKTOP = sp;return;
}
function _nk_widget_width($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),18568,(19501|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ((($6)) + 12908|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((19010|0),(1320|0),18569,(19501|0));
  // unreachable;
 }
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 12908|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = $2;
   _nk_layout_peek($3,$16);
   $17 = ((($3)) + 8|0);
   $18 = +HEAPF32[$17>>2];
   $1 = $18;
   $19 = $1;
   STACKTOP = sp;return (+$19);
  }
 }
 $1 = 0.0;
 $19 = $1;
 STACKTOP = sp;return (+$19);
}
function _nk_widget($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0;
 var $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2989|0),(1320|0),18645,(19517|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ((($10)) + 12908|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((19010|0),(1320|0),18646,(19517|0));
  // unreachable;
 }
 $14 = $4;
 $15 = ((($14)) + 12908|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 140|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((18968|0),(1320|0),18647,(19517|0));
  // unreachable;
 }
 $20 = $4;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $4;
  $23 = ((($22)) + 12908|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  if ($25) {
   $26 = $4;
   $27 = ((($26)) + 12908|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 140|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $3;
    $33 = $4;
    _nk_panel_alloc_space($32,$33);
    $34 = $4;
    $35 = ((($34)) + 12908|0);
    $36 = HEAP32[$35>>2]|0;
    $6 = $36;
    $37 = $6;
    $38 = ((($37)) + 140|0);
    $39 = HEAP32[$38>>2]|0;
    $7 = $39;
    $40 = $7;
    $41 = ((($40)) + 60|0);
    $5 = $41;
    $42 = $7;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 & 16384;
    $46 = ($45|0)!=(0);
    if ($46) {
     ___assert_fail((19527|0),(1320|0),18662,(19517|0));
     // unreachable;
    }
    $47 = $7;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 4096;
    $51 = ($50|0)!=(0);
    if ($51) {
     ___assert_fail((19566|0),(1320|0),18663,(19517|0));
     // unreachable;
    }
    $52 = $7;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $54 & 8192;
    $56 = ($55|0)!=(0);
    if ($56) {
     ___assert_fail((19602|0),(1320|0),18664,(19517|0));
     // unreachable;
    }
    $57 = $3;
    $58 = +HEAPF32[$57>>2];
    $59 = (~~(($58)));
    $60 = (+($59|0));
    $61 = $3;
    HEAPF32[$61>>2] = $60;
    $62 = $3;
    $63 = ((($62)) + 4|0);
    $64 = +HEAPF32[$63>>2];
    $65 = (~~(($64)));
    $66 = (+($65|0));
    $67 = $3;
    $68 = ((($67)) + 4|0);
    HEAPF32[$68>>2] = $66;
    $69 = $3;
    $70 = ((($69)) + 8|0);
    $71 = +HEAPF32[$70>>2];
    $72 = (~~(($71)));
    $73 = (+($72|0));
    $74 = $3;
    $75 = ((($74)) + 8|0);
    HEAPF32[$75>>2] = $73;
    $76 = $3;
    $77 = ((($76)) + 12|0);
    $78 = +HEAPF32[$77>>2];
    $79 = (~~(($78)));
    $80 = (+($79|0));
    $81 = $3;
    $82 = ((($81)) + 12|0);
    HEAPF32[$82>>2] = $80;
    $83 = $3;
    $84 = +HEAPF32[$83>>2];
    $85 = $5;
    $86 = +HEAPF32[$85>>2];
    $87 = $5;
    $88 = ((($87)) + 8|0);
    $89 = +HEAPF32[$88>>2];
    $90 = $86 + $89;
    $91 = $84 > $90;
    if (!($91)) {
     $92 = $3;
     $93 = +HEAPF32[$92>>2];
     $94 = $3;
     $95 = ((($94)) + 8|0);
     $96 = +HEAPF32[$95>>2];
     $97 = $93 + $96;
     $98 = $5;
     $99 = +HEAPF32[$98>>2];
     $100 = $97 < $99;
     if (!($100)) {
      $101 = $3;
      $102 = ((($101)) + 4|0);
      $103 = +HEAPF32[$102>>2];
      $104 = $5;
      $105 = ((($104)) + 4|0);
      $106 = +HEAPF32[$105>>2];
      $107 = $5;
      $108 = ((($107)) + 12|0);
      $109 = +HEAPF32[$108>>2];
      $110 = $106 + $109;
      $111 = $103 > $110;
      if (!($111)) {
       $112 = $3;
       $113 = ((($112)) + 4|0);
       $114 = +HEAPF32[$113>>2];
       $115 = $3;
       $116 = ((($115)) + 12|0);
       $117 = +HEAPF32[$116>>2];
       $118 = $114 + $117;
       $119 = $5;
       $120 = ((($119)) + 4|0);
       $121 = +HEAPF32[$120>>2];
       $122 = $118 < $121;
       if (!($122)) {
        $123 = $5;
        $124 = +HEAPF32[$123>>2];
        $125 = $3;
        $126 = +HEAPF32[$125>>2];
        $127 = $124 <= $126;
        do {
         if ($127) {
          $128 = $3;
          $129 = +HEAPF32[$128>>2];
          $130 = $5;
          $131 = +HEAPF32[$130>>2];
          $132 = $5;
          $133 = ((($132)) + 8|0);
          $134 = +HEAPF32[$133>>2];
          $135 = $131 + $134;
          $136 = $129 <= $135;
          if ($136) {
           $137 = $5;
           $138 = ((($137)) + 4|0);
           $139 = +HEAPF32[$138>>2];
           $140 = $3;
           $141 = ((($140)) + 4|0);
           $142 = +HEAPF32[$141>>2];
           $143 = $139 <= $142;
           if ($143) {
            $144 = $3;
            $145 = ((($144)) + 4|0);
            $146 = +HEAPF32[$145>>2];
            $147 = $5;
            $148 = ((($147)) + 4|0);
            $149 = +HEAPF32[$148>>2];
            $150 = $5;
            $151 = ((($150)) + 12|0);
            $152 = +HEAPF32[$151>>2];
            $153 = $149 + $152;
            $154 = $146 <= $153;
            if ($154) {
             $155 = $5;
             $156 = +HEAPF32[$155>>2];
             $157 = $3;
             $158 = +HEAPF32[$157>>2];
             $159 = $3;
             $160 = ((($159)) + 8|0);
             $161 = +HEAPF32[$160>>2];
             $162 = $158 + $161;
             $163 = $156 <= $162;
             if (!($163)) {
              break;
             }
             $164 = $3;
             $165 = +HEAPF32[$164>>2];
             $166 = $3;
             $167 = ((($166)) + 8|0);
             $168 = +HEAPF32[$167>>2];
             $169 = $165 + $168;
             $170 = $5;
             $171 = +HEAPF32[$170>>2];
             $172 = $5;
             $173 = ((($172)) + 8|0);
             $174 = +HEAPF32[$173>>2];
             $175 = $171 + $174;
             $176 = $169 <= $175;
             if (!($176)) {
              break;
             }
             $177 = $5;
             $178 = ((($177)) + 4|0);
             $179 = +HEAPF32[$178>>2];
             $180 = $3;
             $181 = ((($180)) + 4|0);
             $182 = +HEAPF32[$181>>2];
             $183 = $3;
             $184 = ((($183)) + 12|0);
             $185 = +HEAPF32[$184>>2];
             $186 = $182 + $185;
             $187 = $179 <= $186;
             if (!($187)) {
              break;
             }
             $188 = $3;
             $189 = ((($188)) + 4|0);
             $190 = +HEAPF32[$189>>2];
             $191 = $3;
             $192 = ((($191)) + 12|0);
             $193 = +HEAPF32[$192>>2];
             $194 = $190 + $193;
             $195 = $5;
             $196 = ((($195)) + 4|0);
             $197 = +HEAPF32[$196>>2];
             $198 = $5;
             $199 = ((($198)) + 12|0);
             $200 = +HEAPF32[$199>>2];
             $201 = $197 + $200;
             $202 = $194 <= $201;
             if (!($202)) {
              break;
             }
             $2 = 1;
             $203 = $2;
             STACKTOP = sp;return ($203|0);
            }
           }
          }
         }
        } while(0);
        $2 = 2;
        $203 = $2;
        STACKTOP = sp;return ($203|0);
       }
      }
     }
    }
    $2 = 0;
    $203 = $2;
    STACKTOP = sp;return ($203|0);
   }
  }
 }
 $2 = 0;
 $203 = $2;
 STACKTOP = sp;return ($203|0);
}
function _nk_panel_alloc_space($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),18304,(24361|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 12908|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((19010|0),(1320|0),18305,(24361|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 140|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((18968|0),(1320|0),18306,(24361|0));
  // unreachable;
 }
 $18 = $3;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $3;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $3;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $3;
 $31 = ((($30)) + 12908|0);
 $32 = HEAP32[$31>>2]|0;
 $4 = $32;
 $33 = $4;
 $34 = ((($33)) + 140|0);
 $35 = HEAP32[$34>>2]|0;
 $5 = $35;
 $36 = $5;
 $37 = ((($36)) + 100|0);
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $5;
 $41 = ((($40)) + 100|0);
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($39|0)>=($43|0);
 if ($44) {
  $45 = $3;
  $46 = $4;
  _nk_panel_alloc_row($45,$46);
 }
 $47 = $2;
 $48 = $3;
 $49 = $4;
 _nk_layout_widget_space($47,$48,$49,1);
 $50 = $5;
 $51 = ((($50)) + 100|0);
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$52>>2] = $54;
 STACKTOP = sp;return;
}
function _nk_widget_fitting($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0;
 var $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 8|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $12 = $5;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2989|0),(1320|0),18690,(19638|0));
  // unreachable;
 }
 $14 = $5;
 $15 = ((($14)) + 12908|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((19010|0),(1320|0),18691,(19638|0));
  // unreachable;
 }
 $18 = $5;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 140|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((18968|0),(1320|0),18692,(19638|0));
  // unreachable;
 }
 $24 = $5;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $5;
  $27 = ((($26)) + 12908|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $5;
   $31 = ((($30)) + 12908|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 140|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)!=(0|0);
   if ($35) {
    $36 = $5;
    $37 = ((($36)) + 12908|0);
    $38 = HEAP32[$37>>2]|0;
    $6 = $38;
    $39 = $5;
    $40 = ((($39)) + 340|0);
    $7 = $40;
    $41 = $6;
    $42 = ((($41)) + 140|0);
    $43 = HEAP32[$42>>2]|0;
    $8 = $43;
    $44 = $4;
    $45 = $5;
    $46 = (_nk_widget($44,$45)|0);
    $9 = $46;
    $47 = $7;
    $48 = $8;
    $49 = HEAP32[$48>>2]|0;
    _nk_panel_get_padding($11,$47,$49);
    ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;
    $50 = $8;
    $51 = ((($50)) + 100|0);
    $52 = ((($51)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = +HEAPF32[$10>>2];
     $56 = $4;
     $57 = ((($56)) + 8|0);
     $58 = +HEAPF32[$57>>2];
     $59 = $58 + $55;
     HEAPF32[$57>>2] = $59;
     $60 = +HEAPF32[$10>>2];
     $61 = $4;
     $62 = +HEAPF32[$61>>2];
     $63 = $62 - $60;
     HEAPF32[$61>>2] = $63;
    } else {
     $64 = +HEAPF32[$2>>2];
     $65 = $4;
     $66 = +HEAPF32[$65>>2];
     $67 = $66 - $64;
     HEAPF32[$65>>2] = $67;
    }
    $68 = $8;
    $69 = ((($68)) + 100|0);
    $70 = ((($69)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $8;
    $73 = ((($72)) + 100|0);
    $74 = ((($73)) + 12|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($71|0)==($75|0);
    if ($76) {
     $77 = +HEAPF32[$10>>2];
     $78 = $4;
     $79 = ((($78)) + 8|0);
     $80 = +HEAPF32[$79>>2];
     $81 = $80 + $77;
     HEAPF32[$79>>2] = $81;
    } else {
     $82 = +HEAPF32[$2>>2];
     $83 = $4;
     $84 = ((($83)) + 8|0);
     $85 = +HEAPF32[$84>>2];
     $86 = $85 + $82;
     HEAPF32[$84>>2] = $86;
    }
    $87 = $9;
    $3 = $87;
    $88 = $3;
    STACKTOP = sp;return ($88|0);
   }
  }
 }
 $3 = 0;
 $88 = $3;
 STACKTOP = sp;return ($88|0);
}
function _nk_panel_get_padding($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = $4;
 switch ($5|0) {
 case 128:  {
  $24 = $3;
  $25 = ((($24)) + 4832|0);
  $26 = ((($25)) + 536|0);
  ;HEAP32[$0>>2]=HEAP32[$26>>2]|0;HEAP32[$0+4>>2]=HEAP32[$26+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $9 = $3;
  $10 = ((($9)) + 4832|0);
  $11 = ((($10)) + 504|0);
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $12 = $3;
  $13 = ((($12)) + 4832|0);
  $14 = ((($13)) + 512|0);
  ;HEAP32[$0>>2]=HEAP32[$14>>2]|0;HEAP32[$0+4>>2]=HEAP32[$14+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 16:  {
  $15 = $3;
  $16 = ((($15)) + 4832|0);
  $17 = ((($16)) + 528|0);
  ;HEAP32[$0>>2]=HEAP32[$17>>2]|0;HEAP32[$0+4>>2]=HEAP32[$17+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 32:  {
  $18 = $3;
  $19 = ((($18)) + 4832|0);
  $20 = ((($19)) + 520|0);
  ;HEAP32[$0>>2]=HEAP32[$20>>2]|0;HEAP32[$0+4>>2]=HEAP32[$20+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 64:  {
  $21 = $3;
  $22 = ((($21)) + 4832|0);
  $23 = ((($22)) + 536|0);
  ;HEAP32[$0>>2]=HEAP32[$23>>2]|0;HEAP32[$0+4>>2]=HEAP32[$23+4>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $6 = $3;
  $7 = ((($6)) + 4832|0);
  $8 = ((($7)) + 496|0);
  ;HEAP32[$0>>2]=HEAP32[$8>>2]|0;HEAP32[$0+4>>2]=HEAP32[$8+4>>2]|0;
  STACKTOP = sp;return;
 }
 }
}
function _nk_spacing($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((2989|0),(1320|0),18726,(19656|0));
  // unreachable;
 }
 $12 = $2;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((19010|0),(1320|0),18727,(19656|0));
  // unreachable;
 }
 $16 = $2;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 140|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((18968|0),(1320|0),18728,(19656|0));
  // unreachable;
 }
 $22 = $2;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $2;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $2;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 140|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $2;
 $35 = ((($34)) + 12908|0);
 $36 = HEAP32[$35>>2]|0;
 $4 = $36;
 $37 = $4;
 $38 = ((($37)) + 140|0);
 $39 = HEAP32[$38>>2]|0;
 $5 = $39;
 $40 = $5;
 $41 = ((($40)) + 100|0);
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $3;
 $45 = (($43) + ($44))|0;
 $46 = $5;
 $47 = ((($46)) + 100|0);
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($45|0) % ($49|0))&-1;
 $8 = $50;
 $51 = $5;
 $52 = ((($51)) + 100|0);
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $3;
 $56 = (($54) + ($55))|0;
 $57 = $5;
 $58 = ((($57)) + 100|0);
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($56|0) / ($60|0))&-1;
 $9 = $61;
 $62 = $9;
 $63 = ($62|0)!=(0);
 if ($63) {
  $7 = 0;
  while(1) {
   $64 = $7;
   $65 = $9;
   $66 = ($64|0)<($65|0);
   if (!($66)) {
    break;
   }
   $67 = $2;
   $68 = $4;
   _nk_panel_alloc_row($67,$68);
   $69 = $7;
   $70 = (($69) + 1)|0;
   $7 = $70;
  }
  $71 = $8;
  $3 = $71;
 }
 $72 = $5;
 $73 = ((($72)) + 100|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0);
 L26: do {
  if ($75) {
   $76 = $5;
   $77 = ((($76)) + 100|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)!=(4);
   if ($79) {
    $7 = 0;
    while(1) {
     $80 = $7;
     $81 = $3;
     $82 = ($80|0)<($81|0);
     if (!($82)) {
      break L26;
     }
     $83 = $2;
     _nk_panel_alloc_space($6,$83);
     $84 = $7;
     $85 = (($84) + 1)|0;
     $7 = $85;
    }
   }
  }
 } while(0);
 $86 = $8;
 $87 = $5;
 $88 = ((($87)) + 100|0);
 $89 = ((($88)) + 4|0);
 HEAP32[$89>>2] = $86;
 STACKTOP = sp;return;
}
function _nk_panel_alloc_row($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ((($7)) + 140|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $2;
 $11 = ((($10)) + 340|0);
 $12 = ((($11)) + 4832|0);
 $13 = ((($12)) + 472|0);
 ;HEAP32[$5>>2]=HEAP32[$13>>2]|0;HEAP32[$5+4>>2]=HEAP32[$13+4>>2]|0;
 $14 = $4;
 $15 = ((($14)) + 100|0);
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = ((($5)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $17 - $19;
 $6 = $20;
 $21 = $2;
 $22 = $3;
 $23 = $6;
 $24 = $4;
 $25 = ((($24)) + 100|0);
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 _nk_panel_layout($21,$22,$23,$27);
 STACKTOP = sp;return;
}
function _nk_text_colored($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $11 = sp + 32|0;
 $12 = sp + 16|0;
 $13 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2989|0),(1320|0),18768,(19667|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((19010|0),(1320|0),18769,(19667|0));
  // unreachable;
 }
 $20 = $5;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((18968|0),(1320|0),18770,(19667|0));
  // unreachable;
 }
 $26 = $5;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $5;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $5;
 $33 = ((($32)) + 12908|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 140|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $5;
 $39 = ((($38)) + 12908|0);
 $40 = HEAP32[$39>>2]|0;
 $9 = $40;
 $41 = $5;
 $42 = ((($41)) + 340|0);
 $10 = $42;
 $43 = $5;
 _nk_panel_alloc_space($12,$43);
 $44 = $10;
 $45 = ((($44)) + 44|0);
 $46 = ((($45)) + 4|0);
 ;HEAP32[$11>>2]=HEAP32[$46>>2]|0;HEAP32[$11+4>>2]=HEAP32[$46+4>>2]|0;
 $47 = +HEAPF32[$11>>2];
 HEAPF32[$13>>2] = $47;
 $48 = ((($11)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = ((($13)) + 4|0);
 HEAPF32[$50>>2] = $49;
 $51 = ((($13)) + 8|0);
 $52 = $10;
 $53 = ((($52)) + 4832|0);
 $54 = ((($53)) + 388|0);
 ;HEAP32[$51>>2]=HEAP32[$54>>2]|0;
 $55 = ((($13)) + 12|0);
 ;HEAP8[$55>>0]=HEAP8[$4>>0]|0;HEAP8[$55+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$4+3>>0]|0;
 $56 = $9;
 $57 = ((($56)) + 100|0);
 $58 = $6;
 $59 = $7;
 $60 = $8;
 $61 = $10;
 $62 = HEAP32[$61>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$12+12>>2]|0;
 _nk_widget_text($57,$$byval_copy,$58,$59,$13,$60,$62);
 STACKTOP = sp;return;
}
function _nk_widget_text($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0;
 var $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0;
 var $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0;
 var $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0;
 var $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0;
 var $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0;
 var $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0;
 var $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0.0;
 var $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy4 = sp + 76|0;
 $$byval_copy3 = sp + 72|0;
 $$byval_copy2 = sp + 56|0;
 $$byval_copy = sp + 48|0;
 $13 = sp + 8|0;
 $7 = $0;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $15 = $7;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((24382|0),(1320|0),12597,(24384|0));
  // unreachable;
 }
 $17 = $10;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((24399|0),(1320|0),12598,(24384|0));
  // unreachable;
 }
 $19 = $7;
 $20 = ($19|0)!=(0|0);
 $21 = $10;
 $22 = ($21|0)!=(0|0);
 $or$cond = $20 & $22;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $23 = ((($1)) + 12|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $10;
 $26 = ((($25)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = 2.0 * $27;
 $29 = $24 < $28;
 if ($29) {
  $30 = $10;
  $31 = ((($30)) + 4|0);
  $32 = +HEAPF32[$31>>2];
  $33 = 2.0 * $32;
  $37 = $33;
 } else {
  $34 = ((($1)) + 12|0);
  $35 = +HEAPF32[$34>>2];
  $37 = $35;
 }
 $36 = ((($1)) + 12|0);
 HEAPF32[$36>>2] = $37;
 HEAPF32[$13>>2] = 0.0;
 $38 = ((($13)) + 8|0);
 HEAPF32[$38>>2] = 0.0;
 $39 = ((($1)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $10;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $40 + $43;
 $45 = ((($13)) + 4|0);
 HEAPF32[$45>>2] = $44;
 $46 = $12;
 $47 = ((($46)) + 4|0);
 $48 = +HEAPF32[$47>>2];
 $49 = ((($1)) + 12|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $10;
 $52 = ((($51)) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = 2.0 * $53;
 $55 = $50 - $54;
 $56 = $48 < $55;
 if ($56) {
  $57 = $12;
  $58 = ((($57)) + 4|0);
  $59 = +HEAPF32[$58>>2];
  $68 = $59;
 } else {
  $60 = ((($1)) + 12|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $10;
  $63 = ((($62)) + 4|0);
  $64 = +HEAPF32[$63>>2];
  $65 = 2.0 * $64;
  $66 = $61 - $65;
  $68 = $66;
 }
 $67 = ((($13)) + 12|0);
 HEAPF32[$67>>2] = $68;
 $69 = $12;
 $70 = ((($69)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $12;
 $73 = $12;
 $74 = ((($73)) + 4|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $8;
 $77 = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$72>>2]|0;
 $78 = (+FUNCTION_TABLE_didii[$71 & 15]($$byval_copy,$75,$76,$77));
 $14 = $78;
 $79 = $10;
 $80 = +HEAPF32[$79>>2];
 $81 = 2.0 * $80;
 $82 = $14;
 $83 = $82 + $81;
 $14 = $83;
 $84 = $11;
 $85 = $84 & 1;
 $86 = ($85|0)!=(0);
 do {
  if ($86) {
   $87 = +HEAPF32[$1>>2];
   $88 = $10;
   $89 = +HEAPF32[$88>>2];
   $90 = $87 + $89;
   HEAPF32[$13>>2] = $90;
   $91 = ((($1)) + 8|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $10;
   $94 = +HEAPF32[$93>>2];
   $95 = 2.0 * $94;
   $96 = $92 - $95;
   $97 = 0.0 < $96;
   if ($97) {
    $98 = ((($1)) + 8|0);
    $99 = +HEAPF32[$98>>2];
    $100 = $10;
    $101 = +HEAPF32[$100>>2];
    $102 = 2.0 * $101;
    $103 = $99 - $102;
    $105 = $103;
   } else {
    $105 = 0.0;
   }
   $104 = ((($13)) + 8|0);
   HEAPF32[$104>>2] = $105;
  } else {
   $106 = $11;
   $107 = $106 & 2;
   $108 = ($107|0)!=(0);
   if (!($108)) {
    $176 = $11;
    $177 = $176 & 4;
    $178 = ($177|0)!=(0);
    if (!($178)) {
     STACKTOP = sp;return;
    }
    $179 = +HEAPF32[$1>>2];
    $180 = $10;
    $181 = +HEAPF32[$180>>2];
    $182 = $179 + $181;
    $183 = +HEAPF32[$1>>2];
    $184 = ((($1)) + 8|0);
    $185 = +HEAPF32[$184>>2];
    $186 = $183 + $185;
    $187 = $10;
    $188 = +HEAPF32[$187>>2];
    $189 = 2.0 * $188;
    $190 = $14;
    $191 = $189 + $190;
    $192 = $186 - $191;
    $193 = $182 < $192;
    $194 = +HEAPF32[$1>>2];
    if ($193) {
     $195 = ((($1)) + 8|0);
     $196 = +HEAPF32[$195>>2];
     $197 = $194 + $196;
     $198 = $10;
     $199 = +HEAPF32[$198>>2];
     $200 = 2.0 * $199;
     $201 = $14;
     $202 = $200 + $201;
     $203 = $197 - $202;
     $207 = $203;
    } else {
     $204 = $10;
     $205 = +HEAPF32[$204>>2];
     $206 = $194 + $205;
     $207 = $206;
    }
    HEAPF32[$13>>2] = $207;
    $208 = $14;
    $209 = $10;
    $210 = +HEAPF32[$209>>2];
    $211 = 2.0 * $210;
    $212 = $208 + $211;
    $213 = ((($13)) + 8|0);
    HEAPF32[$213>>2] = $212;
    break;
   }
   $109 = $10;
   $110 = +HEAPF32[$109>>2];
   $111 = 2.0 * $110;
   $112 = $14;
   $113 = $111 + $112;
   $114 = 1.0 < $113;
   if ($114) {
    $115 = $10;
    $116 = +HEAPF32[$115>>2];
    $117 = 2.0 * $116;
    $118 = $14;
    $119 = $117 + $118;
    $121 = $119;
   } else {
    $121 = 1.0;
   }
   $120 = ((($13)) + 8|0);
   HEAPF32[$120>>2] = $121;
   $122 = +HEAPF32[$1>>2];
   $123 = $10;
   $124 = +HEAPF32[$123>>2];
   $125 = $122 + $124;
   $126 = ((($1)) + 8|0);
   $127 = +HEAPF32[$126>>2];
   $128 = $10;
   $129 = +HEAPF32[$128>>2];
   $130 = 2.0 * $129;
   $131 = $127 - $130;
   $132 = ((($13)) + 8|0);
   $133 = +HEAPF32[$132>>2];
   $134 = $131 - $133;
   $135 = $134 / 2.0;
   $136 = $125 + $135;
   HEAPF32[$13>>2] = $136;
   $137 = +HEAPF32[$1>>2];
   $138 = $10;
   $139 = +HEAPF32[$138>>2];
   $140 = $137 + $139;
   $141 = +HEAPF32[$13>>2];
   $142 = $140 < $141;
   if ($142) {
    $143 = +HEAPF32[$13>>2];
    $148 = $143;
   } else {
    $144 = +HEAPF32[$1>>2];
    $145 = $10;
    $146 = +HEAPF32[$145>>2];
    $147 = $144 + $146;
    $148 = $147;
   }
   HEAPF32[$13>>2] = $148;
   $149 = +HEAPF32[$1>>2];
   $150 = ((($1)) + 8|0);
   $151 = +HEAPF32[$150>>2];
   $152 = $149 + $151;
   $153 = +HEAPF32[$13>>2];
   $154 = ((($13)) + 8|0);
   $155 = +HEAPF32[$154>>2];
   $156 = $153 + $155;
   $157 = $152 < $156;
   if ($157) {
    $158 = +HEAPF32[$1>>2];
    $159 = ((($1)) + 8|0);
    $160 = +HEAPF32[$159>>2];
    $161 = $158 + $160;
    $167 = $161;
   } else {
    $162 = +HEAPF32[$13>>2];
    $163 = ((($13)) + 8|0);
    $164 = +HEAPF32[$163>>2];
    $165 = $162 + $164;
    $167 = $165;
   }
   $166 = ((($13)) + 8|0);
   HEAPF32[$166>>2] = $167;
   $168 = ((($13)) + 8|0);
   $169 = +HEAPF32[$168>>2];
   $170 = +HEAPF32[$13>>2];
   $171 = $169 >= $170;
   if ($171) {
    $172 = +HEAPF32[$13>>2];
    $173 = ((($13)) + 8|0);
    $174 = +HEAPF32[$173>>2];
    $175 = $174 - $172;
    HEAPF32[$173>>2] = $175;
   }
  }
 } while(0);
 $214 = $11;
 $215 = $214 & 16;
 $216 = ($215|0)!=(0);
 if ($216) {
  $217 = ((($1)) + 4|0);
  $218 = +HEAPF32[$217>>2];
  $219 = ((($1)) + 12|0);
  $220 = +HEAPF32[$219>>2];
  $221 = $220 / 2.0;
  $222 = $218 + $221;
  $223 = $12;
  $224 = ((($223)) + 4|0);
  $225 = +HEAPF32[$224>>2];
  $226 = $225 / 2.0;
  $227 = $222 - $226;
  $228 = ((($13)) + 4|0);
  HEAPF32[$228>>2] = $227;
  $229 = ((($1)) + 12|0);
  $230 = +HEAPF32[$229>>2];
  $231 = $230 / 2.0;
  $232 = ((($1)) + 12|0);
  $233 = +HEAPF32[$232>>2];
  $234 = ((($1)) + 12|0);
  $235 = +HEAPF32[$234>>2];
  $236 = $235 / 2.0;
  $237 = $12;
  $238 = ((($237)) + 4|0);
  $239 = +HEAPF32[$238>>2];
  $240 = $239 / 2.0;
  $241 = $236 + $240;
  $242 = $233 - $241;
  $243 = $231 < $242;
  $244 = ((($1)) + 12|0);
  $245 = +HEAPF32[$244>>2];
  if ($243) {
   $246 = ((($1)) + 12|0);
   $247 = +HEAPF32[$246>>2];
   $248 = $247 / 2.0;
   $249 = $12;
   $250 = ((($249)) + 4|0);
   $251 = +HEAPF32[$250>>2];
   $252 = $251 / 2.0;
   $253 = $248 + $252;
   $254 = $245 - $253;
   $257 = $254;
  } else {
   $255 = $245 / 2.0;
   $257 = $255;
  }
  $256 = ((($13)) + 12|0);
  HEAPF32[$256>>2] = $257;
 } else {
  $258 = $11;
  $259 = $258 & 32;
  $260 = ($259|0)!=(0);
  if ($260) {
   $261 = ((($1)) + 4|0);
   $262 = +HEAPF32[$261>>2];
   $263 = ((($1)) + 12|0);
   $264 = +HEAPF32[$263>>2];
   $265 = $262 + $264;
   $266 = $12;
   $267 = ((($266)) + 4|0);
   $268 = +HEAPF32[$267>>2];
   $269 = $265 - $268;
   $270 = ((($13)) + 4|0);
   HEAPF32[$270>>2] = $269;
   $271 = $12;
   $272 = ((($271)) + 4|0);
   $273 = +HEAPF32[$272>>2];
   $274 = ((($13)) + 12|0);
   HEAPF32[$274>>2] = $273;
  }
 }
 $275 = $7;
 $276 = $8;
 $277 = $9;
 $278 = $12;
 $279 = $10;
 $280 = ((($279)) + 8|0);
 $281 = $10;
 $282 = ((($281)) + 12|0);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$13+12>>2]|0;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$280>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$280+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$280+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$280+3>>0]|0;
 ;HEAP8[$$byval_copy4>>0]=HEAP8[$282>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$282+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$282+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$282+3>>0]|0;
 _nk_draw_text($275,$$byval_copy2,$276,$277,$278,$$byval_copy3,$$byval_copy4);
 STACKTOP = sp;return;
}
function _nk_text_wrap_colored($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $9 = sp + 32|0;
 $10 = sp + 16|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2989|0),(1320|0),18796,(19683|0));
  // unreachable;
 }
 $14 = $4;
 $15 = ((($14)) + 12908|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((19010|0),(1320|0),18797,(19683|0));
  // unreachable;
 }
 $18 = $4;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 140|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((18968|0),(1320|0),18798,(19683|0));
  // unreachable;
 }
 $24 = $4;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $4;
 $27 = ((($26)) + 12908|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $4;
 $31 = ((($30)) + 12908|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 140|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $4;
 $37 = ((($36)) + 12908|0);
 $38 = HEAP32[$37>>2]|0;
 $7 = $38;
 $39 = $4;
 $40 = ((($39)) + 340|0);
 $8 = $40;
 $41 = $4;
 _nk_panel_alloc_space($10,$41);
 $42 = $8;
 $43 = ((($42)) + 44|0);
 $44 = ((($43)) + 4|0);
 ;HEAP32[$9>>2]=HEAP32[$44>>2]|0;HEAP32[$9+4>>2]=HEAP32[$44+4>>2]|0;
 $45 = +HEAPF32[$9>>2];
 HEAPF32[$11>>2] = $45;
 $46 = ((($9)) + 4|0);
 $47 = +HEAPF32[$46>>2];
 $48 = ((($11)) + 4|0);
 HEAPF32[$48>>2] = $47;
 $49 = ((($11)) + 8|0);
 $50 = $8;
 $51 = ((($50)) + 4832|0);
 $52 = ((($51)) + 388|0);
 ;HEAP32[$49>>2]=HEAP32[$52>>2]|0;
 $53 = ((($11)) + 12|0);
 ;HEAP8[$53>>0]=HEAP8[$3>>0]|0;HEAP8[$53+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$3+3>>0]|0;
 $54 = $7;
 $55 = ((($54)) + 100|0);
 $56 = $5;
 $57 = $6;
 $58 = $8;
 $59 = HEAP32[$58>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$10+12>>2]|0;
 _nk_widget_text_wrap($55,$$byval_copy,$56,$57,$11,$59);
 STACKTOP = sp;return;
}
function _nk_widget_text_wrap($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0;
 var $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0;
 var $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 80|0;
 $11 = sp + 52|0;
 $12 = sp + 48|0;
 $15 = sp + 24|0;
 $16 = sp + 8|0;
 $17 = sp;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 HEAP32[$12>>2] = 0;
 $13 = 0;
 $14 = 0;
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((24382|0),(1320|0),12649,(24401|0));
  // unreachable;
 }
 $20 = $9;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((24399|0),(1320|0),12650,(24401|0));
  // unreachable;
 }
 $22 = $6;
 $23 = ($22|0)!=(0|0);
 $24 = $9;
 $25 = ($24|0)!=(0|0);
 $or$cond = $23 & $25;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 _nk_vec2($17,0.0,0.0);
 ;HEAP32[$16>>2]=HEAP32[$17>>2]|0;HEAP32[$16+4>>2]=HEAP32[$17+4>>2]|0;
 $26 = ((($16)) + 8|0);
 $27 = $9;
 $28 = ((($27)) + 8|0);
 ;HEAP32[$26>>2]=HEAP32[$28>>2]|0;
 $29 = ((($16)) + 12|0);
 $30 = $9;
 $31 = ((($30)) + 12|0);
 ;HEAP32[$29>>2]=HEAP32[$31>>2]|0;
 $32 = ((($1)) + 8|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $9;
 $35 = +HEAPF32[$34>>2];
 $36 = 2.0 * $35;
 $37 = $33 < $36;
 if ($37) {
  $38 = $9;
  $39 = +HEAPF32[$38>>2];
  $40 = 2.0 * $39;
  $44 = $40;
 } else {
  $41 = ((($1)) + 8|0);
  $42 = +HEAPF32[$41>>2];
  $44 = $42;
 }
 $43 = ((($1)) + 8|0);
 HEAPF32[$43>>2] = $44;
 $45 = ((($1)) + 12|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $9;
 $48 = ((($47)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = 2.0 * $49;
 $51 = $46 < $50;
 if ($51) {
  $52 = $9;
  $53 = ((($52)) + 4|0);
  $54 = +HEAPF32[$53>>2];
  $55 = 2.0 * $54;
  $59 = $55;
 } else {
  $56 = ((($1)) + 12|0);
  $57 = +HEAPF32[$56>>2];
  $59 = $57;
 }
 $58 = ((($1)) + 12|0);
 HEAPF32[$58>>2] = $59;
 $60 = ((($1)) + 12|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $9;
 $63 = ((($62)) + 4|0);
 $64 = +HEAPF32[$63>>2];
 $65 = 2.0 * $64;
 $66 = $61 - $65;
 $67 = ((($1)) + 12|0);
 HEAPF32[$67>>2] = $66;
 $68 = +HEAPF32[$1>>2];
 $69 = $9;
 $70 = +HEAPF32[$69>>2];
 $71 = $68 + $70;
 HEAPF32[$15>>2] = $71;
 $72 = ((($1)) + 4|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $9;
 $75 = ((($74)) + 4|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $73 + $76;
 $78 = ((($15)) + 4|0);
 HEAPF32[$78>>2] = $77;
 $79 = ((($1)) + 8|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $9;
 $82 = +HEAPF32[$81>>2];
 $83 = 2.0 * $82;
 $84 = $80 - $83;
 $85 = ((($15)) + 8|0);
 HEAPF32[$85>>2] = $84;
 $86 = $9;
 $87 = ((($86)) + 4|0);
 $88 = +HEAPF32[$87>>2];
 $89 = 2.0 * $88;
 $90 = $10;
 $91 = ((($90)) + 4|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $89 + $92;
 $94 = ((($15)) + 12|0);
 HEAPF32[$94>>2] = $93;
 $95 = $10;
 $96 = $7;
 $97 = $8;
 $98 = ((($15)) + 8|0);
 $99 = +HEAPF32[$98>>2];
 $100 = (_nk_text_clamp($95,$96,$97,$99,$12,$11,372,1)|0);
 $13 = $100;
 while(1) {
  $101 = $14;
  $102 = $8;
  $103 = ($101|0)<($102|0);
  $104 = $13;
  $105 = ($104|0)!=(0);
  $or$cond3 = $103 & $105;
  if (!($or$cond3)) {
   label = 16;
   break;
  }
  $106 = ((($15)) + 4|0);
  $107 = +HEAPF32[$106>>2];
  $108 = ((($15)) + 12|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $107 + $109;
  $111 = ((($1)) + 4|0);
  $112 = +HEAPF32[$111>>2];
  $113 = ((($1)) + 12|0);
  $114 = +HEAPF32[$113>>2];
  $115 = $112 + $114;
  $116 = $110 >= $115;
  if ($116) {
   label = 16;
   break;
  }
  $117 = $6;
  $118 = $14;
  $119 = $7;
  $120 = (($119) + ($118)|0);
  $121 = $13;
  $122 = $10;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$15+12>>2]|0;
  _nk_widget_text($117,$$byval_copy,$120,$121,$16,17,$122);
  $123 = $13;
  $124 = $14;
  $125 = (($124) + ($123))|0;
  $14 = $125;
  $126 = $10;
  $127 = ((($126)) + 4|0);
  $128 = +HEAPF32[$127>>2];
  $129 = $9;
  $130 = ((($129)) + 4|0);
  $131 = +HEAPF32[$130>>2];
  $132 = 2.0 * $131;
  $133 = $128 + $132;
  $134 = ((($15)) + 4|0);
  $135 = +HEAPF32[$134>>2];
  $136 = $135 + $133;
  HEAPF32[$134>>2] = $136;
  $137 = $10;
  $138 = $14;
  $139 = $7;
  $140 = (($139) + ($138)|0);
  $141 = $8;
  $142 = $14;
  $143 = (($141) - ($142))|0;
  $144 = ((($15)) + 8|0);
  $145 = +HEAPF32[$144>>2];
  $146 = (_nk_text_clamp($137,$140,$143,$145,$12,$11,372,1)|0);
  $13 = $146;
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function _nk_strfmt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = -1;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((22477|0),(1320|0),4323,(24421|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  ___assert_fail((24431|0),(1320|0),4324,(24421|0));
  // unreachable;
 }
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 $16 = $6;
 $17 = ($16|0)!=(0);
 $or$cond = $15 & $17;
 $18 = $7;
 $19 = ($18|0)!=(0|0);
 $or$cond3 = $or$cond & $19;
 if ($or$cond3) {
  $20 = $5;
  $21 = $6;
  $22 = $7;
  $23 = $8;
  $24 = (_vsnprintf($20,$21,$22,$23)|0);
  $9 = $24;
  $25 = $9;
  $26 = $6;
  $27 = ($25|0)>=($26|0);
  $28 = $9;
  $29 = $27 ? -1 : $28;
  $9 = $29;
  $30 = $6;
  $31 = (($30) - 1)|0;
  $32 = $5;
  $33 = (($32) + ($31)|0);
  HEAP8[$33>>0] = 0;
  $34 = $9;
  $4 = $34;
  $35 = $4;
  STACKTOP = sp;return ($35|0);
 } else {
  $4 = 0;
  $35 = $4;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _nk_label_colored($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 $9 = $5;
 $10 = (_nk_strlen($9)|0);
 $11 = $6;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$3+3>>0]|0;
 _nk_text_colored($7,$8,$10,$11,$$byval_copy);
 STACKTOP = sp;return;
}
function _nk_labelf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $6 = sp + 32|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$7>>2] = $varargs;
 $8 = $5;
 (_nk_strfmt($6,256,$8,$7)|0);
 $9 = $3;
 $10 = $4;
 _nk_label($9,$6,$10);
 STACKTOP = sp;return;
}
function _nk_label($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $4;
 $9 = (_nk_strlen($8)|0);
 $10 = $5;
 _nk_text($6,$7,$9,$10);
 STACKTOP = sp;return;
}
function _nk_label_wrap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = (_nk_strlen($6)|0);
 _nk_text_wrap($4,$5,$7);
 STACKTOP = sp;return;
}
function _nk_text($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2989|0),(1320|0),18903,(19704|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $4;
 $17 = ((($16)) + 340|0);
 $18 = ((($17)) + 44|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$18+3>>0]|0;
 _nk_text_colored($12,$13,$14,$15,$$byval_copy);
 STACKTOP = sp;return;
}
function _nk_text_wrap($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),18911,(19712|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $3;
 $14 = ((($13)) + 340|0);
 $15 = ((($14)) + 44|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$15+3>>0]|0;
 _nk_text_wrap_colored($10,$11,$12,$$byval_copy);
 STACKTOP = sp;return;
}
function _nk_button_set_behavior($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),18957,(19729|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = $2;
 $10 = ((($9)) + 5800|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _nk_button_text_styled($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 56|0;
 $12 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2989|0),(1320|0),19013,(19752|0));
  // unreachable;
 }
 $16 = $6;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((19774|0),(1320|0),19014,(19752|0));
  // unreachable;
 }
 $18 = $5;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((19010|0),(1320|0),19015,(19752|0));
  // unreachable;
 }
 $22 = $5;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 140|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((18968|0),(1320|0),19016,(19752|0));
  // unreachable;
 }
 $28 = $6;
 $29 = ($28|0)!=(0|0);
 $30 = $5;
 $31 = ($30|0)!=(0|0);
 $or$cond = $29 & $31;
 if ($or$cond) {
  $32 = $5;
  $33 = ((($32)) + 12908|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $5;
   $37 = ((($36)) + 12908|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 140|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $42 = $5;
    $43 = ((($42)) + 12908|0);
    $44 = HEAP32[$43>>2]|0;
    $9 = $44;
    $45 = $9;
    $46 = ((($45)) + 140|0);
    $47 = HEAP32[$46>>2]|0;
    $10 = $47;
    $48 = $5;
    $49 = (_nk_widget($12,$48)|0);
    $13 = $49;
    $50 = $13;
    $51 = ($50|0)!=(0);
    if (!($51)) {
     $4 = 0;
     $79 = $4;
     STACKTOP = sp;return ($79|0);
    }
    $52 = $13;
    $53 = ($52|0)==(2);
    if ($53) {
     $60 = 0;
    } else {
     $54 = $10;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 & 2048;
     $58 = ($57|0)!=(0);
     if ($58) {
      $60 = 0;
     } else {
      $59 = $5;
      $60 = $59;
     }
    }
    $11 = $60;
    $61 = $5;
    $62 = ((($61)) + 5796|0);
    $63 = $9;
    $64 = ((($63)) + 100|0);
    $65 = $7;
    $66 = $8;
    $67 = $6;
    $68 = ((($67)) + 80|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $5;
    $71 = ((($70)) + 5800|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $6;
    $74 = $11;
    $75 = $5;
    $76 = ((($75)) + 340|0);
    $77 = HEAP32[$76>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$12+12>>2]|0;
    $78 = (_nk_do_button_text($62,$64,$$byval_copy,$65,$66,$69,$72,$73,$74,$77)|0);
    $4 = $78;
    $79 = $4;
    STACKTOP = sp;return ($79|0);
   }
  }
 }
 $4 = 0;
 $79 = $4;
 STACKTOP = sp;return ($79|0);
}
function _nk_do_button_text($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy7 = sp + 84|0;
 $$byval_copy6 = sp + 80|0;
 $$byval_copy = sp + 64|0;
 $20 = sp + 8|0;
 $11 = $0;
 $12 = $1;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $21 = 0;
 $22 = $11;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((18268|0),(1320|0),12844,(24440|0));
  // unreachable;
 }
 $24 = $17;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((19774|0),(1320|0),12845,(24440|0));
  // unreachable;
 }
 $26 = $12;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((24177|0),(1320|0),12846,(24440|0));
  // unreachable;
 }
 $28 = $13;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  ___assert_fail((24458|0),(1320|0),12847,(24440|0));
  // unreachable;
 }
 $30 = $19;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((2240|0),(1320|0),12848,(24440|0));
  // unreachable;
 }
 $32 = $12;
 $33 = ($32|0)!=(0|0);
 $34 = $17;
 $35 = ($34|0)!=(0|0);
 $or$cond = $33 & $35;
 $36 = $19;
 $37 = ($36|0)!=(0|0);
 $or$cond3 = $or$cond & $37;
 $38 = $13;
 $39 = ($38|0)!=(0|0);
 $or$cond5 = $or$cond3 & $39;
 if (!($or$cond5)) {
  $10 = 0;
  $75 = $10;
  STACKTOP = sp;return ($75|0);
 }
 $40 = $11;
 $41 = $12;
 $42 = $17;
 $43 = $18;
 $44 = $16;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $45 = (_nk_do_button($40,$41,$$byval_copy,$42,$43,$44,$20)|0);
 $21 = $45;
 $46 = $17;
 $47 = ((($46)) + 120|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = $17;
  $51 = ((($50)) + 120|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $12;
  $54 = $17;
  $55 = ((($54)) + 116|0);
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$55>>2]|0;
  FUNCTION_TABLE_vii[$52 & 31]($53,$$byval_copy6);
 }
 $56 = $12;
 $57 = $11;
 $58 = HEAP32[$57>>2]|0;
 $59 = $17;
 $60 = $13;
 $61 = $14;
 $62 = $15;
 $63 = $19;
 _nk_draw_button_text($56,$2,$20,$58,$59,$60,$61,$62,$63);
 $64 = $17;
 $65 = ((($64)) + 124|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $17;
  $69 = ((($68)) + 124|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $12;
  $72 = $17;
  $73 = ((($72)) + 116|0);
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$73>>2]|0;
  FUNCTION_TABLE_vii[$70 & 31]($71,$$byval_copy7);
 }
 $74 = $21;
 $10 = $74;
 $75 = $10;
 STACKTOP = sp;return ($75|0);
}
function _nk_button_text($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((2989|0),(1320|0),19033,(19780|0));
  // unreachable;
 }
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $4;
  $12 = $4;
  $13 = ((($12)) + 340|0);
  $14 = ((($13)) + 56|0);
  $15 = $5;
  $16 = $6;
  $17 = (_nk_button_text_styled($11,$14,$15,$16)|0);
  $3 = $17;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = 0;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _nk_button_label($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = (_nk_strlen($6)|0);
 $8 = (_nk_button_text($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _nk_button_color($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $$byval_copy3 = sp + 256|0;
 $$byval_copy2 = sp + 280|0;
 $$byval_copy1 = sp + 276|0;
 $$byval_copy = sp + 272|0;
 $7 = sp + 104|0;
 $9 = sp + 80|0;
 $10 = sp + 64|0;
 $12 = sp + 40|0;
 $13 = sp + 20|0;
 $14 = sp;
 $3 = $0;
 $8 = 0;
 $15 = $3;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((2989|0),(1320|0),19058,(19795|0));
  // unreachable;
 }
 $17 = $3;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((19010|0),(1320|0),19059,(19795|0));
  // unreachable;
 }
 $21 = $3;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((18968|0),(1320|0),19060,(19795|0));
  // unreachable;
 }
 $27 = $3;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $3;
  $30 = ((($29)) + 12908|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = $3;
   $34 = ((($33)) + 12908|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 140|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $3;
    $40 = ((($39)) + 12908|0);
    $41 = HEAP32[$40>>2]|0;
    $4 = $41;
    $42 = $4;
    $43 = ((($42)) + 140|0);
    $44 = HEAP32[$43>>2]|0;
    $5 = $44;
    $45 = $3;
    $46 = (_nk_widget($9,$45)|0);
    $11 = $46;
    $47 = $11;
    $48 = ($47|0)!=(0);
    if (!($48)) {
     $2 = 0;
     $78 = $2;
     STACKTOP = sp;return ($78|0);
    }
    $49 = $11;
    $50 = ($49|0)==(2);
    if ($50) {
     $57 = 0;
    } else {
     $51 = $5;
     $52 = ((($51)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $53 & 2048;
     $55 = ($54|0)!=(0);
     if ($55) {
      $57 = 0;
     } else {
      $56 = $3;
      $57 = $56;
     }
    }
    $6 = $57;
    $58 = $3;
    $59 = ((($58)) + 340|0);
    $60 = ((($59)) + 56|0);
    dest=$7; src=$60; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
    _nk_style_item_color($12,$$byval_copy);
    ;HEAP32[$7>>2]=HEAP32[$12>>2]|0;HEAP32[$7+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$12+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$12+16>>2]|0;
    $61 = ((($7)) + 20|0);
    ;HEAP8[$$byval_copy1>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$1+3>>0]|0;
    _nk_style_item_color($13,$$byval_copy1);
    ;HEAP32[$61>>2]=HEAP32[$13>>2]|0;HEAP32[$61+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$61+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$61+12>>2]=HEAP32[$13+12>>2]|0;HEAP32[$61+16>>2]=HEAP32[$13+16>>2]|0;
    $62 = ((($7)) + 40|0);
    ;HEAP8[$$byval_copy2>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$1+3>>0]|0;
    _nk_style_item_color($14,$$byval_copy2);
    ;HEAP32[$62>>2]=HEAP32[$14>>2]|0;HEAP32[$62+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$62+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[$62+16>>2]=HEAP32[$14+16>>2]|0;
    $63 = $3;
    $64 = ((($63)) + 5796|0);
    $65 = $4;
    $66 = ((($65)) + 100|0);
    $67 = $6;
    $68 = $3;
    $69 = ((($68)) + 5800|0);
    $70 = HEAP32[$69>>2]|0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$9+12>>2]|0;
    $71 = (_nk_do_button($64,$66,$$byval_copy3,$7,$67,$70,$10)|0);
    $8 = $71;
    $72 = $4;
    $73 = ((($72)) + 100|0);
    $74 = $3;
    $75 = ((($74)) + 5796|0);
    $76 = HEAP32[$75>>2]|0;
    (_nk_draw_button($73,$9,$76,$7)|0);
    $77 = $8;
    $2 = $77;
    $78 = $2;
    STACKTOP = sp;return ($78|0);
   }
  }
 }
 $2 = 0;
 $78 = $2;
 STACKTOP = sp;return ($78|0);
}
function _nk_do_button($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 48|0;
 $14 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $10;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((19774|0),(1320|0),12790,(24465|0));
  // unreachable;
 }
 $17 = $8;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((18268|0),(1320|0),12791,(24465|0));
  // unreachable;
 }
 $19 = $9;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((24177|0),(1320|0),12792,(24465|0));
  // unreachable;
 }
 $21 = $9;
 $22 = ($21|0)!=(0|0);
 $23 = $10;
 $24 = ($23|0)!=(0|0);
 $or$cond = $22 & $24;
 if ($or$cond) {
  $25 = +HEAPF32[$2>>2];
  $26 = $10;
  $27 = ((($26)) + 92|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 + $28;
  $30 = $10;
  $31 = ((($30)) + 84|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $29 + $32;
  $34 = $10;
  $35 = ((($34)) + 88|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 + $36;
  $38 = $13;
  HEAPF32[$38>>2] = $37;
  $39 = ((($2)) + 4|0);
  $40 = +HEAPF32[$39>>2];
  $41 = $10;
  $42 = ((($41)) + 92|0);
  $43 = ((($42)) + 4|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $40 + $44;
  $46 = $10;
  $47 = ((($46)) + 84|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $45 + $48;
  $50 = $10;
  $51 = ((($50)) + 88|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 + $52;
  $54 = $13;
  $55 = ((($54)) + 4|0);
  HEAPF32[$55>>2] = $53;
  $56 = ((($2)) + 8|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $10;
  $59 = ((($58)) + 92|0);
  $60 = +HEAPF32[$59>>2];
  $61 = 2.0 * $60;
  $62 = $10;
  $63 = ((($62)) + 84|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $61 + $64;
  $66 = $10;
  $67 = ((($66)) + 88|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $68 * 2.0;
  $70 = $65 + $69;
  $71 = $57 - $70;
  $72 = $13;
  $73 = ((($72)) + 8|0);
  HEAPF32[$73>>2] = $71;
  $74 = ((($2)) + 12|0);
  $75 = +HEAPF32[$74>>2];
  $76 = $10;
  $77 = ((($76)) + 92|0);
  $78 = ((($77)) + 4|0);
  $79 = +HEAPF32[$78>>2];
  $80 = 2.0 * $79;
  $81 = $10;
  $82 = ((($81)) + 84|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $80 + $83;
  $85 = $10;
  $86 = ((($85)) + 88|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $87 * 2.0;
  $89 = $84 + $88;
  $90 = $75 - $89;
  $91 = $13;
  $92 = ((($91)) + 12|0);
  HEAPF32[$92>>2] = $90;
  $93 = +HEAPF32[$2>>2];
  $94 = $10;
  $95 = ((($94)) + 108|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $93 - $96;
  HEAPF32[$14>>2] = $97;
  $98 = ((($2)) + 4|0);
  $99 = +HEAPF32[$98>>2];
  $100 = $10;
  $101 = ((($100)) + 108|0);
  $102 = ((($101)) + 4|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $99 - $103;
  $105 = ((($14)) + 4|0);
  HEAPF32[$105>>2] = $104;
  $106 = ((($2)) + 8|0);
  $107 = +HEAPF32[$106>>2];
  $108 = $10;
  $109 = ((($108)) + 108|0);
  $110 = +HEAPF32[$109>>2];
  $111 = 2.0 * $110;
  $112 = $107 + $111;
  $113 = ((($14)) + 8|0);
  HEAPF32[$113>>2] = $112;
  $114 = ((($2)) + 12|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $10;
  $117 = ((($116)) + 108|0);
  $118 = ((($117)) + 4|0);
  $119 = +HEAPF32[$118>>2];
  $120 = 2.0 * $119;
  $121 = $115 + $120;
  $122 = ((($14)) + 12|0);
  HEAPF32[$122>>2] = $121;
  $123 = $8;
  $124 = $11;
  $125 = $12;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$14+12>>2]|0;
  $126 = (_nk_button_behavior($123,$$byval_copy,$124,$125)|0);
  $7 = $126;
  $127 = $7;
  STACKTOP = sp;return ($127|0);
 } else {
  $7 = 0;
  $127 = $7;
  STACKTOP = sp;return ($127|0);
 }
 return (0)|0;
}
function _nk_draw_button($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $nk_white$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy4 = sp + 80|0;
 $$byval_copy3 = sp + 56|0;
 $$byval_copy2 = sp + 76|0;
 $$byval_copy1 = sp + 40|0;
 $nk_white$byval_copy = sp + 72|0;
 $$byval_copy = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = $9 & 16;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $7;
   $13 = ((($12)) + 20|0);
   $8 = $13;
  } else {
   $14 = $6;
   $15 = $14 & 32;
   $16 = ($15|0)!=(0);
   $17 = $7;
   if ($16) {
    $18 = ((($17)) + 40|0);
    $8 = $18;
    break;
   } else {
    $8 = $17;
    break;
   }
  }
 } while(0);
 $19 = $8;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $22 = $4;
 $23 = $5;
 if ($21) {
  $24 = $8;
  $25 = ((($24)) + 4|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$23+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($22,$$byval_copy,$25,$nk_white$byval_copy);
  $41 = $8;
  STACKTOP = sp;return ($41|0);
 } else {
  $26 = $7;
  $27 = ((($26)) + 88|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $8;
  $30 = ((($29)) + 4|0);
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$23+12>>2]|0;
  ;HEAP8[$$byval_copy2>>0]=HEAP8[$30>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$30+3>>0]|0;
  _nk_fill_rect($22,$$byval_copy1,$28,$$byval_copy2);
  $31 = $4;
  $32 = $5;
  $33 = $7;
  $34 = ((($33)) + 88|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $7;
  $37 = ((($36)) + 84|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $7;
  $40 = ((($39)) + 60|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$32+12>>2]|0;
  ;HEAP8[$$byval_copy4>>0]=HEAP8[$40>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$40+3>>0]|0;
  _nk_stroke_rect($31,$$byval_copy3,$35,$38,$$byval_copy4);
  $41 = $8;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _nk_button_symbol_styled($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 56|0;
 $10 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2989|0),(1320|0),19092,(19811|0));
  // unreachable;
 }
 $14 = $4;
 $15 = ((($14)) + 12908|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((19010|0),(1320|0),19093,(19811|0));
  // unreachable;
 }
 $18 = $4;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 140|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((18968|0),(1320|0),19094,(19811|0));
  // unreachable;
 }
 $24 = $4;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $4;
  $27 = ((($26)) + 12908|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $4;
   $31 = ((($30)) + 12908|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 140|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)!=(0|0);
   if ($35) {
    $36 = $4;
    $37 = ((($36)) + 12908|0);
    $38 = HEAP32[$37>>2]|0;
    $7 = $38;
    $39 = $7;
    $40 = ((($39)) + 140|0);
    $41 = HEAP32[$40>>2]|0;
    $8 = $41;
    $42 = $4;
    $43 = (_nk_widget($10,$42)|0);
    $11 = $43;
    $44 = $11;
    $45 = ($44|0)!=(0);
    if (!($45)) {
     $3 = 0;
     $69 = $3;
     STACKTOP = sp;return ($69|0);
    }
    $46 = $11;
    $47 = ($46|0)==(2);
    if ($47) {
     $54 = 0;
    } else {
     $48 = $8;
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 & 2048;
     $52 = ($51|0)!=(0);
     if ($52) {
      $54 = 0;
     } else {
      $53 = $4;
      $54 = $53;
     }
    }
    $9 = $54;
    $55 = $4;
    $56 = ((($55)) + 5796|0);
    $57 = $7;
    $58 = ((($57)) + 100|0);
    $59 = $6;
    $60 = $4;
    $61 = ((($60)) + 5800|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $5;
    $64 = $9;
    $65 = $4;
    $66 = ((($65)) + 340|0);
    $67 = HEAP32[$66>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$10+12>>2]|0;
    $68 = (_nk_do_button_symbol($56,$58,$$byval_copy,$59,$62,$63,$64,$67)|0);
    $3 = $68;
    $69 = $3;
    STACKTOP = sp;return ($69|0);
   }
  }
 }
 $3 = 0;
 $69 = $3;
 STACKTOP = sp;return ($69|0);
}
function _nk_do_button_symbol($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy7 = sp + 76|0;
 $$byval_copy6 = sp + 72|0;
 $$byval_copy = sp + 56|0;
 $17 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $18 = $9;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((18268|0),(1320|0),12892,(24478|0));
  // unreachable;
 }
 $20 = $13;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((19774|0),(1320|0),12893,(24478|0));
  // unreachable;
 }
 $22 = $15;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((2240|0),(1320|0),12894,(24478|0));
  // unreachable;
 }
 $24 = $10;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((24177|0),(1320|0),12895,(24478|0));
  // unreachable;
 }
 $26 = $10;
 $27 = ($26|0)!=(0|0);
 $28 = $13;
 $29 = ($28|0)!=(0|0);
 $or$cond = $27 & $29;
 $30 = $15;
 $31 = ($30|0)!=(0|0);
 $or$cond3 = $or$cond & $31;
 $32 = $9;
 $33 = ($32|0)!=(0|0);
 $or$cond5 = $or$cond3 & $33;
 if (!($or$cond5)) {
  $8 = 0;
  $67 = $8;
  STACKTOP = sp;return ($67|0);
 }
 $34 = $9;
 $35 = $10;
 $36 = $13;
 $37 = $14;
 $38 = $12;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $39 = (_nk_do_button($34,$35,$$byval_copy,$36,$37,$38,$17)|0);
 $16 = $39;
 $40 = $13;
 $41 = ((($40)) + 120|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $44 = $13;
  $45 = ((($44)) + 120|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $10;
  $48 = $13;
  $49 = ((($48)) + 116|0);
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$46 & 31]($47,$$byval_copy6);
 }
 $50 = $10;
 $51 = $9;
 $52 = HEAP32[$51>>2]|0;
 $53 = $13;
 $54 = $11;
 $55 = $15;
 _nk_draw_button_symbol($50,$2,$17,$52,$53,$54,$55);
 $56 = $13;
 $57 = ((($56)) + 124|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)!=(0|0);
 if ($59) {
  $60 = $13;
  $61 = ((($60)) + 124|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $10;
  $64 = $13;
  $65 = ((($64)) + 116|0);
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$65>>2]|0;
  FUNCTION_TABLE_vii[$62 & 31]($63,$$byval_copy7);
 }
 $66 = $16;
 $8 = $66;
 $67 = $8;
 STACKTOP = sp;return ($67|0);
}
function _nk_button_symbol($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),19110,(19835|0));
  // unreachable;
 }
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $3;
  $10 = $3;
  $11 = ((($10)) + 340|0);
  $12 = ((($11)) + 56|0);
  $13 = $4;
  $14 = (_nk_button_symbol_styled($9,$12,$13)|0);
  $2 = $14;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 } else {
  $2 = 0;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _nk_button_symbol_text_styled($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $16 = sp + 8|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $18 = $7;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((2989|0),(1320|0),19162,(19852|0));
  // unreachable;
 }
 $20 = $7;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((19010|0),(1320|0),19163,(19852|0));
  // unreachable;
 }
 $24 = $7;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  ___assert_fail((18968|0),(1320|0),19164,(19852|0));
  // unreachable;
 }
 $30 = $7;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $7;
  $33 = ((($32)) + 12908|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $7;
   $37 = ((($36)) + 12908|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 140|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $42 = $7;
    $43 = ((($42)) + 12908|0);
    $44 = HEAP32[$43>>2]|0;
    $13 = $44;
    $45 = $13;
    $46 = ((($45)) + 140|0);
    $47 = HEAP32[$46>>2]|0;
    $14 = $47;
    $48 = $7;
    $49 = (_nk_widget($16,$48)|0);
    $17 = $49;
    $50 = $17;
    $51 = ($50|0)!=(0);
    if (!($51)) {
     $6 = 0;
     $78 = $6;
     STACKTOP = sp;return ($78|0);
    }
    $52 = $17;
    $53 = ($52|0)==(2);
    if ($53) {
     $60 = 0;
    } else {
     $54 = $14;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 & 2048;
     $58 = ($57|0)!=(0);
     if ($58) {
      $60 = 0;
     } else {
      $59 = $7;
      $60 = $59;
     }
    }
    $15 = $60;
    $61 = $7;
    $62 = ((($61)) + 5796|0);
    $63 = $13;
    $64 = ((($63)) + 100|0);
    $65 = $9;
    $66 = $10;
    $67 = $11;
    $68 = $12;
    $69 = $7;
    $70 = ((($69)) + 5800|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $8;
    $73 = $7;
    $74 = ((($73)) + 340|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $15;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$16+12>>2]|0;
    $77 = (_nk_do_button_text_symbol($62,$64,$$byval_copy,$65,$66,$67,$68,$71,$72,$75,$76)|0);
    $6 = $77;
    $78 = $6;
    STACKTOP = sp;return ($78|0);
   }
  }
 }
 $6 = 0;
 $78 = $6;
 STACKTOP = sp;return ($78|0);
}
function _nk_do_button_text_symbol($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $70 = 0;
 var $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy5 = sp + 100|0;
 $$byval_copy4 = sp + 96|0;
 $$byval_copy = sp + 80|0;
 $23 = sp + 16|0;
 $24 = sp;
 $12 = $0;
 $13 = $1;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;
 $25 = $19;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((19774|0),(1320|0),12987,(24498|0));
  // unreachable;
 }
 $27 = $13;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  ___assert_fail((24177|0),(1320|0),12988,(24498|0));
  // unreachable;
 }
 $29 = $20;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((2240|0),(1320|0),12989,(24498|0));
  // unreachable;
 }
 $31 = $13;
 $32 = ($31|0)!=(0|0);
 $33 = $19;
 $34 = ($33|0)!=(0|0);
 $or$cond = $32 & $34;
 $35 = $20;
 $36 = ($35|0)!=(0|0);
 $or$cond3 = $or$cond & $36;
 if (!($or$cond3)) {
  $11 = 0;
  $116 = $11;
  STACKTOP = sp;return ($116|0);
 }
 $37 = $12;
 $38 = $13;
 $39 = $19;
 $40 = $21;
 $41 = $18;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $42 = (_nk_do_button($37,$38,$$byval_copy,$39,$40,$41,$24)|0);
 $22 = $42;
 $43 = ((($24)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = ((($24)) + 12|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $46 / 2.0;
 $48 = $44 + $47;
 $49 = $20;
 $50 = ((($49)) + 4|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $51 / 2.0;
 $53 = $48 - $52;
 $54 = ((($23)) + 4|0);
 HEAPF32[$54>>2] = $53;
 $55 = $20;
 $56 = ((($55)) + 4|0);
 $57 = +HEAPF32[$56>>2];
 $58 = ((($23)) + 8|0);
 HEAPF32[$58>>2] = $57;
 $59 = $20;
 $60 = ((($59)) + 4|0);
 $61 = +HEAPF32[$60>>2];
 $62 = ((($23)) + 12|0);
 HEAPF32[$62>>2] = $61;
 $63 = $17;
 $64 = $63 & 1;
 $65 = ($64|0)!=(0);
 $66 = +HEAPF32[$24>>2];
 if ($65) {
  $67 = ((($24)) + 8|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $66 + $68;
  $70 = $19;
  $71 = ((($70)) + 92|0);
  $72 = +HEAPF32[$71>>2];
  $73 = 2.0 * $72;
  $74 = ((($23)) + 8|0);
  $75 = +HEAPF32[$74>>2];
  $76 = $73 + $75;
  $77 = $69 - $76;
  HEAPF32[$23>>2] = $77;
  $78 = +HEAPF32[$23>>2];
  $79 = $78 < 0.0;
  $80 = +HEAPF32[$23>>2];
  $81 = $79 ? 0.0 : $80;
  HEAPF32[$23>>2] = $81;
 } else {
  $82 = $19;
  $83 = ((($82)) + 92|0);
  $84 = +HEAPF32[$83>>2];
  $85 = 2.0 * $84;
  $86 = $66 + $85;
  HEAPF32[$23>>2] = $86;
 }
 $87 = $19;
 $88 = ((($87)) + 120|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  $91 = $19;
  $92 = ((($91)) + 120|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $13;
  $95 = $19;
  $96 = ((($95)) + 116|0);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$96>>2]|0;
  FUNCTION_TABLE_vii[$93 & 31]($94,$$byval_copy4);
 }
 $97 = $13;
 $98 = $12;
 $99 = HEAP32[$98>>2]|0;
 $100 = $19;
 $101 = $15;
 $102 = $16;
 $103 = $14;
 $104 = $20;
 _nk_draw_button_text_symbol($97,$2,$24,$23,$99,$100,$101,$102,$103,$104);
 $105 = $19;
 $106 = ((($105)) + 124|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = $19;
  $110 = ((($109)) + 124|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $13;
  $113 = $19;
  $114 = ((($113)) + 116|0);
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$114>>2]|0;
  FUNCTION_TABLE_vii[$111 & 31]($112,$$byval_copy5);
 }
 $115 = $22;
 $11 = $115;
 $116 = $11;
 STACKTOP = sp;return ($116|0);
}
function _nk_button_symbol_text($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((2989|0),(1320|0),19183,(19881|0));
  // unreachable;
 }
 $13 = $6;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $6;
  $16 = $6;
  $17 = ((($16)) + 340|0);
  $18 = ((($17)) + 56|0);
  $19 = $7;
  $20 = $8;
  $21 = $9;
  $22 = $10;
  $23 = (_nk_button_symbol_text_styled($15,$18,$19,$20,$21,$22)|0);
  $5 = $23;
  $24 = $5;
  STACKTOP = sp;return ($24|0);
 } else {
  $5 = 0;
  $24 = $5;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _nk_button_symbol_label($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $6;
 $12 = (_nk_strlen($11)|0);
 $13 = $7;
 $14 = (_nk_button_symbol_text($8,$9,$10,$12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _nk_selectable_text($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $16 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $6;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((2989|0),(1320|0),19258,(19903|0));
  // unreachable;
 }
 $19 = $10;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((19922|0),(1320|0),19259,(19903|0));
  // unreachable;
 }
 $21 = $6;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((19010|0),(1320|0),19260,(19903|0));
  // unreachable;
 }
 $25 = $6;
 $26 = ((($25)) + 12908|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 140|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((18968|0),(1320|0),19261,(19903|0));
  // unreachable;
 }
 $31 = $6;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $6;
  $34 = ((($33)) + 12908|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $6;
   $38 = ((($37)) + 12908|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 140|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)!=(0|0);
   $43 = $10;
   $44 = ($43|0)!=(0|0);
   $or$cond = $42 & $44;
   if ($or$cond) {
    $45 = $6;
    $46 = ((($45)) + 12908|0);
    $47 = HEAP32[$46>>2]|0;
    $11 = $47;
    $48 = $11;
    $49 = ((($48)) + 140|0);
    $50 = HEAP32[$49>>2]|0;
    $12 = $50;
    $51 = $6;
    $52 = ((($51)) + 340|0);
    $14 = $52;
    $53 = $6;
    $54 = (_nk_widget($16,$53)|0);
    $15 = $54;
    $55 = $15;
    $56 = ($55|0)!=(0);
    if (!($56)) {
     $5 = 0;
     $80 = $5;
     STACKTOP = sp;return ($80|0);
    }
    $57 = $15;
    $58 = ($57|0)==(2);
    if ($58) {
     $65 = 0;
    } else {
     $59 = $12;
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $61 & 2048;
     $63 = ($62|0)!=(0);
     if ($63) {
      $65 = 0;
     } else {
      $64 = $6;
      $65 = $64;
     }
    }
    $13 = $65;
    $66 = $6;
    $67 = ((($66)) + 5796|0);
    $68 = $11;
    $69 = ((($68)) + 100|0);
    $70 = $7;
    $71 = $8;
    $72 = $9;
    $73 = $10;
    $74 = $14;
    $75 = ((($74)) + 760|0);
    $76 = $13;
    $77 = $14;
    $78 = HEAP32[$77>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$16+12>>2]|0;
    $79 = (_nk_do_selectable($67,$69,$$byval_copy,$70,$71,$72,$73,$75,$76,$78)|0);
    $5 = $79;
    $80 = $5;
    STACKTOP = sp;return ($80|0);
   }
  }
 }
 $5 = 0;
 $80 = $5;
 STACKTOP = sp;return ($80|0);
}
function _nk_do_selectable($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy13 = sp + 84|0;
 $$byval_copy12 = sp + 80|0;
 $$byval_copy = sp + 64|0;
 $21 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $22 = $11;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((18268|0),(1320|0),13309,(24523|0));
  // unreachable;
 }
 $24 = $12;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((24177|0),(1320|0),13310,(24523|0));
  // unreachable;
 }
 $26 = $13;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((1316|0),(1320|0),13311,(24523|0));
  // unreachable;
 }
 $28 = $14;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  ___assert_fail((1488|0),(1320|0),13312,(24523|0));
  // unreachable;
 }
 $30 = $16;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((19922|0),(1320|0),13313,(24523|0));
  // unreachable;
 }
 $32 = $17;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  ___assert_fail((19774|0),(1320|0),13314,(24523|0));
  // unreachable;
 }
 $34 = $19;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  ___assert_fail((2240|0),(1320|0),13315,(24523|0));
  // unreachable;
 }
 $36 = $11;
 $37 = ($36|0)!=(0|0);
 $38 = $12;
 $39 = ($38|0)!=(0|0);
 $or$cond = $37 & $39;
 $40 = $13;
 $41 = ($40|0)!=(0|0);
 $or$cond3 = $or$cond & $41;
 $42 = $14;
 $43 = ($42|0)!=(0);
 $or$cond5 = $or$cond3 & $43;
 $44 = $16;
 $45 = ($44|0)!=(0|0);
 $or$cond7 = $or$cond5 & $45;
 $46 = $17;
 $47 = ($46|0)!=(0|0);
 $or$cond9 = $or$cond7 & $47;
 $48 = $19;
 $49 = ($48|0)!=(0|0);
 $or$cond11 = $or$cond9 & $49;
 if (!($or$cond11)) {
  $10 = 0;
  $127 = $10;
  STACKTOP = sp;return ($127|0);
 }
 $50 = $16;
 $51 = HEAP32[$50>>2]|0;
 $20 = $51;
 $52 = +HEAPF32[$2>>2];
 $53 = $17;
 $54 = ((($53)) + 164|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $52 - $55;
 HEAPF32[$21>>2] = $56;
 $57 = ((($2)) + 4|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $17;
 $60 = ((($59)) + 164|0);
 $61 = ((($60)) + 4|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $58 - $62;
 $64 = ((($21)) + 4|0);
 HEAPF32[$64>>2] = $63;
 $65 = ((($2)) + 8|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $17;
 $68 = ((($67)) + 164|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $69 * 2.0;
 $71 = $66 + $70;
 $72 = ((($21)) + 8|0);
 HEAPF32[$72>>2] = $71;
 $73 = ((($2)) + 12|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $17;
 $76 = ((($75)) + 164|0);
 $77 = ((($76)) + 4|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $78 * 2.0;
 $80 = $74 + $79;
 $81 = ((($21)) + 12|0);
 HEAPF32[$81>>2] = $80;
 $82 = $11;
 $83 = $18;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$21+12>>2]|0;
 $84 = (_nk_button_behavior($82,$$byval_copy,$83,0)|0);
 $85 = ($84|0)!=(0);
 if ($85) {
  $86 = $16;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)!=(0);
  $89 = $88 ^ 1;
  $90 = $89&1;
  $91 = $16;
  HEAP32[$91>>2] = $90;
 }
 $92 = $17;
 $93 = ((($92)) + 184|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)!=(0|0);
 if ($95) {
  $96 = $17;
  $97 = ((($96)) + 184|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $12;
  $100 = $17;
  $101 = ((($100)) + 180|0);
  ;HEAP32[$$byval_copy12>>2]=HEAP32[$101>>2]|0;
  FUNCTION_TABLE_vii[$98 & 31]($99,$$byval_copy12);
 }
 $102 = $12;
 $103 = $11;
 $104 = HEAP32[$103>>2]|0;
 $105 = $17;
 $106 = $16;
 $107 = HEAP32[$106>>2]|0;
 $108 = $13;
 $109 = $14;
 $110 = $15;
 $111 = $19;
 _nk_draw_selectable($102,$104,$105,$107,$2,0,0,$108,$109,$110,$111);
 $112 = $17;
 $113 = ((($112)) + 188|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = $17;
  $117 = ((($116)) + 188|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $12;
  $120 = $17;
  $121 = ((($120)) + 180|0);
  ;HEAP32[$$byval_copy13>>2]=HEAP32[$121>>2]|0;
  FUNCTION_TABLE_vii[$118 & 31]($119,$$byval_copy13);
 }
 $122 = $20;
 $123 = $16;
 $124 = HEAP32[$123>>2]|0;
 $125 = ($122|0)!=($124|0);
 $126 = $125&1;
 $10 = $126;
 $127 = $10;
 STACKTOP = sp;return ($127|0);
}
function _nk_selectable_label($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $5;
 $11 = (_nk_strlen($10)|0);
 $12 = $6;
 $13 = $7;
 $14 = (_nk_selectable_text($8,$9,$11,$12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _nk_check_text($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $8 = sp + 40|0;
 $13 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 HEAP32[$8>>2] = $3;
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((2989|0),(1320|0),19344,(19928|0));
  // unreachable;
 }
 $17 = $5;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((19010|0),(1320|0),19345,(19928|0));
  // unreachable;
 }
 $21 = $5;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((18968|0),(1320|0),19346,(19928|0));
  // unreachable;
 }
 $27 = $5;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $5;
  $30 = ((($29)) + 12908|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = $5;
   $34 = ((($33)) + 12908|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 140|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $40 = $5;
    $41 = ((($40)) + 12908|0);
    $42 = HEAP32[$41>>2]|0;
    $9 = $42;
    $43 = $5;
    $44 = ((($43)) + 340|0);
    $12 = $44;
    $45 = $9;
    $46 = ((($45)) + 140|0);
    $47 = HEAP32[$46>>2]|0;
    $10 = $47;
    $48 = $5;
    $49 = (_nk_widget($13,$48)|0);
    $14 = $49;
    $50 = $14;
    $51 = ($50|0)!=(0);
    if (!($51)) {
     $52 = HEAP32[$8>>2]|0;
     $4 = $52;
     $74 = $4;
     STACKTOP = sp;return ($74|0);
    }
    $53 = $14;
    $54 = ($53|0)==(2);
    if ($54) {
     $61 = 0;
    } else {
     $55 = $10;
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $57 & 2048;
     $59 = ($58|0)!=(0);
     if ($59) {
      $61 = 0;
     } else {
      $60 = $5;
      $61 = $60;
     }
    }
    $11 = $61;
    $62 = $5;
    $63 = ((($62)) + 5796|0);
    $64 = $9;
    $65 = ((($64)) + 100|0);
    $66 = $6;
    $67 = $7;
    $68 = $12;
    $69 = ((($68)) + 600|0);
    $70 = $11;
    $71 = $12;
    $72 = HEAP32[$71>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;
    (_nk_do_toggle($63,$65,$$byval_copy,$8,$66,$67,0,$69,$70,$72)|0);
    $73 = HEAP32[$8>>2]|0;
    $4 = $73;
    $74 = $4;
    STACKTOP = sp;return ($74|0);
   }
  }
 }
 $39 = HEAP32[$8>>2]|0;
 $4 = $39;
 $74 = $4;
 STACKTOP = sp;return ($74|0);
}
function _nk_do_toggle($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0;
 var $89 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy7 = sp + 132|0;
 $$byval_copy6 = sp + 128|0;
 $$byval_copy = sp + 112|0;
 $21 = sp + 48|0;
 $22 = sp + 32|0;
 $23 = sp + 16|0;
 $24 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $25 = $17;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((19774|0),(1320|0),13197,(24540|0));
  // unreachable;
 }
 $27 = $12;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  ___assert_fail((24177|0),(1320|0),13198,(24540|0));
  // unreachable;
 }
 $29 = $19;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((2240|0),(1320|0),13199,(24540|0));
  // unreachable;
 }
 $31 = $12;
 $32 = ($31|0)!=(0|0);
 $33 = $17;
 $34 = ($33|0)!=(0|0);
 $or$cond = $32 & $34;
 $35 = $19;
 $36 = ($35|0)!=(0|0);
 $or$cond3 = $or$cond & $36;
 $37 = $13;
 $38 = ($37|0)!=(0|0);
 $or$cond5 = $or$cond3 & $38;
 if (!($or$cond5)) {
  $10 = 0;
  $257 = $10;
  STACKTOP = sp;return ($257|0);
 }
 $39 = ((($2)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $19;
 $42 = ((($41)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $17;
 $45 = ((($44)) + 124|0);
 $46 = +HEAPF32[$45>>2];
 $47 = 2.0 * $46;
 $48 = $43 + $47;
 $49 = $40 < $48;
 if ($49) {
  $50 = $19;
  $51 = ((($50)) + 4|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $17;
  $54 = ((($53)) + 124|0);
  $55 = +HEAPF32[$54>>2];
  $56 = 2.0 * $55;
  $57 = $52 + $56;
  $61 = $57;
 } else {
  $58 = ((($2)) + 8|0);
  $59 = +HEAPF32[$58>>2];
  $61 = $59;
 }
 $60 = ((($2)) + 8|0);
 HEAPF32[$60>>2] = $61;
 $62 = ((($2)) + 12|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $19;
 $65 = ((($64)) + 4|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $17;
 $68 = ((($67)) + 124|0);
 $69 = ((($68)) + 4|0);
 $70 = +HEAPF32[$69>>2];
 $71 = 2.0 * $70;
 $72 = $66 + $71;
 $73 = $63 < $72;
 if ($73) {
  $74 = $19;
  $75 = ((($74)) + 4|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $17;
  $78 = ((($77)) + 124|0);
  $79 = ((($78)) + 4|0);
  $80 = +HEAPF32[$79>>2];
  $81 = 2.0 * $80;
  $82 = $76 + $81;
  $86 = $82;
 } else {
  $83 = ((($2)) + 12|0);
  $84 = +HEAPF32[$83>>2];
  $86 = $84;
 }
 $85 = ((($2)) + 12|0);
 HEAPF32[$85>>2] = $86;
 $87 = +HEAPF32[$2>>2];
 $88 = $17;
 $89 = ((($88)) + 132|0);
 $90 = +HEAPF32[$89>>2];
 $91 = $87 - $90;
 HEAPF32[$21>>2] = $91;
 $92 = ((($2)) + 4|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $17;
 $95 = ((($94)) + 132|0);
 $96 = ((($95)) + 4|0);
 $97 = +HEAPF32[$96>>2];
 $98 = $93 - $97;
 $99 = ((($21)) + 4|0);
 HEAPF32[$99>>2] = $98;
 $100 = ((($2)) + 8|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $17;
 $103 = ((($102)) + 132|0);
 $104 = +HEAPF32[$103>>2];
 $105 = 2.0 * $104;
 $106 = $101 + $105;
 $107 = ((($21)) + 8|0);
 HEAPF32[$107>>2] = $106;
 $108 = ((($2)) + 12|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $17;
 $111 = ((($110)) + 132|0);
 $112 = ((($111)) + 4|0);
 $113 = +HEAPF32[$112>>2];
 $114 = 2.0 * $113;
 $115 = $109 + $114;
 $116 = ((($21)) + 12|0);
 HEAPF32[$116>>2] = $115;
 $117 = $19;
 $118 = ((($117)) + 4|0);
 $119 = +HEAPF32[$118>>2];
 $120 = ((($22)) + 8|0);
 HEAPF32[$120>>2] = $119;
 $121 = ((($22)) + 8|0);
 $122 = +HEAPF32[$121>>2];
 $123 = ((($22)) + 12|0);
 HEAPF32[$123>>2] = $122;
 $124 = ((($2)) + 4|0);
 $125 = +HEAPF32[$124>>2];
 $126 = ((($2)) + 12|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $127 / 2.0;
 $129 = $125 + $128;
 $130 = ((($22)) + 12|0);
 $131 = +HEAPF32[$130>>2];
 $132 = $131 / 2.0;
 $133 = $129 - $132;
 $134 = ((($22)) + 4|0);
 HEAPF32[$134>>2] = $133;
 $135 = +HEAPF32[$2>>2];
 HEAPF32[$22>>2] = $135;
 $136 = +HEAPF32[$22>>2];
 $137 = $17;
 $138 = ((($137)) + 124|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $136 + $139;
 $141 = $17;
 $142 = ((($141)) + 144|0);
 $143 = +HEAPF32[$142>>2];
 $144 = $140 + $143;
 HEAPF32[$23>>2] = $144;
 $145 = ((($22)) + 4|0);
 $146 = +HEAPF32[$145>>2];
 $147 = $17;
 $148 = ((($147)) + 124|0);
 $149 = ((($148)) + 4|0);
 $150 = +HEAPF32[$149>>2];
 $151 = $146 + $150;
 $152 = $17;
 $153 = ((($152)) + 144|0);
 $154 = +HEAPF32[$153>>2];
 $155 = $151 + $154;
 $156 = ((($23)) + 4|0);
 HEAPF32[$156>>2] = $155;
 $157 = ((($22)) + 8|0);
 $158 = +HEAPF32[$157>>2];
 $159 = $17;
 $160 = ((($159)) + 124|0);
 $161 = +HEAPF32[$160>>2];
 $162 = 2.0 * $161;
 $163 = $17;
 $164 = ((($163)) + 144|0);
 $165 = +HEAPF32[$164>>2];
 $166 = 2.0 * $165;
 $167 = $162 + $166;
 $168 = $158 - $167;
 $169 = ((($23)) + 8|0);
 HEAPF32[$169>>2] = $168;
 $170 = ((($22)) + 12|0);
 $171 = +HEAPF32[$170>>2];
 $172 = $17;
 $173 = ((($172)) + 124|0);
 $174 = ((($173)) + 4|0);
 $175 = +HEAPF32[$174>>2];
 $176 = 2.0 * $175;
 $177 = $17;
 $178 = ((($177)) + 144|0);
 $179 = +HEAPF32[$178>>2];
 $180 = 2.0 * $179;
 $181 = $176 + $180;
 $182 = $171 - $181;
 $183 = ((($23)) + 12|0);
 HEAPF32[$183>>2] = $182;
 $184 = +HEAPF32[$22>>2];
 $185 = ((($22)) + 8|0);
 $186 = +HEAPF32[$185>>2];
 $187 = $184 + $186;
 $188 = $17;
 $189 = ((($188)) + 140|0);
 $190 = +HEAPF32[$189>>2];
 $191 = $187 + $190;
 HEAPF32[$24>>2] = $191;
 $192 = ((($22)) + 4|0);
 $193 = +HEAPF32[$192>>2];
 $194 = ((($24)) + 4|0);
 HEAPF32[$194>>2] = $193;
 $195 = +HEAPF32[$2>>2];
 $196 = ((($2)) + 8|0);
 $197 = +HEAPF32[$196>>2];
 $198 = $195 + $197;
 $199 = +HEAPF32[$24>>2];
 $200 = $198 < $199;
 if ($200) {
  $201 = +HEAPF32[$24>>2];
  $208 = $201;
 } else {
  $202 = +HEAPF32[$2>>2];
  $203 = ((($2)) + 8|0);
  $204 = +HEAPF32[$203>>2];
  $205 = $202 + $204;
  $208 = $205;
 }
 $206 = +HEAPF32[$24>>2];
 $207 = $208 - $206;
 $209 = ((($24)) + 8|0);
 HEAPF32[$209>>2] = $207;
 $210 = ((($22)) + 8|0);
 $211 = +HEAPF32[$210>>2];
 $212 = ((($24)) + 12|0);
 HEAPF32[$212>>2] = $211;
 $213 = $13;
 $214 = HEAP32[$213>>2]|0;
 $20 = $214;
 $215 = $18;
 $216 = $11;
 $217 = $13;
 $218 = HEAP32[$217>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$21+12>>2]|0;
 $219 = (_nk_toggle_behavior($215,$$byval_copy,$216,$218)|0);
 $220 = $13;
 HEAP32[$220>>2] = $219;
 $221 = $17;
 $222 = ((($221)) + 152|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ($223|0)!=(0|0);
 if ($224) {
  $225 = $17;
  $226 = ((($225)) + 152|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = $12;
  $229 = $17;
  $230 = ((($229)) + 148|0);
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$230>>2]|0;
  FUNCTION_TABLE_vii[$227 & 31]($228,$$byval_copy6);
 }
 $231 = $16;
 $232 = ($231|0)==(0);
 $233 = $12;
 $234 = $11;
 $235 = HEAP32[$234>>2]|0;
 $236 = $17;
 $237 = $13;
 $238 = HEAP32[$237>>2]|0;
 $239 = $14;
 $240 = $15;
 $241 = $19;
 if ($232) {
  _nk_draw_checkbox($233,$235,$236,$238,$24,$22,$23,$239,$240,$241);
 } else {
  _nk_draw_option($233,$235,$236,$238,$24,$22,$23,$239,$240,$241);
 }
 $242 = $17;
 $243 = ((($242)) + 156|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = ($244|0)!=(0|0);
 if ($245) {
  $246 = $17;
  $247 = ((($246)) + 156|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = $12;
  $250 = $17;
  $251 = ((($250)) + 148|0);
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$251>>2]|0;
  FUNCTION_TABLE_vii[$248 & 31]($249,$$byval_copy7);
 }
 $252 = $20;
 $253 = $13;
 $254 = HEAP32[$253>>2]|0;
 $255 = ($252|0)!=($254|0);
 $256 = $255&1;
 $10 = $256;
 $257 = $10;
 STACKTOP = sp;return ($257|0);
}
function _nk_checkbox_text($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((2989|0),(1320|0),19381,(19942|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((1853|0),(1320|0),19382,(19942|0));
  // unreachable;
 }
 $14 = $8;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((19959|0),(1320|0),19383,(19942|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ($16|0)!=(0|0);
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 $or$cond = $17 & $19;
 $20 = $8;
 $21 = ($20|0)!=(0|0);
 $or$cond3 = $or$cond & $21;
 if ($or$cond3) {
  $22 = $8;
  $23 = HEAP32[$22>>2]|0;
  $9 = $23;
  $24 = $5;
  $25 = $6;
  $26 = $7;
  $27 = $8;
  $28 = HEAP32[$27>>2]|0;
  $29 = (_nk_check_text($24,$25,$26,$28)|0);
  $30 = $8;
  HEAP32[$30>>2] = $29;
  $31 = $9;
  $32 = $8;
  $33 = HEAP32[$32>>2]|0;
  $34 = ($31|0)!=($33|0);
  $35 = $34&1;
  $4 = $35;
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 } else {
  $4 = 0;
  $36 = $4;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _nk_checkbox_label($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $4;
 $9 = (_nk_strlen($8)|0);
 $10 = $5;
 $11 = (_nk_checkbox_text($6,$7,$9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _nk_option_text($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $8 = sp + 40|0;
 $13 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 HEAP32[$8>>2] = $3;
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((2989|0),(1320|0),19439,(19966|0));
  // unreachable;
 }
 $17 = $5;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((19010|0),(1320|0),19440,(19966|0));
  // unreachable;
 }
 $21 = $5;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((18968|0),(1320|0),19441,(19966|0));
  // unreachable;
 }
 $27 = $5;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $5;
  $30 = ((($29)) + 12908|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = $5;
   $34 = ((($33)) + 12908|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 140|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $40 = $5;
    $41 = ((($40)) + 12908|0);
    $42 = HEAP32[$41>>2]|0;
    $9 = $42;
    $43 = $5;
    $44 = ((($43)) + 340|0);
    $12 = $44;
    $45 = $9;
    $46 = ((($45)) + 140|0);
    $47 = HEAP32[$46>>2]|0;
    $10 = $47;
    $48 = $5;
    $49 = (_nk_widget($13,$48)|0);
    $14 = $49;
    $50 = $14;
    $51 = ($50|0)!=(0);
    $52 = $14;
    if (!($51)) {
     $4 = $52;
     $73 = $4;
     STACKTOP = sp;return ($73|0);
    }
    $53 = ($52|0)==(2);
    if ($53) {
     $60 = 0;
    } else {
     $54 = $10;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 & 2048;
     $58 = ($57|0)!=(0);
     if ($58) {
      $60 = 0;
     } else {
      $59 = $5;
      $60 = $59;
     }
    }
    $11 = $60;
    $61 = $5;
    $62 = ((($61)) + 5796|0);
    $63 = $9;
    $64 = ((($63)) + 100|0);
    $65 = $6;
    $66 = $7;
    $67 = $12;
    $68 = ((($67)) + 440|0);
    $69 = $11;
    $70 = $12;
    $71 = HEAP32[$70>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;
    (_nk_do_toggle($62,$64,$$byval_copy,$8,$65,$66,1,$68,$69,$71)|0);
    $72 = HEAP32[$8>>2]|0;
    $4 = $72;
    $73 = $4;
    STACKTOP = sp;return ($73|0);
   }
  }
 }
 $39 = HEAP32[$8>>2]|0;
 $4 = $39;
 $73 = $4;
 STACKTOP = sp;return ($73|0);
}
function _nk_option_label($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $4;
 $9 = (_nk_strlen($8)|0);
 $10 = $5;
 $11 = (_nk_option_text($6,$7,$9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _nk_slider_float($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 72|0;
 $17 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = 0;
 $19 = $6;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((2989|0),(1320|0),19497,(19981|0));
  // unreachable;
 }
 $21 = $6;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((19010|0),(1320|0),19498,(19981|0));
  // unreachable;
 }
 $25 = $6;
 $26 = ((($25)) + 12908|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 140|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((18968|0),(1320|0),19499,(19981|0));
  // unreachable;
 }
 $31 = $8;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  ___assert_fail((19922|0),(1320|0),19500,(19981|0));
  // unreachable;
 }
 $33 = $6;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $6;
  $36 = ((($35)) + 12908|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0|0);
  if ($38) {
   $39 = $6;
   $40 = ((($39)) + 12908|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 140|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)!=(0|0);
   $45 = $8;
   $46 = ($45|0)!=(0|0);
   $or$cond = $44 & $46;
   if ($or$cond) {
    $48 = $6;
    $49 = ((($48)) + 12908|0);
    $50 = HEAP32[$49>>2]|0;
    $11 = $50;
    $51 = $6;
    $52 = ((($51)) + 340|0);
    $14 = $52;
    $53 = $11;
    $54 = ((($53)) + 140|0);
    $55 = HEAP32[$54>>2]|0;
    $12 = $55;
    $56 = $6;
    $57 = (_nk_widget($17,$56)|0);
    $18 = $57;
    $58 = $18;
    $59 = ($58|0)!=(0);
    if (!($59)) {
     $60 = $15;
     $5 = $60;
     $97 = $5;
     STACKTOP = sp;return ($97|0);
    }
    $61 = $18;
    $62 = ($61|0)==(2);
    if ($62) {
     $69 = 0;
    } else {
     $63 = $12;
     $64 = ((($63)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $65 & 2048;
     $67 = ($66|0)!=(0);
     if ($67) {
      $69 = 0;
     } else {
      $68 = $6;
      $69 = $68;
     }
    }
    $13 = $69;
    $70 = $8;
    $71 = +HEAPF32[$70>>2];
    $16 = $71;
    $72 = $6;
    $73 = ((($72)) + 5796|0);
    $74 = $11;
    $75 = ((($74)) + 100|0);
    $76 = $7;
    $77 = $16;
    $78 = $9;
    $79 = $10;
    $80 = $14;
    $81 = ((($80)) + 952|0);
    $82 = $13;
    $83 = $14;
    $84 = HEAP32[$83>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$17+12>>2]|0;
    $85 = (+_nk_do_slider($73,$75,$$byval_copy,$76,$77,$78,$79,$81,$82,$84));
    $86 = $8;
    HEAPF32[$86>>2] = $85;
    $87 = $16;
    $88 = $8;
    $89 = +HEAPF32[$88>>2];
    $90 = $87 > $89;
    if ($90) {
     $96 = 1;
    } else {
     $91 = $16;
     $92 = $8;
     $93 = +HEAPF32[$92>>2];
     $94 = $91 < $93;
     $96 = $94;
    }
    $95 = $96&1;
    $5 = $95;
    $97 = $5;
    STACKTOP = sp;return ($97|0);
   }
  }
 }
 $47 = $15;
 $5 = $47;
 $97 = $5;
 STACKTOP = sp;return ($97|0);
}
function _nk_do_slider($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0;
 var $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0;
 var $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0;
 var $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0;
 var $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0;
 var $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0;
 var $259 = 0.0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0;
 var $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0;
 var $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $70 = 0, $71 = 0;
 var $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy5 = sp + 172|0;
 $$byval_copy4 = sp + 168|0;
 $$byval_copy3 = sp + 152|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy = sp + 120|0;
 $26 = sp + 40|0;
 $27 = sp + 24|0;
 $28 = sp + 16|0;
 $29 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $30 = $17;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((19774|0),(1320|0),13514,(24553|0));
  // unreachable;
 }
 $32 = $12;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  ___assert_fail((24177|0),(1320|0),13515,(24553|0));
  // unreachable;
 }
 $34 = $12;
 $35 = ($34|0)!=(0|0);
 $36 = $17;
 $37 = ($36|0)!=(0|0);
 $or$cond = $35 & $37;
 if (!($or$cond)) {
  $10 = 0.0;
  $312 = $10;
  STACKTOP = sp;return (+$312);
 }
 $38 = +HEAPF32[$2>>2];
 $39 = $17;
 $40 = ((($39)) + 152|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $38 + $41;
 HEAPF32[$2>>2] = $42;
 $43 = ((($2)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $17;
 $46 = ((($45)) + 152|0);
 $47 = ((($46)) + 4|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $44 + $48;
 $50 = ((($2)) + 4|0);
 HEAPF32[$50>>2] = $49;
 $51 = ((($2)) + 12|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $17;
 $54 = ((($53)) + 152|0);
 $55 = ((($54)) + 4|0);
 $56 = +HEAPF32[$55>>2];
 $57 = 2.0 * $56;
 $58 = $52 < $57;
 if ($58) {
  $59 = $17;
  $60 = ((($59)) + 152|0);
  $61 = ((($60)) + 4|0);
  $62 = +HEAPF32[$61>>2];
  $63 = 2.0 * $62;
  $67 = $63;
 } else {
  $64 = ((($2)) + 12|0);
  $65 = +HEAPF32[$64>>2];
  $67 = $65;
 }
 $66 = ((($2)) + 12|0);
 HEAPF32[$66>>2] = $67;
 $68 = ((($2)) + 8|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $17;
 $71 = ((($70)) + 152|0);
 $72 = +HEAPF32[$71>>2];
 $73 = 2.0 * $72;
 $74 = $17;
 $75 = ((($74)) + 168|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $73 + $76;
 $78 = $69 < $77;
 if ($78) {
  $79 = $17;
  $80 = ((($79)) + 152|0);
  $81 = +HEAPF32[$80>>2];
  $82 = 2.0 * $81;
  $83 = $17;
  $84 = ((($83)) + 168|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $82 + $85;
  $90 = $86;
 } else {
  $87 = ((($2)) + 8|0);
  $88 = +HEAPF32[$87>>2];
  $90 = $88;
 }
 $89 = ((($2)) + 8|0);
 HEAPF32[$89>>2] = $90;
 $91 = $17;
 $92 = ((($91)) + 152|0);
 $93 = +HEAPF32[$92>>2];
 $94 = 2.0 * $93;
 $95 = ((($2)) + 8|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $96 - $94;
 HEAPF32[$95>>2] = $97;
 $98 = $17;
 $99 = ((($98)) + 152|0);
 $100 = ((($99)) + 4|0);
 $101 = +HEAPF32[$100>>2];
 $102 = 2.0 * $101;
 $103 = ((($2)) + 12|0);
 $104 = +HEAPF32[$103>>2];
 $105 = $104 - $102;
 HEAPF32[$103>>2] = $105;
 $106 = $17;
 $107 = ((($106)) + 176|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0);
 if ($109) {
  $110 = ((($2)) + 4|0);
  $111 = +HEAPF32[$110>>2];
  $112 = ((($29)) + 4|0);
  HEAPF32[$112>>2] = $111;
  $113 = ((($2)) + 12|0);
  $114 = +HEAPF32[$113>>2];
  $115 = ((($29)) + 8|0);
  HEAPF32[$115>>2] = $114;
  $116 = ((($2)) + 12|0);
  $117 = +HEAPF32[$116>>2];
  $118 = ((($29)) + 12|0);
  HEAPF32[$118>>2] = $117;
  $119 = +HEAPF32[$2>>2];
  HEAPF32[$29>>2] = $119;
  $120 = $12;
  $121 = $17;
  $122 = ((($121)) + 440|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $17;
  $125 = ((($124)) + 308|0);
  $126 = $18;
  $127 = $19;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$29+12>>2]|0;
  $128 = (_nk_do_button_symbol($28,$120,$$byval_copy,$123,0,$125,$126,$127)|0);
  $129 = ($128|0)!=(0);
  if ($129) {
   $130 = $16;
   $131 = $14;
   $132 = $131 - $130;
   $14 = $132;
  }
  $133 = +HEAPF32[$2>>2];
  $134 = ((($2)) + 8|0);
  $135 = +HEAPF32[$134>>2];
  $136 = $133 + $135;
  $137 = ((($29)) + 8|0);
  $138 = +HEAPF32[$137>>2];
  $139 = $136 - $138;
  HEAPF32[$29>>2] = $139;
  $140 = $12;
  $141 = $17;
  $142 = ((($141)) + 436|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $17;
  $145 = ((($144)) + 180|0);
  $146 = $18;
  $147 = $19;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$29+12>>2]|0;
  $148 = (_nk_do_button_symbol($28,$140,$$byval_copy2,$143,0,$145,$146,$147)|0);
  $149 = ($148|0)!=(0);
  if ($149) {
   $150 = $16;
   $151 = $14;
   $152 = $151 + $150;
   $14 = $152;
  }
  $153 = +HEAPF32[$2>>2];
  $154 = ((($29)) + 8|0);
  $155 = +HEAPF32[$154>>2];
  $156 = $153 + $155;
  $157 = $17;
  $158 = ((($157)) + 160|0);
  $159 = +HEAPF32[$158>>2];
  $160 = $156 + $159;
  HEAPF32[$2>>2] = $160;
  $161 = ((($2)) + 8|0);
  $162 = +HEAPF32[$161>>2];
  $163 = ((($29)) + 8|0);
  $164 = +HEAPF32[$163>>2];
  $165 = 2.0 * $164;
  $166 = $17;
  $167 = ((($166)) + 160|0);
  $168 = +HEAPF32[$167>>2];
  $169 = 2.0 * $168;
  $170 = $165 + $169;
  $171 = $162 - $170;
  $172 = ((($2)) + 8|0);
  HEAPF32[$172>>2] = $171;
 }
 $173 = $13;
 $174 = $15;
 $175 = $173 < $174;
 $176 = $15;
 $177 = $13;
 $178 = $175 ? $176 : $177;
 $22 = $178;
 $179 = $13;
 $180 = $15;
 $181 = $179 < $180;
 $182 = $13;
 $183 = $15;
 $184 = $181 ? $182 : $183;
 $21 = $184;
 $185 = $14;
 $186 = $22;
 $187 = $185 < $186;
 $188 = $14;
 $189 = $22;
 $190 = $187 ? $188 : $189;
 $191 = $21;
 $192 = $190 < $191;
 if ($192) {
  $193 = $21;
  $200 = $193;
 } else {
  $194 = $14;
  $195 = $22;
  $196 = $194 < $195;
  $197 = $14;
  $198 = $22;
  $199 = $196 ? $197 : $198;
  $200 = $199;
 }
 $23 = $200;
 $201 = $22;
 $202 = $21;
 $203 = $201 - $202;
 $20 = $203;
 $204 = $20;
 $205 = $16;
 $206 = $204 / $205;
 $24 = $206;
 $207 = $23;
 $208 = $21;
 $209 = $207 - $208;
 $210 = $16;
 $211 = $209 / $210;
 $25 = $211;
 $212 = $17;
 $213 = ((($212)) + 168|0);
 $214 = +HEAPF32[$213>>2];
 $215 = $214 * 0.5;
 $216 = +HEAPF32[$2>>2];
 $217 = $216 + $215;
 HEAPF32[$2>>2] = $217;
 $218 = $17;
 $219 = ((($218)) + 168|0);
 $220 = +HEAPF32[$219>>2];
 $221 = ((($2)) + 8|0);
 $222 = +HEAPF32[$221>>2];
 $223 = $222 - $220;
 HEAPF32[$221>>2] = $223;
 $224 = ((($2)) + 12|0);
 $225 = +HEAPF32[$224>>2];
 $226 = ((($27)) + 12|0);
 HEAPF32[$226>>2] = $225;
 $227 = ((($2)) + 8|0);
 $228 = +HEAPF32[$227>>2];
 $229 = $24;
 $230 = $228 / $229;
 $231 = ((($27)) + 8|0);
 HEAPF32[$231>>2] = $230;
 $232 = +HEAPF32[$2>>2];
 $233 = ((($27)) + 8|0);
 $234 = +HEAPF32[$233>>2];
 $235 = $25;
 $236 = $234 * $235;
 $237 = $232 + $236;
 HEAPF32[$27>>2] = $237;
 $238 = ((($2)) + 4|0);
 $239 = +HEAPF32[$238>>2];
 $240 = ((($27)) + 4|0);
 HEAPF32[$240>>2] = $239;
 $241 = $17;
 $242 = ((($241)) + 168|0);
 $243 = ((($242)) + 4|0);
 $244 = +HEAPF32[$243>>2];
 $245 = ((($26)) + 12|0);
 HEAPF32[$245>>2] = $244;
 $246 = $17;
 $247 = ((($246)) + 168|0);
 $248 = +HEAPF32[$247>>2];
 $249 = ((($26)) + 8|0);
 HEAPF32[$249>>2] = $248;
 $250 = ((($2)) + 4|0);
 $251 = +HEAPF32[$250>>2];
 $252 = ((($2)) + 12|0);
 $253 = +HEAPF32[$252>>2];
 $254 = $253 * 0.5;
 $255 = $251 + $254;
 $256 = ((($26)) + 12|0);
 $257 = +HEAPF32[$256>>2];
 $258 = $257 * 0.5;
 $259 = $255 - $258;
 $260 = ((($26)) + 4|0);
 HEAPF32[$260>>2] = $259;
 $261 = +HEAPF32[$27>>2];
 $262 = ((($27)) + 8|0);
 $263 = +HEAPF32[$262>>2];
 $264 = $263 * 0.5;
 $265 = $261 + $264;
 $266 = ((($26)) + 8|0);
 $267 = +HEAPF32[$266>>2];
 $268 = $267 * 0.5;
 $269 = $265 - $268;
 HEAPF32[$26>>2] = $269;
 $270 = $11;
 $271 = $18;
 $272 = $17;
 $273 = $21;
 $274 = $22;
 $275 = $23;
 $276 = $16;
 $277 = $24;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$2+12>>2]|0;
 $278 = (+_nk_slider_behavior($270,$27,$26,$271,$272,$$byval_copy3,$273,$274,$275,$276,$277));
 $23 = $278;
 $279 = +HEAPF32[$27>>2];
 $280 = ((($26)) + 8|0);
 $281 = +HEAPF32[$280>>2];
 $282 = $281 * 0.5;
 $283 = $279 - $282;
 HEAPF32[$26>>2] = $283;
 $284 = $17;
 $285 = ((($284)) + 448|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = ($286|0)!=(0|0);
 if ($287) {
  $288 = $17;
  $289 = ((($288)) + 448|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = $12;
  $292 = $17;
  $293 = ((($292)) + 444|0);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$293>>2]|0;
  FUNCTION_TABLE_vii[$290 & 31]($291,$$byval_copy4);
 }
 $294 = $12;
 $295 = $11;
 $296 = HEAP32[$295>>2]|0;
 $297 = $17;
 $298 = $21;
 $299 = $23;
 $300 = $22;
 _nk_draw_slider($294,$296,$297,$2,$26,$298,$299,$300);
 $301 = $17;
 $302 = ((($301)) + 452|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = ($303|0)!=(0|0);
 if ($304) {
  $305 = $17;
  $306 = ((($305)) + 452|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = $12;
  $309 = $17;
  $310 = ((($309)) + 444|0);
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$310>>2]|0;
  FUNCTION_TABLE_vii[$307 & 31]($308,$$byval_copy5);
 }
 $311 = $23;
 $10 = $311;
 $312 = $10;
 STACKTOP = sp;return (+$312);
}
function _nk_slide_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = (+($11|0));
 HEAPF32[$10>>2] = $12;
 $13 = $5;
 $14 = $6;
 $15 = (+($14|0));
 $16 = $8;
 $17 = (+($16|0));
 $18 = $9;
 $19 = (+($18|0));
 (_nk_slider_float($13,$15,$10,$17,$19)|0);
 $20 = +HEAPF32[$10>>2];
 $21 = (~~(($20)));
 STACKTOP = sp;return ($21|0);
}
function _nk_slider_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $7;
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 HEAPF32[$11>>2] = $14;
 $15 = $5;
 $16 = $6;
 $17 = (+($16|0));
 $18 = $8;
 $19 = (+($18|0));
 $20 = $9;
 $21 = (+($20|0));
 $22 = (_nk_slider_float($15,$17,$11,$19,$21)|0);
 $10 = $22;
 $23 = +HEAPF32[$11>>2];
 $24 = (~~(($23)));
 $25 = $7;
 HEAP32[$25>>2] = $24;
 $26 = $10;
 STACKTOP = sp;return ($26|0);
}
function _nk_progress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $13 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $5;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((2989|0),(1320|0),19559,(19997|0));
  // unreachable;
 }
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((20009|0),(1320|0),19560,(19997|0));
  // unreachable;
 }
 $20 = $5;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((19010|0),(1320|0),19561,(19997|0));
  // unreachable;
 }
 $24 = $5;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  ___assert_fail((18968|0),(1320|0),19562,(19997|0));
  // unreachable;
 }
 $30 = $5;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $5;
  $33 = ((($32)) + 12908|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $5;
   $37 = ((($36)) + 12908|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 140|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   $42 = $6;
   $43 = ($42|0)!=(0|0);
   $or$cond = $41 & $43;
   if ($or$cond) {
    $44 = $5;
    $45 = ((($44)) + 12908|0);
    $46 = HEAP32[$45>>2]|0;
    $9 = $46;
    $47 = $5;
    $48 = ((($47)) + 340|0);
    $11 = $48;
    $49 = $9;
    $50 = ((($49)) + 140|0);
    $51 = HEAP32[$50>>2]|0;
    $10 = $51;
    $52 = $5;
    $53 = (_nk_widget($13,$52)|0);
    $14 = $53;
    $54 = $14;
    $55 = ($54|0)!=(0);
    if (!($55)) {
     $4 = 0;
     $85 = $4;
     STACKTOP = sp;return ($85|0);
    }
    $56 = $14;
    $57 = ($56|0)==(2);
    if ($57) {
     $64 = 0;
    } else {
     $58 = $10;
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = $60 & 2048;
     $62 = ($61|0)!=(0);
     if ($62) {
      $64 = 0;
     } else {
      $63 = $5;
      $64 = $63;
     }
    }
    $12 = $64;
    $65 = $6;
    $66 = HEAP32[$65>>2]|0;
    $15 = $66;
    $67 = $5;
    $68 = ((($67)) + 5796|0);
    $69 = $9;
    $70 = ((($69)) + 100|0);
    $71 = $6;
    $72 = HEAP32[$71>>2]|0;
    $73 = $7;
    $74 = $8;
    $75 = $11;
    $76 = ((($75)) + 1408|0);
    $77 = $12;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;
    $78 = (_nk_do_progress($68,$70,$$byval_copy,$72,$73,$74,$76,$77)|0);
    $79 = $6;
    HEAP32[$79>>2] = $78;
    $80 = $6;
    $81 = HEAP32[$80>>2]|0;
    $82 = $15;
    $83 = ($81|0)!=($82|0);
    $84 = $83&1;
    $4 = $84;
    $85 = $4;
    STACKTOP = sp;return ($85|0);
   }
  }
 }
 $4 = 0;
 $85 = $4;
 STACKTOP = sp;return ($85|0);
}
function _nk_do_progress($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0.0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0;
 var $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy5 = sp + 124|0;
 $$byval_copy4 = sp + 120|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 96|0;
 $$byval_copy = sp + 80|0;
 $18 = sp + 24|0;
 $19 = sp + 16|0;
 $20 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $21 = $14;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((19774|0),(1320|0),13666,(24566|0));
  // unreachable;
 }
 $23 = $10;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((24177|0),(1320|0),13667,(24566|0));
  // unreachable;
 }
 $25 = $10;
 $26 = ($25|0)!=(0|0);
 $27 = $14;
 $28 = ($27|0)!=(0|0);
 $or$cond = $26 & $28;
 if (!($or$cond)) {
  $8 = 0;
  $146 = $8;
  STACKTOP = sp;return ($146|0);
 }
 $29 = ((($2)) + 8|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $14;
 $32 = ((($31)) + 144|0);
 $33 = +HEAPF32[$32>>2];
 $34 = 2.0 * $33;
 $35 = $14;
 $36 = ((($35)) + 132|0);
 $37 = +HEAPF32[$36>>2];
 $38 = 2.0 * $37;
 $39 = $34 + $38;
 $40 = $30 < $39;
 if ($40) {
  $41 = $14;
  $42 = ((($41)) + 144|0);
  $43 = +HEAPF32[$42>>2];
  $44 = 2.0 * $43;
  $45 = $14;
  $46 = ((($45)) + 132|0);
  $47 = +HEAPF32[$46>>2];
  $48 = 2.0 * $47;
  $49 = $44 + $48;
  $53 = $49;
 } else {
  $50 = ((($2)) + 8|0);
  $51 = +HEAPF32[$50>>2];
  $53 = $51;
 }
 $52 = ((($18)) + 8|0);
 HEAPF32[$52>>2] = $53;
 $54 = ((($2)) + 12|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $14;
 $57 = ((($56)) + 144|0);
 $58 = ((($57)) + 4|0);
 $59 = +HEAPF32[$58>>2];
 $60 = 2.0 * $59;
 $61 = $14;
 $62 = ((($61)) + 132|0);
 $63 = +HEAPF32[$62>>2];
 $64 = 2.0 * $63;
 $65 = $60 + $64;
 $66 = $55 < $65;
 if ($66) {
  $67 = $14;
  $68 = ((($67)) + 144|0);
  $69 = ((($68)) + 4|0);
  $70 = +HEAPF32[$69>>2];
  $71 = 2.0 * $70;
  $72 = $14;
  $73 = ((($72)) + 132|0);
  $74 = +HEAPF32[$73>>2];
  $75 = 2.0 * $74;
  $76 = $71 + $75;
  $80 = $76;
 } else {
  $77 = ((($2)) + 12|0);
  $78 = +HEAPF32[$77>>2];
  $80 = $78;
 }
 $79 = ((($18)) + 12|0);
 HEAPF32[$79>>2] = $80;
 $81 = $14;
 $82 = ((($81)) + 144|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $14;
 $85 = ((($84)) + 132|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $83 + $86;
 $88 = $14;
 $89 = ((($88)) + 144|0);
 $90 = ((($89)) + 4|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $14;
 $93 = ((($92)) + 132|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $91 + $94;
 _nk_vec2($19,$87,$95);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$19+4>>2]|0;
 _nk_pad_rect($20,$$byval_copy,$$byval_copy2);
 ;HEAP32[$18>>2]=HEAP32[$20>>2]|0;HEAP32[$18+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$18+12>>2]=HEAP32[$20+12>>2]|0;
 $96 = $11;
 $97 = (+($96>>>0));
 $98 = $12;
 $99 = (+($98>>>0));
 $100 = $97 / $99;
 $16 = $100;
 $101 = ((($2)) + 8|0);
 $102 = +HEAPF32[$101>>2];
 $103 = $102 - 2.0;
 $104 = $16;
 $105 = $103 * $104;
 $106 = ((($18)) + 8|0);
 HEAPF32[$106>>2] = $105;
 $107 = $11;
 $108 = $12;
 $109 = ($107>>>0)<($108>>>0);
 $110 = $11;
 $111 = $12;
 $112 = $109 ? $110 : $111;
 $17 = $112;
 $113 = $9;
 $114 = $15;
 $115 = $12;
 $116 = $17;
 $117 = $13;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$2+12>>2]|0;
 $118 = (_nk_progress_behavior($113,$114,$$byval_copy3,$115,$116,$117)|0);
 $17 = $118;
 $119 = $14;
 $120 = ((($119)) + 156|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ($121|0)!=(0|0);
 if ($122) {
  $123 = $14;
  $124 = ((($123)) + 156|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $10;
  $127 = $14;
  $128 = ((($127)) + 152|0);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$128>>2]|0;
  FUNCTION_TABLE_vii[$125 & 31]($126,$$byval_copy4);
 }
 $129 = $10;
 $130 = $9;
 $131 = HEAP32[$130>>2]|0;
 $132 = $14;
 $133 = $11;
 $134 = $12;
 _nk_draw_progress($129,$131,$132,$2,$18,$133,$134);
 $135 = $14;
 $136 = ((($135)) + 160|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = $14;
  $140 = ((($139)) + 160|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $10;
  $143 = $14;
  $144 = ((($143)) + 152|0);
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$144>>2]|0;
  FUNCTION_TABLE_vii[$141 & 31]($142,$$byval_copy5);
 }
 $145 = $17;
 $8 = $145;
 $146 = $8;
 STACKTOP = sp;return ($146|0);
}
function _nk_edit_string($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $17 = $7;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((2989|0),(1320|0),19614,(20013|0));
  // unreachable;
 }
 $19 = $9;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((3443|0),(1320|0),19615,(20013|0));
  // unreachable;
 }
 $21 = $10;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((1488|0),(1320|0),19616,(20013|0));
  // unreachable;
 }
 $23 = $7;
 $24 = ($23|0)!=(0|0);
 $25 = $9;
 $26 = ($25|0)!=(0|0);
 $or$cond = $24 & $26;
 $27 = $10;
 $28 = ($27|0)!=(0|0);
 $or$cond3 = $or$cond & $28;
 if (!($or$cond3)) {
  $6 = 0;
  $213 = $6;
  STACKTOP = sp;return ($213|0);
 }
 $29 = $12;
 $30 = ($29|0)!=(0|0);
 $31 = $12;
 $32 = $30 ? $31 : 12;
 $12 = $32;
 $33 = $7;
 $34 = ((($33)) + 12908|0);
 $35 = HEAP32[$34>>2]|0;
 $16 = $35;
 $36 = $16;
 $37 = ((($36)) + 292|0);
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $13 = $39;
 $40 = $7;
 $41 = ((($40)) + 7504|0);
 $15 = $41;
 $42 = $7;
 $43 = ((($42)) + 7504|0);
 $44 = $8;
 $45 = $44 & 2048;
 $46 = ($45|0)!=(0);
 $47 = $46 ? 1 : 0;
 $48 = $12;
 _nk_textedit_clear_state($43,$47,$48);
 $49 = $16;
 $50 = ((($49)) + 292|0);
 $51 = ((($50)) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $13;
  $55 = $16;
  $56 = ((($55)) + 292|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($54|0)==($57|0);
  if ($58) {
   $59 = $8;
   $60 = $59 & 16;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $9;
    $63 = $10;
    $64 = HEAP32[$63>>2]|0;
    $65 = (_nk_utf_len($62,$64)|0);
    $66 = $15;
    $67 = ((($66)) + 88|0);
    HEAP32[$67>>2] = $65;
   } else {
    $68 = $16;
    $69 = ((($68)) + 292|0);
    $70 = ((($69)) + 20|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $15;
    $73 = ((($72)) + 88|0);
    HEAP32[$73>>2] = $71;
   }
   $74 = $8;
   $75 = $74 & 32;
   $76 = ($75|0)!=(0);
   $77 = $16;
   $78 = ((($77)) + 292|0);
   if ($76) {
    $89 = ((($78)) + 24|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $15;
    $92 = ((($91)) + 92|0);
    HEAP32[$92>>2] = $90;
    $93 = $16;
    $94 = ((($93)) + 292|0);
    $95 = ((($94)) + 28|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $15;
    $98 = ((($97)) + 96|0);
    HEAP32[$98>>2] = $96;
   } else {
    $79 = ((($78)) + 20|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $15;
    $82 = ((($81)) + 92|0);
    HEAP32[$82>>2] = $80;
    $83 = $16;
    $84 = ((($83)) + 292|0);
    $85 = ((($84)) + 20|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $15;
    $88 = ((($87)) + 96|0);
    HEAP32[$88>>2] = $86;
   }
   $99 = $16;
   $100 = ((($99)) + 292|0);
   $101 = ((($100)) + 40|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $15;
   $104 = ((($103)) + 100|0);
   HEAP8[$104>>0] = $102;
   $105 = $16;
   $106 = ((($105)) + 292|0);
   $107 = ((($106)) + 32|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (+($108>>>0));
   $110 = $15;
   $111 = ((($110)) + 80|0);
   HEAPF32[$111>>2] = $109;
   $112 = $16;
   $113 = ((($112)) + 292|0);
   $114 = ((($113)) + 32|0);
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (+($116>>>0));
   $118 = $15;
   $119 = ((($118)) + 80|0);
   $120 = ((($119)) + 4|0);
   HEAPF32[$120>>2] = $117;
   $121 = $15;
   $122 = ((($121)) + 105|0);
   HEAP8[$122>>0] = 1;
  } else {
   label = 18;
  }
 } else {
  label = 18;
 }
 if ((label|0) == 18) {
  $123 = $15;
  $124 = ((($123)) + 105|0);
  HEAP8[$124>>0] = 0;
 }
 $125 = $11;
 $126 = (1)<($125|0);
 $127 = $11;
 $128 = $126 ? $127 : 1;
 $11 = $128;
 $129 = $10;
 $130 = HEAP32[$129>>2]|0;
 $131 = $11;
 $132 = (($131) - 1)|0;
 $133 = ($130|0)<($132|0);
 if ($133) {
  $134 = $10;
  $135 = HEAP32[$134>>2]|0;
  $139 = $135;
 } else {
  $136 = $11;
  $137 = (($136) - 1)|0;
  $139 = $137;
 }
 $138 = $10;
 HEAP32[$138>>2] = $139;
 $140 = $15;
 $141 = ((($140)) + 12|0);
 $142 = $9;
 $143 = $11;
 _nk_str_init_fixed($141,$142,$143);
 $144 = $10;
 $145 = HEAP32[$144>>2]|0;
 $146 = $15;
 $147 = ((($146)) + 12|0);
 $148 = ((($147)) + 44|0);
 HEAP32[$148>>2] = $145;
 $149 = $9;
 $150 = $10;
 $151 = HEAP32[$150>>2]|0;
 $152 = (_nk_utf_len($149,$151)|0);
 $153 = $15;
 $154 = ((($153)) + 12|0);
 $155 = ((($154)) + 60|0);
 HEAP32[$155>>2] = $152;
 $156 = $7;
 $157 = $8;
 $158 = $15;
 $159 = $12;
 $160 = (_nk_edit_buffer($156,$157,$158,$159)|0);
 $14 = $160;
 $161 = $15;
 $162 = ((($161)) + 12|0);
 $163 = ((($162)) + 44|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $10;
 HEAP32[$165>>2] = $164;
 $166 = $15;
 $167 = ((($166)) + 105|0);
 $168 = HEAP8[$167>>0]|0;
 $169 = ($168<<24>>24)!=(0);
 if ($169) {
  $170 = $15;
  $171 = ((($170)) + 88|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $16;
  $174 = ((($173)) + 292|0);
  $175 = ((($174)) + 20|0);
  HEAP32[$175>>2] = $172;
  $176 = $15;
  $177 = ((($176)) + 92|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $16;
  $180 = ((($179)) + 292|0);
  $181 = ((($180)) + 24|0);
  HEAP32[$181>>2] = $178;
  $182 = $15;
  $183 = ((($182)) + 96|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $16;
  $186 = ((($185)) + 292|0);
  $187 = ((($186)) + 28|0);
  HEAP32[$187>>2] = $184;
  $188 = $15;
  $189 = ((($188)) + 100|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = $16;
  $192 = ((($191)) + 292|0);
  $193 = ((($192)) + 40|0);
  HEAP8[$193>>0] = $190;
  $194 = $15;
  $195 = ((($194)) + 80|0);
  $196 = +HEAPF32[$195>>2];
  $197 = (~~(($196))&65535);
  $198 = $197&65535;
  $199 = $16;
  $200 = ((($199)) + 292|0);
  $201 = ((($200)) + 32|0);
  HEAP32[$201>>2] = $198;
  $202 = $15;
  $203 = ((($202)) + 80|0);
  $204 = ((($203)) + 4|0);
  $205 = +HEAPF32[$204>>2];
  $206 = (~~(($205))&65535);
  $207 = $206&65535;
  $208 = $16;
  $209 = ((($208)) + 292|0);
  $210 = ((($209)) + 32|0);
  $211 = ((($210)) + 4|0);
  HEAP32[$211>>2] = $207;
 }
 $212 = $14;
 $6 = $212;
 $213 = $6;
 STACKTOP = sp;return ($213|0);
}
function _nk_edit_buffer($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 64|0;
 $13 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = 0;
 $17 = $5;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((2989|0),(1320|0),19679,(20028|0));
  // unreachable;
 }
 $19 = $7;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((20043|0),(1320|0),19680,(20028|0));
  // unreachable;
 }
 $21 = $5;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((19010|0),(1320|0),19681,(20028|0));
  // unreachable;
 }
 $25 = $5;
 $26 = ((($25)) + 12908|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 140|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  ___assert_fail((18968|0),(1320|0),19682,(20028|0));
  // unreachable;
 }
 $31 = $5;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $5;
  $34 = ((($33)) + 12908|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $5;
   $38 = ((($37)) + 12908|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 140|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)!=(0|0);
   if ($42) {
    $43 = $5;
    $44 = ((($43)) + 12908|0);
    $45 = HEAP32[$44>>2]|0;
    $9 = $45;
    $46 = $5;
    $47 = ((($46)) + 340|0);
    $10 = $47;
    $48 = $5;
    $49 = (_nk_widget($13,$48)|0);
    $12 = $49;
    $50 = $12;
    $51 = ($50|0)!=(0);
    if (!($51)) {
     $52 = $12;
     $4 = $52;
     $172 = $4;
     STACKTOP = sp;return ($172|0);
    }
    $53 = $9;
    $54 = ((($53)) + 140|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $57 & 2048;
    $59 = ($58|0)!=(0);
    $60 = $5;
    $61 = $59 ? 0 : $60;
    $11 = $61;
    $62 = $9;
    $63 = ((($62)) + 292|0);
    $64 = ((($63)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[$64>>2] = $66;
    $16 = $65;
    $67 = $9;
    $68 = ((($67)) + 292|0);
    $69 = ((($68)) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)!=(0);
    if ($71) {
     $72 = $16;
     $73 = $9;
     $74 = ((($73)) + 292|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($72|0)==($75|0);
     if ($76) {
      $77 = $6;
      $78 = $77 & 16;
      $79 = ($78|0)!=(0);
      if ($79) {
       $80 = $7;
       $81 = ((($80)) + 12|0);
       $82 = ((($81)) + 60|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $7;
       $85 = ((($84)) + 88|0);
       HEAP32[$85>>2] = $83;
      }
      $86 = $6;
      $87 = $86 & 32;
      $88 = ($87|0)!=(0);
      if (!($88)) {
       $89 = $7;
       $90 = ((($89)) + 88|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = $7;
       $93 = ((($92)) + 92|0);
       HEAP32[$93>>2] = $91;
       $94 = $7;
       $95 = ((($94)) + 88|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = $7;
       $98 = ((($97)) + 96|0);
       HEAP32[$98>>2] = $96;
      }
      $99 = $6;
      $100 = $99 & 64;
      $101 = ($100|0)!=(0);
      if ($101) {
       $102 = $7;
       $103 = $5;
       $104 = ((($103)) + 5784|0);
       ;HEAP32[$102>>2]=HEAP32[$104>>2]|0;HEAP32[$102+4>>2]=HEAP32[$104+4>>2]|0;HEAP32[$102+8>>2]=HEAP32[$104+8>>2]|0;
      }
     }
    }
    $105 = $8;
    $106 = ($105|0)!=(0|0);
    $107 = $8;
    $108 = $106 ? $107 : 12;
    $8 = $108;
    $109 = $7;
    $110 = ((($109)) + 105|0);
    $111 = HEAP8[$110>>0]|0;
    $15 = $111;
    $112 = $6;
    $113 = $112 & 1;
    $114 = ($113|0)!=(0);
    $115 = $11;
    $116 = $114 ? 0 : $115;
    $11 = $116;
    $117 = $5;
    $118 = ((($117)) + 5796|0);
    $119 = $9;
    $120 = ((($119)) + 100|0);
    $121 = $6;
    $122 = $8;
    $123 = $7;
    $124 = $10;
    $125 = ((($124)) + 2512|0);
    $126 = $11;
    $127 = $10;
    $128 = HEAP32[$127>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;
    $129 = (_nk_do_edit($118,$120,$$byval_copy,$121,$122,$123,$125,$126,$128)|0);
    $14 = $129;
    $130 = $5;
    $131 = ((($130)) + 5796|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $132 & 16;
    $134 = ($133|0)!=(0);
    if ($134) {
     $135 = $5;
     $136 = ((($135)) + 340|0);
     $137 = ((($136)) + 4|0);
     $138 = ((($137)) + 4|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $5;
     $141 = ((($140)) + 340|0);
     $142 = ((($141)) + 32|0);
     HEAP32[$142>>2] = $139;
    }
    $143 = $7;
    $144 = ((($143)) + 105|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = ($146|0)!=(0);
    if ($147) {
     $148 = $15;
     $149 = $148&255;
     $150 = $7;
     $151 = ((($150)) + 105|0);
     $152 = HEAP8[$151>>0]|0;
     $153 = $152&255;
     $154 = ($149|0)!=($153|0);
     if ($154) {
      $155 = $9;
      $156 = ((($155)) + 292|0);
      $157 = ((($156)) + 12|0);
      HEAP32[$157>>2] = 1;
      $158 = $16;
      $159 = $9;
      $160 = ((($159)) + 292|0);
      HEAP32[$160>>2] = $158;
     } else {
      label = 28;
     }
    } else {
     label = 28;
    }
    if ((label|0) == 28) {
     $161 = $15;
     $162 = $161&255;
     $163 = ($162|0)!=(0);
     if ($163) {
      $164 = $7;
      $165 = ((($164)) + 105|0);
      $166 = HEAP8[$165>>0]|0;
      $167 = ($166<<24>>24)!=(0);
      if (!($167)) {
       $168 = $9;
       $169 = ((($168)) + 292|0);
       $170 = ((($169)) + 12|0);
       HEAP32[$170>>2] = 0;
      }
     }
    }
    $171 = $14;
    $4 = $171;
    $172 = $4;
    STACKTOP = sp;return ($172|0);
   }
  }
 }
 $4 = 0;
 $172 = $4;
 STACKTOP = sp;return ($172|0);
}
function _nk_do_edit($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$byval_copy = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0;
 var $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $$byval_copy42 = 0, $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $$byval_copy46 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0;
 var $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0;
 var $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0;
 var $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0.0, $1057 = 0, $1058 = 0, $1059 = 0.0, $106 = 0;
 var $1060 = 0.0, $1061 = 0, $1062 = 0.0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0.0, $1067 = 0.0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0.0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0.0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0.0, $1091 = 0.0, $1092 = 0, $1093 = 0.0, $1094 = 0, $1095 = 0, $1096 = 0;
 var $1097 = 0.0, $1098 = 0.0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0.0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0;
 var $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0.0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0.0;
 var $1132 = 0.0, $1133 = 0, $1134 = 0.0, $1135 = 0, $1136 = 0.0, $1137 = 0.0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0.0, $1142 = 0.0, $1143 = 0.0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0;
 var $1150 = 0.0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0;
 var $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0.0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0.0, $1181 = 0.0, $1182 = 0, $1183 = 0.0, $1184 = 0, $1185 = 0.0, $1186 = 0.0;
 var $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0.0, $1191 = 0.0, $1192 = 0.0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0.0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0;
 var $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0;
 var $1222 = 0, $1223 = 0.0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0.0, $1228 = 0, $1229 = 0.0, $123 = 0, $1230 = 0.0, $1231 = 0.0, $1232 = 0, $1233 = 0, $1234 = 0.0, $1235 = 0.0, $1236 = 0, $1237 = 0.0, $1238 = 0, $1239 = 0.0, $124 = 0;
 var $1240 = 0.0, $1241 = 0.0, $1242 = 0.0, $1243 = 0.0, $1244 = 0, $1245 = 0.0, $1246 = 0.0, $1247 = 0.0, $1248 = 0, $1249 = 0, $125 = 0.0, $1250 = 0, $1251 = 0, $1252 = 0.0, $1253 = 0, $1254 = 0.0, $1255 = 0.0, $1256 = 0, $1257 = 0, $1258 = 0;
 var $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0.0, $1262 = 0.0, $1263 = 0.0, $1264 = 0, $1265 = 0, $1266 = 0.0, $1267 = 0.0, $1268 = 0, $1269 = 0.0, $127 = 0, $1270 = 0, $1271 = 0.0, $1272 = 0.0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0.0;
 var $1277 = 0.0, $1278 = 0, $1279 = 0, $128 = 0.0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0.0, $1286 = 0, $1287 = 0, $1288 = 0.0, $1289 = 0, $129 = 0.0, $1290 = 0.0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0;
 var $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0;
 var $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0.0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0.0;
 var $1330 = 0, $1331 = 0.0, $1332 = 0, $1333 = 0, $1334 = 0.0, $1335 = 0.0, $1336 = 0, $1337 = 0.0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0.0, $1342 = 0.0, $1343 = 0, $1344 = 0, $1345 = 0.0, $1346 = 0, $1347 = 0, $1348 = 0;
 var $1349 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0;
 var $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0.0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0.0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0.0, $624 = 0;
 var $625 = 0, $626 = 0.0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0.0, $634 = 0.0, $635 = 0, $636 = 0.0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0.0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0.0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0.0;
 var $734 = 0.0, $735 = 0.0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0.0, $745 = 0.0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0.0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0.0, $782 = 0.0, $783 = 0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0.0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0.0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0.0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0.0, $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0.0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0.0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0.0, $84 = 0.0, $840 = 0, $841 = 0.0, $842 = 0.0;
 var $843 = 0.0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0.0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0.0, $856 = 0, $857 = 0.0, $858 = 0.0, $859 = 0.0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0.0, $868 = 0.0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0, $872 = 0.0, $873 = 0, $874 = 0.0, $875 = 0.0, $876 = 0.0, $877 = 0, $878 = 0.0, $879 = 0.0;
 var $88 = 0, $880 = 0.0, $881 = 0, $882 = 0.0, $883 = 0.0, $884 = 0, $885 = 0, $886 = 0.0, $887 = 0, $888 = 0, $889 = 0.0, $89 = 0, $890 = 0, $891 = 0.0, $892 = 0.0, $893 = 0, $894 = 0.0, $895 = 0, $896 = 0.0, $897 = 0.0;
 var $898 = 0, $899 = 0.0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0.0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0.0, $913 = 0, $914 = 0;
 var $915 = 0.0, $916 = 0.0, $917 = 0.0, $918 = 0, $919 = 0, $92 = 0, $920 = 0.0, $921 = 0.0, $922 = 0.0, $923 = 0, $924 = 0, $925 = 0, $926 = 0.0, $927 = 0, $928 = 0.0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0.0;
 var $933 = 0, $934 = 0.0, $935 = 0.0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0.0, $941 = 0.0, $942 = 0.0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0.0, $953 = 0, $954 = 0.0, $955 = 0.0, $956 = 0, $957 = 0, $958 = 0.0, $959 = 0.0, $96 = 0, $960 = 0, $961 = 0, $962 = 0.0, $963 = 0.0, $964 = 0, $965 = 0, $966 = 0.0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0.0, $972 = 0, $973 = 0.0, $974 = 0.0, $975 = 0, $976 = 0.0, $977 = 0.0, $978 = 0, $979 = 0.0, $98 = 0, $980 = 0, $981 = 0.0, $982 = 0.0, $983 = 0.0, $984 = 0.0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0.0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $nk_white$byval_copy = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(880|0);
 $$byval_copy46 = sp + 752|0;
 $$byval_copy45 = sp + 868|0;
 $$byval_copy44 = sp + 864|0;
 $$byval_copy43 = sp + 736|0;
 $$byval_copy42 = sp + 720|0;
 $$byval_copy41 = sp + 860|0;
 $$byval_copy40 = sp + 704|0;
 $$byval_copy39 = sp + 696|0;
 $$byval_copy38 = sp + 856|0;
 $$byval_copy37 = sp + 680|0;
 $$byval_copy36 = sp + 852|0;
 $$byval_copy35 = sp + 848|0;
 $$byval_copy34 = sp + 844|0;
 $$byval_copy33 = sp + 840|0;
 $$byval_copy32 = sp + 836|0;
 $$byval_copy31 = sp + 832|0;
 $$byval_copy30 = sp + 828|0;
 $$byval_copy29 = sp + 824|0;
 $$byval_copy28 = sp + 664|0;
 $$byval_copy27 = sp + 648|0;
 $$byval_copy26 = sp + 640|0;
 $$byval_copy25 = sp + 636|0;
 $$byval_copy24 = sp + 632|0;
 $nk_white$byval_copy = sp + 820|0;
 $$byval_copy23 = sp + 616|0;
 $$byval_copy22 = sp + 816|0;
 $$byval_copy21 = sp + 600|0;
 $$byval_copy20 = sp + 812|0;
 $$byval_copy19 = sp + 584|0;
 $$byval_copy18 = sp + 580|0;
 $$byval_copy17 = sp + 576|0;
 $$byval_copy16 = sp + 560|0;
 $$byval_copy = sp + 544|0;
 $18 = sp + 488|0;
 $25 = sp + 464|0;
 $26 = sp + 448|0;
 $35 = sp + 408|0;
 $36 = sp + 404|0;
 $48 = sp + 352|0;
 $52 = sp + 328|0;
 $53 = sp + 320|0;
 $54 = sp + 312|0;
 $60 = sp + 288|0;
 $64 = sp + 272|0;
 $65 = sp + 264|0;
 $66 = sp + 256|0;
 $67 = sp + 248|0;
 $68 = sp + 240|0;
 $69 = sp + 232|0;
 $70 = sp + 224|0;
 $71 = sp + 216|0;
 $72 = sp + 208|0;
 $73 = sp + 200|0;
 $74 = sp + 192|0;
 $75 = sp + 184|0;
 $76 = sp + 176|0;
 $77 = sp + 168|0;
 $78 = sp + 160|0;
 $80 = sp + 152|0;
 $81 = sp + 136|0;
 $86 = sp + 804|0;
 $87 = sp + 800|0;
 $88 = sp + 796|0;
 $89 = sp + 792|0;
 $90 = sp + 788|0;
 $91 = sp + 784|0;
 $93 = sp + 780|0;
 $100 = sp + 72|0;
 $102 = sp + 48|0;
 $103 = sp + 32|0;
 $104 = sp + 24|0;
 $105 = sp + 16|0;
 $109 = sp + 776|0;
 $110 = sp + 772|0;
 $111 = sp + 768|0;
 $10 = $0;
 $11 = $1;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $19 = 0;
 $21 = 0;
 $22 = 0;
 $23 = 0;
 $24 = 0;
 $112 = $10;
 $113 = ($112|0)!=(0|0);
 if (!($113)) {
  ___assert_fail((18268|0),(1320|0),14145,(24581|0));
  // unreachable;
 }
 $114 = $11;
 $115 = ($114|0)!=(0|0);
 if (!($115)) {
  ___assert_fail((24177|0),(1320|0),14146,(24581|0));
  // unreachable;
 }
 $116 = $15;
 $117 = ($116|0)!=(0|0);
 if (!($117)) {
  ___assert_fail((19774|0),(1320|0),14147,(24581|0));
  // unreachable;
 }
 $118 = $10;
 $119 = ($118|0)!=(0|0);
 $120 = $11;
 $121 = ($120|0)!=(0|0);
 $or$cond = $119 & $121;
 $122 = $15;
 $123 = ($122|0)!=(0|0);
 $or$cond3 = $or$cond & $123;
 if (!($or$cond3)) {
  $124 = $19;
  $9 = $124;
  $1349 = $9;
  STACKTOP = sp;return ($1349|0);
 }
 $125 = +HEAPF32[$2>>2];
 $126 = $15;
 $127 = ((($126)) + 560|0);
 $128 = +HEAPF32[$127>>2];
 $129 = $125 + $128;
 $130 = $15;
 $131 = ((($130)) + 540|0);
 $132 = +HEAPF32[$131>>2];
 $133 = $129 + $132;
 HEAPF32[$18>>2] = $133;
 $134 = ((($2)) + 4|0);
 $135 = +HEAPF32[$134>>2];
 $136 = $15;
 $137 = ((($136)) + 560|0);
 $138 = ((($137)) + 4|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $135 + $139;
 $141 = $15;
 $142 = ((($141)) + 540|0);
 $143 = +HEAPF32[$142>>2];
 $144 = $140 + $143;
 $145 = ((($18)) + 4|0);
 HEAPF32[$145>>2] = $144;
 $146 = ((($2)) + 8|0);
 $147 = +HEAPF32[$146>>2];
 $148 = $15;
 $149 = ((($148)) + 560|0);
 $150 = +HEAPF32[$149>>2];
 $151 = 2.0 * $150;
 $152 = $15;
 $153 = ((($152)) + 540|0);
 $154 = +HEAPF32[$153>>2];
 $155 = 2.0 * $154;
 $156 = $151 + $155;
 $157 = $147 - $156;
 $158 = ((($18)) + 8|0);
 HEAPF32[$158>>2] = $157;
 $159 = ((($2)) + 12|0);
 $160 = +HEAPF32[$159>>2];
 $161 = $15;
 $162 = ((($161)) + 560|0);
 $163 = ((($162)) + 4|0);
 $164 = +HEAPF32[$163>>2];
 $165 = 2.0 * $164;
 $166 = $15;
 $167 = ((($166)) + 540|0);
 $168 = +HEAPF32[$167>>2];
 $169 = 2.0 * $168;
 $170 = $165 + $169;
 $171 = $160 - $170;
 $172 = ((($18)) + 12|0);
 HEAPF32[$172>>2] = $171;
 $173 = $12;
 $174 = $173 & 2048;
 $175 = ($174|0)!=(0);
 if ($175) {
  $176 = ((($18)) + 8|0);
  $177 = +HEAPF32[$176>>2];
  $178 = $15;
  $179 = ((($178)) + 552|0);
  $180 = +HEAPF32[$179>>2];
  $181 = $177 - $180;
  $182 = 0.0 < $181;
  if ($182) {
   $183 = ((($18)) + 8|0);
   $184 = +HEAPF32[$183>>2];
   $185 = $15;
   $186 = ((($185)) + 552|0);
   $187 = +HEAPF32[$186>>2];
   $188 = $184 - $187;
   $190 = $188;
  } else {
   $190 = 0.0;
  }
  $189 = ((($18)) + 8|0);
  HEAPF32[$189>>2] = $190;
 }
 $191 = $12;
 $192 = $191 & 2048;
 $193 = ($192|0)!=(0);
 if ($193) {
  $194 = $17;
  $195 = ((($194)) + 4|0);
  $196 = +HEAPF32[$195>>2];
  $197 = $15;
  $198 = ((($197)) + 568|0);
  $199 = +HEAPF32[$198>>2];
  $200 = $196 + $199;
  $203 = $200;
 } else {
  $201 = ((($18)) + 12|0);
  $202 = +HEAPF32[$201>>2];
  $203 = $202;
 }
 $20 = $203;
 $204 = $11;
 $205 = ((($204)) + 4|0);
 ;HEAP32[$25>>2]=HEAP32[$205>>2]|0;HEAP32[$25+4>>2]=HEAP32[$205+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$205+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$205+12>>2]|0;
 $206 = +HEAPF32[$18>>2];
 $207 = ((($18)) + 4|0);
 $208 = +HEAPF32[$207>>2];
 $209 = +HEAPF32[$18>>2];
 $210 = ((($18)) + 8|0);
 $211 = +HEAPF32[$210>>2];
 $212 = $209 + $211;
 $213 = ((($18)) + 4|0);
 $214 = +HEAPF32[$213>>2];
 $215 = ((($18)) + 12|0);
 $216 = +HEAPF32[$215>>2];
 $217 = $214 + $216;
 _nk_unify($26,$25,$206,$208,$212,$217);
 $218 = $14;
 $219 = ((($218)) + 105|0);
 $220 = HEAP8[$219>>0]|0;
 $21 = $220;
 $221 = $16;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $222 = (_nk_input_is_mouse_hovering_rect($221,$$byval_copy)|0);
 $223 = $222&255;
 $22 = $223;
 $224 = $16;
 $225 = ($224|0)!=(0|0);
 if ($225) {
  $226 = $16;
  $227 = ((($226)) + 260|0);
  $228 = ((($227)) + 4|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ($229|0)!=(0);
  if ($230) {
   $231 = $16;
   $232 = ((($231)) + 260|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ($233|0)!=(0);
   if ($234) {
    $235 = +HEAPF32[$2>>2];
    $236 = $16;
    $237 = ((($236)) + 260|0);
    $238 = ((($237)) + 48|0);
    $239 = +HEAPF32[$238>>2];
    $240 = $235 <= $239;
    if ($240) {
     $241 = $16;
     $242 = ((($241)) + 260|0);
     $243 = ((($242)) + 48|0);
     $244 = +HEAPF32[$243>>2];
     $245 = +HEAPF32[$2>>2];
     $246 = ((($2)) + 8|0);
     $247 = +HEAPF32[$246>>2];
     $248 = $245 + $247;
     $249 = $244 <= $248;
     if ($249) {
      $250 = ((($2)) + 4|0);
      $251 = +HEAPF32[$250>>2];
      $252 = $16;
      $253 = ((($252)) + 260|0);
      $254 = ((($253)) + 48|0);
      $255 = ((($254)) + 4|0);
      $256 = +HEAPF32[$255>>2];
      $257 = $251 <= $256;
      if ($257) {
       $258 = $16;
       $259 = ((($258)) + 260|0);
       $260 = ((($259)) + 48|0);
       $261 = ((($260)) + 4|0);
       $262 = +HEAPF32[$261>>2];
       $263 = ((($2)) + 4|0);
       $264 = +HEAPF32[$263>>2];
       $265 = ((($2)) + 12|0);
       $266 = +HEAPF32[$265>>2];
       $267 = $264 + $266;
       $268 = $262 <= $267;
       $270 = $268;
      } else {
       $270 = 0;
      }
     } else {
      $270 = 0;
     }
    } else {
     $270 = 0;
    }
    $269 = $270&1;
    $271 = $269&255;
    $272 = $14;
    $273 = ((($272)) + 105|0);
    HEAP8[$273>>0] = $271;
   }
  }
 }
 $274 = $21;
 $275 = ($274<<24>>24)!=(0);
 if ($275) {
  label = 32;
 } else {
  $276 = $14;
  $277 = ((($276)) + 105|0);
  $278 = HEAP8[$277>>0]|0;
  $279 = $278&255;
  $280 = ($279|0)!=(0);
  if ($280) {
   $281 = $12;
   $282 = $281 & 2048;
   $283 = ($282|0)!=(0);
   $284 = $283 ? 1 : 0;
   $27 = $284;
   $285 = $14;
   $286 = $27;
   $287 = $13;
   _nk_textedit_clear_state($285,$286,$287);
   $288 = $12;
   $289 = $288 & 512;
   $290 = ($289|0)!=(0);
   if ($290) {
    $291 = $14;
    $292 = ((($291)) + 100|0);
    HEAP8[$292>>0] = 1;
   }
   $293 = $12;
   $294 = $293 & 2;
   $295 = ($294|0)!=(0);
   if ($295) {
    $23 = 1;
   }
   $296 = $12;
   $297 = $296 & 4096;
   $298 = ($297|0)!=(0);
   if ($298) {
    $299 = $14;
    $300 = ((($299)) + 12|0);
    $301 = ((($300)) + 60|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = $14;
    $304 = ((($303)) + 88|0);
    HEAP32[$304>>2] = $302;
    $16 = 0;
   }
  } else {
   label = 32;
  }
 }
 if ((label|0) == 32) {
  $305 = $14;
  $306 = ((($305)) + 105|0);
  $307 = HEAP8[$306>>0]|0;
  $308 = ($307<<24>>24)!=(0);
  if (!($308)) {
   $309 = $14;
   $310 = ((($309)) + 100|0);
   HEAP8[$310>>0] = 0;
  }
 }
 $311 = $12;
 $312 = $311 & 1;
 $313 = ($312|0)!=(0);
 if ($313) {
  $314 = $14;
  $315 = ((($314)) + 100|0);
  HEAP8[$315>>0] = 0;
 }
 $316 = $14;
 $317 = ((($316)) + 105|0);
 $318 = HEAP8[$317>>0]|0;
 $319 = $318&255;
 $320 = ($319|0)!=(0);
 $321 = $320 ? 1 : 2;
 $19 = $321;
 $322 = $21;
 $323 = $322 << 24 >> 24;
 $324 = $14;
 $325 = ((($324)) + 105|0);
 $326 = HEAP8[$325>>0]|0;
 $327 = $326&255;
 $328 = ($323|0)!=($327|0);
 if ($328) {
  $329 = $14;
  $330 = ((($329)) + 105|0);
  $331 = HEAP8[$330>>0]|0;
  $332 = $331&255;
  $333 = ($332|0)!=(0);
  $334 = $333 ? 4 : 8;
  $335 = $19;
  $336 = $335 | $334;
  $19 = $336;
 }
 $337 = $14;
 $338 = ((($337)) + 105|0);
 $339 = HEAP8[$338>>0]|0;
 $340 = $339&255;
 $341 = ($340|0)!=(0);
 $342 = $16;
 $343 = ($342|0)!=(0|0);
 $or$cond5 = $341 & $343;
 if ($or$cond5) {
  $344 = $16;
  $345 = ((($344)) + 8|0);
  $346 = HEAP32[$345>>2]|0;
  $28 = $346;
  $347 = $16;
  $348 = ((($347)) + 260|0);
  $349 = ((($348)) + 48|0);
  $350 = +HEAPF32[$349>>2];
  $351 = +HEAPF32[$18>>2];
  $352 = $350 - $351;
  $353 = $14;
  $354 = ((($353)) + 80|0);
  $355 = +HEAPF32[$354>>2];
  $356 = $352 + $355;
  $29 = $356;
  $357 = $16;
  $358 = ((($357)) + 260|0);
  $359 = ((($358)) + 48|0);
  $360 = ((($359)) + 4|0);
  $361 = +HEAPF32[$360>>2];
  $362 = ((($18)) + 4|0);
  $363 = +HEAPF32[$362>>2];
  $364 = $361 - $363;
  $365 = $14;
  $366 = ((($365)) + 80|0);
  $367 = ((($366)) + 4|0);
  $368 = +HEAPF32[$367>>2];
  $369 = $364 + $368;
  $30 = $369;
  $370 = $16;
  ;HEAP32[$$byval_copy16>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy16+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy16+12>>2]=HEAP32[$18+12>>2]|0;
  $371 = (_nk_input_is_mouse_hovering_rect($370,$$byval_copy16)|0);
  $372 = $371&255;
  $22 = $372;
  $373 = $23;
  $374 = ($373<<24>>24)!=(0);
  L56: do {
   if ($374) {
    $375 = $14;
    _nk_textedit_select_all($375);
   } else {
    $376 = $22;
    $377 = $376 << 24 >> 24;
    $378 = ($377|0)!=(0);
    if ($378) {
     $379 = $16;
     $380 = ((($379)) + 260|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = ($381|0)!=(0);
     if ($382) {
      $383 = $16;
      $384 = ((($383)) + 260|0);
      $385 = ((($384)) + 4|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = ($386|0)!=(0);
      if ($387) {
       $388 = $14;
       $389 = $29;
       $390 = $30;
       $391 = $17;
       $392 = $20;
       _nk_textedit_click($388,$389,$390,$391,$392);
       break;
      }
     }
    }
    $393 = $22;
    $394 = $393 << 24 >> 24;
    $395 = ($394|0)!=(0);
    do {
     if ($395) {
      $396 = $16;
      $397 = ((($396)) + 260|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = ($398|0)!=(0);
      if ($399) {
       $400 = $16;
       $401 = ((($400)) + 260|0);
       $402 = ((($401)) + 64|0);
       $403 = +HEAPF32[$402>>2];
       $404 = $403 != 0.0;
       if (!($404)) {
        $405 = $16;
        $406 = ((($405)) + 260|0);
        $407 = ((($406)) + 64|0);
        $408 = ((($407)) + 4|0);
        $409 = +HEAPF32[$408>>2];
        $410 = $409 != 0.0;
        if (!($410)) {
         break;
        }
       }
       $411 = $14;
       $412 = $29;
       $413 = $30;
       $414 = $17;
       $415 = $20;
       _nk_textedit_drag($411,$412,$413,$414,$415);
       $24 = 1;
       break L56;
      }
     }
    } while(0);
    $416 = $22;
    $417 = $416 << 24 >> 24;
    $418 = ($417|0)!=(0);
    if ($418) {
     $419 = $16;
     $420 = ((($419)) + 260|0);
     $421 = ((($420)) + 32|0);
     $422 = ((($421)) + 4|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = ($423|0)!=(0);
     if ($424) {
      $425 = $16;
      $426 = ((($425)) + 260|0);
      $427 = ((($426)) + 32|0);
      $428 = HEAP32[$427>>2]|0;
      $429 = ($428|0)!=(0);
      if ($429) {
       $430 = $14;
       $431 = $17;
       $432 = $20;
       _nk_textedit_key($430,24,0,$431,$432);
       $433 = $14;
       $434 = $17;
       $435 = $20;
       _nk_textedit_key($433,25,1,$434,$435);
       $24 = 1;
      }
     }
    }
   }
  } while(0);
  $436 = $14;
  $437 = ((($436)) + 100|0);
  $438 = HEAP8[$437>>0]|0;
  $439 = $438&255;
  $32 = $439;
  $31 = 0;
  while(1) {
   $440 = $31;
   $441 = ($440|0)<(30);
   if (!($441)) {
    break;
   }
   $442 = $31;
   $443 = ($442|0)==(4);
   $444 = $31;
   $445 = ($444|0)==(5);
   $or$cond7 = $443 | $445;
   if (!($or$cond7)) {
    $446 = $16;
    $447 = $31;
    $448 = (_nk_input_is_key_pressed($446,$447)|0);
    $449 = ($448|0)!=(0);
    if ($449) {
     $450 = $14;
     $451 = $31;
     $452 = $28;
     $453 = $17;
     $454 = $20;
     _nk_textedit_key($450,$451,$452,$453,$454);
     $24 = 1;
    }
   }
   $455 = $31;
   $456 = (($455) + 1)|0;
   $31 = $456;
  }
  $457 = $32;
  $458 = $14;
  $459 = ((($458)) + 100|0);
  $460 = HEAP8[$459>>0]|0;
  $461 = $460&255;
  $462 = ($457|0)!=($461|0);
  if ($462) {
   $463 = $16;
   $464 = ((($463)) + 256|0);
   HEAP32[$464>>2] = 0;
  }
  $465 = $13;
  $466 = $14;
  $467 = ((($466)) + 76|0);
  HEAP32[$467>>2] = $465;
  $468 = $16;
  $469 = ((($468)) + 256|0);
  $470 = HEAP32[$469>>2]|0;
  $471 = ($470|0)!=(0);
  if ($471) {
   $472 = $14;
   $473 = $16;
   $474 = ((($473)) + 240|0);
   $475 = $16;
   $476 = ((($475)) + 256|0);
   $477 = HEAP32[$476>>2]|0;
   _nk_textedit_text($472,$474,$477);
   $24 = 1;
   $478 = $16;
   $479 = ((($478)) + 256|0);
   HEAP32[$479>>2] = 0;
  }
  $480 = $16;
  $481 = (_nk_input_is_key_pressed($480,4)|0);
  $482 = ($481|0)!=(0);
  do {
   if ($482) {
    $24 = 1;
    $483 = $12;
    $484 = $483 & 128;
    $485 = ($484|0)!=(0);
    $486 = $28;
    $487 = ($486|0)!=(0);
    $or$cond9 = $485 & $487;
    if ($or$cond9) {
     $488 = $14;
     _nk_textedit_text($488,24592,1);
     break;
    }
    $489 = $12;
    $490 = $489 & 4;
    $491 = ($490|0)!=(0);
    if ($491) {
     $492 = $19;
     $493 = $492 | 16;
     $19 = $493;
     break;
    } else {
     $494 = $14;
     _nk_textedit_text($494,24592,1);
     break;
    }
   }
  } while(0);
  $495 = $16;
  $496 = (_nk_input_is_key_pressed($495,7)|0);
  $33 = $496;
  $497 = $16;
  $498 = (_nk_input_is_key_pressed($497,8)|0);
  $34 = $498;
  $499 = $33;
  $500 = ($499|0)!=(0);
  $501 = $34;
  $502 = ($501|0)!=(0);
  $or$cond11 = $500 | $502;
  do {
   if ($or$cond11) {
    $503 = $12;
    $504 = $503 & 64;
    $505 = ($504|0)!=(0);
    if ($505) {
     $506 = $14;
     $507 = ((($506)) + 92|0);
     $508 = HEAP32[$507>>2]|0;
     $38 = $508;
     $509 = $14;
     $510 = ((($509)) + 96|0);
     $511 = HEAP32[$510>>2]|0;
     $39 = $511;
     $512 = $38;
     $513 = $39;
     $514 = ($512|0)<($513|0);
     $515 = $38;
     $516 = $39;
     $517 = $514 ? $515 : $516;
     $40 = $517;
     $518 = $38;
     $519 = $39;
     $520 = ($518|0)<($519|0);
     $521 = $39;
     $522 = $38;
     $523 = $520 ? $521 : $522;
     $41 = $523;
     $524 = $14;
     $525 = ((($524)) + 12|0);
     $526 = $40;
     $527 = (_nk_str_at_const($525,$526,$36,$35)|0);
     $37 = $527;
     $528 = $14;
     $529 = ((($528)) + 8|0);
     $530 = HEAP32[$529>>2]|0;
     $531 = ($530|0)!=(0|0);
     if ($531) {
      $532 = $14;
      $533 = ((($532)) + 8|0);
      $534 = HEAP32[$533>>2]|0;
      $535 = $14;
      $536 = $37;
      $537 = $41;
      $538 = $40;
      $539 = (($537) - ($538))|0;
      ;HEAP32[$$byval_copy17>>2]=HEAP32[$535>>2]|0;
      FUNCTION_TABLE_viii[$534 & 31]($$byval_copy17,$536,$539);
     }
     $540 = $34;
     $541 = ($540|0)!=(0);
     if (!($541)) {
      break;
     }
     $542 = $12;
     $543 = $542 & 1;
     $544 = ($543|0)!=(0);
     if ($544) {
      break;
     }
     $545 = $14;
     (_nk_textedit_cut($545)|0);
     $24 = 1;
    }
   }
  } while(0);
  $546 = $16;
  $547 = (_nk_input_is_key_pressed($546,9)|0);
  $42 = $547;
  $548 = $42;
  $549 = ($548|0)!=(0);
  do {
   if ($549) {
    $550 = $12;
    $551 = $550 & 64;
    $552 = ($551|0)!=(0);
    if ($552) {
     $553 = $14;
     $554 = ((($553)) + 4|0);
     $555 = HEAP32[$554>>2]|0;
     $556 = ($555|0)!=(0|0);
     if (!($556)) {
      break;
     }
     $557 = $14;
     $558 = ((($557)) + 4|0);
     $559 = HEAP32[$558>>2]|0;
     $560 = $14;
     $561 = $14;
     ;HEAP32[$$byval_copy18>>2]=HEAP32[$560>>2]|0;
     FUNCTION_TABLE_vii[$559 & 31]($$byval_copy18,$561);
     $24 = 1;
    }
   }
  } while(0);
  $562 = $16;
  $563 = (_nk_input_is_key_pressed($562,5)|0);
  $43 = $563;
  $564 = $43;
  $565 = ($564|0)!=(0);
  if ($565) {
   $566 = $12;
   $567 = $566 & 8;
   $568 = ($567|0)!=(0);
   if ($568) {
    $569 = $14;
    _nk_textedit_text($569,24594,4);
    $24 = 1;
   }
  }
 }
 $570 = $14;
 $571 = ((($570)) + 105|0);
 $572 = HEAP8[$571>>0]|0;
 $573 = ($572<<24>>24)!=(0);
 $574 = $10;
 do {
  if ($573) {
   HEAP32[$574>>2] = 34;
  } else {
   $575 = HEAP32[$574>>2]|0;
   $576 = $575 & 2;
   $577 = ($576|0)!=(0);
   $578 = $10;
   if ($577) {
    HEAP32[$578>>2] = 6;
    break;
   } else {
    HEAP32[$578>>2] = 4;
    break;
   }
  }
 } while(0);
 $579 = $22;
 $580 = ($579<<24>>24)!=(0);
 if ($580) {
  $581 = $10;
  $582 = HEAP32[$581>>2]|0;
  $583 = $582 | 18;
  HEAP32[$581>>2] = $583;
 }
 $584 = $14;
 $585 = ((($584)) + 12|0);
 $586 = (_nk_str_get_const($585)|0);
 $44 = $586;
 $587 = $14;
 $588 = ((($587)) + 12|0);
 $589 = (_nk_str_len_char($588)|0);
 $45 = $589;
 $590 = $10;
 $591 = HEAP32[$590>>2]|0;
 $592 = $591 & 32;
 $593 = ($592|0)!=(0);
 do {
  if ($593) {
   $594 = $15;
   $595 = ((($594)) + 40|0);
   $46 = $595;
  } else {
   $596 = $10;
   $597 = HEAP32[$596>>2]|0;
   $598 = $597 & 16;
   $599 = ($598|0)!=(0);
   $600 = $15;
   if ($599) {
    $601 = ((($600)) + 20|0);
    $46 = $601;
    break;
   } else {
    $46 = $600;
    break;
   }
  }
 } while(0);
 $602 = $46;
 $603 = HEAP32[$602>>2]|0;
 $604 = ($603|0)==(0);
 $605 = $11;
 if ($604) {
  $606 = $15;
  $607 = ((($606)) + 544|0);
  $608 = +HEAPF32[$607>>2];
  $609 = $15;
  $610 = ((($609)) + 540|0);
  $611 = +HEAPF32[$610>>2];
  $612 = $15;
  $613 = ((($612)) + 60|0);
  ;HEAP32[$$byval_copy19>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy19+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy19+12>>2]=HEAP32[$2+12>>2]|0;
  ;HEAP8[$$byval_copy20>>0]=HEAP8[$613>>0]|0;HEAP8[$$byval_copy20+1>>0]=HEAP8[$613+1>>0]|0;HEAP8[$$byval_copy20+2>>0]=HEAP8[$613+2>>0]|0;HEAP8[$$byval_copy20+3>>0]=HEAP8[$613+3>>0]|0;
  _nk_stroke_rect($605,$$byval_copy19,$608,$611,$$byval_copy20);
  $614 = $11;
  $615 = $15;
  $616 = ((($615)) + 544|0);
  $617 = +HEAPF32[$616>>2];
  $618 = $46;
  $619 = ((($618)) + 4|0);
  ;HEAP32[$$byval_copy21>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy21+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy21+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy21+12>>2]=HEAP32[$2+12>>2]|0;
  ;HEAP8[$$byval_copy22>>0]=HEAP8[$619>>0]|0;HEAP8[$$byval_copy22+1>>0]=HEAP8[$619+1>>0]|0;HEAP8[$$byval_copy22+2>>0]=HEAP8[$619+2>>0]|0;HEAP8[$$byval_copy22+3>>0]=HEAP8[$619+3>>0]|0;
  _nk_fill_rect($614,$$byval_copy21,$617,$$byval_copy22);
 } else {
  $620 = $46;
  $621 = ((($620)) + 4|0);
  ;HEAP32[$$byval_copy23>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy23+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy23+12>>2]=HEAP32[$2+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($605,$$byval_copy23,$621,$nk_white$byval_copy);
 }
 $622 = ((($18)) + 8|0);
 $623 = +HEAPF32[$622>>2];
 $624 = $15;
 $625 = ((($624)) + 548|0);
 $626 = +HEAPF32[$625>>2];
 $627 = $623 - $626;
 $628 = 0.0 < $627;
 if ($628) {
  $629 = ((($18)) + 8|0);
  $630 = +HEAPF32[$629>>2];
  $631 = $15;
  $632 = ((($631)) + 548|0);
  $633 = +HEAPF32[$632>>2];
  $634 = $630 - $633;
  $636 = $634;
 } else {
  $636 = 0.0;
 }
 $635 = ((($18)) + 8|0);
 HEAPF32[$635>>2] = $636;
 $637 = $14;
 $638 = ((($637)) + 105|0);
 $639 = HEAP8[$638>>0]|0;
 $640 = ($639<<24>>24)!=(0);
 L139: do {
  if ($640) {
   $47 = 1;
   _nk_vec2($48,0.0,0.0);
   $49 = 0;
   $50 = 0;
   $51 = 0;
   _nk_vec2($52,0.0,0.0);
   _nk_vec2($53,0.0,0.0);
   _nk_vec2($54,0.0,0.0);
   $641 = $14;
   $642 = ((($641)) + 92|0);
   $643 = HEAP32[$642>>2]|0;
   $644 = $14;
   $645 = ((($644)) + 96|0);
   $646 = HEAP32[$645>>2]|0;
   $647 = ($643|0)<($646|0);
   $648 = $14;
   if ($647) {
    $649 = ((($648)) + 92|0);
    $650 = HEAP32[$649>>2]|0;
    $653 = $650;
   } else {
    $651 = ((($648)) + 96|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = $652;
   }
   $55 = $653;
   $654 = $14;
   $655 = ((($654)) + 92|0);
   $656 = HEAP32[$655>>2]|0;
   $657 = $14;
   $658 = ((($657)) + 96|0);
   $659 = HEAP32[$658>>2]|0;
   $660 = ($656|0)<($659|0);
   $661 = $14;
   if ($660) {
    $662 = ((($661)) + 96|0);
    $663 = HEAP32[$662>>2]|0;
    $666 = $663;
   } else {
    $664 = ((($661)) + 92|0);
    $665 = HEAP32[$664>>2]|0;
    $666 = $665;
   }
   $56 = $666;
   $57 = 0.0;
   $667 = $44;
   $668 = ($667|0)!=(0|0);
   $669 = $45;
   $670 = ($669|0)!=(0);
   $or$cond13 = $668 & $670;
   do {
    if ($or$cond13) {
     $59 = 0;
     HEAP32[$60>>2] = 0;
     $61 = 0;
     $62 = 0;
     $63 = 0;
     $671 = $44;
     $672 = $45;
     $673 = (_nk_utf_decode($671,$60,$672)|0);
     $59 = $673;
     $674 = $17;
     $675 = ((($674)) + 8|0);
     $676 = HEAP32[$675>>2]|0;
     $677 = $17;
     $678 = $17;
     $679 = ((($678)) + 4|0);
     $680 = +HEAPF32[$679>>2];
     $681 = $44;
     $682 = $59;
     ;HEAP32[$$byval_copy24>>2]=HEAP32[$677>>2]|0;
     $683 = (+FUNCTION_TABLE_didii[$676 & 15]($$byval_copy24,$680,$681,$682));
     $58 = $683;
     $57 = 0.0;
     while(1) {
      $684 = $61;
      $685 = $45;
      $686 = ($684|0)<($685|0);
      $687 = $59;
      $688 = ($687|0)!=(0);
      $689 = $686 ? $688 : 0;
      if (!($689)) {
       break;
      }
      $690 = $49;
      $691 = ($690|0)!=(0|0);
      do {
       if (!($691)) {
        $692 = $62;
        $693 = $14;
        $694 = ((($693)) + 88|0);
        $695 = HEAP32[$694>>2]|0;
        $696 = ($692|0)==($695|0);
        if (!($696)) {
         break;
        }
        $697 = $47;
        $698 = (($697) - 1)|0;
        $699 = (+($698|0));
        $700 = $20;
        $701 = $699 * $700;
        $702 = ((($52)) + 4|0);
        HEAPF32[$702>>2] = $701;
        $703 = $17;
        $704 = $44;
        $705 = $63;
        $706 = (($704) + ($705)|0);
        $707 = $61;
        $708 = $63;
        $709 = (($707) - ($708))|0;
        $710 = $20;
        _nk_text_calculate_text_bounds($68,$703,$706,$709,$710,$67,$65,$64,1);
        ;HEAP32[$66>>2]=HEAP32[$68>>2]|0;HEAP32[$66+4>>2]=HEAP32[$68+4>>2]|0;
        $711 = +HEAPF32[$66>>2];
        HEAPF32[$52>>2] = $711;
        $712 = $44;
        $713 = $61;
        $714 = (($712) + ($713)|0);
        $49 = $714;
       }
      } while(0);
      $715 = $50;
      $716 = ($715|0)!=(0|0);
      do {
       if (!($716)) {
        $717 = $14;
        $718 = ((($717)) + 92|0);
        $719 = HEAP32[$718>>2]|0;
        $720 = $14;
        $721 = ((($720)) + 96|0);
        $722 = HEAP32[$721>>2]|0;
        $723 = ($719|0)!=($722|0);
        if (!($723)) {
         break;
        }
        $724 = $62;
        $725 = $55;
        $726 = ($724|0)==($725|0);
        if (!($726)) {
         break;
        }
        $727 = $47;
        $728 = (($727) - 1)|0;
        $729 = ($728|0)<(0);
        $730 = $47;
        $731 = (($730) - 1)|0;
        $732 = $729 ? 0 : $731;
        $733 = (+($732|0));
        $734 = $20;
        $735 = $733 * $734;
        $736 = ((($53)) + 4|0);
        HEAPF32[$736>>2] = $735;
        $737 = $17;
        $738 = $44;
        $739 = $63;
        $740 = (($738) + ($739)|0);
        $741 = $61;
        $742 = $63;
        $743 = (($741) - ($742))|0;
        $744 = $20;
        _nk_text_calculate_text_bounds($73,$737,$740,$743,$744,$72,$70,$69,1);
        ;HEAP32[$71>>2]=HEAP32[$73>>2]|0;HEAP32[$71+4>>2]=HEAP32[$73+4>>2]|0;
        $745 = +HEAPF32[$71>>2];
        HEAPF32[$53>>2] = $745;
        $746 = $44;
        $747 = $61;
        $748 = (($746) + ($747)|0);
        $50 = $748;
       }
      } while(0);
      $749 = $51;
      $750 = ($749|0)!=(0|0);
      do {
       if (!($750)) {
        $751 = $14;
        $752 = ((($751)) + 92|0);
        $753 = HEAP32[$752>>2]|0;
        $754 = $14;
        $755 = ((($754)) + 96|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = ($753|0)!=($756|0);
        if (!($757)) {
         break;
        }
        $758 = $62;
        $759 = $56;
        $760 = ($758|0)==($759|0);
        if (!($760)) {
         break;
        }
        $761 = $47;
        $762 = (($761) - 1)|0;
        $763 = (+($762|0));
        $764 = $20;
        $765 = $763 * $764;
        $766 = ((($54)) + 4|0);
        HEAPF32[$766>>2] = $765;
        $767 = $17;
        $768 = $44;
        $769 = $63;
        $770 = (($768) + ($769)|0);
        $771 = $61;
        $772 = $63;
        $773 = (($771) - ($772))|0;
        $774 = $20;
        _nk_text_calculate_text_bounds($78,$767,$770,$773,$774,$77,$75,$74,1);
        ;HEAP32[$76>>2]=HEAP32[$78>>2]|0;HEAP32[$76+4>>2]=HEAP32[$78+4>>2]|0;
        $775 = +HEAPF32[$76>>2];
        HEAPF32[$54>>2] = $775;
        $776 = $44;
        $777 = $61;
        $778 = (($776) + ($777)|0);
        $51 = $778;
       }
      } while(0);
      $779 = HEAP32[$60>>2]|0;
      $780 = ($779|0)==(10);
      if ($780) {
       $781 = +HEAPF32[$48>>2];
       $782 = $57;
       $783 = $781 < $782;
       $784 = $57;
       $785 = +HEAPF32[$48>>2];
       $786 = $783 ? $784 : $785;
       HEAPF32[$48>>2] = $786;
       $787 = $47;
       $788 = (($787) + 1)|0;
       $47 = $788;
       $57 = 0.0;
       $789 = $61;
       $790 = (($789) + 1)|0;
       $61 = $790;
       $791 = $62;
       $792 = (($791) + 1)|0;
       $62 = $792;
       $793 = $61;
       $63 = $793;
       $794 = $44;
       $795 = $61;
       $796 = (($794) + ($795)|0);
       $797 = $45;
       $798 = $61;
       $799 = (($797) - ($798))|0;
       $800 = (_nk_utf_decode($796,$60,$799)|0);
       $59 = $800;
       $801 = $17;
       $802 = ((($801)) + 8|0);
       $803 = HEAP32[$802>>2]|0;
       $804 = $17;
       $805 = $17;
       $806 = ((($805)) + 4|0);
       $807 = +HEAPF32[$806>>2];
       $808 = $44;
       $809 = $61;
       $810 = (($808) + ($809)|0);
       $811 = $59;
       ;HEAP32[$$byval_copy25>>2]=HEAP32[$804>>2]|0;
       $812 = (+FUNCTION_TABLE_didii[$803 & 15]($$byval_copy25,$807,$810,$811));
       $58 = $812;
       continue;
      } else {
       $813 = $62;
       $814 = (($813) + 1)|0;
       $62 = $814;
       $815 = $59;
       $816 = $61;
       $817 = (($816) + ($815))|0;
       $61 = $817;
       $818 = $58;
       $819 = $57;
       $820 = $819 + $818;
       $57 = $820;
       $821 = $44;
       $822 = $61;
       $823 = (($821) + ($822)|0);
       $824 = $45;
       $825 = $61;
       $826 = (($824) - ($825))|0;
       $827 = (_nk_utf_decode($823,$60,$826)|0);
       $59 = $827;
       $828 = $17;
       $829 = ((($828)) + 8|0);
       $830 = HEAP32[$829>>2]|0;
       $831 = $17;
       $832 = $17;
       $833 = ((($832)) + 4|0);
       $834 = +HEAPF32[$833>>2];
       $835 = $44;
       $836 = $61;
       $837 = (($835) + ($836)|0);
       $838 = $59;
       ;HEAP32[$$byval_copy26>>2]=HEAP32[$831>>2]|0;
       $839 = (+FUNCTION_TABLE_didii[$830 & 15]($$byval_copy26,$834,$837,$838));
       $58 = $839;
       continue;
      }
     }
     $840 = $47;
     $841 = (+($840|0));
     $842 = $20;
     $843 = $841 * $842;
     $844 = ((($48)) + 4|0);
     HEAPF32[$844>>2] = $843;
     $845 = $49;
     $846 = ($845|0)!=(0|0);
     if ($846) {
      break;
     }
     $847 = $14;
     $848 = ((($847)) + 88|0);
     $849 = HEAP32[$848>>2]|0;
     $850 = $14;
     $851 = ((($850)) + 12|0);
     $852 = ((($851)) + 60|0);
     $853 = HEAP32[$852>>2]|0;
     $854 = ($849|0)==($853|0);
     if (!($854)) {
      break;
     }
     $855 = $57;
     HEAPF32[$52>>2] = $855;
     $856 = ((($48)) + 4|0);
     $857 = +HEAPF32[$856>>2];
     $858 = $20;
     $859 = $857 - $858;
     $860 = ((($52)) + 4|0);
     HEAPF32[$860>>2] = $859;
    }
   } while(0);
   $861 = $24;
   $862 = ($861<<24>>24)!=(0);
   do {
    if ($862) {
     $863 = $12;
     $864 = $863 & 256;
     $865 = ($864|0)!=(0);
     do {
      if ($865) {
       $902 = $14;
       $903 = ((($902)) + 80|0);
       HEAPF32[$903>>2] = 0.0;
      } else {
       $866 = ((($18)) + 8|0);
       $867 = +HEAPF32[$866>>2];
       $868 = $867 * 0.25;
       $79 = $868;
       $869 = +HEAPF32[$52>>2];
       $870 = $14;
       $871 = ((($870)) + 80|0);
       $872 = +HEAPF32[$871>>2];
       $873 = $869 < $872;
       if ($873) {
        $874 = +HEAPF32[$52>>2];
        $875 = $79;
        $876 = $874 - $875;
        $877 = 0.0 < $876;
        if ($877) {
         $878 = +HEAPF32[$52>>2];
         $879 = $79;
         $880 = $878 - $879;
         $882 = $880;
        } else {
         $882 = 0.0;
        }
        $881 = (~~(($882)));
        $883 = (+($881|0));
        $884 = $14;
        $885 = ((($884)) + 80|0);
        HEAPF32[$885>>2] = $883;
       }
       $886 = +HEAPF32[$52>>2];
       $887 = $14;
       $888 = ((($887)) + 80|0);
       $889 = +HEAPF32[$888>>2];
       $890 = ((($18)) + 8|0);
       $891 = +HEAPF32[$890>>2];
       $892 = $889 + $891;
       $893 = $886 >= $892;
       if (!($893)) {
        break;
       }
       $894 = +HEAPF32[$52>>2];
       $895 = 0.0 < $894;
       $896 = +HEAPF32[$52>>2];
       $897 = $895 ? $896 : 0.0;
       $898 = (~~(($897)));
       $899 = (+($898|0));
       $900 = $14;
       $901 = ((($900)) + 80|0);
       HEAPF32[$901>>2] = $899;
      }
     } while(0);
     $904 = $12;
     $905 = $904 & 2048;
     $906 = ($905|0)!=(0);
     if (!($906)) {
      $946 = $14;
      $947 = ((($946)) + 80|0);
      $948 = ((($947)) + 4|0);
      HEAPF32[$948>>2] = 0.0;
      break;
     }
     $907 = ((($52)) + 4|0);
     $908 = +HEAPF32[$907>>2];
     $909 = $14;
     $910 = ((($909)) + 80|0);
     $911 = ((($910)) + 4|0);
     $912 = +HEAPF32[$911>>2];
     $913 = $908 < $912;
     if ($913) {
      $914 = ((($52)) + 4|0);
      $915 = +HEAPF32[$914>>2];
      $916 = $20;
      $917 = $915 - $916;
      $918 = 0.0 < $917;
      if ($918) {
       $919 = ((($52)) + 4|0);
       $920 = +HEAPF32[$919>>2];
       $921 = $20;
       $922 = $920 - $921;
       $926 = $922;
      } else {
       $926 = 0.0;
      }
      $923 = $14;
      $924 = ((($923)) + 80|0);
      $925 = ((($924)) + 4|0);
      HEAPF32[$925>>2] = $926;
     }
     $927 = ((($52)) + 4|0);
     $928 = +HEAPF32[$927>>2];
     $929 = $14;
     $930 = ((($929)) + 80|0);
     $931 = ((($930)) + 4|0);
     $932 = +HEAPF32[$931>>2];
     $933 = ((($18)) + 12|0);
     $934 = +HEAPF32[$933>>2];
     $935 = $932 + $934;
     $936 = $928 >= $935;
     if (!($936)) {
      break;
     }
     $937 = $14;
     $938 = ((($937)) + 80|0);
     $939 = ((($938)) + 4|0);
     $940 = +HEAPF32[$939>>2];
     $941 = $20;
     $942 = $940 + $941;
     $943 = $14;
     $944 = ((($943)) + 80|0);
     $945 = ((($944)) + 4|0);
     HEAPF32[$945>>2] = $942;
    }
   } while(0);
   $949 = $12;
   $950 = $949 & 2048;
   $951 = ($950|0)!=(0);
   if ($951) {
    ;HEAP32[$81>>2]=HEAP32[$18>>2]|0;HEAP32[$81+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$18+12>>2]|0;
    $952 = +HEAPF32[$2>>2];
    $953 = ((($2)) + 8|0);
    $954 = +HEAPF32[$953>>2];
    $955 = $952 + $954;
    $956 = $15;
    $957 = ((($956)) + 540|0);
    $958 = +HEAPF32[$957>>2];
    $959 = $955 - $958;
    $960 = $15;
    $961 = ((($960)) + 552|0);
    $962 = +HEAPF32[$961>>2];
    $963 = $959 - $962;
    HEAPF32[$81>>2] = $963;
    $964 = $15;
    $965 = ((($964)) + 552|0);
    $966 = +HEAPF32[$965>>2];
    $967 = ((($81)) + 8|0);
    HEAPF32[$967>>2] = $966;
    $968 = $14;
    $969 = ((($968)) + 80|0);
    $970 = ((($969)) + 4|0);
    $971 = +HEAPF32[$970>>2];
    $83 = $971;
    $972 = ((($81)) + 12|0);
    $973 = +HEAPF32[$972>>2];
    $974 = $973 * 0.10000000149011612;
    $84 = $974;
    $975 = ((($81)) + 12|0);
    $976 = +HEAPF32[$975>>2];
    $977 = $976 * 0.0099999997764825821;
    $85 = $977;
    $978 = ((($48)) + 4|0);
    $979 = +HEAPF32[$978>>2];
    $82 = $979;
    $980 = $11;
    $981 = $83;
    $982 = $82;
    $983 = $84;
    $984 = $85;
    $985 = $15;
    $986 = ((($985)) + 64|0);
    $987 = $16;
    $988 = $17;
    ;HEAP32[$$byval_copy27>>2]=HEAP32[$81>>2]|0;HEAP32[$$byval_copy27+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$$byval_copy27+8>>2]=HEAP32[$81+8>>2]|0;HEAP32[$$byval_copy27+12>>2]=HEAP32[$81+12>>2]|0;
    $989 = (+_nk_do_scrollbarv($80,$980,$$byval_copy27,0,$981,$982,$983,$984,$986,$987,$988));
    $990 = $14;
    $991 = ((($990)) + 80|0);
    $992 = ((($991)) + 4|0);
    HEAPF32[$992>>2] = $989;
   }
   $993 = $11;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy28+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy28+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$byval_copy28+12>>2]=HEAP32[$26+12>>2]|0;
   _nk_push_scissor($993,$$byval_copy28);
   $994 = $10;
   $995 = HEAP32[$994>>2]|0;
   $996 = $995 & 32;
   $997 = ($996|0)!=(0);
   do {
    if ($997) {
     $998 = $15;
     $999 = ((($998)) + 40|0);
     $92 = $999;
     $1000 = $15;
     $1001 = ((($1000)) + 520|0);
     ;HEAP8[$87>>0]=HEAP8[$1001>>0]|0;HEAP8[$87+1>>0]=HEAP8[$1001+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$1001+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$1001+3>>0]|0;
     $1002 = $15;
     $1003 = ((($1002)) + 536|0);
     ;HEAP8[$89>>0]=HEAP8[$1003>>0]|0;HEAP8[$89+1>>0]=HEAP8[$1003+1>>0]|0;HEAP8[$89+2>>0]=HEAP8[$1003+2>>0]|0;HEAP8[$89+3>>0]=HEAP8[$1003+3>>0]|0;
     $1004 = $15;
     $1005 = ((($1004)) + 528|0);
     ;HEAP8[$88>>0]=HEAP8[$1005>>0]|0;HEAP8[$88+1>>0]=HEAP8[$1005+1>>0]|0;HEAP8[$88+2>>0]=HEAP8[$1005+2>>0]|0;HEAP8[$88+3>>0]=HEAP8[$1005+3>>0]|0;
     $1006 = $15;
     $1007 = ((($1006)) + 500|0);
     ;HEAP8[$90>>0]=HEAP8[$1007>>0]|0;HEAP8[$90+1>>0]=HEAP8[$1007+1>>0]|0;HEAP8[$90+2>>0]=HEAP8[$1007+2>>0]|0;HEAP8[$90+3>>0]=HEAP8[$1007+3>>0]|0;
     $1008 = $15;
     $1009 = ((($1008)) + 508|0);
     ;HEAP8[$91>>0]=HEAP8[$1009>>0]|0;HEAP8[$91+1>>0]=HEAP8[$1009+1>>0]|0;HEAP8[$91+2>>0]=HEAP8[$1009+2>>0]|0;HEAP8[$91+3>>0]=HEAP8[$1009+3>>0]|0;
    } else {
     $1010 = $10;
     $1011 = HEAP32[$1010>>2]|0;
     $1012 = $1011 & 16;
     $1013 = ($1012|0)!=(0);
     $1014 = $15;
     if ($1013) {
      $1015 = ((($1014)) + 20|0);
      $92 = $1015;
      $1016 = $15;
      $1017 = ((($1016)) + 516|0);
      ;HEAP8[$87>>0]=HEAP8[$1017>>0]|0;HEAP8[$87+1>>0]=HEAP8[$1017+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$1017+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$1017+3>>0]|0;
      $1018 = $15;
      $1019 = ((($1018)) + 536|0);
      ;HEAP8[$89>>0]=HEAP8[$1019>>0]|0;HEAP8[$89+1>>0]=HEAP8[$1019+1>>0]|0;HEAP8[$89+2>>0]=HEAP8[$1019+2>>0]|0;HEAP8[$89+3>>0]=HEAP8[$1019+3>>0]|0;
      $1020 = $15;
      $1021 = ((($1020)) + 528|0);
      ;HEAP8[$88>>0]=HEAP8[$1021>>0]|0;HEAP8[$88+1>>0]=HEAP8[$1021+1>>0]|0;HEAP8[$88+2>>0]=HEAP8[$1021+2>>0]|0;HEAP8[$88+3>>0]=HEAP8[$1021+3>>0]|0;
      $1022 = $15;
      $1023 = ((($1022)) + 508|0);
      ;HEAP8[$91>>0]=HEAP8[$1023>>0]|0;HEAP8[$91+1>>0]=HEAP8[$1023+1>>0]|0;HEAP8[$91+2>>0]=HEAP8[$1023+2>>0]|0;HEAP8[$91+3>>0]=HEAP8[$1023+3>>0]|0;
      $1024 = $15;
      $1025 = ((($1024)) + 500|0);
      ;HEAP8[$90>>0]=HEAP8[$1025>>0]|0;HEAP8[$90+1>>0]=HEAP8[$1025+1>>0]|0;HEAP8[$90+2>>0]=HEAP8[$1025+2>>0]|0;HEAP8[$90+3>>0]=HEAP8[$1025+3>>0]|0;
      break;
     } else {
      $92 = $1014;
      $1026 = $15;
      $1027 = ((($1026)) + 512|0);
      ;HEAP8[$87>>0]=HEAP8[$1027>>0]|0;HEAP8[$87+1>>0]=HEAP8[$1027+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$1027+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$1027+3>>0]|0;
      $1028 = $15;
      $1029 = ((($1028)) + 532|0);
      ;HEAP8[$89>>0]=HEAP8[$1029>>0]|0;HEAP8[$89+1>>0]=HEAP8[$1029+1>>0]|0;HEAP8[$89+2>>0]=HEAP8[$1029+2>>0]|0;HEAP8[$89+3>>0]=HEAP8[$1029+3>>0]|0;
      $1030 = $15;
      $1031 = ((($1030)) + 524|0);
      ;HEAP8[$88>>0]=HEAP8[$1031>>0]|0;HEAP8[$88+1>>0]=HEAP8[$1031+1>>0]|0;HEAP8[$88+2>>0]=HEAP8[$1031+2>>0]|0;HEAP8[$88+3>>0]=HEAP8[$1031+3>>0]|0;
      $1032 = $15;
      $1033 = ((($1032)) + 496|0);
      ;HEAP8[$90>>0]=HEAP8[$1033>>0]|0;HEAP8[$90+1>>0]=HEAP8[$1033+1>>0]|0;HEAP8[$90+2>>0]=HEAP8[$1033+2>>0]|0;HEAP8[$90+3>>0]=HEAP8[$1033+3>>0]|0;
      $1034 = $15;
      $1035 = ((($1034)) + 504|0);
      ;HEAP8[$91>>0]=HEAP8[$1035>>0]|0;HEAP8[$91+1>>0]=HEAP8[$1035+1>>0]|0;HEAP8[$91+2>>0]=HEAP8[$1035+2>>0]|0;HEAP8[$91+3>>0]=HEAP8[$1035+3>>0]|0;
      break;
     }
    }
   } while(0);
   $1036 = $92;
   $1037 = HEAP32[$1036>>2]|0;
   $1038 = ($1037|0)==(1);
   if ($1038) {
    _nk_rgba($93,0,0,0,0);
    ;HEAP8[$86>>0]=HEAP8[$93>>0]|0;HEAP8[$86+1>>0]=HEAP8[$93+1>>0]|0;HEAP8[$86+2>>0]=HEAP8[$93+2>>0]|0;HEAP8[$86+3>>0]=HEAP8[$93+3>>0]|0;
   } else {
    $1039 = $92;
    $1040 = ((($1039)) + 4|0);
    ;HEAP8[$86>>0]=HEAP8[$1040>>0]|0;HEAP8[$86+1>>0]=HEAP8[$1040+1>>0]|0;HEAP8[$86+2>>0]=HEAP8[$1040+2>>0]|0;HEAP8[$86+3>>0]=HEAP8[$1040+3>>0]|0;
   }
   $1041 = $14;
   $1042 = ((($1041)) + 92|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = $14;
   $1045 = ((($1044)) + 96|0);
   $1046 = HEAP32[$1045>>2]|0;
   $1047 = ($1043|0)==($1046|0);
   $1048 = $14;
   do {
    if ($1047) {
     $1049 = ((($1048)) + 12|0);
     $1050 = (_nk_str_get_const($1049)|0);
     $94 = $1050;
     $1051 = $14;
     $1052 = ((($1051)) + 12|0);
     $1053 = (_nk_str_len_char($1052)|0);
     $95 = $1053;
     $1054 = $11;
     $1055 = $15;
     $1056 = +HEAPF32[$18>>2];
     $1057 = $14;
     $1058 = ((($1057)) + 80|0);
     $1059 = +HEAPF32[$1058>>2];
     $1060 = $1056 - $1059;
     $1061 = ((($18)) + 4|0);
     $1062 = +HEAPF32[$1061>>2];
     $1063 = $14;
     $1064 = ((($1063)) + 80|0);
     $1065 = ((($1064)) + 4|0);
     $1066 = +HEAPF32[$1065>>2];
     $1067 = $1062 - $1066;
     $1068 = $94;
     $1069 = $95;
     $1070 = $20;
     $1071 = $17;
     ;HEAP8[$$byval_copy29>>0]=HEAP8[$86>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$86+3>>0]|0;
     ;HEAP8[$$byval_copy30>>0]=HEAP8[$87>>0]|0;HEAP8[$$byval_copy30+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$$byval_copy30+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$$byval_copy30+3>>0]=HEAP8[$87+3>>0]|0;
     _nk_edit_draw_text($1054,$1055,$1060,$1067,0.0,$1068,$1069,$1070,$1071,$$byval_copy29,$$byval_copy30,0);
    } else {
     $1072 = ((($1048)) + 92|0);
     $1073 = HEAP32[$1072>>2]|0;
     $1074 = $14;
     $1075 = ((($1074)) + 96|0);
     $1076 = HEAP32[$1075>>2]|0;
     $1077 = ($1073|0)!=($1076|0);
     $1078 = $55;
     $1079 = ($1078|0)>(0);
     $or$cond15 = $1077 & $1079;
     do {
      if ($or$cond15) {
       $1080 = $14;
       $1081 = ((($1080)) + 12|0);
       $1082 = (_nk_str_get_const($1081)|0);
       $96 = $1082;
       $1083 = $50;
       $1084 = ($1083|0)!=(0|0);
       if ($1084) {
        $1085 = $11;
        $1086 = $15;
        $1087 = +HEAPF32[$18>>2];
        $1088 = $14;
        $1089 = ((($1088)) + 80|0);
        $1090 = +HEAPF32[$1089>>2];
        $1091 = $1087 - $1090;
        $1092 = ((($18)) + 4|0);
        $1093 = +HEAPF32[$1092>>2];
        $1094 = $14;
        $1095 = ((($1094)) + 80|0);
        $1096 = ((($1095)) + 4|0);
        $1097 = +HEAPF32[$1096>>2];
        $1098 = $1093 - $1097;
        $1099 = $96;
        $1100 = $50;
        $1101 = $96;
        $1102 = $1100;
        $1103 = $1101;
        $1104 = (($1102) - ($1103))|0;
        $1105 = $20;
        $1106 = $17;
        ;HEAP8[$$byval_copy31>>0]=HEAP8[$86>>0]|0;HEAP8[$$byval_copy31+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$$byval_copy31+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$$byval_copy31+3>>0]=HEAP8[$86+3>>0]|0;
        ;HEAP8[$$byval_copy32>>0]=HEAP8[$87>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$87+3>>0]|0;
        _nk_edit_draw_text($1085,$1086,$1091,$1098,0.0,$1099,$1104,$1105,$1106,$$byval_copy31,$$byval_copy32,0);
        break;
       } else {
        ___assert_fail((24599|0),(1320|0),14528,(24581|0));
        // unreachable;
       }
      }
     } while(0);
     $1107 = $14;
     $1108 = ((($1107)) + 92|0);
     $1109 = HEAP32[$1108>>2]|0;
     $1110 = $14;
     $1111 = ((($1110)) + 96|0);
     $1112 = HEAP32[$1111>>2]|0;
     $1113 = ($1109|0)!=($1112|0);
     if ($1113) {
      $1114 = $50;
      $1115 = ($1114|0)!=(0|0);
      if (!($1115)) {
       ___assert_fail((24599|0),(1320|0),14535,(24581|0));
       // unreachable;
      }
      $1116 = $51;
      $1117 = ($1116|0)!=(0|0);
      if (!($1117)) {
       $1118 = $14;
       $1119 = ((($1118)) + 12|0);
       $1120 = (_nk_str_get_const($1119)|0);
       $97 = $1120;
       $1121 = $97;
       $1122 = $14;
       $1123 = ((($1122)) + 12|0);
       $1124 = (_nk_str_len_char($1123)|0);
       $1125 = (($1121) + ($1124)|0);
       $51 = $1125;
      }
      $1126 = $11;
      $1127 = $15;
      $1128 = +HEAPF32[$18>>2];
      $1129 = $14;
      $1130 = ((($1129)) + 80|0);
      $1131 = +HEAPF32[$1130>>2];
      $1132 = $1128 - $1131;
      $1133 = ((($18)) + 4|0);
      $1134 = +HEAPF32[$1133>>2];
      $1135 = ((($53)) + 4|0);
      $1136 = +HEAPF32[$1135>>2];
      $1137 = $1134 + $1136;
      $1138 = $14;
      $1139 = ((($1138)) + 80|0);
      $1140 = ((($1139)) + 4|0);
      $1141 = +HEAPF32[$1140>>2];
      $1142 = $1137 - $1141;
      $1143 = +HEAPF32[$53>>2];
      $1144 = $50;
      $1145 = $51;
      $1146 = $50;
      $1147 = $1145;
      $1148 = $1146;
      $1149 = (($1147) - ($1148))|0;
      $1150 = $20;
      $1151 = $17;
      ;HEAP8[$$byval_copy33>>0]=HEAP8[$88>>0]|0;HEAP8[$$byval_copy33+1>>0]=HEAP8[$88+1>>0]|0;HEAP8[$$byval_copy33+2>>0]=HEAP8[$88+2>>0]|0;HEAP8[$$byval_copy33+3>>0]=HEAP8[$88+3>>0]|0;
      ;HEAP8[$$byval_copy34>>0]=HEAP8[$89>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$89+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$89+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$89+3>>0]|0;
      _nk_edit_draw_text($1126,$1127,$1132,$1142,$1143,$1144,$1149,$1150,$1151,$$byval_copy33,$$byval_copy34,1);
     }
     $1152 = $14;
     $1153 = ((($1152)) + 92|0);
     $1154 = HEAP32[$1153>>2]|0;
     $1155 = $14;
     $1156 = ((($1155)) + 96|0);
     $1157 = HEAP32[$1156>>2]|0;
     $1158 = ($1154|0)!=($1157|0);
     if (!($1158)) {
      break;
     }
     $1159 = $56;
     $1160 = $14;
     $1161 = ((($1160)) + 12|0);
     $1162 = ((($1161)) + 60|0);
     $1163 = HEAP32[$1162>>2]|0;
     $1164 = ($1159|0)<($1163|0);
     if (!($1164)) {
      break;
     }
     $1165 = $51;
     $98 = $1165;
     $1166 = $14;
     $1167 = ((($1166)) + 12|0);
     $1168 = (_nk_str_get_const($1167)|0);
     $1169 = $14;
     $1170 = ((($1169)) + 12|0);
     $1171 = (_nk_str_len_char($1170)|0);
     $1172 = (($1168) + ($1171)|0);
     $99 = $1172;
     $1173 = $51;
     $1174 = ($1173|0)!=(0|0);
     if ($1174) {
      $1175 = $11;
      $1176 = $15;
      $1177 = +HEAPF32[$18>>2];
      $1178 = $14;
      $1179 = ((($1178)) + 80|0);
      $1180 = +HEAPF32[$1179>>2];
      $1181 = $1177 - $1180;
      $1182 = ((($18)) + 4|0);
      $1183 = +HEAPF32[$1182>>2];
      $1184 = ((($54)) + 4|0);
      $1185 = +HEAPF32[$1184>>2];
      $1186 = $1183 + $1185;
      $1187 = $14;
      $1188 = ((($1187)) + 80|0);
      $1189 = ((($1188)) + 4|0);
      $1190 = +HEAPF32[$1189>>2];
      $1191 = $1186 - $1190;
      $1192 = +HEAPF32[$54>>2];
      $1193 = $98;
      $1194 = $99;
      $1195 = $98;
      $1196 = $1194;
      $1197 = $1195;
      $1198 = (($1196) - ($1197))|0;
      $1199 = $20;
      $1200 = $17;
      ;HEAP8[$$byval_copy35>>0]=HEAP8[$86>>0]|0;HEAP8[$$byval_copy35+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$$byval_copy35+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$$byval_copy35+3>>0]=HEAP8[$86+3>>0]|0;
      ;HEAP8[$$byval_copy36>>0]=HEAP8[$87>>0]|0;HEAP8[$$byval_copy36+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$$byval_copy36+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$$byval_copy36+3>>0]=HEAP8[$87+3>>0]|0;
      _nk_edit_draw_text($1175,$1176,$1181,$1191,$1192,$1193,$1198,$1199,$1200,$$byval_copy35,$$byval_copy36,1);
      break;
     } else {
      ___assert_fail((24616|0),(1320|0),14554,(24581|0));
      // unreachable;
     }
    }
   } while(0);
   $1201 = $14;
   $1202 = ((($1201)) + 92|0);
   $1203 = HEAP32[$1202>>2]|0;
   $1204 = $14;
   $1205 = ((($1204)) + 96|0);
   $1206 = HEAP32[$1205>>2]|0;
   $1207 = ($1203|0)==($1206|0);
   if (!($1207)) {
    break;
   }
   $1208 = $14;
   $1209 = ((($1208)) + 88|0);
   $1210 = HEAP32[$1209>>2]|0;
   $1211 = $14;
   $1212 = ((($1211)) + 12|0);
   $1213 = (_nk_str_len($1212)|0);
   $1214 = ($1210|0)>=($1213|0);
   do {
    if (!($1214)) {
     $1215 = $49;
     $1216 = ($1215|0)!=(0|0);
     if ($1216) {
      $1217 = $49;
      $1218 = HEAP8[$1217>>0]|0;
      $1219 = $1218 << 24 >> 24;
      $1220 = ($1219|0)==(10);
      if ($1220) {
       break;
      }
     }
     $1257 = $49;
     $1258 = ($1257|0)!=(0|0);
     if ($1258) {
      $1259 = $49;
      $1260 = (_nk_utf_decode($1259,$104,4)|0);
      $101 = $1260;
      $1261 = +HEAPF32[$18>>2];
      $1262 = +HEAPF32[$52>>2];
      $1263 = $1261 + $1262;
      $1264 = $14;
      $1265 = ((($1264)) + 80|0);
      $1266 = +HEAPF32[$1265>>2];
      $1267 = $1263 - $1266;
      HEAPF32[$102>>2] = $1267;
      $1268 = ((($18)) + 4|0);
      $1269 = +HEAPF32[$1268>>2];
      $1270 = ((($52)) + 4|0);
      $1271 = +HEAPF32[$1270>>2];
      $1272 = $1269 + $1271;
      $1273 = $14;
      $1274 = ((($1273)) + 80|0);
      $1275 = ((($1274)) + 4|0);
      $1276 = +HEAPF32[$1275>>2];
      $1277 = $1272 - $1276;
      $1278 = ((($102)) + 4|0);
      HEAPF32[$1278>>2] = $1277;
      $1279 = $17;
      $1280 = ((($1279)) + 8|0);
      $1281 = HEAP32[$1280>>2]|0;
      $1282 = $17;
      $1283 = $17;
      $1284 = ((($1283)) + 4|0);
      $1285 = +HEAPF32[$1284>>2];
      $1286 = $49;
      $1287 = $101;
      ;HEAP32[$$byval_copy39>>2]=HEAP32[$1282>>2]|0;
      $1288 = (+FUNCTION_TABLE_didii[$1281 & 15]($$byval_copy39,$1285,$1286,$1287));
      $1289 = ((($102)) + 8|0);
      HEAPF32[$1289>>2] = $1288;
      $1290 = $20;
      $1291 = ((($102)) + 12|0);
      HEAPF32[$1291>>2] = $1290;
      _nk_vec2($105,0.0,0.0);
      ;HEAP32[$103>>2]=HEAP32[$105>>2]|0;HEAP32[$103+4>>2]=HEAP32[$105+4>>2]|0;
      $1292 = ((($103)) + 8|0);
      ;HEAP8[$1292>>0]=HEAP8[$90>>0]|0;HEAP8[$1292+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$1292+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$1292+3>>0]=HEAP8[$90+3>>0]|0;
      $1293 = ((($103)) + 12|0);
      ;HEAP8[$1293>>0]=HEAP8[$91>>0]|0;HEAP8[$1293+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$1293+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$1293+3>>0]=HEAP8[$91+3>>0]|0;
      $1294 = $11;
      ;HEAP32[$$byval_copy40>>2]=HEAP32[$102>>2]|0;HEAP32[$$byval_copy40+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$$byval_copy40+8>>2]=HEAP32[$102+8>>2]|0;HEAP32[$$byval_copy40+12>>2]=HEAP32[$102+12>>2]|0;
      ;HEAP8[$$byval_copy41>>0]=HEAP8[$90>>0]|0;HEAP8[$$byval_copy41+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$$byval_copy41+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$$byval_copy41+3>>0]=HEAP8[$90+3>>0]|0;
      _nk_fill_rect($1294,$$byval_copy40,0.0,$$byval_copy41);
      $1295 = $11;
      $1296 = $49;
      $1297 = $101;
      $1298 = $17;
      ;HEAP32[$$byval_copy42>>2]=HEAP32[$102>>2]|0;HEAP32[$$byval_copy42+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$$byval_copy42+8>>2]=HEAP32[$102+8>>2]|0;HEAP32[$$byval_copy42+12>>2]=HEAP32[$102+12>>2]|0;
      _nk_widget_text($1295,$$byval_copy42,$1296,$1297,$103,17,$1298);
      break L139;
     } else {
      ___assert_fail((24631|0),(1320|0),14584,(24581|0));
      // unreachable;
     }
    }
   } while(0);
   $1221 = $15;
   $1222 = ((($1221)) + 548|0);
   $1223 = +HEAPF32[$1222>>2];
   $1224 = ((($100)) + 8|0);
   HEAPF32[$1224>>2] = $1223;
   $1225 = $17;
   $1226 = ((($1225)) + 4|0);
   $1227 = +HEAPF32[$1226>>2];
   $1228 = ((($100)) + 12|0);
   HEAPF32[$1228>>2] = $1227;
   $1229 = +HEAPF32[$18>>2];
   $1230 = +HEAPF32[$52>>2];
   $1231 = $1229 + $1230;
   $1232 = $14;
   $1233 = ((($1232)) + 80|0);
   $1234 = +HEAPF32[$1233>>2];
   $1235 = $1231 - $1234;
   HEAPF32[$100>>2] = $1235;
   $1236 = ((($18)) + 4|0);
   $1237 = +HEAPF32[$1236>>2];
   $1238 = ((($52)) + 4|0);
   $1239 = +HEAPF32[$1238>>2];
   $1240 = $1237 + $1239;
   $1241 = $20;
   $1242 = $1241 / 2.0;
   $1243 = $1240 + $1242;
   $1244 = ((($100)) + 12|0);
   $1245 = +HEAPF32[$1244>>2];
   $1246 = $1245 / 2.0;
   $1247 = $1243 - $1246;
   $1248 = ((($100)) + 4|0);
   HEAPF32[$1248>>2] = $1247;
   $1249 = $14;
   $1250 = ((($1249)) + 80|0);
   $1251 = ((($1250)) + 4|0);
   $1252 = +HEAPF32[$1251>>2];
   $1253 = ((($100)) + 4|0);
   $1254 = +HEAPF32[$1253>>2];
   $1255 = $1254 - $1252;
   HEAPF32[$1253>>2] = $1255;
   $1256 = $11;
   ;HEAP32[$$byval_copy37>>2]=HEAP32[$100>>2]|0;HEAP32[$$byval_copy37+4>>2]=HEAP32[$100+4>>2]|0;HEAP32[$$byval_copy37+8>>2]=HEAP32[$100+8>>2]|0;HEAP32[$$byval_copy37+12>>2]=HEAP32[$100+12>>2]|0;
   ;HEAP8[$$byval_copy38>>0]=HEAP8[$90>>0]|0;HEAP8[$$byval_copy38+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$$byval_copy38+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$$byval_copy38+3>>0]=HEAP8[$90+3>>0]|0;
   _nk_fill_rect($1256,$$byval_copy37,0.0,$$byval_copy38);
  } else {
   $1299 = $14;
   $1300 = ((($1299)) + 12|0);
   $1301 = (_nk_str_len_char($1300)|0);
   $106 = $1301;
   $1302 = $14;
   $1303 = ((($1302)) + 12|0);
   $1304 = (_nk_str_get_const($1303)|0);
   $107 = $1304;
   $1305 = $11;
   ;HEAP32[$$byval_copy43>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy43+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy43+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$byval_copy43+12>>2]=HEAP32[$26+12>>2]|0;
   _nk_push_scissor($1305,$$byval_copy43);
   $1306 = $10;
   $1307 = HEAP32[$1306>>2]|0;
   $1308 = $1307 & 32;
   $1309 = ($1308|0)!=(0);
   do {
    if ($1309) {
     $1310 = $15;
     $1311 = ((($1310)) + 40|0);
     $108 = $1311;
     $1312 = $15;
     $1313 = ((($1312)) + 520|0);
     ;HEAP8[$110>>0]=HEAP8[$1313>>0]|0;HEAP8[$110+1>>0]=HEAP8[$1313+1>>0]|0;HEAP8[$110+2>>0]=HEAP8[$1313+2>>0]|0;HEAP8[$110+3>>0]=HEAP8[$1313+3>>0]|0;
    } else {
     $1314 = $10;
     $1315 = HEAP32[$1314>>2]|0;
     $1316 = $1315 & 16;
     $1317 = ($1316|0)!=(0);
     $1318 = $15;
     if ($1317) {
      $1319 = ((($1318)) + 20|0);
      $108 = $1319;
      $1320 = $15;
      $1321 = ((($1320)) + 516|0);
      ;HEAP8[$110>>0]=HEAP8[$1321>>0]|0;HEAP8[$110+1>>0]=HEAP8[$1321+1>>0]|0;HEAP8[$110+2>>0]=HEAP8[$1321+2>>0]|0;HEAP8[$110+3>>0]=HEAP8[$1321+3>>0]|0;
      break;
     } else {
      $108 = $1318;
      $1322 = $15;
      $1323 = ((($1322)) + 512|0);
      ;HEAP8[$110>>0]=HEAP8[$1323>>0]|0;HEAP8[$110+1>>0]=HEAP8[$1323+1>>0]|0;HEAP8[$110+2>>0]=HEAP8[$1323+2>>0]|0;HEAP8[$110+3>>0]=HEAP8[$1323+3>>0]|0;
      break;
     }
    }
   } while(0);
   $1324 = $108;
   $1325 = HEAP32[$1324>>2]|0;
   $1326 = ($1325|0)==(1);
   if ($1326) {
    _nk_rgba($111,0,0,0,0);
    ;HEAP8[$109>>0]=HEAP8[$111>>0]|0;HEAP8[$109+1>>0]=HEAP8[$111+1>>0]|0;HEAP8[$109+2>>0]=HEAP8[$111+2>>0]|0;HEAP8[$109+3>>0]=HEAP8[$111+3>>0]|0;
   } else {
    $1327 = $108;
    $1328 = ((($1327)) + 4|0);
    ;HEAP8[$109>>0]=HEAP8[$1328>>0]|0;HEAP8[$109+1>>0]=HEAP8[$1328+1>>0]|0;HEAP8[$109+2>>0]=HEAP8[$1328+2>>0]|0;HEAP8[$109+3>>0]=HEAP8[$1328+3>>0]|0;
   }
   $1329 = $11;
   $1330 = $15;
   $1331 = +HEAPF32[$18>>2];
   $1332 = $14;
   $1333 = ((($1332)) + 80|0);
   $1334 = +HEAPF32[$1333>>2];
   $1335 = $1331 - $1334;
   $1336 = ((($18)) + 4|0);
   $1337 = +HEAPF32[$1336>>2];
   $1338 = $14;
   $1339 = ((($1338)) + 80|0);
   $1340 = ((($1339)) + 4|0);
   $1341 = +HEAPF32[$1340>>2];
   $1342 = $1337 - $1341;
   $1343 = $107;
   $1344 = $106;
   $1345 = $20;
   $1346 = $17;
   ;HEAP8[$$byval_copy44>>0]=HEAP8[$109>>0]|0;HEAP8[$$byval_copy44+1>>0]=HEAP8[$109+1>>0]|0;HEAP8[$$byval_copy44+2>>0]=HEAP8[$109+2>>0]|0;HEAP8[$$byval_copy44+3>>0]=HEAP8[$109+3>>0]|0;
   ;HEAP8[$$byval_copy45>>0]=HEAP8[$110>>0]|0;HEAP8[$$byval_copy45+1>>0]=HEAP8[$110+1>>0]|0;HEAP8[$$byval_copy45+2>>0]=HEAP8[$110+2>>0]|0;HEAP8[$$byval_copy45+3>>0]=HEAP8[$110+3>>0]|0;
   _nk_edit_draw_text($1329,$1330,$1335,$1342,0.0,$1343,$1344,$1345,$1346,$$byval_copy44,$$byval_copy45,0);
  }
 } while(0);
 $1347 = $11;
 ;HEAP32[$$byval_copy46>>2]=HEAP32[$25>>2]|0;HEAP32[$$byval_copy46+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$$byval_copy46+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$$byval_copy46+12>>2]=HEAP32[$25+12>>2]|0;
 _nk_push_scissor($1347,$$byval_copy46);
 $1348 = $19;
 $9 = $1348;
 $1349 = $9;
 STACKTOP = sp;return ($1349|0);
}
function _nk_property_int($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $14 = sp + 40|0;
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((2989|0),(1320|0),19869,(20048|0));
  // unreachable;
 }
 $18 = $8;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((18708|0),(1320|0),19870,(20048|0));
  // unreachable;
 }
 $20 = $10;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((20064|0),(1320|0),19871,(20048|0));
  // unreachable;
 }
 $22 = $7;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $7;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 $28 = $8;
 $29 = ($28|0)!=(0|0);
 $or$cond = $27 & $29;
 $30 = $10;
 $31 = ($30|0)!=(0|0);
 $or$cond3 = $or$cond & $31;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $32 = $10;
 $33 = HEAP32[$32>>2]|0;
 $34 = $9;
 $35 = $11;
 $36 = $12;
 _nk_property_variant_int($15,$33,$34,$35,$36);
 dest=$14; src=$15; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $37 = $7;
 $38 = $8;
 $39 = $13;
 _nk_property($37,$38,$14,$39,0);
 $40 = ((($14)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $10;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function _nk_property_variant_int($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 HEAP32[$9>>2] = 0;
 $10 = $5;
 $11 = ((($9)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = $6;
 $13 = ((($9)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = $7;
 $15 = ((($9)) + 24|0);
 HEAP32[$15>>2] = $14;
 $16 = $8;
 $17 = ((($9)) + 32|0);
 HEAP32[$17>>2] = $16;
 dest=$0; src=$9; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _nk_property($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 96|0;
 $14 = sp + 40|0;
 $22 = sp + 112|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = 0;
 $17 = 0;
 $18 = 0;
 $19 = 0;
 $20 = 0;
 HEAP32[$23>>2] = 0;
 HEAP32[$24>>2] = 0;
 HEAP32[$25>>2] = 0;
 $26 = $5;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((2989|0),(1320|0),19801,(24660|0));
  // unreachable;
 }
 $28 = $5;
 $29 = ((($28)) + 12908|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((19010|0),(1320|0),19802,(24660|0));
  // unreachable;
 }
 $32 = $5;
 $33 = ((($32)) + 12908|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 140|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  ___assert_fail((18968|0),(1320|0),19803,(24660|0));
  // unreachable;
 }
 $38 = $5;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = $5;
 $41 = ((($40)) + 12908|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0|0);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $44 = $5;
 $45 = ((($44)) + 12908|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 140|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = $5;
 $51 = ((($50)) + 12908|0);
 $52 = HEAP32[$51>>2]|0;
 $10 = $52;
 $53 = $10;
 $54 = ((($53)) + 140|0);
 $55 = HEAP32[$54>>2]|0;
 $11 = $55;
 $56 = $5;
 $57 = ((($56)) + 340|0);
 $13 = $57;
 $58 = $5;
 $59 = (_nk_widget($14,$58)|0);
 $15 = $59;
 $60 = $15;
 $61 = ($60|0)!=(0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $15;
 $63 = ($62|0)==(2);
 if ($63) {
  $70 = 0;
 } else {
  $64 = $11;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2048;
  $68 = ($67|0)!=(0);
  if ($68) {
   $70 = 0;
  } else {
   $69 = $5;
   $70 = $69;
  }
 }
 $12 = $70;
 $71 = $6;
 $72 = HEAP8[$71>>0]|0;
 $73 = $72 << 24 >> 24;
 $74 = ($73|0)==(35);
 $75 = $6;
 $76 = $6;
 $77 = (_nk_strlen($76)|0);
 if ($74) {
  $78 = $10;
  $79 = ((($78)) + 148|0);
  $80 = ((($79)) + 84|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 1)|0;
  HEAP32[$80>>2] = $82;
  $83 = (_nk_murmur_hash($75,$77,$81)|0);
  $17 = $83;
  $84 = $6;
  $85 = ((($84)) + 1|0);
  $6 = $85;
 } else {
  $86 = (_nk_murmur_hash($75,$77,42)|0);
  $17 = $86;
 }
 $87 = $10;
 $88 = ((($87)) + 148|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $17;
  $92 = $10;
  $93 = ((($92)) + 148|0);
  $94 = ((($93)) + 80|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($91|0)==($95|0);
  if ($96) {
   $97 = $10;
   $98 = ((($97)) + 148|0);
   $99 = ((($98)) + 8|0);
   $18 = $99;
   $100 = $10;
   $101 = ((($100)) + 148|0);
   $102 = ((($101)) + 72|0);
   $19 = $102;
   $103 = $10;
   $104 = ((($103)) + 148|0);
   $105 = ((($104)) + 76|0);
   $20 = $105;
   $106 = $10;
   $107 = ((($106)) + 148|0);
   $108 = ((($107)) + 92|0);
   $16 = $108;
  } else {
   label = 20;
  }
 } else {
  label = 20;
 }
 if ((label|0) == 20) {
  $18 = $22;
  $19 = $24;
  $20 = $25;
  $16 = $23;
 }
 $109 = $16;
 $110 = HEAP32[$109>>2]|0;
 $21 = $110;
 $111 = $5;
 $112 = ((($111)) + 5796|0);
 $113 = $10;
 $114 = ((($113)) + 100|0);
 $115 = $6;
 $116 = $7;
 $117 = $8;
 $118 = $18;
 $119 = $19;
 $120 = $16;
 $121 = $20;
 $122 = $13;
 $123 = ((($122)) + 1572|0);
 $124 = $9;
 $125 = $12;
 $126 = $13;
 $127 = HEAP32[$126>>2]|0;
 $128 = $5;
 $129 = ((($128)) + 7504|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$14+12>>2]|0;
 _nk_do_property($112,$114,$$byval_copy,$115,$116,$117,$118,$119,$120,$121,$123,$124,$125,$127,$129);
 $130 = $12;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = $16;
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)!=(0);
  if ($134) {
   $135 = $10;
   $136 = ((($135)) + 148|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($137|0)!=(0);
   if (!($138)) {
    $139 = $10;
    $140 = ((($139)) + 148|0);
    HEAP32[$140>>2] = 1;
    $141 = $10;
    $142 = ((($141)) + 148|0);
    $143 = ((($142)) + 8|0);
    $144 = $18;
    $145 = $19;
    $146 = HEAP32[$145>>2]|0;
    (_nk_memcopy($143,$144,$146)|0);
    $147 = $19;
    $148 = HEAP32[$147>>2]|0;
    $149 = $10;
    $150 = ((($149)) + 148|0);
    $151 = ((($150)) + 72|0);
    HEAP32[$151>>2] = $148;
    $152 = $20;
    $153 = HEAP32[$152>>2]|0;
    $154 = $10;
    $155 = ((($154)) + 148|0);
    $156 = ((($155)) + 76|0);
    HEAP32[$156>>2] = $153;
    $157 = $16;
    $158 = HEAP32[$157>>2]|0;
    $159 = $10;
    $160 = ((($159)) + 148|0);
    $161 = ((($160)) + 92|0);
    HEAP32[$161>>2] = $158;
    $162 = $17;
    $163 = $10;
    $164 = ((($163)) + 148|0);
    $165 = ((($164)) + 80|0);
    HEAP32[$165>>2] = $162;
    $166 = $16;
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==(2);
    if ($168) {
     $169 = $5;
     $170 = ((($169)) + 260|0);
     $171 = ((($170)) + 76|0);
     HEAP8[$171>>0] = 1;
     $172 = $5;
     $173 = ((($172)) + 260|0);
     $174 = ((($173)) + 77|0);
     HEAP8[$174>>0] = 1;
    }
   }
  }
 }
 $175 = $16;
 $176 = HEAP32[$175>>2]|0;
 $177 = ($176|0)==(0);
 $178 = $21;
 $179 = ($178|0)!=(0);
 $or$cond = $177 & $179;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $180 = $21;
 $181 = ($180|0)==(2);
 if ($181) {
  $182 = $5;
  $183 = ((($182)) + 260|0);
  $184 = ((($183)) + 76|0);
  HEAP8[$184>>0] = 0;
  $185 = $5;
  $186 = ((($185)) + 260|0);
  $187 = ((($186)) + 77|0);
  HEAP8[$187>>0] = 0;
  $188 = $5;
  $189 = ((($188)) + 260|0);
  $190 = ((($189)) + 78|0);
  HEAP8[$190>>0] = 1;
 }
 $191 = $10;
 $192 = ((($191)) + 148|0);
 HEAP32[$192>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_property_float($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $14 = sp + 40|0;
 $15 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((2989|0),(1320|0),19884,(20068|0));
  // unreachable;
 }
 $18 = $8;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((18708|0),(1320|0),19885,(20068|0));
  // unreachable;
 }
 $20 = $10;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((20064|0),(1320|0),19886,(20068|0));
  // unreachable;
 }
 $22 = $7;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $7;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 $28 = $8;
 $29 = ($28|0)!=(0|0);
 $or$cond = $27 & $29;
 $30 = $10;
 $31 = ($30|0)!=(0|0);
 $or$cond3 = $or$cond & $31;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $32 = $10;
 $33 = +HEAPF32[$32>>2];
 $34 = $9;
 $35 = $11;
 $36 = $12;
 _nk_property_variant_float($15,$33,$34,$35,$36);
 dest=$14; src=$15; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $37 = $7;
 $38 = $8;
 $39 = $13;
 _nk_property($37,$38,$14,$39,1);
 $40 = ((($14)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $10;
 HEAPF32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function _nk_property_variant_float($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 HEAP32[$9>>2] = 1;
 $10 = $5;
 $11 = ((($9)) + 8|0);
 HEAPF32[$11>>2] = $10;
 $12 = $6;
 $13 = ((($9)) + 16|0);
 HEAPF32[$13>>2] = $12;
 $14 = $7;
 $15 = ((($9)) + 24|0);
 HEAPF32[$15>>2] = $14;
 $16 = $8;
 $17 = ((($9)) + 32|0);
 HEAPF32[$17>>2] = $16;
 dest=$0; src=$9; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _nk_propertyi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $15 = sp + 40|0;
 $16 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $8;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((2989|0),(1320|0),19914,(20086|0));
  // unreachable;
 }
 $19 = $9;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((18708|0),(1320|0),19915,(20086|0));
  // unreachable;
 }
 $21 = $8;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $8;
  $24 = ((($23)) + 12908|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  $27 = $9;
  $28 = ($27|0)!=(0|0);
  $or$cond = $26 & $28;
  if ($or$cond) {
   $30 = $11;
   $31 = $10;
   $32 = $12;
   $33 = $13;
   _nk_property_variant_int($16,$30,$31,$32,$33);
   dest=$15; src=$16; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $34 = $8;
   $35 = $9;
   $36 = $14;
   _nk_property($34,$35,$15,$36,0);
   $37 = ((($15)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $11 = $38;
   $39 = $11;
   $7 = $39;
   $40 = $7;
   STACKTOP = sp;return ($40|0);
  }
 }
 $29 = $11;
 $7 = $29;
 $40 = $7;
 STACKTOP = sp;return ($40|0);
}
function _nk_color_pick($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy2 = sp + 80|0;
 $$byval_copy = sp + 64|0;
 $12 = sp + 8|0;
 $13 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2989|0),(1320|0),19971,(20099|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((20113|0),(1320|0),19972,(20099|0));
  // unreachable;
 }
 $18 = $4;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((19010|0),(1320|0),19973,(20099|0));
  // unreachable;
 }
 $22 = $4;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 140|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((18968|0),(1320|0),19974,(20099|0));
  // unreachable;
 }
 $28 = $4;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $4;
  $31 = ((($30)) + 12908|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   $34 = $4;
   $35 = ((($34)) + 12908|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 140|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0|0);
   $40 = $5;
   $41 = ($40|0)!=(0|0);
   $or$cond = $39 & $41;
   if ($or$cond) {
    $42 = $4;
    $43 = ((($42)) + 12908|0);
    $44 = HEAP32[$43>>2]|0;
    $7 = $44;
    $45 = $4;
    $46 = ((($45)) + 340|0);
    $9 = $46;
    $47 = $7;
    $48 = ((($47)) + 140|0);
    $49 = HEAP32[$48>>2]|0;
    $8 = $49;
    $50 = $4;
    $51 = (_nk_widget($12,$50)|0);
    $11 = $51;
    $52 = $11;
    $53 = ($52|0)!=(0);
    if (!($53)) {
     $3 = 0;
     $73 = $3;
     STACKTOP = sp;return ($73|0);
    }
    $54 = $11;
    $55 = ($54|0)==(2);
    if ($55) {
     $62 = 0;
    } else {
     $56 = $8;
     $57 = ((($56)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $58 & 2048;
     $60 = ($59|0)!=(0);
     if ($60) {
      $62 = 0;
     } else {
      $61 = $4;
      $62 = $61;
     }
    }
    $10 = $62;
    $63 = $4;
    $64 = ((($63)) + 5796|0);
    $65 = $7;
    $66 = ((($65)) + 100|0);
    $67 = $5;
    $68 = $6;
    _nk_vec2($13,0.0,0.0);
    $69 = $10;
    $70 = $9;
    $71 = HEAP32[$70>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$12+12>>2]|0;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$13+4>>2]|0;
    $72 = (_nk_do_color_picker($64,$66,$67,$68,$$byval_copy,$$byval_copy2,$69,$71)|0);
    $3 = $72;
    $73 = $3;
    STACKTOP = sp;return ($73|0);
   }
  }
 }
 $3 = 0;
 $73 = $3;
 STACKTOP = sp;return ($73|0);
}
function _nk_do_color_picker($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$byval_copy = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 88|0;
 $16 = sp + 40|0;
 $17 = sp + 24|0;
 $18 = sp + 8|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $6;
 $14 = $7;
 $15 = 0;
 $20 = $10;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((24177|0),(1320|0),15069,(24680|0));
  // unreachable;
 }
 $22 = $11;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((20113|0),(1320|0),15070,(24680|0));
  // unreachable;
 }
 $24 = $9;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((18268|0),(1320|0),15071,(24680|0));
  // unreachable;
 }
 $26 = $14;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((2240|0),(1320|0),15072,(24680|0));
  // unreachable;
 }
 $28 = $10;
 $29 = ($28|0)!=(0|0);
 $30 = $11;
 $31 = ($30|0)!=(0|0);
 $or$cond = $29 & $31;
 $32 = $9;
 $33 = ($32|0)!=(0|0);
 $or$cond3 = $or$cond & $33;
 $34 = $14;
 $35 = ($34|0)!=(0|0);
 $or$cond5 = $or$cond3 & $35;
 if ($or$cond5) {
  $37 = $14;
  $38 = ((($37)) + 4|0);
  $39 = +HEAPF32[$38>>2];
  $19 = $39;
  $40 = +HEAPF32[$5>>2];
  $41 = +HEAPF32[$4>>2];
  $42 = $41 + $40;
  HEAPF32[$4>>2] = $42;
  $43 = +HEAPF32[$5>>2];
  $44 = ((($4)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $45 + $43;
  HEAPF32[$44>>2] = $46;
  $47 = +HEAPF32[$5>>2];
  $48 = 2.0 * $47;
  $49 = ((($4)) + 8|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $50 - $48;
  HEAPF32[$49>>2] = $51;
  $52 = ((($5)) + 4|0);
  $53 = +HEAPF32[$52>>2];
  $54 = 2.0 * $53;
  $55 = ((($4)) + 12|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $56 - $54;
  HEAPF32[$55>>2] = $57;
  $58 = +HEAPF32[$4>>2];
  HEAPF32[$16>>2] = $58;
  $59 = ((($4)) + 4|0);
  $60 = +HEAPF32[$59>>2];
  $61 = ((($16)) + 4|0);
  HEAPF32[$61>>2] = $60;
  $62 = ((($4)) + 12|0);
  $63 = +HEAPF32[$62>>2];
  $64 = ((($16)) + 12|0);
  HEAPF32[$64>>2] = $63;
  $65 = ((($4)) + 8|0);
  $66 = +HEAPF32[$65>>2];
  $67 = +HEAPF32[$5>>2];
  $68 = 3.0 * $67;
  $69 = $19;
  $70 = 2.0 * $69;
  $71 = $68 + $70;
  $72 = $66 - $71;
  $73 = ((($16)) + 8|0);
  HEAPF32[$73>>2] = $72;
  $74 = $19;
  $75 = ((($17)) + 8|0);
  HEAPF32[$75>>2] = $74;
  $76 = ((($4)) + 4|0);
  $77 = +HEAPF32[$76>>2];
  $78 = ((($17)) + 4|0);
  HEAPF32[$78>>2] = $77;
  $79 = ((($16)) + 12|0);
  $80 = +HEAPF32[$79>>2];
  $81 = ((($17)) + 12|0);
  HEAPF32[$81>>2] = $80;
  $82 = +HEAPF32[$16>>2];
  $83 = ((($16)) + 8|0);
  $84 = +HEAPF32[$83>>2];
  $85 = $82 + $84;
  $86 = +HEAPF32[$5>>2];
  $87 = $85 + $86;
  HEAPF32[$17>>2] = $87;
  $88 = +HEAPF32[$17>>2];
  $89 = ((($17)) + 8|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $88 + $90;
  $92 = +HEAPF32[$5>>2];
  $93 = $91 + $92;
  HEAPF32[$18>>2] = $93;
  $94 = ((($4)) + 4|0);
  $95 = +HEAPF32[$94>>2];
  $96 = ((($18)) + 4|0);
  HEAPF32[$96>>2] = $95;
  $97 = $19;
  $98 = ((($18)) + 8|0);
  HEAPF32[$98>>2] = $97;
  $99 = ((($16)) + 12|0);
  $100 = +HEAPF32[$99>>2];
  $101 = ((($18)) + 12|0);
  HEAPF32[$101>>2] = $100;
  $102 = $9;
  $103 = $12;
  $104 = ($103|0)==(1);
  $$ = $104 ? $18 : 0;
  $105 = $11;
  $106 = $13;
  $107 = (_nk_color_picker_behavior($102,$4,$16,$17,$$,$105,$106)|0);
  $15 = $107;
  $108 = $10;
  $109 = $12;
  $110 = ($109|0)==(1);
  $111 = $110 ? $18 : 0;
  $112 = $11;
  ;HEAP8[$$byval_copy>>0]=HEAP8[$112>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$112+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$112+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$112+3>>0]|0;
  _nk_draw_color_picker($108,$16,$17,$111,$$byval_copy);
  $113 = $15;
  $8 = $113;
  $114 = $8;
  STACKTOP = sp;return ($114|0);
 } else {
  $36 = $15;
  $8 = $36;
  $114 = $8;
  STACKTOP = sp;return ($114|0);
 }
 return (0)|0;
}
function _nk_color_picker($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = $5;
 (_nk_color_pick($6,$2,$7)|0);
 ;HEAP8[$0>>0]=HEAP8[$2>>0]|0;HEAP8[$0+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$2+3>>0]|0;
 STACKTOP = sp;return;
}
function _nk_chart_begin_colored($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0;
 var $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0;
 var $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0;
 var $nk_white$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy5 = sp + 160|0;
 $$byval_copy4 = sp + 136|0;
 $$byval_copy3 = sp + 120|0;
 $$byval_copy2 = sp + 156|0;
 $$byval_copy1 = sp + 104|0;
 $nk_white$byval_copy = sp + 152|0;
 $$byval_copy = sp + 88|0;
 $18 = sp + 24|0;
 $20 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP32[$18+12>>2]=0|0;
 $21 = $8;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((2989|0),(1320|0),20014,(20119|0));
  // unreachable;
 }
 $23 = $8;
 $24 = ((($23)) + 12908|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((19010|0),(1320|0),20015,(20119|0));
  // unreachable;
 }
 $27 = $8;
 $28 = ((($27)) + 12908|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 140|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  ___assert_fail((18968|0),(1320|0),20016,(20119|0));
  // unreachable;
 }
 $33 = $8;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $8;
  $36 = ((($35)) + 12908|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0|0);
  if ($38) {
   $39 = $8;
   $40 = ((($39)) + 12908|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 140|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)!=(0|0);
   if ($44) {
    $45 = $8;
    $46 = (_nk_widget($18,$45)|0);
    $47 = ($46|0)!=(0);
    $48 = $8;
    $49 = ((($48)) + 12908|0);
    $50 = HEAP32[$49>>2]|0;
    if (!($47)) {
     $51 = ((($50)) + 140|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($52)) + 156|0);
     $14 = $53;
     $54 = $14;
     _nk_zero($54,180);
     $7 = 0;
     $200 = $7;
     STACKTOP = sp;return ($200|0);
    }
    $13 = $50;
    $55 = $8;
    $56 = ((($55)) + 340|0);
    $15 = $56;
    $57 = $13;
    $58 = ((($57)) + 140|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($59)) + 156|0);
    $14 = $60;
    $61 = $15;
    $62 = ((($61)) + 3084|0);
    $16 = $62;
    $63 = $14;
    _nk_zero($63,180);
    $64 = +HEAPF32[$18>>2];
    $65 = $16;
    $66 = ((($65)) + 40|0);
    $67 = +HEAPF32[$66>>2];
    $68 = $64 + $67;
    $69 = $14;
    $70 = ((($69)) + 4|0);
    HEAPF32[$70>>2] = $68;
    $71 = ((($18)) + 4|0);
    $72 = +HEAPF32[$71>>2];
    $73 = $16;
    $74 = ((($73)) + 40|0);
    $75 = ((($74)) + 4|0);
    $76 = +HEAPF32[$75>>2];
    $77 = $72 + $76;
    $78 = $14;
    $79 = ((($78)) + 8|0);
    HEAPF32[$79>>2] = $77;
    $80 = ((($18)) + 8|0);
    $81 = +HEAPF32[$80>>2];
    $82 = $16;
    $83 = ((($82)) + 40|0);
    $84 = +HEAPF32[$83>>2];
    $85 = 2.0 * $84;
    $86 = $81 - $85;
    $87 = $14;
    $88 = ((($87)) + 12|0);
    HEAPF32[$88>>2] = $86;
    $89 = ((($18)) + 12|0);
    $90 = +HEAPF32[$89>>2];
    $91 = $16;
    $92 = ((($91)) + 40|0);
    $93 = ((($92)) + 4|0);
    $94 = +HEAPF32[$93>>2];
    $95 = 2.0 * $94;
    $96 = $90 - $95;
    $97 = $14;
    $98 = ((($97)) + 16|0);
    HEAPF32[$98>>2] = $96;
    $99 = $14;
    $100 = ((($99)) + 12|0);
    $101 = +HEAPF32[$100>>2];
    $102 = $16;
    $103 = ((($102)) + 40|0);
    $104 = +HEAPF32[$103>>2];
    $105 = 2.0 * $104;
    $106 = $101 < $105;
    if ($106) {
     $107 = $16;
     $108 = ((($107)) + 40|0);
     $109 = +HEAPF32[$108>>2];
     $110 = 2.0 * $109;
     $116 = $110;
    } else {
     $111 = $14;
     $112 = ((($111)) + 12|0);
     $113 = +HEAPF32[$112>>2];
     $116 = $113;
    }
    $114 = $14;
    $115 = ((($114)) + 12|0);
    HEAPF32[$115>>2] = $116;
    $117 = $14;
    $118 = ((($117)) + 16|0);
    $119 = +HEAPF32[$118>>2];
    $120 = $16;
    $121 = ((($120)) + 40|0);
    $122 = ((($121)) + 4|0);
    $123 = +HEAPF32[$122>>2];
    $124 = 2.0 * $123;
    $125 = $119 < $124;
    if ($125) {
     $126 = $16;
     $127 = ((($126)) + 40|0);
     $128 = ((($127)) + 4|0);
     $129 = +HEAPF32[$128>>2];
     $130 = 2.0 * $129;
     $136 = $130;
    } else {
     $131 = $14;
     $132 = ((($131)) + 16|0);
     $133 = +HEAPF32[$132>>2];
     $136 = $133;
    }
    $134 = $14;
    $135 = ((($134)) + 16|0);
    HEAPF32[$135>>2] = $136;
    $137 = $14;
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + 1)|0;
    HEAP32[$137>>2] = $139;
    $140 = $14;
    $141 = ((($140)) + 20|0);
    $142 = (($141) + (($138*40)|0)|0);
    $19 = $142;
    $143 = $9;
    $144 = $19;
    HEAP32[$144>>2] = $143;
    $145 = $10;
    $146 = $19;
    $147 = ((($146)) + 24|0);
    HEAP32[$147>>2] = $145;
    $148 = $19;
    $149 = ((($148)) + 4|0);
    ;HEAP8[$149>>0]=HEAP8[$2>>0]|0;HEAP8[$149+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$149+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$149+3>>0]=HEAP8[$2+3>>0]|0;
    $150 = $19;
    $151 = ((($150)) + 8|0);
    ;HEAP8[$151>>0]=HEAP8[$3>>0]|0;HEAP8[$151+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$151+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$151+3>>0]=HEAP8[$3+3>>0]|0;
    $152 = $11;
    $153 = $12;
    $154 = $152 < $153;
    $155 = $11;
    $156 = $12;
    $157 = $154 ? $155 : $156;
    $158 = $19;
    $159 = ((($158)) + 12|0);
    HEAPF32[$159>>2] = $157;
    $160 = $11;
    $161 = $12;
    $162 = $160 < $161;
    $163 = $12;
    $164 = $11;
    $165 = $162 ? $163 : $164;
    $166 = $19;
    $167 = ((($166)) + 16|0);
    HEAPF32[$167>>2] = $165;
    $168 = $19;
    $169 = ((($168)) + 16|0);
    $170 = +HEAPF32[$169>>2];
    $171 = $19;
    $172 = ((($171)) + 12|0);
    $173 = +HEAPF32[$172>>2];
    $174 = $170 - $173;
    $175 = $19;
    $176 = ((($175)) + 20|0);
    HEAPF32[$176>>2] = $174;
    $177 = $16;
    $17 = $177;
    $178 = $17;
    $179 = HEAP32[$178>>2]|0;
    $180 = ($179|0)==(1);
    $181 = $13;
    $182 = ((($181)) + 100|0);
    if ($180) {
     $183 = $17;
     $184 = ((($183)) + 4|0);
     ;HEAP32[$$byval_copy>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$18+12>>2]|0;
     ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
     _nk_draw_image($182,$$byval_copy,$184,$nk_white$byval_copy);
    } else {
     $185 = $16;
     $186 = ((($185)) + 36|0);
     $187 = +HEAPF32[$186>>2];
     $188 = $16;
     $189 = ((($188)) + 20|0);
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$18+12>>2]|0;
     ;HEAP8[$$byval_copy2>>0]=HEAP8[$189>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$189+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$189+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$189+3>>0]|0;
     _nk_fill_rect($182,$$byval_copy1,$187,$$byval_copy2);
     $190 = $13;
     $191 = ((($190)) + 100|0);
     $192 = $16;
     $193 = ((($192)) + 32|0);
     $194 = +HEAPF32[$193>>2];
     ;HEAP32[$$byval_copy3>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$18+12>>2]|0;
     _nk_shrink_rect($20,$$byval_copy3,$194);
     $195 = $16;
     $196 = ((($195)) + 36|0);
     $197 = +HEAPF32[$196>>2];
     $198 = $16;
     $199 = ((($198)) + 4|0);
     ;HEAP32[$$byval_copy4>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$20+12>>2]|0;
     ;HEAP8[$$byval_copy5>>0]=HEAP8[$199>>0]|0;HEAP8[$$byval_copy5+1>>0]=HEAP8[$199+1>>0]|0;HEAP8[$$byval_copy5+2>>0]=HEAP8[$199+2>>0]|0;HEAP8[$$byval_copy5+3>>0]=HEAP8[$199+3>>0]|0;
     _nk_fill_rect($191,$$byval_copy4,$197,$$byval_copy5);
    }
    $7 = 1;
    $200 = $7;
    STACKTOP = sp;return ($200|0);
   }
  }
 }
 $7 = 0;
 $200 = $7;
 STACKTOP = sp;return ($200|0);
}
function _nk_shrink_rect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $3 = $2;
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $3;
 $8 = 2.0 * $7;
 $9 = $6 < $8;
 if ($9) {
  $10 = $3;
  $11 = 2.0 * $10;
  $15 = $11;
 } else {
  $12 = ((($1)) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $15 = $13;
 }
 $14 = ((($1)) + 8|0);
 HEAPF32[$14>>2] = $15;
 $16 = ((($1)) + 12|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $3;
 $19 = 2.0 * $18;
 $20 = $17 < $19;
 if ($20) {
  $21 = $3;
  $22 = 2.0 * $21;
  $26 = $22;
 } else {
  $23 = ((($1)) + 12|0);
  $24 = +HEAPF32[$23>>2];
  $26 = $24;
 }
 $25 = ((($1)) + 12|0);
 HEAPF32[$25>>2] = $26;
 $27 = +HEAPF32[$1>>2];
 $28 = $3;
 $29 = $27 + $28;
 HEAPF32[$4>>2] = $29;
 $30 = ((($1)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $3;
 $33 = $31 + $32;
 $34 = ((($4)) + 4|0);
 HEAPF32[$34>>2] = $33;
 $35 = ((($1)) + 8|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $3;
 $38 = 2.0 * $37;
 $39 = $36 - $38;
 $40 = ((($4)) + 8|0);
 HEAPF32[$40>>2] = $39;
 $41 = ((($1)) + 12|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $3;
 $44 = 2.0 * $43;
 $45 = $42 - $44;
 $46 = ((($4)) + 12|0);
 HEAPF32[$46>>2] = $45;
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _nk_chart_begin($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $5;
 $13 = ((($12)) + 340|0);
 $14 = ((($13)) + 3084|0);
 $15 = ((($14)) + 28|0);
 $16 = $5;
 $17 = ((($16)) + 340|0);
 $18 = ((($17)) + 3084|0);
 $19 = ((($18)) + 24|0);
 $20 = $7;
 $21 = $8;
 $22 = $9;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$15+3>>0]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$19+3>>0]|0;
 $23 = (_nk_chart_begin_colored($10,$11,$$byval_copy,$$byval_copy1,$20,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _nk_chart_add_slot_colored($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $14 = $7;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2989|0),(1320|0),20071,(20142|0));
  // unreachable;
 }
 $16 = $7;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((19010|0),(1320|0),20072,(20142|0));
  // unreachable;
 }
 $20 = $7;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((18968|0),(1320|0),20073,(20142|0));
  // unreachable;
 }
 $26 = $7;
 $27 = ((($26)) + 12908|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 140|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 156|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)<(4);
 if (!($33)) {
  ___assert_fail((20168|0),(1320|0),20074,(20142|0));
  // unreachable;
 }
 $34 = $7;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $7;
 $37 = ((($36)) + 12908|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = $7;
 $41 = ((($40)) + 12908|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 140|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $7;
 $47 = ((($46)) + 12908|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + 140|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 156|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)>=(4);
 if ($53) {
  STACKTOP = sp;return;
 }
 $54 = $7;
 $55 = ((($54)) + 12908|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 140|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 156|0);
 $12 = $59;
 $60 = $12;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 HEAP32[$60>>2] = $62;
 $63 = $12;
 $64 = ((($63)) + 20|0);
 $65 = (($64) + (($61*40)|0)|0);
 $13 = $65;
 $66 = $8;
 $67 = $13;
 HEAP32[$67>>2] = $66;
 $68 = $9;
 $69 = $13;
 $70 = ((($69)) + 24|0);
 HEAP32[$70>>2] = $68;
 $71 = $13;
 $72 = ((($71)) + 4|0);
 ;HEAP8[$72>>0]=HEAP8[$2>>0]|0;HEAP8[$72+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$72+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$72+3>>0]=HEAP8[$2+3>>0]|0;
 $73 = $13;
 $74 = ((($73)) + 8|0);
 ;HEAP8[$74>>0]=HEAP8[$3>>0]|0;HEAP8[$74+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$3+3>>0]|0;
 $75 = $10;
 $76 = $11;
 $77 = $75 < $76;
 $78 = $10;
 $79 = $11;
 $80 = $77 ? $78 : $79;
 $81 = $13;
 $82 = ((($81)) + 12|0);
 HEAPF32[$82>>2] = $80;
 $83 = $10;
 $84 = $11;
 $85 = $83 < $84;
 $86 = $11;
 $87 = $10;
 $88 = $85 ? $86 : $87;
 $89 = $13;
 $90 = ((($89)) + 16|0);
 HEAPF32[$90>>2] = $88;
 $91 = $13;
 $92 = ((($91)) + 16|0);
 $93 = +HEAPF32[$92>>2];
 $94 = $13;
 $95 = ((($94)) + 12|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $93 - $96;
 $98 = $13;
 $99 = ((($98)) + 20|0);
 HEAPF32[$99>>2] = $97;
 STACKTOP = sp;return;
}
function _nk_chart_add_slot($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $5;
 $13 = ((($12)) + 340|0);
 $14 = ((($13)) + 3084|0);
 $15 = ((($14)) + 28|0);
 $16 = $5;
 $17 = ((($16)) + 340|0);
 $18 = ((($17)) + 3084|0);
 $19 = ((($18)) + 24|0);
 $20 = $7;
 $21 = $8;
 $22 = $9;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$15+3>>0]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$19+3>>0]|0;
 _nk_chart_add_slot_colored($10,$11,$$byval_copy,$$byval_copy1,$20,$21,$22);
 STACKTOP = sp;return;
}
function _nk_chart_push_slot($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((2989|0),(1320|0),20219,(20205|0));
  // unreachable;
 }
 $11 = $4;
 $12 = ((($11)) + 12908|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((19010|0),(1320|0),20220,(20205|0));
  // unreachable;
 }
 $15 = $6;
 $16 = ($15|0)>=(0);
 $17 = $6;
 $18 = ($17|0)<(4);
 $or$cond = $16 & $18;
 if (!($or$cond)) {
  ___assert_fail((20224|0),(1320|0),20221,(20205|0));
  // unreachable;
 }
 $19 = $6;
 $20 = $4;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 156|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($19|0)<($26|0);
 if (!($27)) {
  ___assert_fail((20246|0),(1320|0),20222,(20205|0));
  // unreachable;
 }
 $28 = $4;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $4;
  $31 = ((($30)) + 12908|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  $34 = $6;
  $35 = ($34|0)>=(4);
  $or$cond3 = $33 | $35;
  if (!($or$cond3)) {
   $36 = $6;
   $37 = $4;
   $38 = ((($37)) + 12908|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 140|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 156|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($36|0)>=($43|0);
   if ($44) {
    $3 = 0;
    $82 = $3;
    STACKTOP = sp;return ($82|0);
   }
   $45 = $4;
   $46 = ((($45)) + 12908|0);
   $47 = HEAP32[$46>>2]|0;
   $8 = $47;
   $48 = $8;
   $49 = ((($48)) + 140|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 156|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $6;
   $54 = ($52|0)<($53|0);
   if ($54) {
    $3 = 0;
    $82 = $3;
    STACKTOP = sp;return ($82|0);
   }
   $55 = $6;
   $56 = $8;
   $57 = ((($56)) + 140|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 156|0);
   $60 = ((($59)) + 20|0);
   $61 = (($60) + (($55*40)|0)|0);
   $62 = HEAP32[$61>>2]|0;
   switch ($62|0) {
   case 0:  {
    $63 = $4;
    $64 = $8;
    $65 = $8;
    $66 = ((($65)) + 140|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($67)) + 156|0);
    $69 = $5;
    $70 = $6;
    $71 = (_nk_chart_push_line($63,$64,$68,$69,$70)|0);
    $7 = $71;
    break;
   }
   case 1:  {
    $72 = $4;
    $73 = $8;
    $74 = $8;
    $75 = ((($74)) + 140|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($76)) + 156|0);
    $78 = $5;
    $79 = $6;
    $80 = (_nk_chart_push_column($72,$73,$77,$78,$79)|0);
    $7 = $80;
    break;
   }
   default: {
    $7 = 0;
   }
   }
   $81 = $7;
   $3 = $81;
   $82 = $3;
   STACKTOP = sp;return ($82|0);
  }
 }
 $3 = 0;
 $82 = $3;
 STACKTOP = sp;return ($82|0);
}
function _nk_chart_push_line($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy7 = sp + 172|0;
 $$byval_copy6 = sp + 144|0;
 $$byval_copy5 = sp + 128|0;
 $$byval_copy4 = sp + 168|0;
 $$byval_copy3 = sp + 164|0;
 $$byval_copy2 = sp + 112|0;
 $$byval_copy = sp + 96|0;
 $15 = sp + 48|0;
 $16 = sp + 32|0;
 $17 = sp + 160|0;
 $21 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = $7;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $11 = $24;
 $25 = $6;
 $12 = $25;
 $26 = $7;
 $27 = ((($26)) + 100|0);
 $13 = $27;
 $14 = 0;
 $28 = $10;
 $29 = ($28|0)>=(0);
 $30 = $10;
 $31 = ($30|0)<(4);
 $or$cond = $29 & $31;
 if (!($or$cond)) {
  ___assert_fail((20224|0),(1320|0),20111,(24796|0));
  // unreachable;
 }
 $32 = $8;
 $33 = ((($32)) + 12|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $10;
 $36 = $8;
 $37 = ((($36)) + 20|0);
 $38 = (($37) + (($35*40)|0)|0);
 $39 = ((($38)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (+($40|0));
 $42 = $34 / $41;
 $18 = $42;
 $43 = $10;
 $44 = $8;
 $45 = ((($44)) + 20|0);
 $46 = (($45) + (($43*40)|0)|0);
 $47 = ((($46)) + 16|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $10;
 $50 = $8;
 $51 = ((($50)) + 20|0);
 $52 = (($51) + (($49*40)|0)|0);
 $53 = ((($52)) + 12|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $48 - $54;
 $19 = $55;
 $56 = $9;
 $57 = $10;
 $58 = $8;
 $59 = ((($58)) + 20|0);
 $60 = (($59) + (($57*40)|0)|0);
 $61 = ((($60)) + 12|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $56 - $62;
 $64 = $19;
 $65 = $63 / $64;
 $20 = $65;
 $66 = $10;
 $67 = $8;
 $68 = ((($67)) + 20|0);
 $69 = (($68) + (($66*40)|0)|0);
 $70 = ((($69)) + 36|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0);
 if (!($72)) {
  $213 = $10;
  $214 = $8;
  $215 = ((($214)) + 20|0);
  $216 = (($215) + (($213*40)|0)|0);
  $217 = ((($216)) + 4|0);
  ;HEAP8[$17>>0]=HEAP8[$217>>0]|0;HEAP8[$17+1>>0]=HEAP8[$217+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$217+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$217+3>>0]|0;
  $218 = $8;
  $219 = ((($218)) + 4|0);
  $220 = +HEAPF32[$219>>2];
  $221 = $18;
  $222 = $10;
  $223 = $8;
  $224 = ((($223)) + 20|0);
  $225 = (($224) + (($222*40)|0)|0);
  $226 = ((($225)) + 36|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (+($227|0));
  $229 = $221 * $228;
  $230 = $220 + $229;
  HEAPF32[$15>>2] = $230;
  $231 = $8;
  $232 = ((($231)) + 8|0);
  $233 = +HEAPF32[$232>>2];
  $234 = $8;
  $235 = ((($234)) + 16|0);
  $236 = +HEAPF32[$235>>2];
  $237 = $233 + $236;
  $238 = $20;
  $239 = $8;
  $240 = ((($239)) + 16|0);
  $241 = +HEAPF32[$240>>2];
  $242 = $238 * $241;
  $243 = $237 - $242;
  $244 = ((($15)) + 4|0);
  HEAPF32[$244>>2] = $243;
  $245 = $13;
  $246 = $10;
  $247 = $8;
  $248 = ((($247)) + 20|0);
  $249 = (($248) + (($246*40)|0)|0);
  $250 = ((($249)) + 28|0);
  $251 = +HEAPF32[$250>>2];
  $252 = $10;
  $253 = $8;
  $254 = ((($253)) + 20|0);
  $255 = (($254) + (($252*40)|0)|0);
  $256 = ((($255)) + 28|0);
  $257 = ((($256)) + 4|0);
  $258 = +HEAPF32[$257>>2];
  $259 = +HEAPF32[$15>>2];
  $260 = ((($15)) + 4|0);
  $261 = +HEAPF32[$260>>2];
  ;HEAP8[$$byval_copy4>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$17+3>>0]|0;
  _nk_stroke_line($245,$251,$258,$259,$261,1.0,$$byval_copy4);
  $262 = +HEAPF32[$15>>2];
  $263 = $262 - 3.0;
  HEAPF32[$16>>2] = $263;
  $264 = ((($15)) + 4|0);
  $265 = +HEAPF32[$264>>2];
  $266 = $265 - 3.0;
  $267 = ((($16)) + 4|0);
  HEAPF32[$267>>2] = $266;
  $268 = ((($16)) + 12|0);
  HEAPF32[$268>>2] = 6.0;
  $269 = ((($16)) + 8|0);
  HEAPF32[$269>>2] = 6.0;
  $270 = $11;
  $271 = ((($270)) + 4|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = $272 & 2048;
  $274 = ($273|0)!=(0);
  if (!($274)) {
   $275 = $12;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$16+12>>2]|0;
   $276 = (_nk_input_is_mouse_hovering_rect($275,$$byval_copy5)|0);
   $277 = ($276|0)!=(0);
   if ($277) {
    $14 = 1;
    $278 = $12;
    $279 = ((($278)) + 260|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = ($280|0)!=(0);
    if ($281) {
     $287 = 0;
    } else {
     $282 = $12;
     $283 = ((($282)) + 260|0);
     $284 = ((($283)) + 4|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ($285|0)!=(0);
     $287 = $286;
    }
    $288 = $287 ? 2 : 0;
    $289 = $14;
    $290 = $289 | $288;
    $14 = $290;
    $291 = $10;
    $292 = $8;
    $293 = ((($292)) + 20|0);
    $294 = (($293) + (($291*40)|0)|0);
    $295 = ((($294)) + 8|0);
    ;HEAP8[$17>>0]=HEAP8[$295>>0]|0;HEAP8[$17+1>>0]=HEAP8[$295+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$295+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$295+3>>0]|0;
   }
  }
  $296 = $13;
  $297 = +HEAPF32[$15>>2];
  $298 = $297 - 2.0;
  $299 = ((($15)) + 4|0);
  $300 = +HEAPF32[$299>>2];
  $301 = $300 - 2.0;
  _nk_rect($21,$298,$301,4.0,4.0);
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$21+12>>2]|0;
  ;HEAP8[$$byval_copy7>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy7+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy7+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy7+3>>0]=HEAP8[$17+3>>0]|0;
  _nk_fill_rect($296,$$byval_copy6,0.0,$$byval_copy7);
  $302 = +HEAPF32[$15>>2];
  $303 = $10;
  $304 = $8;
  $305 = ((($304)) + 20|0);
  $306 = (($305) + (($303*40)|0)|0);
  $307 = ((($306)) + 28|0);
  HEAPF32[$307>>2] = $302;
  $308 = ((($15)) + 4|0);
  $309 = +HEAPF32[$308>>2];
  $310 = $10;
  $311 = $8;
  $312 = ((($311)) + 20|0);
  $313 = (($312) + (($310*40)|0)|0);
  $314 = ((($313)) + 28|0);
  $315 = ((($314)) + 4|0);
  HEAPF32[$315>>2] = $309;
  $316 = $10;
  $317 = $8;
  $318 = ((($317)) + 20|0);
  $319 = (($318) + (($316*40)|0)|0);
  $320 = ((($319)) + 36|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = (($321) + 1)|0;
  HEAP32[$320>>2] = $322;
  $323 = $14;
  $5 = $323;
  $324 = $5;
  STACKTOP = sp;return ($324|0);
 }
 $73 = $8;
 $74 = ((($73)) + 4|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $10;
 $77 = $8;
 $78 = ((($77)) + 20|0);
 $79 = (($78) + (($76*40)|0)|0);
 $80 = ((($79)) + 28|0);
 HEAPF32[$80>>2] = $75;
 $81 = $8;
 $82 = ((($81)) + 8|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $8;
 $85 = ((($84)) + 16|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $83 + $86;
 $88 = $20;
 $89 = $8;
 $90 = ((($89)) + 16|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $88 * $91;
 $93 = $87 - $92;
 $94 = $10;
 $95 = $8;
 $96 = ((($95)) + 20|0);
 $97 = (($96) + (($94*40)|0)|0);
 $98 = ((($97)) + 28|0);
 $99 = ((($98)) + 4|0);
 HEAPF32[$99>>2] = $93;
 $100 = $10;
 $101 = $8;
 $102 = ((($101)) + 20|0);
 $103 = (($102) + (($100*40)|0)|0);
 $104 = ((($103)) + 28|0);
 $105 = +HEAPF32[$104>>2];
 $106 = $105 - 2.0;
 HEAPF32[$16>>2] = $106;
 $107 = $10;
 $108 = $8;
 $109 = ((($108)) + 20|0);
 $110 = (($109) + (($107*40)|0)|0);
 $111 = ((($110)) + 28|0);
 $112 = ((($111)) + 4|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $113 - 2.0;
 $115 = ((($16)) + 4|0);
 HEAPF32[$115>>2] = $114;
 $116 = ((($16)) + 12|0);
 HEAPF32[$116>>2] = 4.0;
 $117 = ((($16)) + 8|0);
 HEAPF32[$117>>2] = 4.0;
 $118 = $10;
 $119 = $8;
 $120 = ((($119)) + 20|0);
 $121 = (($120) + (($118*40)|0)|0);
 $122 = ((($121)) + 4|0);
 ;HEAP8[$17>>0]=HEAP8[$122>>0]|0;HEAP8[$17+1>>0]=HEAP8[$122+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$122+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$122+3>>0]|0;
 $123 = $11;
 $124 = ((($123)) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $125 & 2048;
 $127 = ($126|0)!=(0);
 if (!($127)) {
  $128 = $10;
  $129 = $8;
  $130 = ((($129)) + 20|0);
  $131 = (($130) + (($128*40)|0)|0);
  $132 = ((($131)) + 28|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $133 - 3.0;
  $135 = $12;
  $136 = ((($135)) + 260|0);
  $137 = ((($136)) + 48|0);
  $138 = +HEAPF32[$137>>2];
  $139 = $134 <= $138;
  if ($139) {
   $140 = $12;
   $141 = ((($140)) + 260|0);
   $142 = ((($141)) + 48|0);
   $143 = +HEAPF32[$142>>2];
   $144 = $10;
   $145 = $8;
   $146 = ((($145)) + 20|0);
   $147 = (($146) + (($144*40)|0)|0);
   $148 = ((($147)) + 28|0);
   $149 = +HEAPF32[$148>>2];
   $150 = $149 - 3.0;
   $151 = $150 + 6.0;
   $152 = $143 <= $151;
   if ($152) {
    $153 = $10;
    $154 = $8;
    $155 = ((($154)) + 20|0);
    $156 = (($155) + (($153*40)|0)|0);
    $157 = ((($156)) + 28|0);
    $158 = ((($157)) + 4|0);
    $159 = +HEAPF32[$158>>2];
    $160 = $159 - 3.0;
    $161 = $12;
    $162 = ((($161)) + 260|0);
    $163 = ((($162)) + 48|0);
    $164 = ((($163)) + 4|0);
    $165 = +HEAPF32[$164>>2];
    $166 = $160 <= $165;
    if ($166) {
     $167 = $12;
     $168 = ((($167)) + 260|0);
     $169 = ((($168)) + 48|0);
     $170 = ((($169)) + 4|0);
     $171 = +HEAPF32[$170>>2];
     $172 = $10;
     $173 = $8;
     $174 = ((($173)) + 20|0);
     $175 = (($174) + (($172*40)|0)|0);
     $176 = ((($175)) + 28|0);
     $177 = ((($176)) + 4|0);
     $178 = +HEAPF32[$177>>2];
     $179 = $178 - 3.0;
     $180 = $179 + 6.0;
     $181 = $171 <= $180;
     if ($181) {
      $182 = $12;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$16+12>>2]|0;
      $183 = (_nk_input_is_mouse_hovering_rect($182,$$byval_copy)|0);
      $184 = ($183|0)!=(0);
      $185 = $184 ? 1 : 0;
      $14 = $185;
      $186 = $12;
      $187 = ((($186)) + 260|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ($188|0)!=(0);
      if ($189) {
       $190 = $12;
       $191 = ((($190)) + 260|0);
       $192 = ((($191)) + 4|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = ($193|0)!=(0);
       $195 = $194;
      } else {
       $195 = 0;
      }
      $196 = $195 ? 2 : 0;
      $197 = $14;
      $198 = $197 | $196;
      $14 = $198;
      $199 = $10;
      $200 = $8;
      $201 = ((($200)) + 20|0);
      $202 = (($201) + (($199*40)|0)|0);
      $203 = ((($202)) + 8|0);
      ;HEAP8[$17>>0]=HEAP8[$203>>0]|0;HEAP8[$17+1>>0]=HEAP8[$203+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$203+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$203+3>>0]|0;
     }
    }
   }
  }
 }
 $204 = $13;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$16+12>>2]|0;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$17+3>>0]|0;
 _nk_fill_rect($204,$$byval_copy2,0.0,$$byval_copy3);
 $205 = $10;
 $206 = $8;
 $207 = ((($206)) + 20|0);
 $208 = (($207) + (($205*40)|0)|0);
 $209 = ((($208)) + 36|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = (($210) + 1)|0;
 HEAP32[$209>>2] = $211;
 $212 = $14;
 $5 = $212;
 $324 = $5;
 STACKTOP = sp;return ($324|0);
}
function _nk_chart_push_column($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy2 = sp + 92|0;
 $$byval_copy = sp + 72|0;
 $16 = sp + 88|0;
 $17 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = $7;
 $20 = ((($19)) + 100|0);
 $11 = $20;
 $21 = $6;
 $12 = $21;
 $22 = $7;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $13 = $24;
 $15 = 0;
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;
 $25 = $10;
 $26 = ($25|0)>=(0);
 $27 = $10;
 $28 = ($27|0)<(4);
 $or$cond = $26 & $28;
 if (!($or$cond)) {
  ___assert_fail((20224|0),(1320|0),20179,(24815|0));
  // unreachable;
 }
 $29 = $10;
 $30 = $8;
 $31 = ((($30)) + 20|0);
 $32 = (($31) + (($29*40)|0)|0);
 $33 = ((($32)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $10;
 $36 = $8;
 $37 = ((($36)) + 20|0);
 $38 = (($37) + (($35*40)|0)|0);
 $39 = ((($38)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($34|0)>=($40|0);
 if ($41) {
  $5 = 0;
  $265 = $5;
  STACKTOP = sp;return ($265|0);
 }
 $42 = $10;
 $43 = $8;
 $44 = ((($43)) + 20|0);
 $45 = (($44) + (($42*40)|0)|0);
 $46 = ((($45)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $10;
  $50 = $8;
  $51 = ((($50)) + 20|0);
  $52 = (($51) + (($49*40)|0)|0);
  $53 = ((($52)) + 24|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) - 1)|0;
  $56 = (+($55|0));
  $18 = $56;
  $57 = $8;
  $58 = ((($57)) + 12|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $18;
  $61 = $59 - $60;
  $62 = $10;
  $63 = $8;
  $64 = ((($63)) + 20|0);
  $65 = (($64) + (($62*40)|0)|0);
  $66 = ((($65)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (+($67|0));
  $69 = $61 / $68;
  $70 = ((($17)) + 8|0);
  HEAPF32[$70>>2] = $69;
 }
 $71 = $10;
 $72 = $8;
 $73 = ((($72)) + 20|0);
 $74 = (($73) + (($71*40)|0)|0);
 $75 = ((($74)) + 4|0);
 ;HEAP8[$16>>0]=HEAP8[$75>>0]|0;HEAP8[$16+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$75+3>>0]|0;
 $76 = $8;
 $77 = ((($76)) + 16|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $9;
 $80 = $10;
 $81 = $8;
 $82 = ((($81)) + 20|0);
 $83 = (($82) + (($80*40)|0)|0);
 $84 = ((($83)) + 20|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $79 / $85;
 $87 = $86 < 0.0;
 $88 = $9;
 $89 = $10;
 $90 = $8;
 $91 = ((($90)) + 20|0);
 $92 = (($91) + (($89*40)|0)|0);
 $93 = ((($92)) + 20|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $88 / $94;
 $96 = -$95;
 $97 = $87 ? $96 : $95;
 $98 = $78 * $97;
 $99 = ((($17)) + 12|0);
 HEAPF32[$99>>2] = $98;
 $100 = $9;
 $101 = $100 >= 0.0;
 $102 = $9;
 $103 = $10;
 $104 = $8;
 $105 = ((($104)) + 20|0);
 $106 = (($105) + (($103*40)|0)|0);
 if ($101) {
  $107 = ((($106)) + 12|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $108 < 0.0;
  $110 = $10;
  $111 = $8;
  $112 = ((($111)) + 20|0);
  $113 = (($112) + (($110*40)|0)|0);
  $114 = ((($113)) + 12|0);
  $115 = +HEAPF32[$114>>2];
  $116 = -$115;
  $117 = $109 ? $116 : $115;
  $118 = $102 + $117;
  $119 = $10;
  $120 = $8;
  $121 = ((($120)) + 20|0);
  $122 = (($121) + (($119*40)|0)|0);
  $123 = ((($122)) + 20|0);
  $124 = +HEAPF32[$123>>2];
  $125 = $124 < 0.0;
  $126 = $10;
  $127 = $8;
  $128 = ((($127)) + 20|0);
  $129 = (($128) + (($126*40)|0)|0);
  $130 = ((($129)) + 20|0);
  $131 = +HEAPF32[$130>>2];
  $132 = -$131;
  $133 = $125 ? $132 : $131;
  $134 = $118 / $133;
  $14 = $134;
  $135 = $8;
  $136 = ((($135)) + 8|0);
  $137 = +HEAPF32[$136>>2];
  $138 = $8;
  $139 = ((($138)) + 16|0);
  $140 = +HEAPF32[$139>>2];
  $141 = $137 + $140;
  $142 = $8;
  $143 = ((($142)) + 16|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $14;
  $146 = $144 * $145;
  $147 = $141 - $146;
  $148 = ((($17)) + 4|0);
  HEAPF32[$148>>2] = $147;
 } else {
  $149 = ((($106)) + 16|0);
  $150 = +HEAPF32[$149>>2];
  $151 = $102 - $150;
  $152 = $10;
  $153 = $8;
  $154 = ((($153)) + 20|0);
  $155 = (($154) + (($152*40)|0)|0);
  $156 = ((($155)) + 20|0);
  $157 = +HEAPF32[$156>>2];
  $158 = $151 / $157;
  $14 = $158;
  $159 = $8;
  $160 = ((($159)) + 8|0);
  $161 = +HEAPF32[$160>>2];
  $162 = $8;
  $163 = ((($162)) + 16|0);
  $164 = +HEAPF32[$163>>2];
  $165 = $14;
  $166 = $165 < 0.0;
  $167 = $14;
  $168 = -$167;
  $169 = $166 ? $168 : $167;
  $170 = $164 * $169;
  $171 = $161 + $170;
  $172 = ((($17)) + 12|0);
  $173 = +HEAPF32[$172>>2];
  $174 = $171 - $173;
  $175 = ((($17)) + 4|0);
  HEAPF32[$175>>2] = $174;
 }
 $176 = $8;
 $177 = ((($176)) + 4|0);
 $178 = +HEAPF32[$177>>2];
 $179 = $10;
 $180 = $8;
 $181 = ((($180)) + 20|0);
 $182 = (($181) + (($179*40)|0)|0);
 $183 = ((($182)) + 36|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = (+($184|0));
 $186 = ((($17)) + 8|0);
 $187 = +HEAPF32[$186>>2];
 $188 = $185 * $187;
 $189 = $178 + $188;
 HEAPF32[$17>>2] = $189;
 $190 = +HEAPF32[$17>>2];
 $191 = $10;
 $192 = $8;
 $193 = ((($192)) + 20|0);
 $194 = (($193) + (($191*40)|0)|0);
 $195 = ((($194)) + 36|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = (+($196|0));
 $198 = $190 + $197;
 HEAPF32[$17>>2] = $198;
 $199 = $13;
 $200 = ((($199)) + 4|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = $201 & 2048;
 $203 = ($202|0)!=(0);
 if (!($203)) {
  $204 = +HEAPF32[$17>>2];
  $205 = $12;
  $206 = ((($205)) + 260|0);
  $207 = ((($206)) + 48|0);
  $208 = +HEAPF32[$207>>2];
  $209 = $204 <= $208;
  if ($209) {
   $210 = $12;
   $211 = ((($210)) + 260|0);
   $212 = ((($211)) + 48|0);
   $213 = +HEAPF32[$212>>2];
   $214 = +HEAPF32[$17>>2];
   $215 = ((($17)) + 8|0);
   $216 = +HEAPF32[$215>>2];
   $217 = $214 + $216;
   $218 = $213 <= $217;
   if ($218) {
    $219 = ((($17)) + 4|0);
    $220 = +HEAPF32[$219>>2];
    $221 = $12;
    $222 = ((($221)) + 260|0);
    $223 = ((($222)) + 48|0);
    $224 = ((($223)) + 4|0);
    $225 = +HEAPF32[$224>>2];
    $226 = $220 <= $225;
    if ($226) {
     $227 = $12;
     $228 = ((($227)) + 260|0);
     $229 = ((($228)) + 48|0);
     $230 = ((($229)) + 4|0);
     $231 = +HEAPF32[$230>>2];
     $232 = ((($17)) + 4|0);
     $233 = +HEAPF32[$232>>2];
     $234 = ((($17)) + 12|0);
     $235 = +HEAPF32[$234>>2];
     $236 = $233 + $235;
     $237 = $231 <= $236;
     if ($237) {
      $15 = 1;
      $238 = $12;
      $239 = ((($238)) + 260|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($240|0)!=(0);
      if ($241) {
       $247 = 0;
      } else {
       $242 = $12;
       $243 = ((($242)) + 260|0);
       $244 = ((($243)) + 4|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = ($245|0)!=(0);
       $247 = $246;
      }
      $248 = $247 ? 2 : 0;
      $249 = $15;
      $250 = $249 | $248;
      $15 = $250;
      $251 = $10;
      $252 = $8;
      $253 = ((($252)) + 20|0);
      $254 = (($253) + (($251*40)|0)|0);
      $255 = ((($254)) + 8|0);
      ;HEAP8[$16>>0]=HEAP8[$255>>0]|0;HEAP8[$16+1>>0]=HEAP8[$255+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$255+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$255+3>>0]|0;
     }
    }
   }
  }
 }
 $256 = $11;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$17+12>>2]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$16+3>>0]|0;
 _nk_fill_rect($256,$$byval_copy,0.0,$$byval_copy2);
 $257 = $10;
 $258 = $8;
 $259 = ((($258)) + 20|0);
 $260 = (($259) + (($257*40)|0)|0);
 $261 = ((($260)) + 36|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = (($262) + 1)|0;
 HEAP32[$261>>2] = $263;
 $264 = $15;
 $5 = $264;
 $265 = $5;
 STACKTOP = sp;return ($265|0);
}
function _nk_chart_push($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_nk_chart_push_slot($4,$5,0)|0);
 STACKTOP = sp;return ($6|0);
}
function _nk_chart_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),20250,(20286|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 12908|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((19010|0),(1320|0),20251,(20286|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = ((($12)) + 12908|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $2 = $18;
 $19 = $2;
 $20 = ((($19)) + 140|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 156|0);
 $3 = $22;
 $23 = $3;
 _nk_memset($23,0,180);
 STACKTOP = sp;return;
}
function _nk_group_scrolled_offset_begin($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $11 = sp + 368|0;
 $12 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $6;
 $16 = ((($15)) + 12908|0);
 $17 = HEAP32[$16>>2]|0;
 $13 = $17;
 $18 = $6;
 _nk_panel_alloc_space($11,$18);
 $19 = $13;
 $20 = ((($19)) + 140|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 60|0);
 $14 = $22;
 $23 = +HEAPF32[$11>>2];
 $24 = $14;
 $25 = +HEAPF32[$24>>2];
 $26 = $14;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $25 + $28;
 $30 = $23 > $29;
 if ($30) {
  label = 5;
 } else {
  $31 = +HEAPF32[$11>>2];
  $32 = ((($11)) + 8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $31 + $33;
  $35 = $14;
  $36 = +HEAPF32[$35>>2];
  $37 = $34 < $36;
  if ($37) {
   label = 5;
  } else {
   $38 = ((($11)) + 4|0);
   $39 = +HEAPF32[$38>>2];
   $40 = $14;
   $41 = ((($40)) + 4|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $14;
   $44 = ((($43)) + 12|0);
   $45 = +HEAPF32[$44>>2];
   $46 = $42 + $45;
   $47 = $39 > $46;
   if ($47) {
    label = 5;
   } else {
    $48 = ((($11)) + 4|0);
    $49 = +HEAPF32[$48>>2];
    $50 = ((($11)) + 12|0);
    $51 = +HEAPF32[$50>>2];
    $52 = $49 + $51;
    $53 = $14;
    $54 = ((($53)) + 4|0);
    $55 = +HEAPF32[$54>>2];
    $56 = $52 < $55;
    if ($56) {
     label = 5;
    }
   }
  }
 }
 if ((label|0) == 5) {
  $57 = $10;
  $58 = $57 & 2;
  $59 = ($58|0)!=(0);
  if (!($59)) {
   $5 = 0;
   $121 = $5;
   STACKTOP = sp;return ($121|0);
  }
 }
 $60 = $13;
 $61 = ((($60)) + 72|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 & 2048;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $10;
  $66 = $65 | 2048;
  $10 = $66;
 }
 _nk_zero($12,360);
 $67 = ((($12)) + 76|0);
 ;HEAP32[$67>>2]=HEAP32[$11>>2]|0;HEAP32[$67+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$67+12>>2]=HEAP32[$11+12>>2]|0;
 $68 = $10;
 $69 = ((($12)) + 72|0);
 HEAP32[$69>>2] = $68;
 $70 = $7;
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($12)) + 92|0);
 HEAP32[$72>>2] = $71;
 $73 = $8;
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($12)) + 92|0);
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = $74;
 $77 = ((($12)) + 100|0);
 $78 = $13;
 $79 = ((($78)) + 100|0);
 dest=$77; src=$79; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $80 = $6;
 $81 = (_nk_create_panel($80)|0);
 $82 = ((($12)) + 140|0);
 HEAP32[$82>>2] = $81;
 $83 = $6;
 $84 = ((($83)) + 12908|0);
 HEAP32[$84>>2] = $12;
 $85 = $6;
 $86 = $10;
 $87 = $86 & 64;
 $88 = ($87|0)!=(0);
 $89 = $9;
 $90 = $88 ? $89 : 0;
 (_nk_panel_begin($85,$90,2)|0);
 $91 = $13;
 $92 = ((($91)) + 100|0);
 $93 = ((($12)) + 100|0);
 dest=$92; src=$93; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $94 = $13;
 $95 = ((($94)) + 100|0);
 $96 = ((($95)) + 4|0);
 $97 = ((($12)) + 140|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($98)) + 60|0);
 ;HEAP32[$96>>2]=HEAP32[$99>>2]|0;HEAP32[$96+4>>2]=HEAP32[$99+4>>2]|0;HEAP32[$96+8>>2]=HEAP32[$99+8>>2]|0;HEAP32[$96+12>>2]=HEAP32[$99+12>>2]|0;
 $100 = $7;
 $101 = ((($12)) + 140|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 24|0);
 HEAP32[$103>>2] = $100;
 $104 = $8;
 $105 = ((($12)) + 140|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($106)) + 28|0);
 HEAP32[$107>>2] = $104;
 $108 = $13;
 $109 = ((($108)) + 140|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((($12)) + 140|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($112)) + 360|0);
 HEAP32[$113>>2] = $110;
 $114 = ((($12)) + 140|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $13;
 $117 = ((($116)) + 140|0);
 HEAP32[$117>>2] = $115;
 $118 = $13;
 $119 = $6;
 $120 = ((($119)) + 12908|0);
 HEAP32[$120>>2] = $118;
 $5 = 1;
 $121 = $5;
 STACKTOP = sp;return ($121|0);
}
function _nk_group_scrolled_end($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0;
 var $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0;
 var $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0;
 var $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $$byval_copy1 = sp + 424|0;
 $$byval_copy = sp + 408|0;
 $5 = sp + 376|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $1 = $0;
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((2989|0),(1320|0),20366,(20299|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ((($11)) + 12908|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((19010|0),(1320|0),20367,(20299|0));
  // unreachable;
 }
 $15 = $1;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $1;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((19010|0),(1320|0),20372,(20299|0));
  // unreachable;
 }
 $25 = $1;
 $26 = ((($25)) + 12908|0);
 $27 = HEAP32[$26>>2]|0;
 $2 = $27;
 $28 = $2;
 $29 = ((($28)) + 140|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((20321|0),(1320|0),20374,(20299|0));
  // unreachable;
 }
 $32 = $2;
 $33 = ((($32)) + 140|0);
 $34 = HEAP32[$33>>2]|0;
 $4 = $34;
 $35 = $4;
 $36 = ((($35)) + 360|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  ___assert_fail((20333|0),(1320|0),20376,(20299|0));
  // unreachable;
 }
 $39 = $4;
 $40 = ((($39)) + 360|0);
 $41 = HEAP32[$40>>2]|0;
 $3 = $41;
 _nk_zero($6,360);
 $42 = $1;
 $43 = ((($42)) + 340|0);
 _nk_panel_get_padding($8,$43,2);
 ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;
 $44 = $4;
 $45 = ((($44)) + 8|0);
 $46 = ((($45)) + 4|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $4;
 $49 = ((($48)) + 48|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $4;
 $52 = ((($51)) + 76|0);
 $53 = ((($52)) + 12|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $50 + $54;
 $56 = $47 - $55;
 $57 = ((($6)) + 76|0);
 $58 = ((($57)) + 4|0);
 HEAPF32[$58>>2] = $56;
 $59 = $4;
 $60 = ((($59)) + 8|0);
 $61 = +HEAPF32[$60>>2];
 $62 = +HEAPF32[$7>>2];
 $63 = $61 - $62;
 $64 = ((($6)) + 76|0);
 HEAPF32[$64>>2] = $63;
 $65 = $4;
 $66 = ((($65)) + 8|0);
 $67 = ((($66)) + 8|0);
 $68 = +HEAPF32[$67>>2];
 $69 = +HEAPF32[$7>>2];
 $70 = 2.0 * $69;
 $71 = $68 + $70;
 $72 = ((($6)) + 76|0);
 $73 = ((($72)) + 8|0);
 HEAPF32[$73>>2] = $71;
 $74 = $4;
 $75 = ((($74)) + 8|0);
 $76 = ((($75)) + 12|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $4;
 $79 = ((($78)) + 48|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $77 + $80;
 $82 = $4;
 $83 = ((($82)) + 76|0);
 $84 = ((($83)) + 12|0);
 $85 = +HEAPF32[$84>>2];
 $86 = $81 + $85;
 $87 = ((($6)) + 76|0);
 $88 = ((($87)) + 12|0);
 HEAPF32[$88>>2] = $86;
 $89 = $4;
 $90 = ((($89)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 & 1;
 $93 = ($92|0)!=(0);
 if ($93) {
  $94 = $4;
  $95 = ((($94)) + 52|0);
  $96 = +HEAPF32[$95>>2];
  $97 = ((($6)) + 76|0);
  $98 = +HEAPF32[$97>>2];
  $99 = $98 - $96;
  HEAPF32[$97>>2] = $99;
  $100 = $4;
  $101 = ((($100)) + 52|0);
  $102 = +HEAPF32[$101>>2];
  $103 = ((($6)) + 76|0);
  $104 = ((($103)) + 4|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $105 - $102;
  HEAPF32[$104>>2] = $106;
  $107 = $4;
  $108 = ((($107)) + 52|0);
  $109 = +HEAPF32[$108>>2];
  $110 = 2.0 * $109;
  $111 = ((($6)) + 76|0);
  $112 = ((($111)) + 8|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $113 + $110;
  HEAPF32[$112>>2] = $114;
  $115 = $4;
  $116 = ((($115)) + 52|0);
  $117 = +HEAPF32[$116>>2];
  $118 = 2.0 * $117;
  $119 = ((($6)) + 76|0);
  $120 = ((($119)) + 12|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $121 + $118;
  HEAPF32[$120>>2] = $122;
 }
 $123 = $4;
 $124 = ((($123)) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $125 & 32;
 $127 = ($126|0)!=(0);
 if (!($127)) {
  $128 = $1;
  $129 = ((($128)) + 340|0);
  $130 = ((($129)) + 4832|0);
  $131 = ((($130)) + 480|0);
  $132 = +HEAPF32[$131>>2];
  $133 = ((($6)) + 76|0);
  $134 = ((($133)) + 8|0);
  $135 = +HEAPF32[$134>>2];
  $136 = $135 + $132;
  HEAPF32[$134>>2] = $136;
  $137 = $1;
  $138 = ((($137)) + 340|0);
  $139 = ((($138)) + 4832|0);
  $140 = ((($139)) + 480|0);
  $141 = ((($140)) + 4|0);
  $142 = +HEAPF32[$141>>2];
  $143 = ((($6)) + 76|0);
  $144 = ((($143)) + 12|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $145 + $142;
  HEAPF32[$144>>2] = $146;
 }
 $147 = $4;
 $148 = ((($147)) + 24|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = HEAP32[$149>>2]|0;
 $151 = ((($6)) + 92|0);
 HEAP32[$151>>2] = $150;
 $152 = $4;
 $153 = ((($152)) + 28|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = HEAP32[$154>>2]|0;
 $156 = ((($6)) + 92|0);
 $157 = ((($156)) + 4|0);
 HEAP32[$157>>2] = $155;
 $158 = $4;
 $159 = ((($158)) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ((($6)) + 72|0);
 HEAP32[$161>>2] = $160;
 $162 = ((($6)) + 100|0);
 $163 = $2;
 $164 = ((($163)) + 100|0);
 dest=$162; src=$164; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $165 = $4;
 $166 = ((($6)) + 140|0);
 HEAP32[$166>>2] = $165;
 $167 = $2;
 $168 = ((($6)) + 356|0);
 HEAP32[$168>>2] = $167;
 $169 = $1;
 $170 = ((($169)) + 12908|0);
 HEAP32[$170>>2] = $6;
 $171 = $3;
 $172 = ((($171)) + 60|0);
 $173 = ((($6)) + 76|0);
 $174 = +HEAPF32[$173>>2];
 $175 = ((($6)) + 76|0);
 $176 = ((($175)) + 4|0);
 $177 = +HEAPF32[$176>>2];
 $178 = ((($6)) + 76|0);
 $179 = +HEAPF32[$178>>2];
 $180 = ((($6)) + 76|0);
 $181 = ((($180)) + 8|0);
 $182 = +HEAPF32[$181>>2];
 $183 = $179 + $182;
 $184 = ((($6)) + 76|0);
 $185 = ((($184)) + 4|0);
 $186 = +HEAPF32[$185>>2];
 $187 = ((($6)) + 76|0);
 $188 = ((($187)) + 12|0);
 $189 = +HEAPF32[$188>>2];
 $190 = $186 + $189;
 $191 = +HEAPF32[$7>>2];
 $192 = $190 + $191;
 _nk_unify($5,$172,$174,$177,$183,$192);
 $193 = ((($6)) + 100|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
 _nk_push_scissor($193,$$byval_copy);
 $194 = $1;
 _nk_end($194);
 $195 = $2;
 $196 = ((($195)) + 100|0);
 $197 = ((($6)) + 100|0);
 dest=$196; src=$197; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $198 = $2;
 $199 = ((($198)) + 100|0);
 $200 = $3;
 $201 = ((($200)) + 60|0);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$201>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$201+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$201+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$201+12>>2]|0;
 _nk_push_scissor($199,$$byval_copy1);
 $202 = $2;
 $203 = $1;
 $204 = ((($203)) + 12908|0);
 HEAP32[$204>>2] = $202;
 $205 = $3;
 $206 = $2;
 $207 = ((($206)) + 140|0);
 HEAP32[$207>>2] = $205;
 $208 = $4;
 $209 = ((($208)) + 8|0);
 $210 = ((($6)) + 76|0);
 ;HEAP32[$209>>2]=HEAP32[$210>>2]|0;HEAP32[$209+4>>2]=HEAP32[$210+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$210+8>>2]|0;HEAP32[$209+12>>2]=HEAP32[$210+12>>2]|0;
 STACKTOP = sp;return;
}
function _nk_unify($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $7;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((1509|0),(1320|0),4969,(24836|0));
  // unreachable;
 }
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((24845|0),(1320|0),4970,(24836|0));
  // unreachable;
 }
 $16 = $7;
 $17 = +HEAPF32[$16>>2];
 $18 = $8;
 $19 = $17 < $18;
 if ($19) {
  $20 = $8;
  $24 = $20;
 } else {
  $21 = $7;
  $22 = +HEAPF32[$21>>2];
  $24 = $22;
 }
 $23 = $6;
 HEAPF32[$23>>2] = $24;
 $25 = $7;
 $26 = ((($25)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $9;
 $29 = $27 < $28;
 if ($29) {
  $30 = $9;
  $36 = $30;
 } else {
  $31 = $7;
  $32 = ((($31)) + 4|0);
  $33 = +HEAPF32[$32>>2];
  $36 = $33;
 }
 $34 = $6;
 $35 = ((($34)) + 4|0);
 HEAPF32[$35>>2] = $36;
 $37 = $7;
 $38 = +HEAPF32[$37>>2];
 $39 = $7;
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $38 + $41;
 $43 = $10;
 $44 = $42 < $43;
 if ($44) {
  $45 = $7;
  $46 = +HEAPF32[$45>>2];
  $47 = $7;
  $48 = ((($47)) + 8|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $46 + $49;
  $55 = $50;
 } else {
  $51 = $10;
  $55 = $51;
 }
 $52 = $6;
 $53 = +HEAPF32[$52>>2];
 $54 = $55 - $53;
 $56 = $6;
 $57 = ((($56)) + 8|0);
 HEAPF32[$57>>2] = $54;
 $58 = $7;
 $59 = ((($58)) + 4|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $7;
 $62 = ((($61)) + 12|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $60 + $63;
 $65 = $11;
 $66 = $64 < $65;
 if ($66) {
  $67 = $7;
  $68 = ((($67)) + 4|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $7;
  $71 = ((($70)) + 12|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $69 + $72;
  $79 = $73;
 } else {
  $74 = $11;
  $79 = $74;
 }
 $75 = $6;
 $76 = ((($75)) + 4|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $79 - $77;
 $80 = $6;
 $81 = ((($80)) + 12|0);
 HEAPF32[$81>>2] = $78;
 $82 = $6;
 $83 = ((($82)) + 8|0);
 $84 = +HEAPF32[$83>>2];
 $85 = 0.0 < $84;
 if ($85) {
  $86 = $6;
  $87 = ((($86)) + 8|0);
  $88 = +HEAPF32[$87>>2];
  $91 = $88;
 } else {
  $91 = 0.0;
 }
 $89 = $6;
 $90 = ((($89)) + 8|0);
 HEAPF32[$90>>2] = $91;
 $92 = $6;
 $93 = ((($92)) + 12|0);
 $94 = +HEAPF32[$93>>2];
 $95 = 0.0 < $94;
 if (!($95)) {
  $101 = 0.0;
  $99 = $6;
  $100 = ((($99)) + 12|0);
  HEAPF32[$100>>2] = $101;
  STACKTOP = sp;return;
 }
 $96 = $6;
 $97 = ((($96)) + 12|0);
 $98 = +HEAPF32[$97>>2];
 $101 = $98;
 $99 = $6;
 $100 = ((($99)) + 12|0);
 HEAPF32[$100>>2] = $101;
 STACKTOP = sp;return;
}
function _nk_group_begin($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((2989|0),(1320|0),20432,(20343|0));
  // unreachable;
 }
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((18713|0),(1320|0),20433,(20343|0));
  // unreachable;
 }
 $16 = $4;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((19010|0),(1320|0),20434,(20343|0));
  // unreachable;
 }
 $20 = $4;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((18968|0),(1320|0),20435,(20343|0));
  // unreachable;
 }
 $26 = $4;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $4;
  $29 = ((($28)) + 12908|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = $4;
   $33 = ((($32)) + 12908|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 140|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0|0);
   $38 = $5;
   $39 = ($38|0)!=(0|0);
   $or$cond = $37 & $39;
   if ($or$cond) {
    $40 = $4;
    $41 = ((($40)) + 12908|0);
    $42 = HEAP32[$41>>2]|0;
    $9 = $42;
    $43 = $5;
    $44 = (_nk_strlen($43)|0);
    $7 = $44;
    $45 = $5;
    $46 = $7;
    $47 = (_nk_murmur_hash($45,$46,2)|0);
    $8 = $47;
    $48 = $9;
    $49 = $8;
    $50 = (_nk_find_value($48,$49)|0);
    $10 = $50;
    $51 = $10;
    $52 = ($51|0)!=(0|0);
    do {
     if ($52) {
      $72 = $9;
      $73 = $8;
      $74 = (($73) + 1)|0;
      $75 = (_nk_find_value($72,$74)|0);
      $11 = $75;
     } else {
      $53 = $4;
      $54 = $9;
      $55 = $8;
      $56 = (_nk_add_value($53,$54,$55,0)|0);
      $10 = $56;
      $57 = $4;
      $58 = $9;
      $59 = $8;
      $60 = (($59) + 1)|0;
      $61 = (_nk_add_value($57,$58,$60,0)|0);
      $11 = $61;
      $62 = $10;
      $63 = ($62|0)!=(0|0);
      if (!($63)) {
       ___assert_fail((20358|0),(1320|0),20448,(20343|0));
       // unreachable;
      }
      $64 = $11;
      $65 = ($64|0)!=(0|0);
      if (!($65)) {
       ___assert_fail((20367|0),(1320|0),20449,(20343|0));
       // unreachable;
      }
      $66 = $10;
      $67 = ($66|0)!=(0|0);
      $68 = $11;
      $69 = ($68|0)!=(0|0);
      $or$cond3 = $67 & $69;
      if ($or$cond3) {
       $70 = $11;
       HEAP32[$70>>2] = 0;
       $71 = $10;
       HEAP32[$71>>2] = 0;
       break;
      }
      $3 = 0;
      $82 = $3;
      STACKTOP = sp;return ($82|0);
     }
    } while(0);
    $76 = $4;
    $77 = $10;
    $78 = $11;
    $79 = $5;
    $80 = $6;
    $81 = (_nk_group_scrolled_offset_begin($76,$77,$78,$79,$80)|0);
    $3 = $81;
    $82 = $3;
    STACKTOP = sp;return ($82|0);
   }
  }
 }
 $3 = 0;
 $82 = $3;
 STACKTOP = sp;return ($82|0);
}
function _nk_find_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 346|0);
 $10 = HEAP16[$9>>1]|0;
 $5 = $10;
 $11 = $3;
 $12 = ((($11)) + 340|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 L1: while(1) {
  $14 = $6;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 9;
   break;
  }
  $7 = 0;
  $7 = 0;
  while(1) {
   $16 = $7;
   $17 = $16&65535;
   $18 = $5;
   $19 = $18&65535;
   $20 = ($17|0)<($19|0);
   if (!($20)) {
    break;
   }
   $21 = $7;
   $22 = $21&65535;
   $23 = $6;
   $24 = ((($23)) + 4|0);
   $25 = (($24) + ($22<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $4;
   $28 = ($26|0)==($27|0);
   if ($28) {
    label = 6;
    break L1;
   }
   $37 = $7;
   $38 = (($37) + 1)<<16>>16;
   $7 = $38;
  }
  $5 = 45;
  $39 = $6;
  $40 = ((($39)) + 364|0);
  $41 = HEAP32[$40>>2]|0;
  $6 = $41;
 }
 if ((label|0) == 6) {
  $29 = $3;
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  HEAP32[$31>>2] = $30;
  $32 = $7;
  $33 = $32&65535;
  $34 = $6;
  $35 = ((($34)) + 184|0);
  $36 = (($35) + ($33<<2)|0);
  $2 = $36;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 9) {
  $2 = 0;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _nk_add_value($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((2989|0),(1320|0),17029,(24850|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((18871|0),(1320|0),17030,(24850|0));
  // unreachable;
 }
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 $16 = $5;
 $17 = ($16|0)!=(0|0);
 $or$cond = $15 & $17;
 if (!($or$cond)) {
  $4 = 0;
  $70 = $4;
  STACKTOP = sp;return ($70|0);
 }
 $18 = $6;
 $19 = ((($18)) + 340|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $6;
  $23 = ((($22)) + 346|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = ($25>>>0)>=(45);
  if ($26) {
   label = 9;
  }
 } else {
  label = 9;
 }
 do {
  if ((label|0) == 9) {
   $27 = $5;
   $28 = (_nk_create_table($27)|0);
   $9 = $28;
   $29 = $9;
   $30 = ($29|0)!=(0|0);
   if (!($30)) {
    ___assert_fail((24863|0),(1320|0),17034,(24850|0));
    // unreachable;
   }
   $31 = $9;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $6;
    $34 = $9;
    _nk_push_table($33,$34);
    break;
   }
   $4 = 0;
   $70 = $4;
   STACKTOP = sp;return ($70|0);
  }
 } while(0);
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $37 = $6;
 $38 = ((($37)) + 340|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$39>>2] = $36;
 $40 = $7;
 $41 = $6;
 $42 = ((($41)) + 346|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = $6;
 $46 = ((($45)) + 340|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 4|0);
 $49 = (($48) + ($44<<2)|0);
 HEAP32[$49>>2] = $40;
 $50 = $8;
 $51 = $6;
 $52 = ((($51)) + 346|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = $6;
 $56 = ((($55)) + 340|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($57)) + 184|0);
 $59 = (($58) + ($54<<2)|0);
 HEAP32[$59>>2] = $50;
 $60 = $6;
 $61 = ((($60)) + 346|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = (($62) + 1)<<16>>16;
 HEAP16[$61>>1] = $63;
 $64 = $62&65535;
 $65 = $6;
 $66 = ((($65)) + 340|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 184|0);
 $69 = (($68) + ($64<<2)|0);
 $4 = $69;
 $70 = $4;
 STACKTOP = sp;return ($70|0);
}
function _nk_group_end($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _nk_group_scrolled_end($2);
 STACKTOP = sp;return;
}
function _nk_iceilf($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = $6 >= 0.0;
 $8 = $2;
 $9 = (~~(($8)));
 if ($7) {
  $3 = $9;
  $10 = $3;
  $1 = $10;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $4 = $9;
  $11 = $2;
  $12 = $4;
  $13 = (+($12|0));
  $14 = $11 - $13;
  $5 = $14;
  $15 = $5;
  $16 = $15 > 0.0;
  $17 = $4;
  $18 = (($17) + 1)|0;
  $19 = $16 ? $18 : $17;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _nk_popup_begin($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $nk_null_rect$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $nk_null_rect$byval_copy = sp + 56|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((2989|0),(1320|0),20551,(20376|0));
  // unreachable;
 }
 $20 = $8;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((18713|0),(1320|0),20552,(20376|0));
  // unreachable;
 }
 $22 = $6;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((19010|0),(1320|0),20553,(20376|0));
  // unreachable;
 }
 $26 = $6;
 $27 = ((($26)) + 12908|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 140|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((18968|0),(1320|0),20554,(20376|0));
  // unreachable;
 }
 $32 = $6;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $6;
  $35 = ((($34)) + 12908|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $6;
   $39 = ((($38)) + 12908|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 140|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    $44 = $6;
    $45 = ((($44)) + 12908|0);
    $46 = HEAP32[$45>>2]|0;
    $11 = $46;
    $47 = $11;
    $48 = ((($47)) + 140|0);
    $49 = HEAP32[$48>>2]|0;
    $12 = $49;
    $50 = $12;
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 & 244;
    $53 = ($52|0)!=(0);
    if ($53) {
     ___assert_fail((20391|0),(1320|0),20560,(20376|0));
     // unreachable;
    }
    $54 = $8;
    $55 = (_nk_strlen($54)|0);
    $13 = $55;
    $56 = $8;
    $57 = $13;
    $58 = (_nk_murmur_hash($56,$57,4)|0);
    $14 = $58;
    $59 = $11;
    $60 = ((($59)) + 244|0);
    $61 = HEAP32[$60>>2]|0;
    $10 = $61;
    $62 = $10;
    $63 = ($62|0)!=(0|0);
    if (!($63)) {
     $64 = $6;
     $65 = (_nk_create_window($64)|0);
     $10 = $65;
     $66 = $11;
     $67 = $10;
     $68 = ((($67)) + 356|0);
     HEAP32[$68>>2] = $66;
     $69 = $10;
     $70 = $11;
     $71 = ((($70)) + 244|0);
     HEAP32[$71>>2] = $69;
     $72 = $11;
     $73 = ((($72)) + 244|0);
     $74 = ((($73)) + 12|0);
     HEAP32[$74>>2] = 0;
     $75 = $11;
     $76 = ((($75)) + 244|0);
     $77 = ((($76)) + 4|0);
     HEAP32[$77>>2] = 4;
    }
    $78 = $11;
    $79 = ((($78)) + 244|0);
    $80 = ((($79)) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $14;
    $83 = ($81|0)!=($82|0);
    do {
     if ($83) {
      $84 = $11;
      $85 = ((($84)) + 244|0);
      $86 = ((($85)) + 12|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($87|0)!=(0);
      if (!($88)) {
       $89 = $10;
       _nk_zero($89,360);
       $90 = $14;
       $91 = $11;
       $92 = ((($91)) + 244|0);
       $93 = ((($92)) + 8|0);
       HEAP32[$93>>2] = $90;
       $94 = $11;
       $95 = ((($94)) + 244|0);
       $96 = ((($95)) + 12|0);
       HEAP32[$96>>2] = 1;
       $97 = $11;
       $98 = ((($97)) + 244|0);
       $99 = ((($98)) + 4|0);
       HEAP32[$99>>2] = 4;
       break;
      }
      $5 = 0;
      $230 = $5;
      STACKTOP = sp;return ($230|0);
     }
    } while(0);
    $100 = $10;
    $101 = $6;
    $102 = ((($101)) + 12908|0);
    HEAP32[$102>>2] = $100;
    $103 = $11;
    $104 = ((($103)) + 140|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($105)) + 60|0);
    $107 = +HEAPF32[$106>>2];
    $108 = +HEAPF32[$4>>2];
    $109 = $108 + $107;
    HEAPF32[$4>>2] = $109;
    $110 = $11;
    $111 = ((($110)) + 140|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ((($112)) + 60|0);
    $114 = ((($113)) + 4|0);
    $115 = +HEAPF32[$114>>2];
    $116 = ((($4)) + 4|0);
    $117 = +HEAPF32[$116>>2];
    $118 = $117 + $115;
    HEAPF32[$116>>2] = $118;
    $119 = $11;
    $120 = $10;
    $121 = ((($120)) + 356|0);
    HEAP32[$121>>2] = $119;
    $122 = $10;
    $123 = ((($122)) + 76|0);
    ;HEAP32[$123>>2]=HEAP32[$4>>2]|0;HEAP32[$123+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$123+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$123+12>>2]=HEAP32[$4+12>>2]|0;
    $124 = $6;
    $125 = ((($124)) + 12920|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $10;
    HEAP32[$127>>2] = $126;
    $128 = $6;
    $129 = (_nk_create_panel($128)|0);
    $130 = $10;
    $131 = ((($130)) + 140|0);
    HEAP32[$131>>2] = $129;
    $132 = $9;
    $133 = $10;
    $134 = ((($133)) + 72|0);
    HEAP32[$134>>2] = $132;
    $135 = $10;
    $136 = ((($135)) + 72|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 | 1;
    HEAP32[$136>>2] = $138;
    $139 = $7;
    $140 = ($139|0)==(1);
    if ($140) {
     $141 = $10;
     $142 = ((($141)) + 72|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $143 | 1024;
     HEAP32[$142>>2] = $144;
    }
    $145 = $10;
    $146 = ((($145)) + 100|0);
    $147 = $11;
    $148 = ((($147)) + 100|0);
    dest=$146; src=$148; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $149 = $6;
    $150 = $11;
    _nk_start_popup($149,$150);
    $151 = $6;
    $152 = ((($151)) + 5724|0);
    $153 = ((($152)) + 44|0);
    $154 = HEAP32[$153>>2]|0;
    $15 = $154;
    $155 = $10;
    $156 = ((($155)) + 100|0);
    ;HEAP32[$nk_null_rect$byval_copy>>2]=HEAP32[8>>2]|0;HEAP32[$nk_null_rect$byval_copy+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$nk_null_rect$byval_copy+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$nk_null_rect$byval_copy+12>>2]=HEAP32[8+12>>2]|0;
    _nk_push_scissor($156,$nk_null_rect$byval_copy);
    $157 = $6;
    $158 = $8;
    $159 = (_nk_panel_begin($157,$158,4)|0);
    $160 = ($159|0)!=(0);
    $161 = $11;
    $162 = ((($161)) + 140|0);
    $163 = HEAP32[$162>>2]|0;
    if ($160) {
     $16 = $163;
     while(1) {
      $164 = $16;
      $165 = ($164|0)!=(0|0);
      if (!($165)) {
       break;
      }
      $166 = $16;
      $167 = ((($166)) + 4|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = $168 | 2048;
      HEAP32[$167>>2] = $169;
      $170 = $16;
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = $172 & -32769;
      HEAP32[$171>>2] = $173;
      $174 = $16;
      $175 = ((($174)) + 360|0);
      $176 = HEAP32[$175>>2]|0;
      $16 = $176;
     }
     $177 = $11;
     $178 = ((($177)) + 244|0);
     $179 = ((($178)) + 12|0);
     HEAP32[$179>>2] = 1;
     $180 = $10;
     $181 = ((($180)) + 92|0);
     $182 = $10;
     $183 = ((($182)) + 140|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((($184)) + 24|0);
     HEAP32[$185>>2] = $181;
     $186 = $10;
     $187 = ((($186)) + 92|0);
     $188 = ((($187)) + 4|0);
     $189 = $10;
     $190 = ((($189)) + 140|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((($191)) + 28|0);
     HEAP32[$192>>2] = $188;
     $193 = $11;
     $194 = ((($193)) + 140|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $10;
     $197 = ((($196)) + 140|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ((($198)) + 360|0);
     HEAP32[$199>>2] = $195;
     $5 = 1;
     $230 = $5;
     STACKTOP = sp;return ($230|0);
    } else {
     $17 = $163;
     while(1) {
      $200 = $17;
      $201 = ($200|0)!=(0|0);
      if (!($201)) {
       break;
      }
      $202 = $17;
      $203 = ((($202)) + 4|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = $204 | 32768;
      HEAP32[$203>>2] = $205;
      $206 = $17;
      $207 = ((($206)) + 360|0);
      $208 = HEAP32[$207>>2]|0;
      $17 = $208;
     }
     $209 = $11;
     $210 = ((($209)) + 140|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ((($211)) + 336|0);
     $213 = ((($212)) + 16|0);
     HEAP32[$213>>2] = 0;
     $214 = $11;
     $215 = ((($214)) + 244|0);
     $216 = ((($215)) + 12|0);
     HEAP32[$216>>2] = 0;
     $217 = $15;
     $218 = $6;
     $219 = ((($218)) + 5724|0);
     $220 = ((($219)) + 44|0);
     HEAP32[$220>>2] = $217;
     $221 = $11;
     $222 = $6;
     $223 = ((($222)) + 12908|0);
     HEAP32[$223>>2] = $221;
     $224 = $6;
     $225 = $10;
     $226 = ((($225)) + 140|0);
     $227 = HEAP32[$226>>2]|0;
     _nk_free_panel($224,$227);
     $228 = $10;
     $229 = ((($228)) + 140|0);
     HEAP32[$229>>2] = 0;
     $5 = 0;
     $230 = $5;
     STACKTOP = sp;return ($230|0);
    }
   }
  }
 }
 $5 = 0;
 $230 = $5;
 STACKTOP = sp;return ($230|0);
}
function _nk_start_popup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),16133,(24867|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((18871|0),(1320|0),16134,(24867|0));
  // unreachable;
 }
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $14 = $3;
 $15 = ((($14)) + 140|0);
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 while(1) {
  $17 = $5;
  $18 = ((($17)) + 360|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  $21 = $5;
  if (!($20)) {
   break;
  }
  $22 = ((($21)) + 360|0);
  $23 = HEAP32[$22>>2]|0;
  $5 = $23;
 }
 $24 = ((($21)) + 336|0);
 $4 = $24;
 $25 = $3;
 $26 = ((($25)) + 100|0);
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $4;
 HEAP32[$29>>2] = $28;
 $30 = $3;
 $31 = ((($30)) + 100|0);
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $4;
 $35 = ((($34)) + 12|0);
 HEAP32[$35>>2] = $33;
 $36 = $3;
 $37 = ((($36)) + 100|0);
 $38 = ((($37)) + 36|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $4;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 $42 = $4;
 $43 = HEAP32[$42>>2]|0;
 $44 = $4;
 $45 = ((($44)) + 8|0);
 HEAP32[$45>>2] = $43;
 $46 = $4;
 $47 = ((($46)) + 16|0);
 HEAP32[$47>>2] = 1;
 STACKTOP = sp;return;
}
function _nk_popup_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2989|0),(1320|0),20720,(20470|0));
  // unreachable;
 }
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 12908|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = ((($11)) + 12908|0);
 $13 = HEAP32[$12>>2]|0;
 $2 = $13;
 $14 = $2;
 $15 = ((($14)) + 356|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((20485|0),(1320|0),20724,(20470|0));
  // unreachable;
 }
 $18 = $2;
 $19 = ((($18)) + 140|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 244;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  ___assert_fail((20499|0),(1320|0),20725,(20470|0));
  // unreachable;
 }
 $24 = $2;
 $25 = ((($24)) + 72|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | 4096;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function _nk_popup_end($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $nk_null_rect$byval_copy = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $nk_null_rect$byval_copy = sp + 16|0;
 $1 = $0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((2989|0),(1320|0),20735,(20540|0));
  // unreachable;
 }
 $7 = $1;
 $8 = ((($7)) + 12908|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((19010|0),(1320|0),20736,(20540|0));
  // unreachable;
 }
 $11 = $1;
 $12 = ((($11)) + 12908|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 140|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((18968|0),(1320|0),20737,(20540|0));
  // unreachable;
 }
 $17 = $1;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $1;
 $20 = ((($19)) + 12908|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 $24 = ((($23)) + 12908|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 140|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($29)) + 12908|0);
 $31 = HEAP32[$30>>2]|0;
 $3 = $31;
 $32 = $3;
 $33 = ((($32)) + 356|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $3;
 $37 = ((($36)) + 356|0);
 $38 = HEAP32[$37>>2]|0;
 $2 = $38;
 $39 = $3;
 $40 = ((($39)) + 72|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 4096;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $2;
  $45 = ((($44)) + 140|0);
  $46 = HEAP32[$45>>2]|0;
  $4 = $46;
  while(1) {
   $47 = $4;
   $48 = ($47|0)!=(0|0);
   if (!($48)) {
    break;
   }
   $49 = $4;
   $50 = ((($49)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $51 | 32768;
   HEAP32[$50>>2] = $52;
   $53 = $4;
   $54 = ((($53)) + 360|0);
   $55 = HEAP32[$54>>2]|0;
   $4 = $55;
  }
  $56 = $2;
  $57 = ((($56)) + 244|0);
  $58 = ((($57)) + 12|0);
  HEAP32[$58>>2] = 0;
 }
 $59 = $3;
 $60 = ((($59)) + 100|0);
 ;HEAP32[$nk_null_rect$byval_copy>>2]=HEAP32[8>>2]|0;HEAP32[$nk_null_rect$byval_copy+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$nk_null_rect$byval_copy+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$nk_null_rect$byval_copy+12>>2]=HEAP32[8+12>>2]|0;
 _nk_push_scissor($60,$nk_null_rect$byval_copy);
 $61 = $1;
 _nk_end($61);
 $62 = $2;
 $63 = ((($62)) + 100|0);
 $64 = $3;
 $65 = ((($64)) + 100|0);
 dest=$63; src=$65; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $66 = $1;
 $67 = $2;
 _nk_finish_popup($66,$67);
 $68 = $2;
 $69 = $1;
 $70 = ((($69)) + 12908|0);
 HEAP32[$70>>2] = $68;
 $71 = $2;
 $72 = ((($71)) + 100|0);
 $73 = $2;
 $74 = ((($73)) + 140|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($75)) + 60|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$76>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$76+12>>2]|0;
 _nk_push_scissor($72,$$byval_copy);
 STACKTOP = sp;return;
}
function _nk_finish_popup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((2989|0),(1320|0),16156,(24882|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((18871|0),(1320|0),16157,(24882|0));
  // unreachable;
 }
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $14 = $3;
 $15 = ((($14)) + 140|0);
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 while(1) {
  $17 = $5;
  $18 = ((($17)) + 360|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  $21 = $5;
  if (!($20)) {
   break;
  }
  $22 = ((($21)) + 360|0);
  $23 = HEAP32[$22>>2]|0;
  $5 = $23;
 }
 $24 = ((($21)) + 336|0);
 $4 = $24;
 $25 = $3;
 $26 = ((($25)) + 100|0);
 $27 = ((($26)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $4;
 $30 = ((($29)) + 8|0);
 HEAP32[$30>>2] = $28;
 $31 = $3;
 $32 = ((($31)) + 100|0);
 $33 = ((($32)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $4;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = $34;
 STACKTOP = sp;return;
}
function _nk_tooltip_begin($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 48|0;
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((2989|0),(1320|0),20774,(20553|0));
  // unreachable;
 }
 $11 = $3;
 $12 = ((($11)) + 12908|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((19010|0),(1320|0),20775,(20553|0));
  // unreachable;
 }
 $15 = $3;
 $16 = ((($15)) + 12908|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 140|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((18968|0),(1320|0),20776,(20553|0));
  // unreachable;
 }
 $21 = $3;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $3;
  $24 = ((($23)) + 12908|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $3;
   $28 = ((($27)) + 12908|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 140|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $3;
    $34 = ((($33)) + 12908|0);
    $35 = HEAP32[$34>>2]|0;
    $5 = $35;
    $36 = $3;
    $6 = $36;
    $37 = $5;
    $38 = ((($37)) + 244|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)!=(0|0);
    if ($40) {
     $41 = $5;
     $42 = ((($41)) + 244|0);
     $43 = ((($42)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $44 & 240;
     $46 = ($45|0)!=(0);
     if ($46) {
      $2 = 0;
      $95 = $2;
      STACKTOP = sp;return ($95|0);
     }
    }
    $47 = $4;
    $48 = ((($7)) + 8|0);
    HEAPF32[$48>>2] = $47;
    $49 = +HEAPF32[(20)>>2];
    $50 = ((($7)) + 12|0);
    HEAPF32[$50>>2] = $49;
    $51 = $6;
    $52 = ((($51)) + 260|0);
    $53 = ((($52)) + 48|0);
    $54 = +HEAPF32[$53>>2];
    $55 = $54 + 1.0;
    $56 = $5;
    $57 = ((($56)) + 140|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($58)) + 60|0);
    $60 = +HEAPF32[$59>>2];
    $61 = $55 - $60;
    HEAPF32[$7>>2] = $61;
    $62 = $6;
    $63 = ((($62)) + 260|0);
    $64 = ((($63)) + 48|0);
    $65 = ((($64)) + 4|0);
    $66 = +HEAPF32[$65>>2];
    $67 = $66 + 1.0;
    $68 = $5;
    $69 = ((($68)) + 140|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 60|0);
    $72 = ((($71)) + 4|0);
    $73 = +HEAPF32[$72>>2];
    $74 = $67 - $73;
    $75 = ((($7)) + 4|0);
    HEAPF32[$75>>2] = $74;
    $76 = $3;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$7+12>>2]|0;
    $77 = (_nk_popup_begin($76,1,20570,33,$$byval_copy)|0);
    $8 = $77;
    $78 = $8;
    $79 = ($78|0)!=(0);
    if ($79) {
     $80 = $5;
     $81 = ((($80)) + 140|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($82)) + 4|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $84 & -2049;
     HEAP32[$83>>2] = $85;
    }
    $86 = $5;
    $87 = ((($86)) + 244|0);
    $88 = ((($87)) + 4|0);
    HEAP32[$88>>2] = 128;
    $89 = $3;
    $90 = ((($89)) + 12908|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ((($91)) + 140|0);
    $93 = HEAP32[$92>>2]|0;
    HEAP32[$93>>2] = 128;
    $94 = $8;
    $2 = $94;
    $95 = $2;
    STACKTOP = sp;return ($95|0);
   }
  }
 }
 $2 = 0;
 $95 = $2;
 STACKTOP = sp;return ($95|0);
}
function _nk_tooltip_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((2989|0),(1320|0),20802,(20586|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ((($4)) + 12908|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((19010|0),(1320|0),20803,(20586|0));
  // unreachable;
 }
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ((($10)) + 12908|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = ((($14)) + 12908|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[$16>>2] = $18;
 $19 = $1;
 _nk_popup_close($19);
 $20 = $1;
 _nk_popup_end($20);
 STACKTOP = sp;return;
}
function _nk_tooltip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 36|0;
 $5 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((2989|0),(1320|0),20820,(20601|0));
  // unreachable;
 }
 $11 = $2;
 $12 = ((($11)) + 12908|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  ___assert_fail((19010|0),(1320|0),20821,(20601|0));
  // unreachable;
 }
 $15 = $2;
 $16 = ((($15)) + 12908|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 140|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((18968|0),(1320|0),20822,(20601|0));
  // unreachable;
 }
 $21 = $3;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  ___assert_fail((1853|0),(1320|0),20823,(20601|0));
  // unreachable;
 }
 $23 = $2;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $2;
 $26 = ((($25)) + 12908|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $2;
 $30 = ((($29)) + 12908|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 140|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 $35 = $3;
 $36 = ($35|0)!=(0|0);
 $or$cond = $34 & $36;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $37 = $2;
 $38 = ((($37)) + 340|0);
 $4 = $38;
 $39 = $4;
 $40 = ((($39)) + 4832|0);
 $41 = ((($40)) + 496|0);
 ;HEAP32[$5>>2]=HEAP32[$41>>2]|0;HEAP32[$5+4>>2]=HEAP32[$41+4>>2]|0;
 $42 = $3;
 $43 = (_nk_strlen($42)|0);
 $6 = $43;
 $44 = $4;
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $4;
 $49 = HEAP32[$48>>2]|0;
 $50 = $4;
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 4|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $3;
 $55 = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$49>>2]|0;
 $56 = (+FUNCTION_TABLE_didii[$47 & 15]($$byval_copy,$53,$54,$55));
 $7 = $56;
 $57 = +HEAPF32[$5>>2];
 $58 = 4.0 * $57;
 $59 = $7;
 $60 = $59 + $58;
 $7 = $60;
 $61 = $4;
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($62)) + 4|0);
 $64 = +HEAPF32[$63>>2];
 $65 = ((($5)) + 4|0);
 $66 = +HEAPF32[$65>>2];
 $67 = 2.0 * $66;
 $68 = $64 + $67;
 $8 = $68;
 $69 = $2;
 $70 = $7;
 $71 = (_nk_tooltip_begin($69,$70)|0);
 $72 = ($71|0)!=(0);
 if (!($72)) {
  STACKTOP = sp;return;
 }
 $73 = $2;
 $74 = $8;
 _nk_layout_row_dynamic($73,$74,1);
 $75 = $2;
 $76 = $3;
 $77 = $6;
 _nk_text($75,$76,$77,17);
 $78 = $2;
 _nk_tooltip_end($78);
 STACKTOP = sp;return;
}
function _nk_contextual_begin($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy8 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $nk_contextual_begin$null_rect$byval_copy = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $nk_contextual_begin$null_rect$byval_copy = sp + 88|0;
 $$byval_copy8 = sp + 72|0;
 $$byval_copy = sp + 56|0;
 $9 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2989|0),(1320|0),20864,(20612|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((19010|0),(1320|0),20865,(20612|0));
  // unreachable;
 }
 $20 = $5;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((18968|0),(1320|0),20866,(20612|0));
  // unreachable;
 }
 $26 = $5;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $5;
  $29 = ((($28)) + 12908|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = $5;
   $33 = ((($32)) + 12908|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 140|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $5;
    $39 = ((($38)) + 12908|0);
    $40 = HEAP32[$39>>2]|0;
    $7 = $40;
    $41 = $7;
    $42 = ((($41)) + 244|0);
    $43 = ((($42)) + 20|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + 1)|0;
    HEAP32[$43>>2] = $45;
    $46 = $7;
    $47 = ((($46)) + 244|0);
    $48 = HEAP32[$47>>2]|0;
    $8 = $48;
    $49 = $8;
    $50 = ($49|0)!=(0|0);
    if ($50) {
     $51 = $7;
     $52 = ((($51)) + 244|0);
     $53 = ((($52)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(16);
     $57 = $55;
    } else {
     $57 = 0;
    }
    $56 = $57&1;
    $12 = $56;
    $58 = $5;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$3+12>>2]|0;
    $59 = (_nk_input_mouse_clicked($58,2,$$byval_copy)|0);
    $10 = $59;
    $60 = $7;
    $61 = ((($60)) + 244|0);
    $62 = ((($61)) + 28|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)!=(0);
    if ($64) {
     $65 = $7;
     $66 = ((($65)) + 244|0);
     $67 = ((($66)) + 20|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $7;
     $70 = ((($69)) + 244|0);
     $71 = ((($70)) + 28|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($68|0)!=($72|0);
     if ($73) {
      $4 = 0;
      $137 = $4;
      STACKTOP = sp;return ($137|0);
     }
    }
    $74 = $10;
    $75 = ($74|0)!=(0);
    $76 = $12;
    $77 = ($76|0)!=(0);
    $or$cond = $75 & $77;
    $or$cond$not = $or$cond ^ 1;
    $78 = $11;
    $79 = ($78|0)!=(0);
    $or$cond3 = $or$cond$not | $79;
    if ($or$cond3) {
     $80 = $12;
     $81 = ($80|0)!=(0);
     $82 = $11;
     $83 = ($82|0)!=(0);
     $or$cond5 = $81 | $83;
     $84 = $10;
     $85 = ($84|0)!=(0);
     $or$cond7 = $or$cond5 | $85;
     if ($or$cond7) {
      $86 = $7;
      $87 = ((($86)) + 244|0);
      $88 = ((($87)) + 20|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = $7;
      $91 = ((($90)) + 244|0);
      $92 = ((($91)) + 28|0);
      HEAP32[$92>>2] = $89;
      $93 = $10;
      $94 = ($93|0)!=(0);
      if ($94) {
       $95 = $5;
       $96 = ((($95)) + 260|0);
       $97 = ((($96)) + 48|0);
       $98 = +HEAPF32[$97>>2];
       HEAPF32[$9>>2] = $98;
       $99 = $5;
       $100 = ((($99)) + 260|0);
       $101 = ((($100)) + 48|0);
       $102 = ((($101)) + 4|0);
       $103 = +HEAPF32[$102>>2];
       $104 = ((($9)) + 4|0);
       HEAPF32[$104>>2] = $103;
      } else {
       $105 = $8;
       $106 = ((($105)) + 76|0);
       $107 = +HEAPF32[$106>>2];
       HEAPF32[$9>>2] = $107;
       $108 = $8;
       $109 = ((($108)) + 76|0);
       $110 = ((($109)) + 4|0);
       $111 = +HEAPF32[$110>>2];
       $112 = ((($9)) + 4|0);
       HEAPF32[$112>>2] = $111;
      }
      $113 = +HEAPF32[$2>>2];
      $114 = ((($9)) + 8|0);
      HEAPF32[$114>>2] = $113;
      $115 = ((($2)) + 4|0);
      $116 = +HEAPF32[$115>>2];
      $117 = ((($9)) + 12|0);
      HEAPF32[$117>>2] = $116;
      $118 = $5;
      $119 = $6;
      $120 = $119 | 32;
      ;HEAP32[$$byval_copy8>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$9+12>>2]|0;
      ;HEAP32[$nk_contextual_begin$null_rect$byval_copy>>2]=HEAP32[30368>>2]|0;HEAP32[$nk_contextual_begin$null_rect$byval_copy+4>>2]=HEAP32[30368+4>>2]|0;HEAP32[$nk_contextual_begin$null_rect$byval_copy+8>>2]=HEAP32[30368+8>>2]|0;HEAP32[$nk_contextual_begin$null_rect$byval_copy+12>>2]=HEAP32[30368+12>>2]|0;
      $121 = (_nk_nonblock_begin($118,$120,$$byval_copy8,$nk_contextual_begin$null_rect$byval_copy,16)|0);
      $13 = $121;
      $122 = $13;
      $123 = ($122|0)!=(0);
      $124 = $7;
      $125 = ((($124)) + 244|0);
      if ($123) {
       $126 = ((($125)) + 4|0);
       HEAP32[$126>>2] = 16;
      } else {
       $127 = ((($125)) + 28|0);
       HEAP32[$127>>2] = 0;
       $128 = $7;
       $129 = ((($128)) + 244|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = ($130|0)!=(0|0);
       if ($131) {
        $132 = $7;
        $133 = ((($132)) + 244|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = ((($134)) + 72|0);
        HEAP32[$135>>2] = 0;
       }
      }
      $136 = $13;
      $4 = $136;
      $137 = $4;
      STACKTOP = sp;return ($137|0);
     }
    }
    $4 = 0;
    $137 = $4;
    STACKTOP = sp;return ($137|0);
   }
  }
 }
 $4 = 0;
 $137 = $4;
 STACKTOP = sp;return ($137|0);
}
function _nk_nonblock_begin($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $nk_null_rect$byval_copy = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $nk_null_rect$byval_copy = sp + 88|0;
 $$byval_copy2 = sp + 72|0;
 $$byval_copy = sp + 56|0;
 $6 = $0;
 $7 = $1;
 $8 = $4;
 $12 = 1;
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((2989|0),(1320|0),20645,(24898|0));
  // unreachable;
 }
 $20 = $6;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((19010|0),(1320|0),20646,(24898|0));
  // unreachable;
 }
 $24 = $6;
 $25 = ((($24)) + 12908|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  ___assert_fail((18968|0),(1320|0),20647,(24898|0));
  // unreachable;
 }
 $30 = $6;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $6;
  $33 = ((($32)) + 12908|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $6;
   $37 = ((($36)) + 12908|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 140|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $42 = $6;
    $43 = ((($42)) + 12908|0);
    $44 = HEAP32[$43>>2]|0;
    $10 = $44;
    $45 = $10;
    $46 = ((($45)) + 140|0);
    $47 = HEAP32[$46>>2]|0;
    $11 = $47;
    $48 = $11;
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 244;
    $51 = ($50|0)!=(0);
    if ($51) {
     ___assert_fail((24916|0),(1320|0),20654,(24898|0));
     // unreachable;
    }
    $52 = $10;
    $53 = ((($52)) + 244|0);
    $54 = HEAP32[$53>>2]|0;
    $9 = $54;
    $55 = $9;
    $56 = ($55|0)!=(0|0);
    $57 = $6;
    if ($56) {
     $73 = (_nk_input_is_mouse_pressed($57,0)|0);
     $13 = $73;
     $74 = $6;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
     $75 = (_nk_input_is_mouse_hovering_rect($74,$$byval_copy)|0);
     $14 = $75;
     $76 = $6;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$3+12>>2]|0;
     $77 = (_nk_input_is_mouse_hovering_rect($76,$$byval_copy2)|0);
     $15 = $77;
     $78 = $13;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = $14;
      $81 = ($80|0)==(0);
      $82 = $15;
      $83 = ($82|0)!=(0);
      $or$cond = $81 | $83;
      if ($or$cond) {
       $12 = 0;
      }
     }
    } else {
     $58 = (_nk_create_window($57)|0);
     $9 = $58;
     $59 = $10;
     $60 = $9;
     $61 = ((($60)) + 356|0);
     HEAP32[$61>>2] = $59;
     $62 = $9;
     $63 = $10;
     $64 = ((($63)) + 244|0);
     HEAP32[$64>>2] = $62;
     $65 = $8;
     $66 = $10;
     $67 = ((($66)) + 244|0);
     $68 = ((($67)) + 4|0);
     HEAP32[$68>>2] = $65;
     $69 = $9;
     $70 = ((($69)) + 100|0);
     $71 = $6;
     $72 = ((($71)) + 5724|0);
     _nk_command_buffer_init($70,$72,1);
    }
    $84 = $10;
    $85 = ((($84)) + 244|0);
    $86 = ((($85)) + 32|0);
    ;HEAP32[$86>>2]=HEAP32[$3>>2]|0;HEAP32[$86+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$86+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$86+12>>2]=HEAP32[$3+12>>2]|0;
    $87 = $12;
    $88 = ($87|0)!=(0);
    if (!($88)) {
     $89 = $10;
     $90 = ((($89)) + 140|0);
     $91 = HEAP32[$90>>2]|0;
     $16 = $91;
     while(1) {
      $92 = $16;
      $93 = ($92|0)!=(0|0);
      if (!($93)) {
       break;
      }
      $94 = $16;
      $95 = ((($94)) + 4|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $96 | 32768;
      HEAP32[$95>>2] = $97;
      $98 = $16;
      $99 = ((($98)) + 360|0);
      $100 = HEAP32[$99>>2]|0;
      $16 = $100;
     }
     $101 = $12;
     $5 = $101;
     $183 = $5;
     STACKTOP = sp;return ($183|0);
    }
    $102 = $9;
    $103 = ((($102)) + 76|0);
    ;HEAP32[$103>>2]=HEAP32[$2>>2]|0;HEAP32[$103+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$103+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$103+12>>2]=HEAP32[$2+12>>2]|0;
    $104 = $10;
    $105 = $9;
    $106 = ((($105)) + 356|0);
    HEAP32[$106>>2] = $104;
    $107 = $6;
    $108 = (_nk_create_panel($107)|0);
    $109 = $9;
    $110 = ((($109)) + 140|0);
    HEAP32[$110>>2] = $108;
    $111 = $7;
    $112 = $9;
    $113 = ((($112)) + 72|0);
    HEAP32[$113>>2] = $111;
    $114 = $9;
    $115 = ((($114)) + 72|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $116 | 1;
    HEAP32[$115>>2] = $117;
    $118 = $9;
    $119 = ((($118)) + 72|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $120 | 1024;
    HEAP32[$119>>2] = $121;
    $122 = $6;
    $123 = ((($122)) + 12920|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $9;
    HEAP32[$125>>2] = $124;
    $126 = $10;
    $127 = ((($126)) + 244|0);
    $128 = ((($127)) + 12|0);
    HEAP32[$128>>2] = 1;
    $129 = $9;
    $130 = ((($129)) + 140|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)!=(0|0);
    if (!($132)) {
     ___assert_fail((24952|0),(1320|0),20693,(24898|0));
     // unreachable;
    }
    $133 = $6;
    $134 = $10;
    _nk_start_popup($133,$134);
    $135 = $9;
    $136 = ((($135)) + 100|0);
    $137 = $10;
    $138 = ((($137)) + 100|0);
    dest=$136; src=$138; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $139 = $9;
    $140 = ((($139)) + 100|0);
    ;HEAP32[$nk_null_rect$byval_copy>>2]=HEAP32[8>>2]|0;HEAP32[$nk_null_rect$byval_copy+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$nk_null_rect$byval_copy+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$nk_null_rect$byval_copy+12>>2]=HEAP32[8+12>>2]|0;
    _nk_push_scissor($140,$nk_null_rect$byval_copy);
    $141 = $9;
    $142 = $6;
    $143 = ((($142)) + 12908|0);
    HEAP32[$143>>2] = $141;
    $144 = $6;
    $145 = $8;
    (_nk_panel_begin($144,0,$145)|0);
    $146 = $10;
    $147 = ((($146)) + 100|0);
    $148 = $9;
    $149 = ((($148)) + 100|0);
    dest=$147; src=$149; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $150 = $10;
    $151 = ((($150)) + 140|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $9;
    $154 = ((($153)) + 140|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($155)) + 360|0);
    HEAP32[$156>>2] = $152;
    $157 = $9;
    $158 = ((($157)) + 92|0);
    $159 = $9;
    $160 = ((($159)) + 140|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ((($161)) + 24|0);
    HEAP32[$162>>2] = $158;
    $163 = $9;
    $164 = ((($163)) + 92|0);
    $165 = ((($164)) + 4|0);
    $166 = $9;
    $167 = ((($166)) + 140|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = ((($168)) + 28|0);
    HEAP32[$169>>2] = $165;
    $170 = $10;
    $171 = ((($170)) + 140|0);
    $172 = HEAP32[$171>>2]|0;
    $17 = $172;
    while(1) {
     $173 = $17;
     $174 = ($173|0)!=(0|0);
     if (!($174)) {
      break;
     }
     $175 = $17;
     $176 = ((($175)) + 4|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $177 | 2048;
     HEAP32[$176>>2] = $178;
     $179 = $17;
     $180 = ((($179)) + 360|0);
     $181 = HEAP32[$180>>2]|0;
     $17 = $181;
    }
    $182 = $12;
    $5 = $182;
    $183 = $5;
    STACKTOP = sp;return ($183|0);
   }
  }
 }
 $5 = 0;
 $183 = $5;
 STACKTOP = sp;return ($183|0);
}
function _nk_contextual_item_text($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $12 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((2989|0),(1320|0),20917,(20632|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((19010|0),(1320|0),20918,(20632|0));
  // unreachable;
 }
 $20 = $5;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((18968|0),(1320|0),20919,(20632|0));
  // unreachable;
 }
 $26 = $5;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $5;
  $29 = ((($28)) + 12908|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = $5;
   $33 = ((($32)) + 12908|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 140|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $5;
    $39 = ((($38)) + 12908|0);
    $40 = HEAP32[$39>>2]|0;
    $9 = $40;
    $41 = $5;
    $42 = ((($41)) + 340|0);
    $11 = $42;
    $43 = $5;
    $44 = $11;
    $45 = ((($44)) + 184|0);
    $46 = ((($45)) + 92|0);
    ;HEAP32[$$byval_copy>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$46+4>>2]|0;
    $47 = (_nk_widget_fitting($12,$43,$$byval_copy)|0);
    $13 = $47;
    $48 = $13;
    $49 = ($48|0)!=(0);
    if (!($49)) {
     $4 = 0;
     $76 = $4;
     STACKTOP = sp;return ($76|0);
    }
    $50 = $13;
    $51 = ($50|0)==(2);
    if ($51) {
     $60 = 0;
    } else {
     $52 = $9;
     $53 = ((($52)) + 140|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 & 2048;
     $58 = ($57|0)!=(0);
     if ($58) {
      $60 = 0;
     } else {
      $59 = $5;
      $60 = $59;
     }
    }
    $10 = $60;
    $61 = $5;
    $62 = ((($61)) + 5796|0);
    $63 = $9;
    $64 = ((($63)) + 100|0);
    $65 = $6;
    $66 = $7;
    $67 = $8;
    $68 = $11;
    $69 = ((($68)) + 184|0);
    $70 = $10;
    $71 = $11;
    $72 = HEAP32[$71>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$12+12>>2]|0;
    $73 = (_nk_do_button_text($62,$64,$$byval_copy1,$65,$66,$67,0,$69,$70,$72)|0);
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $5;
     _nk_contextual_close($75);
     $4 = 1;
     $76 = $4;
     STACKTOP = sp;return ($76|0);
    } else {
     $4 = 0;
     $76 = $4;
     STACKTOP = sp;return ($76|0);
    }
   }
  }
 }
 $4 = 0;
 $76 = $4;
 STACKTOP = sp;return ($76|0);
}
function _nk_contextual_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((2989|0),(1320|0),21013,(20656|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ((($4)) + 12908|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((19010|0),(1320|0),21014,(20656|0));
  // unreachable;
 }
 $8 = $1;
 $9 = ((($8)) + 12908|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 140|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((18968|0),(1320|0),21015,(20656|0));
  // unreachable;
 }
 $14 = $1;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $1;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $1;
 _nk_popup_close($26);
 STACKTOP = sp;return;
}
function _nk_contextual_item_label($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $4;
 $9 = (_nk_strlen($8)|0);
 $10 = $5;
 $11 = (_nk_contextual_item_text($6,$7,$9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _nk_contextual_end($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 48|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $1 = $0;
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2989|0),(1320|0),21025,(20676|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 12908|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((19010|0),(1320|0),21026,(20676|0));
  // unreachable;
 }
 $14 = $1;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ((($16)) + 12908|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $1;
 $21 = ((($20)) + 12908|0);
 $22 = HEAP32[$21>>2]|0;
 $2 = $22;
 $23 = $2;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $3 = $25;
 $26 = $2;
 $27 = ((($26)) + 356|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  ___assert_fail((20485|0),(1320|0),21031,(20676|0));
  // unreachable;
 }
 $30 = $3;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 244;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  ___assert_fail((20694|0),(1320|0),21032,(20676|0));
  // unreachable;
 }
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 1024;
 $38 = ($37|0)!=(0);
 if ($38) {
  ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
  $39 = $3;
  $40 = ((($39)) + 36|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $3;
  $43 = ((($42)) + 8|0);
  $44 = ((($43)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $3;
  $47 = ((($46)) + 8|0);
  $48 = ((($47)) + 12|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $45 + $49;
  $51 = $41 < $50;
  if ($51) {
   $52 = $1;
   $53 = ((($52)) + 340|0);
   $54 = $3;
   $55 = HEAP32[$54>>2]|0;
   _nk_panel_get_padding($5,$53,$55);
   $56 = $3;
   $57 = ((($56)) + 8|0);
   ;HEAP32[$4>>2]=HEAP32[$57>>2]|0;HEAP32[$4+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$57+12>>2]|0;
   $58 = $3;
   $59 = ((($58)) + 36|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $3;
   $62 = ((($61)) + 44|0);
   $63 = +HEAPF32[$62>>2];
   $64 = $60 + $63;
   $65 = $3;
   $66 = ((($65)) + 52|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $64 + $67;
   $69 = ((($5)) + 4|0);
   $70 = +HEAPF32[$69>>2];
   $71 = $68 + $70;
   $72 = $3;
   $73 = ((($72)) + 100|0);
   $74 = ((($73)) + 8|0);
   $75 = +HEAPF32[$74>>2];
   $76 = $71 + $75;
   $77 = ((($4)) + 4|0);
   HEAPF32[$77>>2] = $76;
   $78 = $3;
   $79 = ((($78)) + 8|0);
   $80 = ((($79)) + 4|0);
   $81 = +HEAPF32[$80>>2];
   $82 = $3;
   $83 = ((($82)) + 8|0);
   $84 = ((($83)) + 12|0);
   $85 = +HEAPF32[$84>>2];
   $86 = $81 + $85;
   $87 = ((($4)) + 4|0);
   $88 = +HEAPF32[$87>>2];
   $89 = $86 - $88;
   $90 = ((($4)) + 12|0);
   HEAPF32[$90>>2] = $89;
  }
  $91 = $1;
  $92 = (_nk_input_is_mouse_pressed($91,0)|0);
  $6 = $92;
  $93 = $1;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$4+12>>2]|0;
  $94 = (_nk_input_is_mouse_hovering_rect($93,$$byval_copy)|0);
  $7 = $94;
  $95 = $6;
  $96 = ($95|0)!=(0);
  $97 = $7;
  $98 = ($97|0)!=(0);
  $or$cond = $96 & $98;
  if ($or$cond) {
   $99 = $2;
   $100 = ((($99)) + 72|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 | 4096;
   HEAP32[$100>>2] = $102;
  }
 }
 $103 = $2;
 $104 = ((($103)) + 72|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $105 & 4096;
 $107 = ($106|0)!=(0);
 if ($107) {
  $108 = $2;
  HEAP32[$108>>2] = 0;
 }
 $109 = $1;
 _nk_popup_end($109);
 STACKTOP = sp;return;
}
function _nk_combo_begin_text($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0.0;
 var $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0;
 var $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0;
 var $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0;
 var $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $nk_white$byval_copy = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy11 = sp + 232|0;
 $$byval_copy10 = sp + 224|0;
 $$byval_copy9 = sp + 208|0;
 $$byval_copy8 = sp + 260|0;
 $$byval_copy7 = sp + 192|0;
 $$byval_copy6 = sp + 256|0;
 $$byval_copy5 = sp + 176|0;
 $nk_white$byval_copy = sp + 252|0;
 $$byval_copy4 = sp + 160|0;
 $$byval_copy = sp + 144|0;
 $13 = sp + 88|0;
 $15 = sp + 64|0;
 $16 = sp + 248|0;
 $17 = sp + 48|0;
 $18 = sp + 32|0;
 $19 = sp + 16|0;
 $21 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $12 = 0;
 $22 = $5;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((2989|0),(1320|0),21112,(20727|0));
  // unreachable;
 }
 $24 = $6;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((20747|0),(1320|0),21113,(20727|0));
  // unreachable;
 }
 $26 = $5;
 $27 = ((($26)) + 12908|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  ___assert_fail((19010|0),(1320|0),21114,(20727|0));
  // unreachable;
 }
 $30 = $5;
 $31 = ((($30)) + 12908|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 140|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  ___assert_fail((18968|0),(1320|0),21115,(20727|0));
  // unreachable;
 }
 $36 = $5;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $5;
  $39 = ((($38)) + 12908|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0|0);
  if ($41) {
   $42 = $5;
   $43 = ((($42)) + 12908|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 140|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(0|0);
   $48 = $6;
   $49 = ($48|0)!=(0|0);
   $or$cond = $47 & $49;
   if ($or$cond) {
    $50 = $5;
    $51 = ((($50)) + 12908|0);
    $52 = HEAP32[$51>>2]|0;
    $9 = $52;
    $53 = $5;
    $54 = ((($53)) + 340|0);
    $10 = $54;
    $55 = $5;
    $56 = (_nk_widget($13,$55)|0);
    $11 = $56;
    $57 = $11;
    $58 = ($57|0)==(0);
    if ($58) {
     $4 = 0;
     $285 = $4;
     STACKTOP = sp;return ($285|0);
    }
    $59 = $9;
    $60 = ((($59)) + 140|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2048;
    $65 = ($64|0)!=(0);
    $66 = $11;
    $67 = ($66|0)==(2);
    $or$cond3 = $65 | $67;
    $68 = $5;
    $69 = $or$cond3 ? 0 : $68;
    $8 = $69;
    $70 = $5;
    $71 = ((($70)) + 5796|0);
    $72 = $8;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;
    $73 = (_nk_button_behavior($71,$$byval_copy,$72,0)|0);
    $74 = ($73|0)!=(0);
    if ($74) {
     $12 = 1;
    }
    $75 = $5;
    $76 = ((($75)) + 5796|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $77 & 32;
    $79 = ($78|0)!=(0);
    do {
     if ($79) {
      $80 = $10;
      $81 = ((($80)) + 4572|0);
      $82 = ((($81)) + 40|0);
      $14 = $82;
      $83 = ((($15)) + 12|0);
      $84 = $10;
      $85 = ((($84)) + 4572|0);
      $86 = ((($85)) + 72|0);
      ;HEAP32[$83>>2]=HEAP32[$86>>2]|0;
     } else {
      $87 = $5;
      $88 = ((($87)) + 5796|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = $89 & 16;
      $91 = ($90|0)!=(0);
      $92 = $10;
      $93 = ((($92)) + 4572|0);
      if ($91) {
       $94 = ((($93)) + 20|0);
       $14 = $94;
       $95 = ((($15)) + 12|0);
       $96 = $10;
       $97 = ((($96)) + 4572|0);
       $98 = ((($97)) + 68|0);
       ;HEAP32[$95>>2]=HEAP32[$98>>2]|0;
       break;
      } else {
       $14 = $93;
       $99 = ((($15)) + 12|0);
       $100 = $10;
       $101 = ((($100)) + 4572|0);
       $102 = ((($101)) + 64|0);
       ;HEAP32[$99>>2]=HEAP32[$102>>2]|0;
       break;
      }
     }
    } while(0);
    $103 = $14;
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)==(1);
    $106 = ((($15)) + 8|0);
    if ($105) {
     _nk_rgba($16,0,0,0,0);
     ;HEAP8[$106>>0]=HEAP8[$16>>0]|0;HEAP8[$106+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$106+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$106+3>>0]=HEAP8[$16+3>>0]|0;
     $107 = $9;
     $108 = ((($107)) + 100|0);
     $109 = $14;
     $110 = ((($109)) + 4|0);
     ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$13+12>>2]|0;
     ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
     _nk_draw_image($108,$$byval_copy4,$110,$nk_white$byval_copy);
    } else {
     $111 = $14;
     $112 = ((($111)) + 4|0);
     ;HEAP32[$106>>2]=HEAP32[$112>>2]|0;
     $113 = $9;
     $114 = ((($113)) + 100|0);
     $115 = $10;
     $116 = ((($115)) + 4572|0);
     $117 = ((($116)) + 232|0);
     $118 = +HEAPF32[$117>>2];
     $119 = $14;
     $120 = ((($119)) + 4|0);
     ;HEAP32[$$byval_copy5>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$13+12>>2]|0;
     ;HEAP8[$$byval_copy6>>0]=HEAP8[$120>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$120+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$120+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$120+3>>0]|0;
     _nk_fill_rect($114,$$byval_copy5,$118,$$byval_copy6);
     $121 = $9;
     $122 = ((($121)) + 100|0);
     $123 = $10;
     $124 = ((($123)) + 4572|0);
     $125 = ((($124)) + 232|0);
     $126 = +HEAPF32[$125>>2];
     $127 = $10;
     $128 = ((($127)) + 4572|0);
     $129 = ((($128)) + 228|0);
     $130 = +HEAPF32[$129>>2];
     $131 = $10;
     $132 = ((($131)) + 4572|0);
     $133 = ((($132)) + 60|0);
     ;HEAP32[$$byval_copy7>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$13+12>>2]|0;
     ;HEAP8[$$byval_copy8>>0]=HEAP8[$133>>0]|0;HEAP8[$$byval_copy8+1>>0]=HEAP8[$133+1>>0]|0;HEAP8[$$byval_copy8+2>>0]=HEAP8[$133+2>>0]|0;HEAP8[$$byval_copy8+3>>0]=HEAP8[$133+3>>0]|0;
     _nk_stroke_rect($122,$$byval_copy7,$126,$130,$$byval_copy8);
    }
    $134 = $5;
    $135 = ((($134)) + 5796|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $136 & 16;
    $138 = ($137|0)!=(0);
    do {
     if ($138) {
      $139 = $10;
      $140 = ((($139)) + 4572|0);
      $141 = ((($140)) + 220|0);
      $142 = HEAP32[$141>>2]|0;
      $20 = $142;
     } else {
      $143 = $12;
      $144 = ($143|0)!=(0);
      $145 = $10;
      $146 = ((($145)) + 4572|0);
      if ($144) {
       $147 = ((($146)) + 224|0);
       $148 = HEAP32[$147>>2]|0;
       $20 = $148;
       break;
      } else {
       $149 = ((($146)) + 216|0);
       $150 = HEAP32[$149>>2]|0;
       $20 = $150;
       break;
      }
     }
    } while(0);
    $151 = ((($13)) + 12|0);
    $152 = +HEAPF32[$151>>2];
    $153 = $10;
    $154 = ((($153)) + 4572|0);
    $155 = ((($154)) + 244|0);
    $156 = ((($155)) + 4|0);
    $157 = +HEAPF32[$156>>2];
    $158 = 2.0 * $157;
    $159 = $152 - $158;
    $160 = ((($18)) + 8|0);
    HEAPF32[$160>>2] = $159;
    $161 = +HEAPF32[$13>>2];
    $162 = ((($13)) + 8|0);
    $163 = +HEAPF32[$162>>2];
    $164 = $161 + $163;
    $165 = ((($13)) + 12|0);
    $166 = +HEAPF32[$165>>2];
    $167 = $164 - $166;
    $168 = $10;
    $169 = ((($168)) + 4572|0);
    $170 = ((($169)) + 244|0);
    $171 = +HEAPF32[$170>>2];
    $172 = $167 - $171;
    HEAPF32[$18>>2] = $172;
    $173 = ((($13)) + 4|0);
    $174 = +HEAPF32[$173>>2];
    $175 = $10;
    $176 = ((($175)) + 4572|0);
    $177 = ((($176)) + 244|0);
    $178 = ((($177)) + 4|0);
    $179 = +HEAPF32[$178>>2];
    $180 = $174 + $179;
    $181 = ((($18)) + 4|0);
    HEAPF32[$181>>2] = $180;
    $182 = ((($18)) + 8|0);
    $183 = +HEAPF32[$182>>2];
    $184 = ((($18)) + 12|0);
    HEAPF32[$184>>2] = $183;
    $185 = +HEAPF32[$18>>2];
    $186 = $10;
    $187 = ((($186)) + 4572|0);
    $188 = ((($187)) + 88|0);
    $189 = ((($188)) + 92|0);
    $190 = +HEAPF32[$189>>2];
    $191 = $185 + $190;
    HEAPF32[$19>>2] = $191;
    $192 = ((($18)) + 4|0);
    $193 = +HEAPF32[$192>>2];
    $194 = $10;
    $195 = ((($194)) + 4572|0);
    $196 = ((($195)) + 88|0);
    $197 = ((($196)) + 92|0);
    $198 = ((($197)) + 4|0);
    $199 = +HEAPF32[$198>>2];
    $200 = $193 + $199;
    $201 = ((($19)) + 4|0);
    HEAPF32[$201>>2] = $200;
    $202 = ((($18)) + 8|0);
    $203 = +HEAPF32[$202>>2];
    $204 = $10;
    $205 = ((($204)) + 4572|0);
    $206 = ((($205)) + 88|0);
    $207 = ((($206)) + 92|0);
    $208 = +HEAPF32[$207>>2];
    $209 = 2.0 * $208;
    $210 = $203 - $209;
    $211 = ((($19)) + 8|0);
    HEAPF32[$211>>2] = $210;
    $212 = ((($18)) + 12|0);
    $213 = +HEAPF32[$212>>2];
    $214 = $10;
    $215 = ((($214)) + 4572|0);
    $216 = ((($215)) + 88|0);
    $217 = ((($216)) + 92|0);
    $218 = ((($217)) + 4|0);
    $219 = +HEAPF32[$218>>2];
    $220 = 2.0 * $219;
    $221 = $213 - $220;
    $222 = ((($19)) + 12|0);
    HEAPF32[$222>>2] = $221;
    _nk_vec2($21,0.0,0.0);
    ;HEAP32[$15>>2]=HEAP32[$21>>2]|0;HEAP32[$15+4>>2]=HEAP32[$21+4>>2]|0;
    $223 = +HEAPF32[$13>>2];
    $224 = $10;
    $225 = ((($224)) + 4572|0);
    $226 = ((($225)) + 236|0);
    $227 = +HEAPF32[$226>>2];
    $228 = $223 + $227;
    HEAPF32[$17>>2] = $228;
    $229 = ((($13)) + 4|0);
    $230 = +HEAPF32[$229>>2];
    $231 = $10;
    $232 = ((($231)) + 4572|0);
    $233 = ((($232)) + 236|0);
    $234 = ((($233)) + 4|0);
    $235 = +HEAPF32[$234>>2];
    $236 = $230 + $235;
    $237 = ((($17)) + 4|0);
    HEAPF32[$237>>2] = $236;
    $238 = +HEAPF32[$18>>2];
    $239 = $10;
    $240 = ((($239)) + 4572|0);
    $241 = ((($240)) + 236|0);
    $242 = +HEAPF32[$241>>2];
    $243 = $10;
    $244 = ((($243)) + 4572|0);
    $245 = ((($244)) + 252|0);
    $246 = +HEAPF32[$245>>2];
    $247 = $242 + $246;
    $248 = $238 - $247;
    $249 = +HEAPF32[$17>>2];
    $250 = $248 - $249;
    $251 = ((($17)) + 8|0);
    HEAPF32[$251>>2] = $250;
    $252 = ((($13)) + 12|0);
    $253 = +HEAPF32[$252>>2];
    $254 = $10;
    $255 = ((($254)) + 4572|0);
    $256 = ((($255)) + 236|0);
    $257 = ((($256)) + 4|0);
    $258 = +HEAPF32[$257>>2];
    $259 = 2.0 * $258;
    $260 = $253 - $259;
    $261 = ((($17)) + 12|0);
    HEAPF32[$261>>2] = $260;
    $262 = $9;
    $263 = ((($262)) + 100|0);
    $264 = $6;
    $265 = $7;
    $266 = $5;
    $267 = ((($266)) + 340|0);
    $268 = HEAP32[$267>>2]|0;
    ;HEAP32[$$byval_copy9>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$17+12>>2]|0;
    _nk_widget_text($263,$$byval_copy9,$264,$265,$15,17,$268);
    $269 = $9;
    $270 = ((($269)) + 100|0);
    $271 = $5;
    $272 = ((($271)) + 5796|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = $5;
    $275 = ((($274)) + 340|0);
    $276 = ((($275)) + 4572|0);
    $277 = ((($276)) + 88|0);
    $278 = $20;
    $279 = $10;
    $280 = HEAP32[$279>>2]|0;
    _nk_draw_button_symbol($270,$18,$19,$273,$277,$278,$280);
    $281 = $5;
    $282 = $9;
    $283 = $12;
    ;HEAP32[$$byval_copy10>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$3+4>>2]|0;
    ;HEAP32[$$byval_copy11>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$13+12>>2]|0;
    $284 = (_nk_combo_begin($281,$282,$$byval_copy10,$283,$$byval_copy11)|0);
    $4 = $284;
    $285 = $4;
    STACKTOP = sp;return ($285|0);
   }
  }
 }
 $4 = 0;
 $285 = $4;
 STACKTOP = sp;return ($285|0);
}
function _nk_button_behavior($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy3 = sp + 72|0;
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 24|0;
 $5 = $0;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2;
 $12 = ($11|0)!=(0);
 $13 = $5;
 if ($12) {
  HEAP32[$13>>2] = 6;
 } else {
  HEAP32[$13>>2] = 4;
 }
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $4 = 0;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $16 = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 $17 = (_nk_input_is_mouse_hovering_rect($16,$$byval_copy)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $5;
  HEAP32[$19>>2] = 18;
  $20 = $6;
  $21 = (_nk_input_is_mouse_down($20,0)|0);
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $5;
   HEAP32[$23>>2] = 34;
  }
  $24 = $6;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$1+12>>2]|0;
  $25 = (_nk_input_has_mouse_click_in_rect($24,0,$$byval_copy1)|0);
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $7;
   $28 = ($27|0)!=(0);
   $29 = $6;
   if ($28) {
    $30 = (_nk_input_is_mouse_down($29,0)|0);
    $32 = $30;
   } else {
    $31 = (_nk_input_is_mouse_pressed($29,0)|0);
    $32 = $31;
   }
   $8 = $32;
  }
 }
 $33 = $5;
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 16;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $6;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$1+12>>2]|0;
  $38 = (_nk_input_is_mouse_prev_hovering_rect($37,$$byval_copy2)|0);
  $39 = ($38|0)!=(0);
  if ($39) {
   label = 17;
  } else {
   $40 = $5;
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 8;
   HEAP32[$40>>2] = $42;
  }
 } else {
  label = 17;
 }
 if ((label|0) == 17) {
  $43 = $6;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$1+12>>2]|0;
  $44 = (_nk_input_is_mouse_prev_hovering_rect($43,$$byval_copy3)|0);
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $5;
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 | 64;
   HEAP32[$46>>2] = $48;
  }
 }
 $49 = $8;
 $4 = $49;
 $50 = $4;
 STACKTOP = sp;return ($50|0);
}
function _nk_draw_button_symbol($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 32|0;
 $14 = sp + 52|0;
 $15 = sp + 48|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $10;
 $20 = $11;
 $21 = (_nk_draw_button($17,$18,$19,$20)|0);
 $16 = $21;
 $22 = $16;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = $16;
  $26 = ((($25)) + 4|0);
  ;HEAP8[$15>>0]=HEAP8[$26>>0]|0;HEAP8[$15+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$26+3>>0]|0;
 } else {
  $27 = $11;
  $28 = ((($27)) + 64|0);
  ;HEAP8[$15>>0]=HEAP8[$28>>0]|0;HEAP8[$15+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$28+3>>0]|0;
 }
 $29 = $10;
 $30 = $29 & 16;
 $31 = ($30|0)!=(0);
 do {
  if ($31) {
   $32 = $11;
   $33 = ((($32)) + 72|0);
   ;HEAP8[$14>>0]=HEAP8[$33>>0]|0;HEAP8[$14+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$33+3>>0]|0;
  } else {
   $34 = $10;
   $35 = $34 & 32;
   $36 = ($35|0)!=(0);
   $37 = $11;
   if ($36) {
    $38 = ((($37)) + 76|0);
    ;HEAP8[$14>>0]=HEAP8[$38>>0]|0;HEAP8[$14+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$38+3>>0]|0;
    break;
   } else {
    $39 = ((($37)) + 68|0);
    ;HEAP8[$14>>0]=HEAP8[$39>>0]|0;HEAP8[$14+1>>0]=HEAP8[$39+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$39+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$39+3>>0]|0;
    break;
   }
  }
 } while(0);
 $40 = $7;
 $41 = $12;
 $42 = $9;
 $43 = $13;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$42+12>>2]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$15+3>>0]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$14+3>>0]|0;
 _nk_draw_symbol($40,$41,$$byval_copy,$$byval_copy1,$$byval_copy2,1.0,$43);
 STACKTOP = sp;return;
}
function _nk_combo_begin($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy12 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy12 = sp + 88|0;
 $$byval_copy = sp + 72|0;
 $12 = sp + 24|0;
 $14 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $3;
 $10 = 0;
 $11 = 0;
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((2989|0),(1320|0),21073,(24966|0));
  // unreachable;
 }
 $17 = $6;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((19010|0),(1320|0),21074,(24966|0));
  // unreachable;
 }
 $21 = $6;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((18968|0),(1320|0),21075,(24966|0));
  // unreachable;
 }
 $27 = $6;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $6;
  $30 = ((($29)) + 12908|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = $6;
   $34 = ((($33)) + 12908|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 140|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $7;
    $40 = ((($39)) + 244|0);
    $41 = HEAP32[$40>>2]|0;
    $9 = $41;
    $42 = +HEAPF32[$4>>2];
    HEAPF32[$12>>2] = $42;
    $43 = +HEAPF32[$2>>2];
    $44 = ((($12)) + 8|0);
    HEAPF32[$44>>2] = $43;
    $45 = ((($4)) + 4|0);
    $46 = +HEAPF32[$45>>2];
    $47 = ((($4)) + 12|0);
    $48 = +HEAPF32[$47>>2];
    $49 = $46 + $48;
    $50 = $6;
    $51 = ((($50)) + 340|0);
    $52 = ((($51)) + 4832|0);
    $53 = ((($52)) + 444|0);
    $54 = +HEAPF32[$53>>2];
    $55 = $49 - $54;
    $56 = ((($12)) + 4|0);
    HEAPF32[$56>>2] = $55;
    $57 = ((($2)) + 4|0);
    $58 = +HEAPF32[$57>>2];
    $59 = ((($12)) + 12|0);
    HEAPF32[$59>>2] = $58;
    $60 = $7;
    $61 = ((($60)) + 244|0);
    $62 = ((($61)) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + 1)|0;
    HEAP32[$62>>2] = $64;
    $13 = $63;
    $65 = $9;
    $66 = ($65|0)!=(0|0);
    $67 = $66 ? 1 : 0;
    $10 = $67;
    $68 = $9;
    $69 = ($68|0)!=(0|0);
    if ($69) {
     $70 = $7;
     $71 = ((($70)) + 244|0);
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $13;
     $75 = ($73|0)==($74|0);
     if ($75) {
      $76 = $7;
      $77 = ((($76)) + 244|0);
      $78 = ((($77)) + 4|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(32);
      $82 = $80;
     } else {
      $82 = 0;
     }
    } else {
     $82 = 0;
    }
    $81 = $82&1;
    $11 = $81;
    $83 = $8;
    $84 = ($83|0)!=(0);
    $85 = $10;
    $86 = ($85|0)!=(0);
    $or$cond = $84 & $86;
    $or$cond$not = $or$cond ^ 1;
    $87 = $11;
    $88 = ($87|0)!=(0);
    $or$cond3 = $or$cond$not | $88;
    if ($or$cond3) {
     $89 = $10;
     $90 = ($89|0)==(0);
     $91 = $11;
     $92 = ($91|0)!=(0);
     $or$cond5 = $90 | $92;
     if ($or$cond5) {
      $93 = $10;
      $94 = ($93|0)!=(0);
      $95 = $11;
      $96 = ($95|0)!=(0);
      $or$cond7 = $94 | $96;
      $97 = $8;
      $98 = ($97|0)!=(0);
      $or$cond9 = $or$cond7 | $98;
      if ($or$cond9) {
       $99 = $6;
       $100 = $8;
       $101 = ($100|0)!=(0);
       $102 = $10;
       $103 = ($102|0)!=(0);
       $or$cond11 = $101 & $103;
       if ($or$cond11) {
        _nk_rect($14,0.0,0.0,0.0,0.0);
       } else {
        ;HEAP32[$14>>2]=HEAP32[$4>>2]|0;HEAP32[$14+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$4+12>>2]|0;
       }
       ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$12+12>>2]|0;
       ;HEAP32[$$byval_copy12>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$$byval_copy12+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$$byval_copy12+12>>2]=HEAP32[$14+12>>2]|0;
       $104 = (_nk_nonblock_begin($99,0,$$byval_copy,$$byval_copy12,32)|0);
       $105 = ($104|0)!=(0);
       if ($105) {
        $106 = $7;
        $107 = ((($106)) + 244|0);
        $108 = ((($107)) + 4|0);
        HEAP32[$108>>2] = 32;
        $109 = $13;
        $110 = $7;
        $111 = ((($110)) + 244|0);
        $112 = ((($111)) + 8|0);
        HEAP32[$112>>2] = $109;
        $5 = 1;
        $113 = $5;
        STACKTOP = sp;return ($113|0);
       } else {
        $5 = 0;
        $113 = $5;
        STACKTOP = sp;return ($113|0);
       }
      }
     }
    }
    $5 = 0;
    $113 = $5;
    STACKTOP = sp;return ($113|0);
   }
  }
 }
 $5 = 0;
 $113 = $5;
 STACKTOP = sp;return ($113|0);
}
function _nk_combo_begin_label($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = $4;
 $8 = (_nk_strlen($7)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 $9 = (_nk_combo_begin_text($5,$6,$8,$$byval_copy)|0);
 STACKTOP = sp;return ($9|0);
}
function _nk_combo_begin_color($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0;
 var $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0.0, $nk_white$byval_copy = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy10 = sp + 200|0;
 $$byval_copy9 = sp + 192|0;
 $$byval_copy8 = sp + 228|0;
 $$byval_copy7 = sp + 176|0;
 $$byval_copy6 = sp + 224|0;
 $$byval_copy5 = sp + 160|0;
 $$byval_copy4 = sp + 220|0;
 $$byval_copy3 = sp + 144|0;
 $nk_white$byval_copy = sp + 216|0;
 $$byval_copy2 = sp + 128|0;
 $$byval_copy = sp + 112|0;
 $8 = sp + 72|0;
 $12 = sp + 40|0;
 $13 = sp + 24|0;
 $14 = sp + 8|0;
 $4 = $0;
 $9 = 0;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((2989|0),(1320|0),21203,(20756|0));
  // unreachable;
 }
 $18 = $4;
 $19 = ((($18)) + 12908|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((19010|0),(1320|0),21204,(20756|0));
  // unreachable;
 }
 $22 = $4;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 140|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((18968|0),(1320|0),21205,(20756|0));
  // unreachable;
 }
 $28 = $4;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $4;
  $31 = ((($30)) + 12908|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   $34 = $4;
   $35 = ((($34)) + 12908|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 140|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0|0);
   if ($39) {
    $40 = $4;
    $41 = ((($40)) + 12908|0);
    $42 = HEAP32[$41>>2]|0;
    $5 = $42;
    $43 = $4;
    $44 = ((($43)) + 340|0);
    $6 = $44;
    $45 = $4;
    $46 = (_nk_widget($8,$45)|0);
    $10 = $46;
    $47 = $10;
    $48 = ($47|0)==(0);
    if ($48) {
     $3 = 0;
     $255 = $3;
     STACKTOP = sp;return ($255|0);
    }
    $49 = $5;
    $50 = ((($49)) + 140|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $53 & 2048;
    $55 = ($54|0)!=(0);
    $56 = $10;
    $57 = ($56|0)==(2);
    $or$cond = $55 | $57;
    $58 = $4;
    $59 = $or$cond ? 0 : $58;
    $7 = $59;
    $60 = $4;
    $61 = ((($60)) + 5796|0);
    $62 = $7;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$8+12>>2]|0;
    $63 = (_nk_button_behavior($61,$$byval_copy,$62,0)|0);
    $64 = ($63|0)!=(0);
    if ($64) {
     $9 = 1;
    }
    $65 = $4;
    $66 = ((($65)) + 5796|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $67 & 32;
    $69 = ($68|0)!=(0);
    do {
     if ($69) {
      $70 = $6;
      $71 = ((($70)) + 4572|0);
      $72 = ((($71)) + 40|0);
      $11 = $72;
     } else {
      $73 = $4;
      $74 = ((($73)) + 5796|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $75 & 16;
      $77 = ($76|0)!=(0);
      $78 = $6;
      $79 = ((($78)) + 4572|0);
      if ($77) {
       $80 = ((($79)) + 20|0);
       $11 = $80;
       break;
      } else {
       $11 = $79;
       break;
      }
     }
    } while(0);
    $81 = $11;
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==(1);
    $84 = $5;
    $85 = ((($84)) + 100|0);
    if ($83) {
     $86 = $11;
     $87 = ((($86)) + 4|0);
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$8+12>>2]|0;
     ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
     _nk_draw_image($85,$$byval_copy2,$87,$nk_white$byval_copy);
    } else {
     $88 = $6;
     $89 = ((($88)) + 4572|0);
     $90 = ((($89)) + 232|0);
     $91 = +HEAPF32[$90>>2];
     $92 = $11;
     $93 = ((($92)) + 4|0);
     ;HEAP32[$$byval_copy3>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$8+12>>2]|0;
     ;HEAP8[$$byval_copy4>>0]=HEAP8[$93>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$93+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$93+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$93+3>>0]|0;
     _nk_fill_rect($85,$$byval_copy3,$91,$$byval_copy4);
     $94 = $5;
     $95 = ((($94)) + 100|0);
     $96 = $6;
     $97 = ((($96)) + 4572|0);
     $98 = ((($97)) + 232|0);
     $99 = +HEAPF32[$98>>2];
     $100 = $6;
     $101 = ((($100)) + 4572|0);
     $102 = ((($101)) + 228|0);
     $103 = +HEAPF32[$102>>2];
     $104 = $6;
     $105 = ((($104)) + 4572|0);
     $106 = ((($105)) + 60|0);
     ;HEAP32[$$byval_copy5>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$8+12>>2]|0;
     ;HEAP8[$$byval_copy6>>0]=HEAP8[$106>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$106+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$106+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$106+3>>0]|0;
     _nk_stroke_rect($95,$$byval_copy5,$99,$103,$$byval_copy6);
    }
    $107 = $4;
    $108 = ((($107)) + 5796|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $109 & 16;
    $111 = ($110|0)!=(0);
    do {
     if ($111) {
      $112 = $6;
      $113 = ((($112)) + 4572|0);
      $114 = ((($113)) + 220|0);
      $115 = HEAP32[$114>>2]|0;
      $15 = $115;
     } else {
      $116 = $9;
      $117 = ($116|0)!=(0);
      $118 = $6;
      $119 = ((($118)) + 4572|0);
      if ($117) {
       $120 = ((($119)) + 224|0);
       $121 = HEAP32[$120>>2]|0;
       $15 = $121;
       break;
      } else {
       $122 = ((($119)) + 216|0);
       $123 = HEAP32[$122>>2]|0;
       $15 = $123;
       break;
      }
     }
    } while(0);
    $124 = ((($8)) + 12|0);
    $125 = +HEAPF32[$124>>2];
    $126 = $6;
    $127 = ((($126)) + 4572|0);
    $128 = ((($127)) + 244|0);
    $129 = ((($128)) + 4|0);
    $130 = +HEAPF32[$129>>2];
    $131 = 2.0 * $130;
    $132 = $125 - $131;
    $133 = ((($13)) + 8|0);
    HEAPF32[$133>>2] = $132;
    $134 = +HEAPF32[$8>>2];
    $135 = ((($8)) + 8|0);
    $136 = +HEAPF32[$135>>2];
    $137 = $134 + $136;
    $138 = ((($8)) + 12|0);
    $139 = +HEAPF32[$138>>2];
    $140 = $137 - $139;
    $141 = $6;
    $142 = ((($141)) + 4572|0);
    $143 = ((($142)) + 244|0);
    $144 = +HEAPF32[$143>>2];
    $145 = $140 - $144;
    HEAPF32[$13>>2] = $145;
    $146 = ((($8)) + 4|0);
    $147 = +HEAPF32[$146>>2];
    $148 = $6;
    $149 = ((($148)) + 4572|0);
    $150 = ((($149)) + 244|0);
    $151 = ((($150)) + 4|0);
    $152 = +HEAPF32[$151>>2];
    $153 = $147 + $152;
    $154 = ((($13)) + 4|0);
    HEAPF32[$154>>2] = $153;
    $155 = ((($13)) + 8|0);
    $156 = +HEAPF32[$155>>2];
    $157 = ((($13)) + 12|0);
    HEAPF32[$157>>2] = $156;
    $158 = +HEAPF32[$13>>2];
    $159 = $6;
    $160 = ((($159)) + 4572|0);
    $161 = ((($160)) + 88|0);
    $162 = ((($161)) + 92|0);
    $163 = +HEAPF32[$162>>2];
    $164 = $158 + $163;
    HEAPF32[$12>>2] = $164;
    $165 = ((($13)) + 4|0);
    $166 = +HEAPF32[$165>>2];
    $167 = $6;
    $168 = ((($167)) + 4572|0);
    $169 = ((($168)) + 88|0);
    $170 = ((($169)) + 92|0);
    $171 = ((($170)) + 4|0);
    $172 = +HEAPF32[$171>>2];
    $173 = $166 + $172;
    $174 = ((($12)) + 4|0);
    HEAPF32[$174>>2] = $173;
    $175 = ((($13)) + 8|0);
    $176 = +HEAPF32[$175>>2];
    $177 = $6;
    $178 = ((($177)) + 4572|0);
    $179 = ((($178)) + 88|0);
    $180 = ((($179)) + 92|0);
    $181 = +HEAPF32[$180>>2];
    $182 = 2.0 * $181;
    $183 = $176 - $182;
    $184 = ((($12)) + 8|0);
    HEAPF32[$184>>2] = $183;
    $185 = ((($13)) + 12|0);
    $186 = +HEAPF32[$185>>2];
    $187 = $6;
    $188 = ((($187)) + 4572|0);
    $189 = ((($188)) + 88|0);
    $190 = ((($189)) + 92|0);
    $191 = ((($190)) + 4|0);
    $192 = +HEAPF32[$191>>2];
    $193 = 2.0 * $192;
    $194 = $186 - $193;
    $195 = ((($12)) + 12|0);
    HEAPF32[$195>>2] = $194;
    $196 = ((($8)) + 12|0);
    $197 = +HEAPF32[$196>>2];
    $198 = $6;
    $199 = ((($198)) + 4572|0);
    $200 = ((($199)) + 236|0);
    $201 = ((($200)) + 4|0);
    $202 = +HEAPF32[$201>>2];
    $203 = 4.0 * $202;
    $204 = $197 - $203;
    $205 = ((($14)) + 12|0);
    HEAPF32[$205>>2] = $204;
    $206 = ((($8)) + 4|0);
    $207 = +HEAPF32[$206>>2];
    $208 = $6;
    $209 = ((($208)) + 4572|0);
    $210 = ((($209)) + 236|0);
    $211 = ((($210)) + 4|0);
    $212 = +HEAPF32[$211>>2];
    $213 = 2.0 * $212;
    $214 = $207 + $213;
    $215 = ((($14)) + 4|0);
    HEAPF32[$215>>2] = $214;
    $216 = +HEAPF32[$8>>2];
    $217 = $6;
    $218 = ((($217)) + 4572|0);
    $219 = ((($218)) + 236|0);
    $220 = +HEAPF32[$219>>2];
    $221 = 2.0 * $220;
    $222 = $216 + $221;
    HEAPF32[$14>>2] = $222;
    $223 = +HEAPF32[$13>>2];
    $224 = $6;
    $225 = ((($224)) + 4572|0);
    $226 = ((($225)) + 236|0);
    $227 = +HEAPF32[$226>>2];
    $228 = $6;
    $229 = ((($228)) + 4572|0);
    $230 = ((($229)) + 252|0);
    $231 = +HEAPF32[$230>>2];
    $232 = $227 + $231;
    $233 = $223 - $232;
    $234 = +HEAPF32[$14>>2];
    $235 = $233 - $234;
    $236 = ((($14)) + 8|0);
    HEAPF32[$236>>2] = $235;
    $237 = $5;
    $238 = ((($237)) + 100|0);
    ;HEAP32[$$byval_copy7>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$14+12>>2]|0;
    ;HEAP8[$$byval_copy8>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy8+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy8+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy8+3>>0]=HEAP8[$1+3>>0]|0;
    _nk_fill_rect($238,$$byval_copy7,0.0,$$byval_copy8);
    $239 = $5;
    $240 = ((($239)) + 100|0);
    $241 = $4;
    $242 = ((($241)) + 5796|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $4;
    $245 = ((($244)) + 340|0);
    $246 = ((($245)) + 4572|0);
    $247 = ((($246)) + 88|0);
    $248 = $15;
    $249 = $6;
    $250 = HEAP32[$249>>2]|0;
    _nk_draw_button_symbol($240,$13,$12,$243,$247,$248,$250);
    $251 = $4;
    $252 = $5;
    $253 = $9;
    ;HEAP32[$$byval_copy9>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$2+4>>2]|0;
    ;HEAP32[$$byval_copy10>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$8+12>>2]|0;
    $254 = (_nk_combo_begin($251,$252,$$byval_copy9,$253,$$byval_copy10)|0);
    $3 = $254;
    $255 = $3;
    STACKTOP = sp;return ($255|0);
   }
  }
 }
 $3 = 0;
 $255 = $3;
 STACKTOP = sp;return ($255|0);
}
function _nk_draw_symbol($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0;
 var $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy13 = sp + 256|0;
 $$byval_copy12 = sp + 224|0;
 $$byval_copy11 = sp + 252|0;
 $$byval_copy10 = sp + 208|0;
 $$byval_copy9 = sp + 192|0;
 $$byval_copy8 = sp + 248|0;
 $$byval_copy7 = sp + 176|0;
 $$byval_copy6 = sp + 244|0;
 $$byval_copy5 = sp + 160|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 240|0;
 $$byval_copy2 = sp + 128|0;
 $$byval_copy = sp + 112|0;
 $12 = sp + 72|0;
 $13 = sp + 64|0;
 $14 = sp + 48|0;
 $15 = sp + 32|0;
 $17 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $5;
 $10 = $6;
 $18 = $8;
 switch ($18|0) {
 case 12: case 11: case 2: case 1:  {
  $19 = $8;
  $20 = ($19|0)==(1);
  if ($20) {
   $26 = 24981;
  } else {
   $21 = $8;
   $22 = ($21|0)==(2);
   if ($22) {
    $26 = 24983;
   } else {
    $23 = $8;
    $24 = ($23|0)==(11);
    $25 = $24 ? 24985 : 24987;
    $26 = $25;
   }
  }
  $11 = $26;
  _nk_vec2($13,0.0,0.0);
  ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP32[$12+4>>2]=HEAP32[$13+4>>2]|0;
  $27 = ((($12)) + 8|0);
  ;HEAP8[$27>>0]=HEAP8[$3>>0]|0;HEAP8[$27+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$3+3>>0]|0;
  $28 = ((($12)) + 12|0);
  ;HEAP8[$28>>0]=HEAP8[$4>>0]|0;HEAP8[$28+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$28+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$28+3>>0]=HEAP8[$4+3>>0]|0;
  $29 = $7;
  $30 = $11;
  $31 = $10;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
  _nk_widget_text($29,$$byval_copy,$30,1,$12,18,$31);
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3:  {
  $32 = $8;
  $33 = ($32|0)==(5);
  $34 = $8;
  $35 = ($34|0)==(6);
  $or$cond = $33 | $35;
  $36 = $7;
  if ($or$cond) {
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$2+12>>2]|0;
   ;HEAP8[$$byval_copy3>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$4+3>>0]|0;
   _nk_fill_rect($36,$$byval_copy2,0.0,$$byval_copy3);
   $37 = $8;
   $38 = ($37|0)==(6);
   if (!($38)) {
    STACKTOP = sp;return;
   }
   $39 = $7;
   $40 = $9;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$2+12>>2]|0;
   _nk_shrink_rect($14,$$byval_copy4,$40);
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$14+12>>2]|0;
   ;HEAP8[$$byval_copy6>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$3+3>>0]|0;
   _nk_fill_rect($39,$$byval_copy5,0.0,$$byval_copy6);
   STACKTOP = sp;return;
  } else {
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$2+12>>2]|0;
   ;HEAP8[$$byval_copy8>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy8+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy8+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy8+3>>0]=HEAP8[$4+3>>0]|0;
   _nk_fill_circle($36,$$byval_copy7,$$byval_copy8);
   $41 = $8;
   $42 = ($41|0)==(4);
   if (!($42)) {
    STACKTOP = sp;return;
   }
   $43 = $7;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$2+12>>2]|0;
   _nk_shrink_rect($15,$$byval_copy9,1.0);
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$15+12>>2]|0;
   ;HEAP8[$$byval_copy11>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy11+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy11+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy11+3>>0]=HEAP8[$3+3>>0]|0;
   _nk_fill_circle($43,$$byval_copy10,$$byval_copy11);
   STACKTOP = sp;return;
  }
  break;
 }
 case 10: case 9: case 8: case 7:  {
  $44 = $8;
  $45 = ($44|0)==(10);
  if ($45) {
   $51 = 1;
  } else {
   $46 = $8;
   $47 = ($46|0)==(9);
   if ($47) {
    $51 = 3;
   } else {
    $48 = $8;
    $49 = ($48|0)==(7);
    $50 = $49 ? 0 : 2;
    $51 = $50;
   }
  }
  $16 = $51;
  $52 = $16;
  ;HEAP32[$$byval_copy12>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy12+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy12+12>>2]=HEAP32[$2+12>>2]|0;
  _nk_triangle_from_direction($17,$$byval_copy12,0.0,0.0,$52);
  $53 = $7;
  $54 = +HEAPF32[$17>>2];
  $55 = ((($17)) + 4|0);
  $56 = +HEAPF32[$55>>2];
  $57 = ((($17)) + 8|0);
  $58 = +HEAPF32[$57>>2];
  $59 = ((($17)) + 8|0);
  $60 = ((($59)) + 4|0);
  $61 = +HEAPF32[$60>>2];
  $62 = ((($17)) + 16|0);
  $63 = +HEAPF32[$62>>2];
  $64 = ((($17)) + 16|0);
  $65 = ((($64)) + 4|0);
  $66 = +HEAPF32[$65>>2];
  ;HEAP8[$$byval_copy13>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy13+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy13+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy13+3>>0]=HEAP8[$4+3>>0]|0;
  _nk_fill_triangle($53,$54,$56,$58,$61,$63,$66,$$byval_copy13);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _nk_combo_item_label($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_nk_contextual_item_label($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _nk_combo_end($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _nk_contextual_end($2);
 STACKTOP = sp;return;
}
function _nk_combo_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _nk_contextual_close($2);
 STACKTOP = sp;return;
}
function _nk_combo($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 56|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = 0;
 $17 = $7;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((2989|0),(1320|0),21669,(20777|0));
  // unreachable;
 }
 $19 = $8;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((20786|0),(1320|0),21670,(20777|0));
  // unreachable;
 }
 $21 = $7;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  ___assert_fail((19010|0),(1320|0),21671,(20777|0));
  // unreachable;
 }
 $25 = $7;
 $26 = ($25|0)!=(0|0);
 $27 = $8;
 $28 = ($27|0)!=(0|0);
 $or$cond = $26 & $28;
 $29 = $9;
 $30 = ($29|0)!=(0);
 $or$cond3 = $or$cond & $30;
 if (!($or$cond3)) {
  $31 = $10;
  $6 = $31;
  $99 = $6;
  STACKTOP = sp;return ($99|0);
 }
 $32 = $7;
 $33 = ((($32)) + 340|0);
 $34 = ((($33)) + 4832|0);
 $35 = ((($34)) + 472|0);
 ;HEAP32[$14>>2]=HEAP32[$35>>2]|0;HEAP32[$14+4>>2]=HEAP32[$35+4>>2]|0;
 $36 = $7;
 $37 = ((($36)) + 340|0);
 $38 = $7;
 $39 = ((($38)) + 12908|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 140|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 _nk_panel_get_padding($16,$37,$43);
 ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;
 $44 = $9;
 $45 = $11;
 $46 = Math_imul($44, $45)|0;
 $47 = $9;
 $48 = ((($14)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = (~~(($49)));
 $51 = Math_imul($47, $50)|0;
 $52 = (($46) + ($51))|0;
 $13 = $52;
 $53 = ((($14)) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = (~~(($54)));
 $56 = $55<<1;
 $57 = ((($15)) + 4|0);
 $58 = +HEAPF32[$57>>2];
 $59 = (~~(($58)));
 $60 = $59<<1;
 $61 = (($56) + ($60))|0;
 $62 = $13;
 $63 = (($62) + ($61))|0;
 $13 = $63;
 $64 = ((($5)) + 4|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $13;
 $67 = (+($66|0));
 $68 = $65 < $67;
 if ($68) {
  $69 = ((($5)) + 4|0);
  $70 = +HEAPF32[$69>>2];
  $74 = $70;
 } else {
  $71 = $13;
  $72 = (+($71|0));
  $74 = $72;
 }
 $73 = ((($5)) + 4|0);
 HEAPF32[$73>>2] = $74;
 $75 = $7;
 $76 = $10;
 $77 = $8;
 $78 = (($77) + ($76<<2)|0);
 $79 = HEAP32[$78>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
 $80 = (_nk_combo_begin_label($75,$79,$$byval_copy)|0);
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $7;
  $83 = $11;
  $84 = (+($83|0));
  _nk_layout_row_dynamic($82,$84,1);
  $12 = 0;
  while(1) {
   $85 = $12;
   $86 = $9;
   $87 = ($85|0)<($86|0);
   $88 = $7;
   if (!($87)) {
    break;
   }
   $89 = $12;
   $90 = $8;
   $91 = (($90) + ($89<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (_nk_combo_item_label($88,$92,17)|0);
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $12;
    $10 = $95;
   }
   $96 = $12;
   $97 = (($96) + 1)|0;
   $12 = $97;
  }
  _nk_combo_end($88);
 }
 $98 = $10;
 $6 = $98;
 $99 = $6;
 STACKTOP = sp;return ($99|0);
}
function _nk_menu_begin_text($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 56|0;
 $12 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $13 = 0;
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((2989|0),(1320|0),21850,(20792|0));
  // unreachable;
 }
 $17 = $6;
 $18 = ((($17)) + 12908|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((19010|0),(1320|0),21851,(20792|0));
  // unreachable;
 }
 $21 = $6;
 $22 = ((($21)) + 12908|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  ___assert_fail((18968|0),(1320|0),21852,(20792|0));
  // unreachable;
 }
 $27 = $6;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $6;
  $30 = ((($29)) + 12908|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = $6;
   $34 = ((($33)) + 12908|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 140|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $6;
    $40 = ((($39)) + 12908|0);
    $41 = HEAP32[$40>>2]|0;
    $10 = $41;
    $42 = $6;
    $43 = (_nk_widget($12,$42)|0);
    $14 = $43;
    $44 = $14;
    $45 = ($44|0)!=(0);
    if (!($45)) {
     $5 = 0;
     $76 = $5;
     STACKTOP = sp;return ($76|0);
    }
    $46 = $14;
    $47 = ($46|0)==(2);
    if ($47) {
     $54 = 0;
    } else {
     $48 = $10;
     $49 = ((($48)) + 72|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 & 2048;
     $52 = ($51|0)!=(0);
     if ($52) {
      $54 = 0;
     } else {
      $53 = $6;
      $54 = $53;
     }
    }
    $11 = $54;
    $55 = $6;
    $56 = ((($55)) + 5796|0);
    $57 = $10;
    $58 = ((($57)) + 100|0);
    $59 = $7;
    $60 = $8;
    $61 = $9;
    $62 = $6;
    $63 = ((($62)) + 340|0);
    $64 = ((($63)) + 312|0);
    $65 = $11;
    $66 = $6;
    $67 = ((($66)) + 340|0);
    $68 = HEAP32[$67>>2]|0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$12+12>>2]|0;
    $69 = (_nk_do_button_text($56,$58,$$byval_copy,$59,$60,$61,0,$64,$65,$68)|0);
    $70 = ($69|0)!=(0);
    if ($70) {
     $13 = 1;
    }
    $71 = $6;
    $72 = $10;
    $73 = $7;
    $74 = $13;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$12+12>>2]|0;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;
    $75 = (_nk_menu_begin($71,$72,$73,$74,$$byval_copy1,$$byval_copy2)|0);
    $5 = $75;
    $76 = $5;
    STACKTOP = sp;return ($76|0);
   }
  }
 }
 $5 = 0;
 $76 = $5;
 STACKTOP = sp;return ($76|0);
}
function _nk_menu_begin($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy10 = sp + 72|0;
 $$byval_copy = sp + 56|0;
 $13 = sp + 8|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = 0;
 $12 = 0;
 $16 = $9;
 $17 = $9;
 $18 = (_nk_strlen($17)|0);
 $19 = (_nk_murmur_hash($16,$18,64)|0);
 $15 = $19;
 $20 = $7;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((2989|0),(1320|0),21816,(24989|0));
  // unreachable;
 }
 $22 = $7;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((19010|0),(1320|0),21817,(24989|0));
  // unreachable;
 }
 $26 = $7;
 $27 = ((($26)) + 12908|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 140|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((18968|0),(1320|0),21818,(24989|0));
  // unreachable;
 }
 $32 = $7;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $7;
  $35 = ((($34)) + 12908|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $7;
   $39 = ((($38)) + 12908|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 140|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    $44 = +HEAPF32[$4>>2];
    HEAPF32[$13>>2] = $44;
    $45 = +HEAPF32[$5>>2];
    $46 = ((($13)) + 8|0);
    HEAPF32[$46>>2] = $45;
    $47 = ((($4)) + 4|0);
    $48 = +HEAPF32[$47>>2];
    $49 = ((($4)) + 12|0);
    $50 = +HEAPF32[$49>>2];
    $51 = $48 + $50;
    $52 = ((($13)) + 4|0);
    HEAPF32[$52>>2] = $51;
    $53 = ((($5)) + 4|0);
    $54 = +HEAPF32[$53>>2];
    $55 = ((($13)) + 12|0);
    HEAPF32[$55>>2] = $54;
    $56 = $8;
    $57 = ((($56)) + 244|0);
    $58 = HEAP32[$57>>2]|0;
    $14 = $58;
    $59 = $14;
    $60 = ($59|0)!=(0|0);
    $61 = $60 ? 1 : 0;
    $11 = $61;
    $62 = $14;
    $63 = ($62|0)!=(0|0);
    if ($63) {
     $64 = $8;
     $65 = ((($64)) + 244|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $15;
     $69 = ($67|0)==($68|0);
     if ($69) {
      $70 = $8;
      $71 = ((($70)) + 244|0);
      $72 = ((($71)) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)==(64);
      $76 = $74;
     } else {
      $76 = 0;
     }
    } else {
     $76 = 0;
    }
    $75 = $76&1;
    $12 = $75;
    $77 = $10;
    $78 = ($77|0)!=(0);
    $79 = $11;
    $80 = ($79|0)!=(0);
    $or$cond = $78 & $80;
    $or$cond$not = $or$cond ^ 1;
    $81 = $12;
    $82 = ($81|0)!=(0);
    $or$cond3 = $or$cond$not | $82;
    if ($or$cond3) {
     $83 = $11;
     $84 = ($83|0)==(0);
     $85 = $12;
     $86 = ($85|0)!=(0);
     $or$cond5 = $84 | $86;
     if ($or$cond5) {
      $87 = $11;
      $88 = ($87|0)!=(0);
      $89 = $12;
      $90 = ($89|0)!=(0);
      $or$cond7 = $88 | $90;
      $91 = $10;
      $92 = ($91|0)!=(0);
      $or$cond9 = $or$cond7 | $92;
      if ($or$cond9) {
       $93 = $7;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$13+12>>2]|0;
       ;HEAP32[$$byval_copy10>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$4+12>>2]|0;
       $94 = (_nk_nonblock_begin($93,32,$$byval_copy,$$byval_copy10,64)|0);
       $95 = ($94|0)!=(0);
       if ($95) {
        $96 = $8;
        $97 = ((($96)) + 244|0);
        $98 = ((($97)) + 4|0);
        HEAP32[$98>>2] = 64;
        $99 = $15;
        $100 = $8;
        $101 = ((($100)) + 244|0);
        $102 = ((($101)) + 8|0);
        HEAP32[$102>>2] = $99;
        $6 = 1;
        $103 = $6;
        STACKTOP = sp;return ($103|0);
       } else {
        $6 = 0;
        $103 = $6;
        STACKTOP = sp;return ($103|0);
       }
      }
     }
    }
    $6 = 0;
    $103 = $6;
    STACKTOP = sp;return ($103|0);
   }
  }
 }
 $6 = 0;
 $103 = $6;
 STACKTOP = sp;return ($103|0);
}
function _nk_menu_begin_label($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 $9 = $5;
 $10 = (_nk_strlen($9)|0);
 $11 = $6;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 $12 = (_nk_menu_begin_text($7,$8,$10,$11,$$byval_copy)|0);
 STACKTOP = sp;return ($12|0);
}
function _nk_menu_item_label($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_nk_contextual_item_label($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _nk_menu_end($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _nk_contextual_end($2);
 STACKTOP = sp;return;
}
function _nk_glfw3_device_create() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp + 4|0;
 $1 = (30404);
 $2 = $1;
 _nk_buffer_init_default($2);
 $3 = (_glCreateProgram()|0);
 $4 = $1;
 $5 = ((($4)) + 80|0);
 HEAP32[$5>>2] = $3;
 $6 = (_glCreateShader(35633)|0);
 $7 = $1;
 $8 = ((($7)) + 84|0);
 HEAP32[$8>>2] = $6;
 $9 = (_glCreateShader(35632)|0);
 $10 = $1;
 $11 = ((($10)) + 88|0);
 HEAP32[$11>>2] = $9;
 $12 = $1;
 $13 = ((($12)) + 84|0);
 $14 = HEAP32[$13>>2]|0;
 _glShaderSource(($14|0),1,(204|0),(0|0));
 $15 = $1;
 $16 = ((($15)) + 88|0);
 $17 = HEAP32[$16>>2]|0;
 _glShaderSource(($17|0),1,(208|0),(0|0));
 $18 = $1;
 $19 = ((($18)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 _glCompileShader(($20|0));
 $21 = $1;
 $22 = ((($21)) + 88|0);
 $23 = HEAP32[$22>>2]|0;
 _glCompileShader(($23|0));
 $24 = $1;
 $25 = ((($24)) + 84|0);
 $26 = HEAP32[$25>>2]|0;
 _glGetShaderiv(($26|0),35713,($0|0));
 $27 = HEAP32[$0>>2]|0;
 $28 = ($27|0)==(1);
 if (!($28)) {
  ___assert_fail((21268|0),(21286|0),174,(21307|0));
  // unreachable;
 }
 $29 = $1;
 $30 = ((($29)) + 88|0);
 $31 = HEAP32[$30>>2]|0;
 _glGetShaderiv(($31|0),35713,($0|0));
 $32 = HEAP32[$0>>2]|0;
 $33 = ($32|0)==(1);
 if (!($33)) {
  ___assert_fail((21268|0),(21286|0),176,(21307|0));
  // unreachable;
 }
 $34 = $1;
 $35 = ((($34)) + 80|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $1;
 $38 = ((($37)) + 84|0);
 $39 = HEAP32[$38>>2]|0;
 _glAttachShader(($36|0),($39|0));
 $40 = $1;
 $41 = ((($40)) + 80|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $1;
 $44 = ((($43)) + 88|0);
 $45 = HEAP32[$44>>2]|0;
 _glAttachShader(($42|0),($45|0));
 $46 = $1;
 $47 = ((($46)) + 80|0);
 $48 = HEAP32[$47>>2]|0;
 _glLinkProgram(($48|0));
 $49 = $1;
 $50 = ((($49)) + 80|0);
 $51 = HEAP32[$50>>2]|0;
 _glGetProgramiv(($51|0),35714,($0|0));
 $52 = HEAP32[$0>>2]|0;
 $53 = ($52|0)==(1);
 if ($53) {
  $54 = $1;
  $55 = ((($54)) + 80|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_glGetUniformLocation(($56|0),(21330|0))|0);
  $58 = $1;
  $59 = ((($58)) + 104|0);
  HEAP32[$59>>2] = $57;
  $60 = $1;
  $61 = ((($60)) + 80|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (_glGetUniformLocation(($62|0),(21338|0))|0);
  $64 = $1;
  $65 = ((($64)) + 108|0);
  HEAP32[$65>>2] = $63;
  $66 = $1;
  $67 = ((($66)) + 80|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (_glGetAttribLocation(($68|0),(21346|0))|0);
  $70 = $1;
  $71 = ((($70)) + 92|0);
  HEAP32[$71>>2] = $69;
  $72 = $1;
  $73 = ((($72)) + 80|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (_glGetAttribLocation(($74|0),(21355|0))|0);
  $76 = $1;
  $77 = ((($76)) + 96|0);
  HEAP32[$77>>2] = $75;
  $78 = $1;
  $79 = ((($78)) + 80|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (_glGetAttribLocation(($80|0),(21364|0))|0);
  $82 = $1;
  $83 = ((($82)) + 100|0);
  HEAP32[$83>>2] = $81;
  $84 = $1;
  $85 = ((($84)) + 116|0);
  HEAP32[$85>>2] = 20;
  $86 = $1;
  $87 = ((($86)) + 120|0);
  HEAP32[$87>>2] = 0;
  $88 = $1;
  $89 = ((($88)) + 124|0);
  HEAP32[$89>>2] = 8;
  $90 = $1;
  $91 = ((($90)) + 128|0);
  HEAP32[$91>>2] = 16;
  $92 = $1;
  $93 = ((($92)) + 72|0);
  _glGenBuffers(1,($93|0));
  $94 = $1;
  $95 = ((($94)) + 76|0);
  _glGenBuffers(1,($95|0));
  _glBindTexture(3553,0);
  _glBindBuffer(34962,0);
  _glBindBuffer(34963,0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((21268|0),(21286|0),181,(21307|0));
  // unreachable;
 }
}
function _nk_glfw3_device_destroy() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = (30404);
 $1 = $0;
 $2 = ((($1)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 _glDetachShader(($3|0),($6|0));
 $7 = $0;
 $8 = ((($7)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 88|0);
 $12 = HEAP32[$11>>2]|0;
 _glDetachShader(($9|0),($12|0));
 $13 = $0;
 $14 = ((($13)) + 84|0);
 $15 = HEAP32[$14>>2]|0;
 _glDeleteShader(($15|0));
 $16 = $0;
 $17 = ((($16)) + 88|0);
 $18 = HEAP32[$17>>2]|0;
 _glDeleteShader(($18|0));
 $19 = $0;
 $20 = ((($19)) + 80|0);
 $21 = HEAP32[$20>>2]|0;
 _glDeleteProgram(($21|0));
 $22 = $0;
 $23 = ((($22)) + 112|0);
 _glDeleteTextures(1,($23|0));
 $24 = $0;
 $25 = ((($24)) + 72|0);
 _glDeleteBuffers(1,($25|0));
 $26 = $0;
 $27 = ((($26)) + 76|0);
 _glDeleteBuffers(1,($27|0));
 $28 = $0;
 _nk_buffer_free($28);
 STACKTOP = sp;return;
}
function _nk_glfw3_render($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $7 = sp + 184|0;
 $12 = sp + 120|0;
 $13 = sp + 60|0;
 $14 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (30404);
 dest=$7; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAPF32[$7>>2] = 2.0;
 $15 = ((($7)) + 16|0);
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = -2.0;
 $17 = ((($7)) + 32|0);
 $18 = ((($17)) + 8|0);
 HEAPF32[$18>>2] = -1.0;
 $19 = ((($7)) + 48|0);
 HEAPF32[$19>>2] = -1.0;
 $20 = ((($19)) + 4|0);
 HEAPF32[$20>>2] = 1.0;
 $21 = ((($19)) + 12|0);
 HEAPF32[$21>>2] = 1.0;
 $22 = HEAP32[(30388)>>2]|0;
 $23 = (+($22|0));
 $24 = +HEAPF32[$7>>2];
 $25 = $24 / $23;
 HEAPF32[$7>>2] = $25;
 $26 = HEAP32[(30392)>>2]|0;
 $27 = (+($26|0));
 $28 = ((($7)) + 16|0);
 $29 = ((($28)) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30 / $27;
 HEAPF32[$29>>2] = $31;
 _glEnable(3042);
 _glBlendEquation(32774);
 _glBlendFunc(770,771);
 _glDisable(2884);
 _glDisable(2929);
 _glEnable(3089);
 _glActiveTexture(33984);
 $32 = $6;
 $33 = ((($32)) + 80|0);
 $34 = HEAP32[$33>>2]|0;
 _glUseProgram(($34|0));
 $35 = $6;
 $36 = ((($35)) + 104|0);
 $37 = HEAP32[$36>>2]|0;
 _glUniform1i(($37|0),0);
 $38 = $6;
 $39 = ((($38)) + 108|0);
 $40 = HEAP32[$39>>2]|0;
 _glUniformMatrix4fv(($40|0),1,0,($7|0));
 $41 = HEAP32[(30396)>>2]|0;
 $42 = HEAP32[(30400)>>2]|0;
 _glViewport(0,0,($41|0),($42|0));
 $11 = 0;
 $43 = $6;
 $44 = ((($43)) + 72|0);
 $45 = HEAP32[$44>>2]|0;
 _glBindBuffer(34962,($45|0));
 $46 = $6;
 $47 = ((($46)) + 76|0);
 $48 = HEAP32[$47>>2]|0;
 _glBindBuffer(34963,($48|0));
 $49 = $6;
 $50 = ((($49)) + 92|0);
 $51 = HEAP32[$50>>2]|0;
 _glEnableVertexAttribArray(($51|0));
 $52 = $6;
 $53 = ((($52)) + 96|0);
 $54 = HEAP32[$53>>2]|0;
 _glEnableVertexAttribArray(($54|0));
 $55 = $6;
 $56 = ((($55)) + 100|0);
 $57 = HEAP32[$56>>2]|0;
 _glEnableVertexAttribArray(($57|0));
 $58 = $6;
 $59 = ((($58)) + 92|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $6;
 $62 = ((($61)) + 116|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $6;
 $65 = ((($64)) + 120|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66;
 _glVertexAttribPointer(($60|0),2,5126,0,($63|0),($67|0));
 $68 = $6;
 $69 = ((($68)) + 96|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $6;
 $72 = ((($71)) + 116|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $6;
 $75 = ((($74)) + 124|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76;
 _glVertexAttribPointer(($70|0),2,5126,0,($73|0),($77|0));
 $78 = $6;
 $79 = ((($78)) + 100|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $6;
 $82 = ((($81)) + 116|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $6;
 $85 = ((($84)) + 128|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86;
 _glVertexAttribPointer(($80|0),4,5121,1,($83|0),($87|0));
 $88 = $6;
 $89 = ((($88)) + 72|0);
 $90 = HEAP32[$89>>2]|0;
 _glBindBuffer(34962,($90|0));
 $91 = $6;
 $92 = ((($91)) + 76|0);
 $93 = HEAP32[$92>>2]|0;
 _glBindBuffer(34963,($93|0));
 $94 = $4;
 _glBufferData(34962,($94|0),(0|0),35040);
 $95 = $5;
 _glBufferData(34963,($95|0),(0|0),35040);
 $96 = $4;
 $97 = (_malloc($96)|0);
 $9 = $97;
 $98 = $5;
 $99 = (_malloc($98)|0);
 $10 = $99;
 _nk_memset($12,0,48);
 $100 = ((($12)) + 36|0);
 HEAP32[$100>>2] = 212;
 $101 = ((($12)) + 40|0);
 HEAP32[$101>>2] = 20;
 $102 = ((($12)) + 44|0);
 HEAP32[$102>>2] = ((((0) + 4|0)));
 $103 = ((($12)) + 24|0);
 $104 = $6;
 $105 = ((($104)) + 60|0);
 ;HEAP32[$103>>2]=HEAP32[$105>>2]|0;HEAP32[$103+4>>2]=HEAP32[$105+4>>2]|0;HEAP32[$103+8>>2]=HEAP32[$105+8>>2]|0;
 $106 = ((($12)) + 12|0);
 HEAP32[$106>>2] = 22;
 $107 = ((($12)) + 20|0);
 HEAP32[$107>>2] = 22;
 $108 = ((($12)) + 16|0);
 HEAP32[$108>>2] = 22;
 HEAPF32[$12>>2] = 1.0;
 $109 = $3;
 $110 = ((($12)) + 8|0);
 HEAP32[$110>>2] = $109;
 $111 = $3;
 $112 = ((($12)) + 4|0);
 HEAP32[$112>>2] = $111;
 $113 = $9;
 $114 = $4;
 _nk_buffer_init_fixed($13,$113,$114);
 $115 = $10;
 $116 = $5;
 _nk_buffer_init_fixed($14,$115,$116);
 $117 = $6;
 _nk_convert((30536),$117,$13,$14,$12);
 $118 = $4;
 $119 = $9;
 _glBufferSubData(34962,0,($118|0),($119|0));
 $120 = $5;
 $121 = $10;
 _glBufferSubData(34963,0,($120|0),($121|0));
 $122 = $9;
 _free($122);
 $123 = $10;
 _free($123);
 $124 = $6;
 $125 = (_nk__draw_begin((30536),$124)|0);
 $8 = $125;
 while(1) {
  $126 = $8;
  $127 = ($126|0)!=(0|0);
  if (!($127)) {
   break;
  }
  $128 = $8;
  $129 = HEAP32[$128>>2]|0;
  $130 = ($129|0)!=(0);
  if ($130) {
   $131 = $8;
   $132 = ((($131)) + 20|0);
   $133 = HEAP32[$132>>2]|0;
   _glBindTexture(3553,($133|0));
   $134 = $8;
   $135 = ((($134)) + 4|0);
   $136 = +HEAPF32[$135>>2];
   $137 = +HEAPF32[(43752)>>2];
   $138 = $136 * $137;
   $139 = (~~(($138)));
   $140 = HEAP32[(30392)>>2]|0;
   $141 = $8;
   $142 = ((($141)) + 4|0);
   $143 = ((($142)) + 4|0);
   $144 = +HEAPF32[$143>>2];
   $145 = $8;
   $146 = ((($145)) + 4|0);
   $147 = ((($146)) + 12|0);
   $148 = +HEAPF32[$147>>2];
   $149 = $144 + $148;
   $150 = (~~(($149)));
   $151 = (($140) - ($150))|0;
   $152 = (+($151|0));
   $153 = +HEAPF32[(43756)>>2];
   $154 = $152 * $153;
   $155 = (~~(($154)));
   $156 = $8;
   $157 = ((($156)) + 4|0);
   $158 = ((($157)) + 8|0);
   $159 = +HEAPF32[$158>>2];
   $160 = +HEAPF32[(43752)>>2];
   $161 = $159 * $160;
   $162 = (~~(($161)));
   $163 = $8;
   $164 = ((($163)) + 4|0);
   $165 = ((($164)) + 12|0);
   $166 = +HEAPF32[$165>>2];
   $167 = +HEAPF32[(43756)>>2];
   $168 = $166 * $167;
   $169 = (~~(($168)));
   _glScissor(($139|0),($155|0),($162|0),($169|0));
   $170 = $8;
   $171 = HEAP32[$170>>2]|0;
   $172 = $11;
   _glDrawElements(4,($171|0),5123,($172|0));
   $173 = $8;
   $174 = HEAP32[$173>>2]|0;
   $175 = $11;
   $176 = (($175) + ($174<<1)|0);
   $11 = $176;
  }
  $177 = $8;
  $178 = $6;
  $179 = (_nk__draw_next($177,$178,(30536))|0);
  $8 = $179;
 }
 _nk_clear((30536));
 _glUseProgram(0);
 _glBindBuffer(34962,0);
 _glBindBuffer(34963,0);
 _glDisable(3042);
 _glDisable(3089);
 STACKTOP = sp;return;
}
function _nk_glfw3_char_callback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[(44784)>>2]|0;
 $5 = ($4|0)<(256);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $3;
 $7 = HEAP32[(44784)>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[(44784)>>2] = $8;
 $9 = ((43760) + ($7<<2)|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function _nk_gflw3_scroll_callback($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = $6;
 $8 = +HEAPF32[(44788)>>2];
 $9 = $8 + $7;
 HEAPF32[(44788)>>2] = $9;
 STACKTOP = sp;return;
}
function _nk_glfw3_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 HEAP32[7596] = $5;
 $6 = $3;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = $2;
  (_glfwSetScrollCallback(($8|0),(13|0))|0);
  $9 = $2;
  (_glfwSetCharCallback(($9|0),(14|0))|0);
 }
 (_nk_init_default((30536),0)|0);
 HEAP32[(36328)>>2] = 15;
 HEAP32[(36324)>>2] = 16;
 _nk_handle_ptr($4,0);
 ;HEAP32[(36320)>>2]=HEAP32[$4>>2]|0;
 _nk_glfw3_device_create();
 STACKTOP = sp;return ((30536)|0);
}
function _nk_glfw3_clipbard_copy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = 0;
 $6 = $4;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = (_malloc($9)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $5;
 $14 = $3;
 $15 = $4;
 _memcpy(($13|0),($14|0),($15|0))|0;
 $16 = $4;
 $17 = $5;
 $18 = (($17) + ($16)|0);
 HEAP8[$18>>0] = 0;
 $19 = HEAP32[7596]|0;
 $20 = $5;
 _glfwSetClipboardString(($19|0),($20|0));
 $21 = $5;
 _free($21);
 STACKTOP = sp;return;
}
function _nk_glfw3_clipbard_paste($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $4 = HEAP32[7596]|0;
 $5 = (_glfwGetClipboardString(($4|0))|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = $3;
 $10 = $3;
 $11 = (_nk_strlen($10)|0);
 (_nk_textedit_paste($8,$9,$11)|0);
 STACKTOP = sp;return;
}
function _nk_glfw3_font_stash_begin($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _nk_font_atlas_init_default((43460));
 _nk_font_atlas_begin((43460));
 $2 = $1;
 HEAP32[$2>>2] = (43460);
 STACKTOP = sp;return;
}
function _nk_glfw3_font_stash_end() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (_nk_font_atlas_bake((43460),$1,$2,1)|0);
 $0 = $4;
 $5 = $0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 _nk_glfw3_device_upload_atlas($5,$6,$7);
 $8 = HEAP32[(30516)>>2]|0;
 _nk_handle_id($3,$8);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
 _nk_font_atlas_end((43460),$$byval_copy,(30464));
 $9 = HEAP32[(43736)>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[(43736)>>2]|0;
 $12 = ((($11)) + 4|0);
 _nk_style_set_font((30536),$12);
 STACKTOP = sp;return;
}
function _nk_glfw3_device_upload_atlas($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (30404);
 $7 = $6;
 $8 = ((($7)) + 112|0);
 _glGenTextures(1,($8|0));
 $9 = $6;
 $10 = ((($9)) + 112|0);
 $11 = HEAP32[$10>>2]|0;
 _glBindTexture(3553,($11|0));
 _glTexParameteri(3553,10241,9729);
 _glTexParameteri(3553,10240,9729);
 $12 = $4;
 $13 = $5;
 $14 = $3;
 _glTexImage2D(3553,0,6408,($12|0),($13|0),0,6408,5121,($14|0));
 STACKTOP = sp;return;
}
function _nk_glfw3_new_frame() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = (30536);
 $5 = HEAP32[7596]|0;
 $4 = $5;
 $6 = $4;
 _glfwGetWindowSize(($6|0),((30388)|0),((30392)|0));
 $7 = $4;
 _glfwGetFramebufferSize(($7|0),((30396)|0),((30400)|0));
 $8 = HEAP32[(30396)>>2]|0;
 $9 = (+($8|0));
 $10 = HEAP32[(30388)>>2]|0;
 $11 = (+($10|0));
 $12 = $9 / $11;
 HEAPF32[(43752)>>2] = $12;
 $13 = HEAP32[(30400)>>2]|0;
 $14 = (+($13|0));
 $15 = HEAP32[(30392)>>2]|0;
 $16 = (+($15|0));
 $17 = $14 / $16;
 HEAPF32[(43756)>>2] = $17;
 $18 = $3;
 _nk_input_begin($18);
 $0 = 0;
 while(1) {
  $19 = $0;
  $20 = HEAP32[(44784)>>2]|0;
  $21 = ($19|0)<($20|0);
  $22 = $3;
  if (!($21)) {
   break;
  }
  $23 = $0;
  $24 = ((43760) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  _nk_input_unicode($22,$25);
  $26 = $0;
  $27 = (($26) + 1)|0;
  $0 = $27;
 }
 $28 = ((($22)) + 260|0);
 $29 = ((($28)) + 76|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)!=(0);
 if ($31) {
  $32 = HEAP32[7596]|0;
  _glfwSetInputMode(($32|0),208897,212994);
 } else {
  $33 = $3;
  $34 = ((($33)) + 260|0);
  $35 = ((($34)) + 78|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36<<24>>24)!=(0);
  if ($37) {
   $38 = HEAP32[7596]|0;
   _glfwSetInputMode(($38|0),208897,212993);
  }
 }
 $39 = $3;
 $40 = $4;
 $41 = (_glfwGetKey(($40|0),261)|0);
 $42 = ($41|0)==(1);
 $43 = $42&1;
 _nk_input_key($39,3,$43);
 $44 = $3;
 $45 = $4;
 $46 = (_glfwGetKey(($45|0),257)|0);
 $47 = ($46|0)==(1);
 $48 = $47&1;
 _nk_input_key($44,4,$48);
 $49 = $3;
 $50 = $4;
 $51 = (_glfwGetKey(($50|0),258)|0);
 $52 = ($51|0)==(1);
 $53 = $52&1;
 _nk_input_key($49,5,$53);
 $54 = $3;
 $55 = $4;
 $56 = (_glfwGetKey(($55|0),259)|0);
 $57 = ($56|0)==(1);
 $58 = $57&1;
 _nk_input_key($54,6,$58);
 $59 = $3;
 $60 = $4;
 $61 = (_glfwGetKey(($60|0),265)|0);
 $62 = ($61|0)==(1);
 $63 = $62&1;
 _nk_input_key($59,10,$63);
 $64 = $3;
 $65 = $4;
 $66 = (_glfwGetKey(($65|0),264)|0);
 $67 = ($66|0)==(1);
 $68 = $67&1;
 _nk_input_key($64,11,$68);
 $69 = $3;
 $70 = $4;
 $71 = (_glfwGetKey(($70|0),268)|0);
 $72 = ($71|0)==(1);
 $73 = $72&1;
 _nk_input_key($69,19,$73);
 $74 = $3;
 $75 = $4;
 $76 = (_glfwGetKey(($75|0),269)|0);
 $77 = ($76|0)==(1);
 $78 = $77&1;
 _nk_input_key($74,20,$78);
 $79 = $3;
 $80 = $4;
 $81 = (_glfwGetKey(($80|0),340)|0);
 $82 = ($81|0)==(1);
 if ($82) {
  $87 = 1;
 } else {
  $83 = $4;
  $84 = (_glfwGetKey(($83|0),344)|0);
  $85 = ($84|0)==(1);
  $87 = $85;
 }
 $86 = $87&1;
 _nk_input_key($79,1,$86);
 $88 = $4;
 $89 = (_glfwGetKey(($88|0),341)|0);
 $90 = ($89|0)==(1);
 if ($90) {
  label = 12;
 } else {
  $91 = $4;
  $92 = (_glfwGetKey(($91|0),345)|0);
  $93 = ($92|0)==(1);
  if ($93) {
   label = 12;
  } else {
   $139 = $3;
   $140 = $4;
   $141 = (_glfwGetKey(($140|0),263)|0);
   $142 = ($141|0)==(1);
   $143 = $142&1;
   _nk_input_key($139,12,$143);
   $144 = $3;
   $145 = $4;
   $146 = (_glfwGetKey(($145|0),262)|0);
   $147 = ($146|0)==(1);
   $148 = $147&1;
   _nk_input_key($144,13,$148);
   $149 = $3;
   _nk_input_key($149,7,0);
   $150 = $3;
   _nk_input_key($150,9,0);
   $151 = $3;
   _nk_input_key($151,8,0);
   $152 = $3;
   _nk_input_key($152,1,0);
  }
 }
 if ((label|0) == 12) {
  $94 = $3;
  $95 = $4;
  $96 = (_glfwGetKey(($95|0),67)|0);
  $97 = ($96|0)==(1);
  $98 = $97&1;
  _nk_input_key($94,7,$98);
  $99 = $3;
  $100 = $4;
  $101 = (_glfwGetKey(($100|0),80)|0);
  $102 = ($101|0)==(1);
  $103 = $102&1;
  _nk_input_key($99,9,$103);
  $104 = $3;
  $105 = $4;
  $106 = (_glfwGetKey(($105|0),88)|0);
  $107 = ($106|0)==(1);
  $108 = $107&1;
  _nk_input_key($104,8,$108);
  $109 = $3;
  $110 = $4;
  $111 = (_glfwGetKey(($110|0),90)|0);
  $112 = ($111|0)==(1);
  $113 = $112&1;
  _nk_input_key($109,21,$113);
  $114 = $3;
  $115 = $4;
  $116 = (_glfwGetKey(($115|0),82)|0);
  $117 = ($116|0)==(1);
  $118 = $117&1;
  _nk_input_key($114,22,$118);
  $119 = $3;
  $120 = $4;
  $121 = (_glfwGetKey(($120|0),263)|0);
  $122 = ($121|0)==(1);
  $123 = $122&1;
  _nk_input_key($119,24,$123);
  $124 = $3;
  $125 = $4;
  $126 = (_glfwGetKey(($125|0),262)|0);
  $127 = ($126|0)==(1);
  $128 = $127&1;
  _nk_input_key($124,25,$128);
  $129 = $3;
  $130 = $4;
  $131 = (_glfwGetKey(($130|0),66)|0);
  $132 = ($131|0)==(1);
  $133 = $132&1;
  _nk_input_key($129,17,$133);
  $134 = $3;
  $135 = $4;
  $136 = (_glfwGetKey(($135|0),69)|0);
  $137 = ($136|0)==(1);
  $138 = $137&1;
  _nk_input_key($134,18,$138);
 }
 $153 = $4;
 _glfwGetCursorPos(($153|0),($1|0),($2|0));
 $154 = $3;
 $155 = +HEAPF64[$1>>3];
 $156 = (~~(($155)));
 $157 = +HEAPF64[$2>>3];
 $158 = (~~(($157)));
 _nk_input_motion($154,$156,$158);
 $159 = $3;
 $160 = ((($159)) + 260|0);
 $161 = ((($160)) + 77|0);
 $162 = HEAP8[$161>>0]|0;
 $163 = ($162<<24>>24)!=(0);
 if (!($163)) {
  $192 = $3;
  $193 = +HEAPF64[$1>>3];
  $194 = (~~(($193)));
  $195 = +HEAPF64[$2>>3];
  $196 = (~~(($195)));
  $197 = $4;
  $198 = (_glfwGetMouseButton(($197|0),0)|0);
  $199 = ($198|0)==(1);
  $200 = $199&1;
  _nk_input_button($192,0,$194,$196,$200);
  $201 = $3;
  $202 = +HEAPF64[$1>>3];
  $203 = (~~(($202)));
  $204 = +HEAPF64[$2>>3];
  $205 = (~~(($204)));
  $206 = $4;
  $207 = (_glfwGetMouseButton(($206|0),2)|0);
  $208 = ($207|0)==(1);
  $209 = $208&1;
  _nk_input_button($201,1,$203,$205,$209);
  $210 = $3;
  $211 = +HEAPF64[$1>>3];
  $212 = (~~(($211)));
  $213 = +HEAPF64[$2>>3];
  $214 = (~~(($213)));
  $215 = $4;
  $216 = (_glfwGetMouseButton(($215|0),1)|0);
  $217 = ($216|0)==(1);
  $218 = $217&1;
  _nk_input_button($210,2,$212,$214,$218);
  $219 = $3;
  $220 = +HEAPF32[(44788)>>2];
  _nk_input_scroll($219,$220);
  _nk_input_end((30536));
  HEAP32[(44784)>>2] = 0;
  HEAPF32[(44788)>>2] = 0.0;
  STACKTOP = sp;return;
 }
 $164 = HEAP32[7596]|0;
 $165 = $3;
 $166 = ((($165)) + 260|0);
 $167 = ((($166)) + 56|0);
 $168 = +HEAPF32[$167>>2];
 $169 = $168;
 $170 = $3;
 $171 = ((($170)) + 260|0);
 $172 = ((($171)) + 56|0);
 $173 = ((($172)) + 4|0);
 $174 = +HEAPF32[$173>>2];
 $175 = $174;
 _glfwSetCursorPos(($164|0),(+$169),(+$175));
 $176 = $3;
 $177 = ((($176)) + 260|0);
 $178 = ((($177)) + 56|0);
 $179 = +HEAPF32[$178>>2];
 $180 = $3;
 $181 = ((($180)) + 260|0);
 $182 = ((($181)) + 48|0);
 HEAPF32[$182>>2] = $179;
 $183 = $3;
 $184 = ((($183)) + 260|0);
 $185 = ((($184)) + 56|0);
 $186 = ((($185)) + 4|0);
 $187 = +HEAPF32[$186>>2];
 $188 = $3;
 $189 = ((($188)) + 260|0);
 $190 = ((($189)) + 48|0);
 $191 = ((($190)) + 4|0);
 HEAPF32[$191>>2] = $187;
 $192 = $3;
 $193 = +HEAPF64[$1>>3];
 $194 = (~~(($193)));
 $195 = +HEAPF64[$2>>3];
 $196 = (~~(($195)));
 $197 = $4;
 $198 = (_glfwGetMouseButton(($197|0),0)|0);
 $199 = ($198|0)==(1);
 $200 = $199&1;
 _nk_input_button($192,0,$194,$196,$200);
 $201 = $3;
 $202 = +HEAPF64[$1>>3];
 $203 = (~~(($202)));
 $204 = +HEAPF64[$2>>3];
 $205 = (~~(($204)));
 $206 = $4;
 $207 = (_glfwGetMouseButton(($206|0),2)|0);
 $208 = ($207|0)==(1);
 $209 = $208&1;
 _nk_input_button($201,1,$203,$205,$209);
 $210 = $3;
 $211 = +HEAPF64[$1>>3];
 $212 = (~~(($211)));
 $213 = +HEAPF64[$2>>3];
 $214 = (~~(($213)));
 $215 = $4;
 $216 = (_glfwGetMouseButton(($215|0),1)|0);
 $217 = ($216|0)==(1);
 $218 = $217&1;
 _nk_input_button($210,2,$212,$214,$218);
 $219 = $3;
 $220 = +HEAPF32[(44788)>>2];
 _nk_input_scroll($219,$220);
 _nk_input_end((30536));
 HEAP32[(44784)>>2] = 0;
 HEAPF32[(44788)>>2] = 0.0;
 STACKTOP = sp;return;
}
function _nk_glfw3_shutdown() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _nk_font_atlas_clear((43460));
 _nk_free((30536));
 _nk_glfw3_device_destroy();
 _memset((30384|0),0,14408)|0;
 return;
}
function _set_style($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $4 = sp + 456|0;
 $5 = sp + 452|0;
 $6 = sp + 448|0;
 $7 = sp + 444|0;
 $8 = sp + 440|0;
 $9 = sp + 436|0;
 $10 = sp + 432|0;
 $11 = sp + 428|0;
 $12 = sp + 424|0;
 $13 = sp + 420|0;
 $14 = sp + 416|0;
 $15 = sp + 412|0;
 $16 = sp + 408|0;
 $17 = sp + 404|0;
 $18 = sp + 400|0;
 $19 = sp + 396|0;
 $20 = sp + 392|0;
 $21 = sp + 388|0;
 $22 = sp + 384|0;
 $23 = sp + 380|0;
 $24 = sp + 376|0;
 $25 = sp + 372|0;
 $26 = sp + 368|0;
 $27 = sp + 364|0;
 $28 = sp + 360|0;
 $29 = sp + 356|0;
 $30 = sp + 352|0;
 $31 = sp + 348|0;
 $32 = sp + 344|0;
 $33 = sp + 340|0;
 $34 = sp + 336|0;
 $35 = sp + 332|0;
 $36 = sp + 328|0;
 $37 = sp + 324|0;
 $38 = sp + 320|0;
 $39 = sp + 316|0;
 $40 = sp + 312|0;
 $41 = sp + 308|0;
 $42 = sp + 304|0;
 $43 = sp + 300|0;
 $44 = sp + 296|0;
 $45 = sp + 292|0;
 $46 = sp + 288|0;
 $47 = sp + 284|0;
 $48 = sp + 280|0;
 $49 = sp + 276|0;
 $50 = sp + 272|0;
 $51 = sp + 268|0;
 $52 = sp + 264|0;
 $53 = sp + 260|0;
 $54 = sp + 256|0;
 $55 = sp + 252|0;
 $56 = sp + 248|0;
 $57 = sp + 244|0;
 $58 = sp + 240|0;
 $59 = sp + 236|0;
 $60 = sp + 232|0;
 $61 = sp + 228|0;
 $62 = sp + 224|0;
 $63 = sp + 220|0;
 $64 = sp + 216|0;
 $65 = sp + 212|0;
 $66 = sp + 208|0;
 $67 = sp + 204|0;
 $68 = sp + 200|0;
 $69 = sp + 196|0;
 $70 = sp + 192|0;
 $71 = sp + 188|0;
 $72 = sp + 184|0;
 $73 = sp + 180|0;
 $74 = sp + 176|0;
 $75 = sp + 172|0;
 $76 = sp + 168|0;
 $77 = sp + 164|0;
 $78 = sp + 160|0;
 $79 = sp + 156|0;
 $80 = sp + 152|0;
 $81 = sp + 148|0;
 $82 = sp + 144|0;
 $83 = sp + 140|0;
 $84 = sp + 136|0;
 $85 = sp + 132|0;
 $86 = sp + 128|0;
 $87 = sp + 124|0;
 $88 = sp + 120|0;
 $89 = sp + 116|0;
 $90 = sp + 112|0;
 $91 = sp + 108|0;
 $92 = sp + 104|0;
 $93 = sp + 100|0;
 $94 = sp + 96|0;
 $95 = sp + 92|0;
 $96 = sp + 88|0;
 $97 = sp + 84|0;
 $98 = sp + 80|0;
 $99 = sp + 76|0;
 $100 = sp + 72|0;
 $101 = sp + 68|0;
 $102 = sp + 64|0;
 $103 = sp + 60|0;
 $104 = sp + 56|0;
 $105 = sp + 52|0;
 $106 = sp + 48|0;
 $107 = sp + 44|0;
 $108 = sp + 40|0;
 $109 = sp + 36|0;
 $110 = sp + 32|0;
 $111 = sp + 28|0;
 $112 = sp + 24|0;
 $113 = sp + 20|0;
 $114 = sp + 16|0;
 $115 = sp + 12|0;
 $116 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $117 = $3;
 $118 = ($117|0)==(1);
 if ($118) {
  _nk_rgba($5,70,70,70,255);
  ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;
  $119 = ((($4)) + 4|0);
  _nk_rgba($6,175,175,175,255);
  ;HEAP8[$119>>0]=HEAP8[$6>>0]|0;HEAP8[$119+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$119+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$119+3>>0]=HEAP8[$6+3>>0]|0;
  $120 = ((($4)) + 8|0);
  _nk_rgba($7,175,175,175,255);
  ;HEAP8[$120>>0]=HEAP8[$7>>0]|0;HEAP8[$120+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$120+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$120+3>>0]=HEAP8[$7+3>>0]|0;
  $121 = ((($4)) + 12|0);
  _nk_rgba($8,0,0,0,255);
  ;HEAP8[$121>>0]=HEAP8[$8>>0]|0;HEAP8[$121+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$121+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$121+3>>0]=HEAP8[$8+3>>0]|0;
  $122 = ((($4)) + 16|0);
  _nk_rgba($9,185,185,185,255);
  ;HEAP8[$122>>0]=HEAP8[$9>>0]|0;HEAP8[$122+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$122+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$122+3>>0]=HEAP8[$9+3>>0]|0;
  $123 = ((($4)) + 20|0);
  _nk_rgba($10,170,170,170,255);
  ;HEAP8[$123>>0]=HEAP8[$10>>0]|0;HEAP8[$123+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$123+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$123+3>>0]=HEAP8[$10+3>>0]|0;
  $124 = ((($4)) + 24|0);
  _nk_rgba($11,160,160,160,255);
  ;HEAP8[$124>>0]=HEAP8[$11>>0]|0;HEAP8[$124+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$124+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$124+3>>0]=HEAP8[$11+3>>0]|0;
  $125 = ((($4)) + 28|0);
  _nk_rgba($12,150,150,150,255);
  ;HEAP8[$125>>0]=HEAP8[$12>>0]|0;HEAP8[$125+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$125+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$125+3>>0]=HEAP8[$12+3>>0]|0;
  $126 = ((($4)) + 32|0);
  _nk_rgba($13,120,120,120,255);
  ;HEAP8[$126>>0]=HEAP8[$13>>0]|0;HEAP8[$126+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$126+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$126+3>>0]=HEAP8[$13+3>>0]|0;
  $127 = ((($4)) + 36|0);
  _nk_rgba($14,175,175,175,255);
  ;HEAP8[$127>>0]=HEAP8[$14>>0]|0;HEAP8[$127+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$127+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$127+3>>0]=HEAP8[$14+3>>0]|0;
  $128 = ((($4)) + 40|0);
  _nk_rgba($15,190,190,190,255);
  ;HEAP8[$128>>0]=HEAP8[$15>>0]|0;HEAP8[$128+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$128+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$128+3>>0]=HEAP8[$15+3>>0]|0;
  $129 = ((($4)) + 44|0);
  _nk_rgba($16,175,175,175,255);
  ;HEAP8[$129>>0]=HEAP8[$16>>0]|0;HEAP8[$129+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$129+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$129+3>>0]=HEAP8[$16+3>>0]|0;
  $130 = ((($4)) + 48|0);
  _nk_rgba($17,190,190,190,255);
  ;HEAP8[$130>>0]=HEAP8[$17>>0]|0;HEAP8[$130+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$17+3>>0]|0;
  $131 = ((($4)) + 52|0);
  _nk_rgba($18,80,80,80,255);
  ;HEAP8[$131>>0]=HEAP8[$18>>0]|0;HEAP8[$131+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$131+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$131+3>>0]=HEAP8[$18+3>>0]|0;
  $132 = ((($4)) + 56|0);
  _nk_rgba($19,70,70,70,255);
  ;HEAP8[$132>>0]=HEAP8[$19>>0]|0;HEAP8[$132+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$132+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$132+3>>0]=HEAP8[$19+3>>0]|0;
  $133 = ((($4)) + 60|0);
  _nk_rgba($20,60,60,60,255);
  ;HEAP8[$133>>0]=HEAP8[$20>>0]|0;HEAP8[$133+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$133+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$133+3>>0]=HEAP8[$20+3>>0]|0;
  $134 = ((($4)) + 64|0);
  _nk_rgba($21,175,175,175,255);
  ;HEAP8[$134>>0]=HEAP8[$21>>0]|0;HEAP8[$134+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$134+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$134+3>>0]=HEAP8[$21+3>>0]|0;
  $135 = ((($4)) + 68|0);
  _nk_rgba($22,150,150,150,255);
  ;HEAP8[$135>>0]=HEAP8[$22>>0]|0;HEAP8[$135+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$135+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$135+3>>0]=HEAP8[$22+3>>0]|0;
  $136 = ((($4)) + 72|0);
  _nk_rgba($23,0,0,0,255);
  ;HEAP8[$136>>0]=HEAP8[$23>>0]|0;HEAP8[$136+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$136+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$136+3>>0]=HEAP8[$23+3>>0]|0;
  $137 = ((($4)) + 76|0);
  _nk_rgba($24,175,175,175,255);
  ;HEAP8[$137>>0]=HEAP8[$24>>0]|0;HEAP8[$137+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$137+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$137+3>>0]=HEAP8[$24+3>>0]|0;
  $138 = ((($4)) + 80|0);
  _nk_rgba($25,160,160,160,255);
  ;HEAP8[$138>>0]=HEAP8[$25>>0]|0;HEAP8[$138+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$138+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$138+3>>0]=HEAP8[$25+3>>0]|0;
  $139 = ((($4)) + 84|0);
  _nk_rgba($26,45,45,45,255);
  ;HEAP8[$139>>0]=HEAP8[$26>>0]|0;HEAP8[$139+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$139+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$139+3>>0]=HEAP8[$26+3>>0]|0;
  $140 = ((($4)) + 88|0);
  _nk_rgba($27,255,0,0,255);
  ;HEAP8[$140>>0]=HEAP8[$27>>0]|0;HEAP8[$140+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$140+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$140+3>>0]=HEAP8[$27+3>>0]|0;
  $141 = ((($4)) + 92|0);
  _nk_rgba($28,180,180,180,255);
  ;HEAP8[$141>>0]=HEAP8[$28>>0]|0;HEAP8[$141+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$141+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$141+3>>0]=HEAP8[$28+3>>0]|0;
  $142 = ((($4)) + 96|0);
  _nk_rgba($29,140,140,140,255);
  ;HEAP8[$142>>0]=HEAP8[$29>>0]|0;HEAP8[$142+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$142+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$142+3>>0]=HEAP8[$29+3>>0]|0;
  $143 = ((($4)) + 100|0);
  _nk_rgba($30,150,150,150,255);
  ;HEAP8[$143>>0]=HEAP8[$30>>0]|0;HEAP8[$143+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$143+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$143+3>>0]=HEAP8[$30+3>>0]|0;
  $144 = ((($4)) + 104|0);
  _nk_rgba($31,160,160,160,255);
  ;HEAP8[$144>>0]=HEAP8[$31>>0]|0;HEAP8[$144+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$144+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$144+3>>0]=HEAP8[$31+3>>0]|0;
  $145 = ((($4)) + 108|0);
  _nk_rgba($32,180,180,180,255);
  ;HEAP8[$145>>0]=HEAP8[$32>>0]|0;HEAP8[$145+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$145+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$145+3>>0]=HEAP8[$32+3>>0]|0;
  $146 = $2;
  _nk_style_from_table($146,$4);
  STACKTOP = sp;return;
 }
 $147 = $3;
 $148 = ($147|0)==(2);
 if ($148) {
  _nk_rgba($33,190,190,190,255);
  ;HEAP8[$4>>0]=HEAP8[$33>>0]|0;HEAP8[$4+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$33+3>>0]|0;
  $149 = ((($4)) + 4|0);
  _nk_rgba($34,30,33,40,215);
  ;HEAP8[$149>>0]=HEAP8[$34>>0]|0;HEAP8[$149+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$149+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$149+3>>0]=HEAP8[$34+3>>0]|0;
  $150 = ((($4)) + 8|0);
  _nk_rgba($35,181,45,69,220);
  ;HEAP8[$150>>0]=HEAP8[$35>>0]|0;HEAP8[$150+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$150+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$150+3>>0]=HEAP8[$35+3>>0]|0;
  $151 = ((($4)) + 12|0);
  _nk_rgba($36,51,55,67,255);
  ;HEAP8[$151>>0]=HEAP8[$36>>0]|0;HEAP8[$151+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$151+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$151+3>>0]=HEAP8[$36+3>>0]|0;
  $152 = ((($4)) + 16|0);
  _nk_rgba($37,181,45,69,255);
  ;HEAP8[$152>>0]=HEAP8[$37>>0]|0;HEAP8[$152+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$152+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$152+3>>0]=HEAP8[$37+3>>0]|0;
  $153 = ((($4)) + 20|0);
  _nk_rgba($38,190,50,70,255);
  ;HEAP8[$153>>0]=HEAP8[$38>>0]|0;HEAP8[$153+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$153+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$153+3>>0]=HEAP8[$38+3>>0]|0;
  $154 = ((($4)) + 24|0);
  _nk_rgba($39,195,55,75,255);
  ;HEAP8[$154>>0]=HEAP8[$39>>0]|0;HEAP8[$154+1>>0]=HEAP8[$39+1>>0]|0;HEAP8[$154+2>>0]=HEAP8[$39+2>>0]|0;HEAP8[$154+3>>0]=HEAP8[$39+3>>0]|0;
  $155 = ((($4)) + 28|0);
  _nk_rgba($40,51,55,67,255);
  ;HEAP8[$155>>0]=HEAP8[$40>>0]|0;HEAP8[$155+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$155+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$155+3>>0]=HEAP8[$40+3>>0]|0;
  $156 = ((($4)) + 32|0);
  _nk_rgba($41,45,60,60,255);
  ;HEAP8[$156>>0]=HEAP8[$41>>0]|0;HEAP8[$156+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$156+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$156+3>>0]=HEAP8[$41+3>>0]|0;
  $157 = ((($4)) + 36|0);
  _nk_rgba($42,181,45,69,255);
  ;HEAP8[$157>>0]=HEAP8[$42>>0]|0;HEAP8[$157+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$157+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$157+3>>0]=HEAP8[$42+3>>0]|0;
  $158 = ((($4)) + 40|0);
  _nk_rgba($43,51,55,67,255);
  ;HEAP8[$158>>0]=HEAP8[$43>>0]|0;HEAP8[$158+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$158+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$158+3>>0]=HEAP8[$43+3>>0]|0;
  $159 = ((($4)) + 44|0);
  _nk_rgba($44,181,45,69,255);
  ;HEAP8[$159>>0]=HEAP8[$44>>0]|0;HEAP8[$159+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$159+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$159+3>>0]=HEAP8[$44+3>>0]|0;
  $160 = ((($4)) + 48|0);
  _nk_rgba($45,51,55,67,255);
  ;HEAP8[$160>>0]=HEAP8[$45>>0]|0;HEAP8[$160+1>>0]=HEAP8[$45+1>>0]|0;HEAP8[$160+2>>0]=HEAP8[$45+2>>0]|0;HEAP8[$160+3>>0]=HEAP8[$45+3>>0]|0;
  $161 = ((($4)) + 52|0);
  _nk_rgba($46,181,45,69,255);
  ;HEAP8[$161>>0]=HEAP8[$46>>0]|0;HEAP8[$161+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$161+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$161+3>>0]=HEAP8[$46+3>>0]|0;
  $162 = ((($4)) + 56|0);
  _nk_rgba($47,186,50,74,255);
  ;HEAP8[$162>>0]=HEAP8[$47>>0]|0;HEAP8[$162+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$162+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$162+3>>0]=HEAP8[$47+3>>0]|0;
  $163 = ((($4)) + 60|0);
  _nk_rgba($48,191,55,79,255);
  ;HEAP8[$163>>0]=HEAP8[$48>>0]|0;HEAP8[$163+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$163+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$163+3>>0]=HEAP8[$48+3>>0]|0;
  $164 = ((($4)) + 64|0);
  _nk_rgba($49,51,55,67,255);
  ;HEAP8[$164>>0]=HEAP8[$49>>0]|0;HEAP8[$164+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$164+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$164+3>>0]=HEAP8[$49+3>>0]|0;
  $165 = ((($4)) + 68|0);
  _nk_rgba($50,51,55,67,225);
  ;HEAP8[$165>>0]=HEAP8[$50>>0]|0;HEAP8[$165+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$165+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$165+3>>0]=HEAP8[$50+3>>0]|0;
  $166 = ((($4)) + 72|0);
  _nk_rgba($51,190,190,190,255);
  ;HEAP8[$166>>0]=HEAP8[$51>>0]|0;HEAP8[$166+1>>0]=HEAP8[$51+1>>0]|0;HEAP8[$166+2>>0]=HEAP8[$51+2>>0]|0;HEAP8[$166+3>>0]=HEAP8[$51+3>>0]|0;
  $167 = ((($4)) + 76|0);
  _nk_rgba($52,51,55,67,255);
  ;HEAP8[$167>>0]=HEAP8[$52>>0]|0;HEAP8[$167+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$167+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$167+3>>0]=HEAP8[$52+3>>0]|0;
  $168 = ((($4)) + 80|0);
  _nk_rgba($53,51,55,67,255);
  ;HEAP8[$168>>0]=HEAP8[$53>>0]|0;HEAP8[$168+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$168+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$168+3>>0]=HEAP8[$53+3>>0]|0;
  $169 = ((($4)) + 84|0);
  _nk_rgba($54,170,40,60,255);
  ;HEAP8[$169>>0]=HEAP8[$54>>0]|0;HEAP8[$169+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$169+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$169+3>>0]=HEAP8[$54+3>>0]|0;
  $170 = ((($4)) + 88|0);
  _nk_rgba($55,255,0,0,255);
  ;HEAP8[$170>>0]=HEAP8[$55>>0]|0;HEAP8[$170+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$170+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$170+3>>0]=HEAP8[$55+3>>0]|0;
  $171 = ((($4)) + 92|0);
  _nk_rgba($56,30,33,40,255);
  ;HEAP8[$171>>0]=HEAP8[$56>>0]|0;HEAP8[$171+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$171+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$171+3>>0]=HEAP8[$56+3>>0]|0;
  $172 = ((($4)) + 96|0);
  _nk_rgba($57,64,84,95,255);
  ;HEAP8[$172>>0]=HEAP8[$57>>0]|0;HEAP8[$172+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$172+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$172+3>>0]=HEAP8[$57+3>>0]|0;
  $173 = ((($4)) + 100|0);
  _nk_rgba($58,70,90,100,255);
  ;HEAP8[$173>>0]=HEAP8[$58>>0]|0;HEAP8[$173+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$173+2>>0]=HEAP8[$58+2>>0]|0;HEAP8[$173+3>>0]=HEAP8[$58+3>>0]|0;
  $174 = ((($4)) + 104|0);
  _nk_rgba($59,75,95,105,255);
  ;HEAP8[$174>>0]=HEAP8[$59>>0]|0;HEAP8[$174+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$174+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$174+3>>0]=HEAP8[$59+3>>0]|0;
  $175 = ((($4)) + 108|0);
  _nk_rgba($60,181,45,69,220);
  ;HEAP8[$175>>0]=HEAP8[$60>>0]|0;HEAP8[$175+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$175+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$175+3>>0]=HEAP8[$60+3>>0]|0;
  $176 = $2;
  _nk_style_from_table($176,$4);
  STACKTOP = sp;return;
 }
 $177 = $3;
 $178 = ($177|0)==(3);
 if ($178) {
  _nk_rgba($61,20,20,20,255);
  ;HEAP8[$4>>0]=HEAP8[$61>>0]|0;HEAP8[$4+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$61+3>>0]|0;
  $179 = ((($4)) + 4|0);
  _nk_rgba($62,202,212,214,215);
  ;HEAP8[$179>>0]=HEAP8[$62>>0]|0;HEAP8[$179+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$179+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$179+3>>0]=HEAP8[$62+3>>0]|0;
  $180 = ((($4)) + 8|0);
  _nk_rgba($63,137,182,224,220);
  ;HEAP8[$180>>0]=HEAP8[$63>>0]|0;HEAP8[$180+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$180+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$180+3>>0]=HEAP8[$63+3>>0]|0;
  $181 = ((($4)) + 12|0);
  _nk_rgba($64,140,159,173,255);
  ;HEAP8[$181>>0]=HEAP8[$64>>0]|0;HEAP8[$181+1>>0]=HEAP8[$64+1>>0]|0;HEAP8[$181+2>>0]=HEAP8[$64+2>>0]|0;HEAP8[$181+3>>0]=HEAP8[$64+3>>0]|0;
  $182 = ((($4)) + 16|0);
  _nk_rgba($65,137,182,224,255);
  ;HEAP8[$182>>0]=HEAP8[$65>>0]|0;HEAP8[$182+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$182+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$182+3>>0]=HEAP8[$65+3>>0]|0;
  $183 = ((($4)) + 20|0);
  _nk_rgba($66,142,187,229,255);
  ;HEAP8[$183>>0]=HEAP8[$66>>0]|0;HEAP8[$183+1>>0]=HEAP8[$66+1>>0]|0;HEAP8[$183+2>>0]=HEAP8[$66+2>>0]|0;HEAP8[$183+3>>0]=HEAP8[$66+3>>0]|0;
  $184 = ((($4)) + 24|0);
  _nk_rgba($67,147,192,234,255);
  ;HEAP8[$184>>0]=HEAP8[$67>>0]|0;HEAP8[$184+1>>0]=HEAP8[$67+1>>0]|0;HEAP8[$184+2>>0]=HEAP8[$67+2>>0]|0;HEAP8[$184+3>>0]=HEAP8[$67+3>>0]|0;
  $185 = ((($4)) + 28|0);
  _nk_rgba($68,177,210,210,255);
  ;HEAP8[$185>>0]=HEAP8[$68>>0]|0;HEAP8[$185+1>>0]=HEAP8[$68+1>>0]|0;HEAP8[$185+2>>0]=HEAP8[$68+2>>0]|0;HEAP8[$185+3>>0]=HEAP8[$68+3>>0]|0;
  $186 = ((($4)) + 32|0);
  _nk_rgba($69,182,215,215,255);
  ;HEAP8[$186>>0]=HEAP8[$69>>0]|0;HEAP8[$186+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$186+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$186+3>>0]=HEAP8[$69+3>>0]|0;
  $187 = ((($4)) + 36|0);
  _nk_rgba($70,137,182,224,255);
  ;HEAP8[$187>>0]=HEAP8[$70>>0]|0;HEAP8[$187+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$187+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$187+3>>0]=HEAP8[$70+3>>0]|0;
  $188 = ((($4)) + 40|0);
  _nk_rgba($71,177,210,210,255);
  ;HEAP8[$188>>0]=HEAP8[$71>>0]|0;HEAP8[$188+1>>0]=HEAP8[$71+1>>0]|0;HEAP8[$188+2>>0]=HEAP8[$71+2>>0]|0;HEAP8[$188+3>>0]=HEAP8[$71+3>>0]|0;
  $189 = ((($4)) + 44|0);
  _nk_rgba($72,137,182,224,255);
  ;HEAP8[$189>>0]=HEAP8[$72>>0]|0;HEAP8[$189+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$189+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$189+3>>0]=HEAP8[$72+3>>0]|0;
  $190 = ((($4)) + 48|0);
  _nk_rgba($73,177,210,210,255);
  ;HEAP8[$190>>0]=HEAP8[$73>>0]|0;HEAP8[$190+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$190+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$190+3>>0]=HEAP8[$73+3>>0]|0;
  $191 = ((($4)) + 52|0);
  _nk_rgba($74,137,182,224,245);
  ;HEAP8[$191>>0]=HEAP8[$74>>0]|0;HEAP8[$191+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$191+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$191+3>>0]=HEAP8[$74+3>>0]|0;
  $192 = ((($4)) + 56|0);
  _nk_rgba($75,142,188,229,255);
  ;HEAP8[$192>>0]=HEAP8[$75>>0]|0;HEAP8[$192+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$192+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$192+3>>0]=HEAP8[$75+3>>0]|0;
  $193 = ((($4)) + 60|0);
  _nk_rgba($76,147,193,234,255);
  ;HEAP8[$193>>0]=HEAP8[$76>>0]|0;HEAP8[$193+1>>0]=HEAP8[$76+1>>0]|0;HEAP8[$193+2>>0]=HEAP8[$76+2>>0]|0;HEAP8[$193+3>>0]=HEAP8[$76+3>>0]|0;
  $194 = ((($4)) + 64|0);
  _nk_rgba($77,210,210,210,255);
  ;HEAP8[$194>>0]=HEAP8[$77>>0]|0;HEAP8[$194+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$194+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$194+3>>0]=HEAP8[$77+3>>0]|0;
  $195 = ((($4)) + 68|0);
  _nk_rgba($78,210,210,210,225);
  ;HEAP8[$195>>0]=HEAP8[$78>>0]|0;HEAP8[$195+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$195+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$195+3>>0]=HEAP8[$78+3>>0]|0;
  $196 = ((($4)) + 72|0);
  _nk_rgba($79,20,20,20,255);
  ;HEAP8[$196>>0]=HEAP8[$79>>0]|0;HEAP8[$196+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$196+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$196+3>>0]=HEAP8[$79+3>>0]|0;
  $197 = ((($4)) + 76|0);
  _nk_rgba($80,210,210,210,255);
  ;HEAP8[$197>>0]=HEAP8[$80>>0]|0;HEAP8[$197+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$197+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$197+3>>0]=HEAP8[$80+3>>0]|0;
  $198 = ((($4)) + 80|0);
  _nk_rgba($81,210,210,210,255);
  ;HEAP8[$198>>0]=HEAP8[$81>>0]|0;HEAP8[$198+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$198+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$198+3>>0]=HEAP8[$81+3>>0]|0;
  $199 = ((($4)) + 84|0);
  _nk_rgba($82,137,182,224,255);
  ;HEAP8[$199>>0]=HEAP8[$82>>0]|0;HEAP8[$199+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$199+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$199+3>>0]=HEAP8[$82+3>>0]|0;
  $200 = ((($4)) + 88|0);
  _nk_rgba($83,255,0,0,255);
  ;HEAP8[$200>>0]=HEAP8[$83>>0]|0;HEAP8[$200+1>>0]=HEAP8[$83+1>>0]|0;HEAP8[$200+2>>0]=HEAP8[$83+2>>0]|0;HEAP8[$200+3>>0]=HEAP8[$83+3>>0]|0;
  $201 = ((($4)) + 92|0);
  _nk_rgba($84,190,200,200,255);
  ;HEAP8[$201>>0]=HEAP8[$84>>0]|0;HEAP8[$201+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$201+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$201+3>>0]=HEAP8[$84+3>>0]|0;
  $202 = ((($4)) + 96|0);
  _nk_rgba($85,64,84,95,255);
  ;HEAP8[$202>>0]=HEAP8[$85>>0]|0;HEAP8[$202+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$202+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$202+3>>0]=HEAP8[$85+3>>0]|0;
  $203 = ((($4)) + 100|0);
  _nk_rgba($86,70,90,100,255);
  ;HEAP8[$203>>0]=HEAP8[$86>>0]|0;HEAP8[$203+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$203+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$203+3>>0]=HEAP8[$86+3>>0]|0;
  $204 = ((($4)) + 104|0);
  _nk_rgba($87,75,95,105,255);
  ;HEAP8[$204>>0]=HEAP8[$87>>0]|0;HEAP8[$204+1>>0]=HEAP8[$87+1>>0]|0;HEAP8[$204+2>>0]=HEAP8[$87+2>>0]|0;HEAP8[$204+3>>0]=HEAP8[$87+3>>0]|0;
  $205 = ((($4)) + 108|0);
  _nk_rgba($88,156,193,220,255);
  ;HEAP8[$205>>0]=HEAP8[$88>>0]|0;HEAP8[$205+1>>0]=HEAP8[$88+1>>0]|0;HEAP8[$205+2>>0]=HEAP8[$88+2>>0]|0;HEAP8[$205+3>>0]=HEAP8[$88+3>>0]|0;
  $206 = $2;
  _nk_style_from_table($206,$4);
  STACKTOP = sp;return;
 }
 $207 = $3;
 $208 = ($207|0)==(4);
 if ($208) {
  _nk_rgba($89,210,210,210,255);
  ;HEAP8[$4>>0]=HEAP8[$89>>0]|0;HEAP8[$4+1>>0]=HEAP8[$89+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$89+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$89+3>>0]|0;
  $209 = ((($4)) + 4|0);
  _nk_rgba($90,57,67,71,215);
  ;HEAP8[$209>>0]=HEAP8[$90>>0]|0;HEAP8[$209+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$209+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$209+3>>0]=HEAP8[$90+3>>0]|0;
  $210 = ((($4)) + 8|0);
  _nk_rgba($91,51,51,56,220);
  ;HEAP8[$210>>0]=HEAP8[$91>>0]|0;HEAP8[$210+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$210+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$210+3>>0]=HEAP8[$91+3>>0]|0;
  $211 = ((($4)) + 12|0);
  _nk_rgba($92,46,46,46,255);
  ;HEAP8[$211>>0]=HEAP8[$92>>0]|0;HEAP8[$211+1>>0]=HEAP8[$92+1>>0]|0;HEAP8[$211+2>>0]=HEAP8[$92+2>>0]|0;HEAP8[$211+3>>0]=HEAP8[$92+3>>0]|0;
  $212 = ((($4)) + 16|0);
  _nk_rgba($93,48,83,111,255);
  ;HEAP8[$212>>0]=HEAP8[$93>>0]|0;HEAP8[$212+1>>0]=HEAP8[$93+1>>0]|0;HEAP8[$212+2>>0]=HEAP8[$93+2>>0]|0;HEAP8[$212+3>>0]=HEAP8[$93+3>>0]|0;
  $213 = ((($4)) + 20|0);
  _nk_rgba($94,58,93,121,255);
  ;HEAP8[$213>>0]=HEAP8[$94>>0]|0;HEAP8[$213+1>>0]=HEAP8[$94+1>>0]|0;HEAP8[$213+2>>0]=HEAP8[$94+2>>0]|0;HEAP8[$213+3>>0]=HEAP8[$94+3>>0]|0;
  $214 = ((($4)) + 24|0);
  _nk_rgba($95,63,98,126,255);
  ;HEAP8[$214>>0]=HEAP8[$95>>0]|0;HEAP8[$214+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$214+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$214+3>>0]=HEAP8[$95+3>>0]|0;
  $215 = ((($4)) + 28|0);
  _nk_rgba($96,50,58,61,255);
  ;HEAP8[$215>>0]=HEAP8[$96>>0]|0;HEAP8[$215+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$215+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$215+3>>0]=HEAP8[$96+3>>0]|0;
  $216 = ((($4)) + 32|0);
  _nk_rgba($97,45,53,56,255);
  ;HEAP8[$216>>0]=HEAP8[$97>>0]|0;HEAP8[$216+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$216+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$216+3>>0]=HEAP8[$97+3>>0]|0;
  $217 = ((($4)) + 36|0);
  _nk_rgba($98,48,83,111,255);
  ;HEAP8[$217>>0]=HEAP8[$98>>0]|0;HEAP8[$217+1>>0]=HEAP8[$98+1>>0]|0;HEAP8[$217+2>>0]=HEAP8[$98+2>>0]|0;HEAP8[$217+3>>0]=HEAP8[$98+3>>0]|0;
  $218 = ((($4)) + 40|0);
  _nk_rgba($99,57,67,61,255);
  ;HEAP8[$218>>0]=HEAP8[$99>>0]|0;HEAP8[$218+1>>0]=HEAP8[$99+1>>0]|0;HEAP8[$218+2>>0]=HEAP8[$99+2>>0]|0;HEAP8[$218+3>>0]=HEAP8[$99+3>>0]|0;
  $219 = ((($4)) + 44|0);
  _nk_rgba($100,48,83,111,255);
  ;HEAP8[$219>>0]=HEAP8[$100>>0]|0;HEAP8[$219+1>>0]=HEAP8[$100+1>>0]|0;HEAP8[$219+2>>0]=HEAP8[$100+2>>0]|0;HEAP8[$219+3>>0]=HEAP8[$100+3>>0]|0;
  $220 = ((($4)) + 48|0);
  _nk_rgba($101,50,58,61,255);
  ;HEAP8[$220>>0]=HEAP8[$101>>0]|0;HEAP8[$220+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$220+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$220+3>>0]=HEAP8[$101+3>>0]|0;
  $221 = ((($4)) + 52|0);
  _nk_rgba($102,48,83,111,245);
  ;HEAP8[$221>>0]=HEAP8[$102>>0]|0;HEAP8[$221+1>>0]=HEAP8[$102+1>>0]|0;HEAP8[$221+2>>0]=HEAP8[$102+2>>0]|0;HEAP8[$221+3>>0]=HEAP8[$102+3>>0]|0;
  $222 = ((($4)) + 56|0);
  _nk_rgba($103,53,88,116,255);
  ;HEAP8[$222>>0]=HEAP8[$103>>0]|0;HEAP8[$222+1>>0]=HEAP8[$103+1>>0]|0;HEAP8[$222+2>>0]=HEAP8[$103+2>>0]|0;HEAP8[$222+3>>0]=HEAP8[$103+3>>0]|0;
  $223 = ((($4)) + 60|0);
  _nk_rgba($104,58,93,121,255);
  ;HEAP8[$223>>0]=HEAP8[$104>>0]|0;HEAP8[$223+1>>0]=HEAP8[$104+1>>0]|0;HEAP8[$223+2>>0]=HEAP8[$104+2>>0]|0;HEAP8[$223+3>>0]=HEAP8[$104+3>>0]|0;
  $224 = ((($4)) + 64|0);
  _nk_rgba($105,50,58,61,255);
  ;HEAP8[$224>>0]=HEAP8[$105>>0]|0;HEAP8[$224+1>>0]=HEAP8[$105+1>>0]|0;HEAP8[$224+2>>0]=HEAP8[$105+2>>0]|0;HEAP8[$224+3>>0]=HEAP8[$105+3>>0]|0;
  $225 = ((($4)) + 68|0);
  _nk_rgba($106,50,58,61,225);
  ;HEAP8[$225>>0]=HEAP8[$106>>0]|0;HEAP8[$225+1>>0]=HEAP8[$106+1>>0]|0;HEAP8[$225+2>>0]=HEAP8[$106+2>>0]|0;HEAP8[$225+3>>0]=HEAP8[$106+3>>0]|0;
  $226 = ((($4)) + 72|0);
  _nk_rgba($107,210,210,210,255);
  ;HEAP8[$226>>0]=HEAP8[$107>>0]|0;HEAP8[$226+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$226+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$226+3>>0]=HEAP8[$107+3>>0]|0;
  $227 = ((($4)) + 76|0);
  _nk_rgba($108,50,58,61,255);
  ;HEAP8[$227>>0]=HEAP8[$108>>0]|0;HEAP8[$227+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$227+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$227+3>>0]=HEAP8[$108+3>>0]|0;
  $228 = ((($4)) + 80|0);
  _nk_rgba($109,50,58,61,255);
  ;HEAP8[$228>>0]=HEAP8[$109>>0]|0;HEAP8[$228+1>>0]=HEAP8[$109+1>>0]|0;HEAP8[$228+2>>0]=HEAP8[$109+2>>0]|0;HEAP8[$228+3>>0]=HEAP8[$109+3>>0]|0;
  $229 = ((($4)) + 84|0);
  _nk_rgba($110,48,83,111,255);
  ;HEAP8[$229>>0]=HEAP8[$110>>0]|0;HEAP8[$229+1>>0]=HEAP8[$110+1>>0]|0;HEAP8[$229+2>>0]=HEAP8[$110+2>>0]|0;HEAP8[$229+3>>0]=HEAP8[$110+3>>0]|0;
  $230 = ((($4)) + 88|0);
  _nk_rgba($111,255,0,0,255);
  ;HEAP8[$230>>0]=HEAP8[$111>>0]|0;HEAP8[$230+1>>0]=HEAP8[$111+1>>0]|0;HEAP8[$230+2>>0]=HEAP8[$111+2>>0]|0;HEAP8[$230+3>>0]=HEAP8[$111+3>>0]|0;
  $231 = ((($4)) + 92|0);
  _nk_rgba($112,50,58,61,255);
  ;HEAP8[$231>>0]=HEAP8[$112>>0]|0;HEAP8[$231+1>>0]=HEAP8[$112+1>>0]|0;HEAP8[$231+2>>0]=HEAP8[$112+2>>0]|0;HEAP8[$231+3>>0]=HEAP8[$112+3>>0]|0;
  $232 = ((($4)) + 96|0);
  _nk_rgba($113,48,83,111,255);
  ;HEAP8[$232>>0]=HEAP8[$113>>0]|0;HEAP8[$232+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$232+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$232+3>>0]=HEAP8[$113+3>>0]|0;
  $233 = ((($4)) + 100|0);
  _nk_rgba($114,53,88,116,255);
  ;HEAP8[$233>>0]=HEAP8[$114>>0]|0;HEAP8[$233+1>>0]=HEAP8[$114+1>>0]|0;HEAP8[$233+2>>0]=HEAP8[$114+2>>0]|0;HEAP8[$233+3>>0]=HEAP8[$114+3>>0]|0;
  $234 = ((($4)) + 104|0);
  _nk_rgba($115,58,93,121,255);
  ;HEAP8[$234>>0]=HEAP8[$115>>0]|0;HEAP8[$234+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$234+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$234+3>>0]=HEAP8[$115+3>>0]|0;
  $235 = ((($4)) + 108|0);
  _nk_rgba($116,48,83,111,255);
  ;HEAP8[$235>>0]=HEAP8[$116>>0]|0;HEAP8[$235+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$235+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$235+3>>0]=HEAP8[$116+3>>0]|0;
  $236 = $2;
  _nk_style_from_table($236,$4);
  STACKTOP = sp;return;
 } else {
  $237 = $2;
  _nk_style_default($237);
  STACKTOP = sp;return;
 }
}
function _render() {
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $background$byval_copy = 0, $background$byval_copy2 = 0, $background$byval_copy4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $background$byval_copy4 = sp + 108|0;
 $$byval_copy3 = sp + 88|0;
 $background$byval_copy2 = sp + 104|0;
 $$byval_copy1 = sp + 80|0;
 $background$byval_copy = sp + 100|0;
 $$byval_copy = sp + 64|0;
 $vararg_buffer = sp;
 $0 = sp + 48|0;
 $1 = sp + 40|0;
 $2 = sp + 96|0;
 $3 = sp + 32|0;
 $5 = sp + 8|0;
 _glfwPollEvents();
 _nk_glfw3_new_frame();
 $6 = HEAP32[11202]|0;
 (_node_editor($6)|0);
 $7 = HEAP32[11202]|0;
 (_overview($7)|0);
 $8 = HEAP32[11202]|0;
 _calculator($8);
 $9 = HEAP32[11202]|0;
 _nk_rect($0,450.0,10.0,230.0,250.0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;
 $10 = (_nk_begin($9,21398,$$byval_copy,87)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[11202]|0;
  _nk_layout_row_static($12,30.0,80,1);
  $13 = HEAP32[11202]|0;
  $14 = (_nk_button_label($13,21403)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = HEAP32[232]|0;
   (_fprintf($16,21410,$vararg_buffer)|0);
  }
  $17 = HEAP32[11202]|0;
  _nk_layout_row_dynamic($17,30.0,2);
  $18 = HEAP32[11202]|0;
  $19 = HEAP32[11203]|0;
  $20 = ($19|0)==(0);
  $21 = $20&1;
  $22 = (_nk_option_label($18,21426,$21)|0);
  $23 = ($22|0)!=(0);
  if ($23) {
   HEAP32[11203] = 0;
  }
  $24 = HEAP32[11202]|0;
  $25 = HEAP32[11203]|0;
  $26 = ($25|0)==(1);
  $27 = $26&1;
  $28 = (_nk_option_label($24,21431,$27)|0);
  $29 = ($28|0)!=(0);
  if ($29) {
   HEAP32[11203] = 1;
  }
  $30 = HEAP32[11202]|0;
  _nk_layout_row_dynamic($30,25.0,1);
  $31 = HEAP32[11202]|0;
  _nk_property_int($31,21436,0,304,100,10,1.0);
  $32 = HEAP32[11202]|0;
  _nk_layout_row_dynamic($32,20.0,1);
  $33 = HEAP32[11202]|0;
  _nk_label($33,21449,17);
  $34 = HEAP32[11202]|0;
  _nk_layout_row_dynamic($34,25.0,1);
  $35 = HEAP32[11202]|0;
  $36 = HEAP32[11202]|0;
  $37 = (+_nk_widget_width($36));
  _nk_vec2($1,$37,400.0);
  ;HEAP8[$background$byval_copy>>0]=HEAP8[50428>>0]|0;HEAP8[$background$byval_copy+1>>0]=HEAP8[50428+1>>0]|0;HEAP8[$background$byval_copy+2>>0]=HEAP8[50428+2>>0]|0;HEAP8[$background$byval_copy+3>>0]=HEAP8[50428+3>>0]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
  $38 = (_nk_combo_begin_color($35,$background$byval_copy,$$byval_copy1)|0);
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = HEAP32[11202]|0;
   _nk_layout_row_dynamic($40,120.0,1);
   $41 = HEAP32[11202]|0;
   ;HEAP8[$background$byval_copy2>>0]=HEAP8[50428>>0]|0;HEAP8[$background$byval_copy2+1>>0]=HEAP8[50428+1>>0]|0;HEAP8[$background$byval_copy2+2>>0]=HEAP8[50428+2>>0]|0;HEAP8[$background$byval_copy2+3>>0]=HEAP8[50428+3>>0]|0;
   _nk_color_picker($2,$41,$background$byval_copy2,1);
   ;HEAP8[50428>>0]=HEAP8[$2>>0]|0;HEAP8[50428+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[50428+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[50428+3>>0]=HEAP8[$2+3>>0]|0;
   $42 = HEAP32[11202]|0;
   _nk_layout_row_dynamic($42,25.0,1);
   $43 = HEAP32[11202]|0;
   $44 = HEAP8[50428]|0;
   $45 = $44&255;
   $46 = (_nk_propertyi($43,21461,0,$45,255,1,1.0)|0);
   $47 = $46&255;
   HEAP8[50428] = $47;
   $48 = HEAP32[11202]|0;
   $49 = HEAP8[(50429)>>0]|0;
   $50 = $49&255;
   $51 = (_nk_propertyi($48,21465,0,$50,255,1,1.0)|0);
   $52 = $51&255;
   HEAP8[(50429)>>0] = $52;
   $53 = HEAP32[11202]|0;
   $54 = HEAP8[(50430)>>0]|0;
   $55 = $54&255;
   $56 = (_nk_propertyi($53,21469,0,$55,255,1,1.0)|0);
   $57 = $56&255;
   HEAP8[(50430)>>0] = $57;
   $58 = HEAP32[11202]|0;
   $59 = HEAP8[(50431)>>0]|0;
   $60 = $59&255;
   $61 = (_nk_propertyi($58,21473,0,$60,255,1,1.0)|0);
   $62 = $61&255;
   HEAP8[(50431)>>0] = $62;
   $63 = HEAP32[11202]|0;
   _nk_combo_end($63);
  }
  $64 = HEAP32[11202]|0;
  _nk_layout_row_dynamic($64,25.0,2);
  $65 = HEAP32[11202]|0;
  _nk_label($65,21477,17);
  $66 = HEAP32[11202]|0;
  $67 = HEAP32[11201]|0;
  $68 = (284 + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[11202]|0;
  $71 = (+_nk_widget_width($70));
  _nk_vec2($3,$71,200.0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$3+4>>2]|0;
  $72 = (_nk_combo_begin_label($66,$69,$$byval_copy3)|0);
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = HEAP32[11202]|0;
   _nk_layout_row_dynamic($74,25.0,1);
   $4 = 0;
   while(1) {
    $75 = $4;
    $76 = ($75>>>0)<(5);
    $77 = HEAP32[11202]|0;
    if (!($76)) {
     break;
    }
    $78 = $4;
    $79 = (284 + ($78<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (_nk_combo_item_label($77,$80,17)|0);
    $82 = ($81|0)!=(0);
    if ($82) {
     $83 = $4;
     HEAP32[11201] = $83;
     $84 = HEAP32[11202]|0;
     $85 = $4;
     $86 = (264 + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     _set_style($84,$87);
    }
    $88 = $4;
    $89 = (($88) + 1)|0;
    $4 = $89;
   }
   _nk_combo_end($77);
  }
 }
 $90 = HEAP32[11202]|0;
 _nk_end($90);
 ;HEAP8[$background$byval_copy4>>0]=HEAP8[50428>>0]|0;HEAP8[$background$byval_copy4+1>>0]=HEAP8[50428+1>>0]|0;HEAP8[$background$byval_copy4+2>>0]=HEAP8[50428+2>>0]|0;HEAP8[$background$byval_copy4+3>>0]=HEAP8[50428+3>>0]|0;
 _nk_color_fv($5,$background$byval_copy4);
 $91 = HEAP32[11204]|0;
 _glfwGetWindowSize(($91|0),(44796|0),(44800|0));
 $92 = HEAP32[11199]|0;
 $93 = HEAP32[11200]|0;
 _glViewport(0,0,($92|0),($93|0));
 _glClear(16384);
 $94 = +HEAPF32[$5>>2];
 $95 = ((($5)) + 4|0);
 $96 = +HEAPF32[$95>>2];
 $97 = ((($5)) + 8|0);
 $98 = +HEAPF32[$97>>2];
 $99 = ((($5)) + 12|0);
 $100 = +HEAPF32[$99>>2];
 _glClearColor((+$94),(+$96),(+$98),(+$100));
 _nk_glfw3_render(1,524288,131072);
 $101 = HEAP32[11204]|0;
 _glfwSwapBuffers(($101|0));
 STACKTOP = sp;return;
}
function _node_editor($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0;
 var $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0;
 var $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0;
 var $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0;
 var $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0.0, $33 = 0.0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0.0, $524 = 0.0;
 var $525 = 0, $526 = 0.0, $527 = 0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0.0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0.0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0.0, $582 = 0, $583 = 0.0, $584 = 0.0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0;
 var $633 = 0, $634 = 0.0, $635 = 0.0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0;
 var $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(752|0);
 $$byval_copy26 = sp + 672|0;
 $$byval_copy25 = sp + 740|0;
 $$byval_copy24 = sp + 656|0;
 $$byval_copy23 = sp + 640|0;
 $$byval_copy22 = sp + 632|0;
 $$byval_copy21 = sp + 616|0;
 $$byval_copy20 = sp + 600|0;
 $$byval_copy19 = sp + 584|0;
 $$byval_copy18 = sp + 736|0;
 $$byval_copy17 = sp + 576|0;
 $$byval_copy16 = sp + 568|0;
 $$byval_copy15 = sp + 552|0;
 $$byval_copy14 = sp + 732|0;
 $$byval_copy13 = sp + 536|0;
 $$byval_copy12 = sp + 728|0;
 $$byval_copy11 = sp + 520|0;
 $$byval_copy10 = sp + 724|0;
 $$byval_copy9 = sp + 504|0;
 $$byval_copy8 = sp + 488|0;
 $$byval_copy7 = sp + 720|0;
 $$byval_copy6 = sp + 472|0;
 $$byval_copy5 = sp + 456|0;
 $$byval_copy4 = sp + 440|0;
 $$byval_copy3 = sp + 424|0;
 $$byval_copy2 = sp + 716|0;
 $$byval_copy1 = sp + 712|0;
 $$byval_copy = sp + 408|0;
 $vararg_buffer = sp;
 $3 = sp + 384|0;
 $8 = sp + 352|0;
 $9 = sp + 336|0;
 $11 = sp + 312|0;
 $15 = sp + 708|0;
 $17 = sp + 280|0;
 $18 = sp + 264|0;
 $20 = sp + 240|0;
 $21 = sp + 224|0;
 $22 = sp + 208|0;
 $23 = sp + 704|0;
 $24 = sp + 200|0;
 $25 = sp + 192|0;
 $26 = sp + 700|0;
 $27 = sp + 176|0;
 $28 = sp + 696|0;
 $34 = sp + 144|0;
 $35 = sp + 136|0;
 $36 = sp + 128|0;
 $37 = sp + 120|0;
 $38 = sp + 692|0;
 $39 = sp + 104|0;
 $40 = sp + 88|0;
 $41 = sp + 72|0;
 $42 = sp + 64|0;
 $43 = sp + 48|0;
 $44 = sp + 40|0;
 $45 = sp + 24|0;
 $46 = sp + 688|0;
 $47 = sp + 8|0;
 $1 = $0;
 $2 = 0;
 $48 = $1;
 $4 = $48;
 $6 = 0;
 $7 = 44840;
 $49 = HEAP32[11210]|0;
 $50 = ($49|0)!=(0);
 if (!($50)) {
  _node_editor_init(44840);
  HEAP32[11210] = 1;
 }
 $51 = $1;
 _nk_rect($8,0.0,620.0,800.0,600.0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$8+12>>2]|0;
 $52 = (_nk_begin($51,25003,$$byval_copy,43)|0);
 $53 = ($52|0)!=(0);
 if (!($53)) {
  $646 = $1;
  _nk_end($646);
  $647 = $1;
  $648 = (_nk_window_is_closed($647,25003)|0);
  $649 = ($648|0)!=(0);
  $650 = $649 ^ 1;
  $651 = $650&1;
  STACKTOP = sp;return ($651|0);
 }
 $54 = $1;
 $55 = (_nk_window_get_canvas($54)|0);
 $5 = $55;
 $56 = $1;
 _nk_window_get_content_region($9,$56);
 ;HEAP32[$3>>2]=HEAP32[$9>>2]|0;HEAP32[$3+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$9+12>>2]|0;
 $57 = $1;
 $58 = ((($3)) + 12|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $7;
 $61 = ((($60)) + 4492|0);
 $62 = HEAP32[$61>>2]|0;
 _nk_layout_space_begin($57,1,$59,$62);
 $63 = $7;
 $64 = ((($63)) + 4484|0);
 $65 = HEAP32[$64>>2]|0;
 $10 = $65;
 $66 = $1;
 _nk_layout_space_bounds($11,$66);
 $67 = $7;
 $68 = ((($67)) + 4520|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0);
 L7: do {
  if ($70) {
   $14 = 32.0;
   _nk_rgb($15,50,50,50);
   $71 = +HEAPF32[$11>>2];
   $72 = $7;
   $73 = ((($72)) + 4524|0);
   $74 = +HEAPF32[$73>>2];
   $75 = $71 - $74;
   $76 = $75;
   $77 = (+_fmod($76,32.0));
   $78 = $77;
   $12 = $78;
   while(1) {
    $79 = $12;
    $80 = ((($11)) + 8|0);
    $81 = +HEAPF32[$80>>2];
    $82 = $79 < $81;
    if (!($82)) {
     break;
    }
    $83 = $5;
    $84 = $12;
    $85 = +HEAPF32[$11>>2];
    $86 = $84 + $85;
    $87 = ((($11)) + 4|0);
    $88 = +HEAPF32[$87>>2];
    $89 = $12;
    $90 = +HEAPF32[$11>>2];
    $91 = $89 + $90;
    $92 = ((($11)) + 4|0);
    $93 = +HEAPF32[$92>>2];
    $94 = ((($11)) + 12|0);
    $95 = +HEAPF32[$94>>2];
    $96 = $93 + $95;
    ;HEAP8[$$byval_copy1>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$15+3>>0]|0;
    _nk_stroke_line($83,$86,$88,$91,$96,1.0,$$byval_copy1);
    $97 = $12;
    $98 = $97 + 32.0;
    $12 = $98;
   }
   $99 = ((($11)) + 4|0);
   $100 = +HEAPF32[$99>>2];
   $101 = $7;
   $102 = ((($101)) + 4524|0);
   $103 = ((($102)) + 4|0);
   $104 = +HEAPF32[$103>>2];
   $105 = $100 - $104;
   $106 = $105;
   $107 = (+_fmod($106,32.0));
   $108 = $107;
   $13 = $108;
   while(1) {
    $109 = $13;
    $110 = ((($11)) + 12|0);
    $111 = +HEAPF32[$110>>2];
    $112 = $109 < $111;
    if (!($112)) {
     break L7;
    }
    $113 = $5;
    $114 = +HEAPF32[$11>>2];
    $115 = $13;
    $116 = ((($11)) + 4|0);
    $117 = +HEAPF32[$116>>2];
    $118 = $115 + $117;
    $119 = +HEAPF32[$11>>2];
    $120 = ((($11)) + 8|0);
    $121 = +HEAPF32[$120>>2];
    $122 = $119 + $121;
    $123 = $13;
    $124 = ((($11)) + 4|0);
    $125 = +HEAPF32[$124>>2];
    $126 = $123 + $125;
    ;HEAP8[$$byval_copy2>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$15+3>>0]|0;
    _nk_stroke_line($113,$114,$118,$122,$126,1.0,$$byval_copy2);
    $127 = $13;
    $128 = $127 + 32.0;
    $13 = $128;
   }
  }
 } while(0);
 while(1) {
  $129 = $10;
  $130 = ($129|0)!=(0|0);
  if (!($130)) {
   break;
  }
  $131 = $1;
  $132 = $10;
  $133 = ((($132)) + 36|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $7;
  $136 = ((($135)) + 4524|0);
  $137 = +HEAPF32[$136>>2];
  $138 = $134 - $137;
  $139 = $10;
  $140 = ((($139)) + 36|0);
  $141 = ((($140)) + 4|0);
  $142 = +HEAPF32[$141>>2];
  $143 = $7;
  $144 = ((($143)) + 4524|0);
  $145 = ((($144)) + 4|0);
  $146 = +HEAPF32[$145>>2];
  $147 = $142 - $146;
  $148 = $10;
  $149 = ((($148)) + 36|0);
  $150 = ((($149)) + 8|0);
  $151 = +HEAPF32[$150>>2];
  $152 = $10;
  $153 = ((($152)) + 36|0);
  $154 = ((($153)) + 12|0);
  $155 = +HEAPF32[$154>>2];
  _nk_rect($17,$138,$147,$151,$155);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$17+12>>2]|0;
  _nk_layout_space_push($131,$$byval_copy3);
  $156 = $1;
  $157 = $10;
  $158 = ((($157)) + 4|0);
  $159 = (_nk_group_begin($156,$158,99)|0);
  $160 = ($159|0)!=(0);
  if ($160) {
   $161 = $1;
   $162 = (_nk_window_get_panel($161)|0);
   $16 = $162;
   $163 = $4;
   $164 = $16;
   $165 = ((($164)) + 8|0);
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$165>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$165+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$165+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$165+12>>2]|0;
   $166 = (_nk_input_mouse_clicked($163,0,$$byval_copy4)|0);
   $167 = ($166|0)!=(0);
   do {
    if ($167) {
     $168 = $10;
     $169 = ((($168)) + 72|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($170|0)!=(0|0);
     if ($171) {
      $172 = $4;
      $173 = $1;
      $174 = $16;
      $175 = ((($174)) + 8|0);
      ;HEAP32[$$byval_copy5>>2]=HEAP32[$175>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$175+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$175+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$175+12>>2]|0;
      _nk_layout_space_rect_to_screen($18,$173,$$byval_copy5);
      ;HEAP32[$$byval_copy6>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$18+12>>2]|0;
      $176 = (_nk_input_mouse_clicked($172,0,$$byval_copy6)|0);
      $177 = ($176|0)!=(0);
      if ($177) {
       break;
      }
     }
     $178 = $7;
     $179 = ((($178)) + 4488|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $10;
     $182 = ($180|0)!=($181|0);
     if ($182) {
      $183 = $10;
      $6 = $183;
     }
    }
   } while(0);
   $184 = $1;
   _nk_layout_row_dynamic($184,25.0,1);
   $185 = $1;
   $186 = $10;
   $187 = ((($186)) + 56|0);
   ;HEAP8[$$byval_copy7>>0]=HEAP8[$187>>0]|0;HEAP8[$$byval_copy7+1>>0]=HEAP8[$187+1>>0]|0;HEAP8[$$byval_copy7+2>>0]=HEAP8[$187+2>>0]|0;HEAP8[$$byval_copy7+3>>0]=HEAP8[$187+3>>0]|0;
   (_nk_button_color($185,$$byval_copy7)|0);
   $188 = $1;
   $189 = $10;
   $190 = ((($189)) + 56|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (_nk_propertyi($188,21461,0,$192,255,1,1.0)|0);
   $194 = $193&255;
   $195 = $10;
   $196 = ((($195)) + 56|0);
   HEAP8[$196>>0] = $194;
   $197 = $1;
   $198 = $10;
   $199 = ((($198)) + 56|0);
   $200 = ((($199)) + 1|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (_nk_propertyi($197,21465,0,$202,255,1,1.0)|0);
   $204 = $203&255;
   $205 = $10;
   $206 = ((($205)) + 56|0);
   $207 = ((($206)) + 1|0);
   HEAP8[$207>>0] = $204;
   $208 = $1;
   $209 = $10;
   $210 = ((($209)) + 56|0);
   $211 = ((($210)) + 2|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $214 = (_nk_propertyi($208,21469,0,$213,255,1,1.0)|0);
   $215 = $214&255;
   $216 = $10;
   $217 = ((($216)) + 56|0);
   $218 = ((($217)) + 2|0);
   HEAP8[$218>>0] = $215;
   $219 = $1;
   $220 = $10;
   $221 = ((($220)) + 56|0);
   $222 = ((($221)) + 3|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = (_nk_propertyi($219,21473,0,$224,255,1,1.0)|0);
   $226 = $225&255;
   $227 = $10;
   $228 = ((($227)) + 56|0);
   $229 = ((($228)) + 3|0);
   HEAP8[$229>>0] = $226;
   $230 = $1;
   _nk_group_end($230);
  }
  $231 = $1;
  $232 = $16;
  $233 = ((($232)) + 8|0);
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$233>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$233+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$233+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$233+12>>2]|0;
  _nk_layout_space_rect_to_local($21,$231,$$byval_copy8);
  ;HEAP32[$20>>2]=HEAP32[$21>>2]|0;HEAP32[$20+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[$21+12>>2]|0;
  $234 = $7;
  $235 = ((($234)) + 4524|0);
  $236 = +HEAPF32[$235>>2];
  $237 = +HEAPF32[$20>>2];
  $238 = $237 + $236;
  HEAPF32[$20>>2] = $238;
  $239 = $7;
  $240 = ((($239)) + 4524|0);
  $241 = ((($240)) + 4|0);
  $242 = +HEAPF32[$241>>2];
  $243 = ((($20)) + 4|0);
  $244 = +HEAPF32[$243>>2];
  $245 = $244 + $242;
  HEAPF32[$243>>2] = $245;
  $246 = $10;
  $247 = ((($246)) + 36|0);
  ;HEAP32[$247>>2]=HEAP32[$20>>2]|0;HEAP32[$247+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$247+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$247+12>>2]=HEAP32[$20+12>>2]|0;
  $248 = $16;
  $249 = ((($248)) + 8|0);
  $250 = ((($249)) + 12|0);
  $251 = +HEAPF32[$250>>2];
  $252 = $10;
  $253 = ((($252)) + 64|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = (($254) + 1)|0;
  $256 = (+($255|0));
  $257 = $251 / $256;
  $19 = $257;
  $2 = 0;
  while(1) {
   $258 = $2;
   $259 = $10;
   $260 = ((($259)) + 64|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = ($258|0)<($261|0);
   $263 = $16;
   $264 = ((($263)) + 8|0);
   if (!($262)) {
    break;
   }
   $265 = +HEAPF32[$264>>2];
   $266 = $16;
   $267 = ((($266)) + 8|0);
   $268 = ((($267)) + 8|0);
   $269 = +HEAPF32[$268>>2];
   $270 = $265 + $269;
   $271 = $270 - 4.0;
   HEAPF32[$22>>2] = $271;
   $272 = $16;
   $273 = ((($272)) + 8|0);
   $274 = ((($273)) + 4|0);
   $275 = +HEAPF32[$274>>2];
   $276 = $19;
   $277 = $2;
   $278 = (($277) + 1)|0;
   $279 = (+($278|0));
   $280 = $276 * $279;
   $281 = $275 + $280;
   $282 = ((($22)) + 4|0);
   HEAPF32[$282>>2] = $281;
   $283 = ((($22)) + 8|0);
   HEAPF32[$283>>2] = 8.0;
   $284 = ((($22)) + 12|0);
   HEAPF32[$284>>2] = 8.0;
   $285 = $5;
   _nk_rgb($23,100,100,100);
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$22+12>>2]|0;
   ;HEAP8[$$byval_copy10>>0]=HEAP8[$23>>0]|0;HEAP8[$$byval_copy10+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$$byval_copy10+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$$byval_copy10+3>>0]=HEAP8[$23+3>>0]|0;
   _nk_fill_circle($285,$$byval_copy9,$$byval_copy10);
   $286 = $4;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$22+12>>2]|0;
   $287 = (_nk_input_has_mouse_click_down_in_rect($286,0,$$byval_copy11,1)|0);
   $288 = ($287|0)!=(0);
   if ($288) {
    $289 = $7;
    $290 = ((($289)) + 4532|0);
    HEAP32[$290>>2] = 1;
    $291 = $10;
    $292 = $7;
    $293 = ((($292)) + 4532|0);
    $294 = ((($293)) + 4|0);
    HEAP32[$294>>2] = $291;
    $295 = $10;
    $296 = HEAP32[$295>>2]|0;
    $297 = $7;
    $298 = ((($297)) + 4532|0);
    $299 = ((($298)) + 8|0);
    HEAP32[$299>>2] = $296;
    $300 = $2;
    $301 = $7;
    $302 = ((($301)) + 4532|0);
    $303 = ((($302)) + 12|0);
    HEAP32[$303>>2] = $300;
   }
   $304 = $7;
   $305 = ((($304)) + 4532|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = ($306|0)!=(0);
   if ($307) {
    $308 = $7;
    $309 = ((($308)) + 4532|0);
    $310 = ((($309)) + 4|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = $10;
    $313 = ($311|0)==($312|0);
    if ($313) {
     $314 = $7;
     $315 = ((($314)) + 4532|0);
     $316 = ((($315)) + 12|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = $2;
     $319 = ($317|0)==($318|0);
     if ($319) {
      $320 = +HEAPF32[$22>>2];
      $321 = $320 + 3.0;
      $322 = ((($22)) + 4|0);
      $323 = +HEAPF32[$322>>2];
      $324 = $323 + 3.0;
      _nk_vec2($24,$321,$324);
      $325 = $4;
      $326 = ((($325)) + 260|0);
      $327 = ((($326)) + 48|0);
      ;HEAP32[$25>>2]=HEAP32[$327>>2]|0;HEAP32[$25+4>>2]=HEAP32[$327+4>>2]|0;
      $328 = $5;
      $329 = +HEAPF32[$24>>2];
      $330 = ((($24)) + 4|0);
      $331 = +HEAPF32[$330>>2];
      $332 = +HEAPF32[$24>>2];
      $333 = $332 + 50.0;
      $334 = ((($24)) + 4|0);
      $335 = +HEAPF32[$334>>2];
      $336 = +HEAPF32[$25>>2];
      $337 = $336 - 50.0;
      $338 = ((($25)) + 4|0);
      $339 = +HEAPF32[$338>>2];
      $340 = +HEAPF32[$25>>2];
      $341 = ((($25)) + 4|0);
      $342 = +HEAPF32[$341>>2];
      _nk_rgb($26,100,100,100);
      ;HEAP8[$$byval_copy12>>0]=HEAP8[$26>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$26+3>>0]|0;
      _nk_stroke_curve($328,$329,$331,$333,$335,$337,$339,$340,$342,1.0,$$byval_copy12);
     }
    }
   }
   $343 = $2;
   $344 = (($343) + 1)|0;
   $2 = $344;
  }
  $345 = ((($264)) + 12|0);
  $346 = +HEAPF32[$345>>2];
  $347 = $10;
  $348 = ((($347)) + 60|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = (($349) + 1)|0;
  $351 = (+($350|0));
  $352 = $346 / $351;
  $19 = $352;
  $2 = 0;
  while(1) {
   $353 = $2;
   $354 = $10;
   $355 = ((($354)) + 60|0);
   $356 = HEAP32[$355>>2]|0;
   $357 = ($353|0)<($356|0);
   if (!($357)) {
    break;
   }
   $358 = $16;
   $359 = ((($358)) + 8|0);
   $360 = +HEAPF32[$359>>2];
   $361 = $360 - 4.0;
   HEAPF32[$27>>2] = $361;
   $362 = $16;
   $363 = ((($362)) + 8|0);
   $364 = ((($363)) + 4|0);
   $365 = +HEAPF32[$364>>2];
   $366 = $19;
   $367 = $2;
   $368 = (($367) + 1)|0;
   $369 = (+($368|0));
   $370 = $366 * $369;
   $371 = $365 + $370;
   $372 = ((($27)) + 4|0);
   HEAPF32[$372>>2] = $371;
   $373 = ((($27)) + 8|0);
   HEAPF32[$373>>2] = 8.0;
   $374 = ((($27)) + 12|0);
   HEAPF32[$374>>2] = 8.0;
   $375 = $5;
   _nk_rgb($28,100,100,100);
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy13+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy13+12>>2]=HEAP32[$27+12>>2]|0;
   ;HEAP8[$$byval_copy14>>0]=HEAP8[$28>>0]|0;HEAP8[$$byval_copy14+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$$byval_copy14+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$$byval_copy14+3>>0]=HEAP8[$28+3>>0]|0;
   _nk_fill_circle($375,$$byval_copy13,$$byval_copy14);
   $376 = $4;
   $377 = (_nk_input_is_mouse_released($376,0)|0);
   $378 = ($377|0)!=(0);
   if ($378) {
    $379 = $4;
    ;HEAP32[$$byval_copy15>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$$byval_copy15+8>>2]=HEAP32[$27+8>>2]|0;HEAP32[$$byval_copy15+12>>2]=HEAP32[$27+12>>2]|0;
    $380 = (_nk_input_is_mouse_hovering_rect($379,$$byval_copy15)|0);
    $381 = ($380|0)!=(0);
    if ($381) {
     $382 = $7;
     $383 = ((($382)) + 4532|0);
     $384 = HEAP32[$383>>2]|0;
     $385 = ($384|0)!=(0);
     if ($385) {
      $386 = $7;
      $387 = ((($386)) + 4532|0);
      $388 = ((($387)) + 4|0);
      $389 = HEAP32[$388>>2]|0;
      $390 = $10;
      $391 = ($389|0)!=($390|0);
      if ($391) {
       $392 = $7;
       $393 = ((($392)) + 4532|0);
       HEAP32[$393>>2] = 0;
       $394 = $7;
       $395 = $7;
       $396 = ((($395)) + 4532|0);
       $397 = ((($396)) + 8|0);
       $398 = HEAP32[$397>>2]|0;
       $399 = $7;
       $400 = ((($399)) + 4532|0);
       $401 = ((($400)) + 12|0);
       $402 = HEAP32[$401>>2]|0;
       $403 = $10;
       $404 = HEAP32[$403>>2]|0;
       $405 = $2;
       _node_editor_link($394,$398,$402,$404,$405);
      }
     }
    }
   }
   $406 = $2;
   $407 = (($406) + 1)|0;
   $2 = $407;
  }
  $408 = $10;
  $409 = ((($408)) + 68|0);
  $410 = HEAP32[$409>>2]|0;
  $10 = $410;
 }
 $411 = $7;
 $412 = ((($411)) + 4532|0);
 $413 = HEAP32[$412>>2]|0;
 $414 = ($413|0)!=(0);
 if ($414) {
  $415 = $4;
  $416 = (_nk_input_is_mouse_released($415,0)|0);
  $417 = ($416|0)!=(0);
  if ($417) {
   $418 = $7;
   $419 = ((($418)) + 4532|0);
   HEAP32[$419>>2] = 0;
   $420 = $7;
   $421 = ((($420)) + 4532|0);
   $422 = ((($421)) + 4|0);
   HEAP32[$422>>2] = 0;
   $423 = HEAP32[232]|0;
   (_fprintf($423,25012,$vararg_buffer)|0);
  }
 }
 $2 = 0;
 while(1) {
  $424 = $2;
  $425 = $7;
  $426 = ((($425)) + 4496|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = ($424|0)<($427|0);
  if (!($428)) {
   break;
  }
  $429 = $2;
  $430 = $7;
  $431 = ((($430)) + 2436|0);
  $432 = (($431) + ($429<<5)|0);
  $29 = $432;
  $433 = $7;
  $434 = $29;
  $435 = HEAP32[$434>>2]|0;
  $436 = (_node_editor_find($433,$435)|0);
  $30 = $436;
  $437 = $7;
  $438 = $29;
  $439 = ((($438)) + 8|0);
  $440 = HEAP32[$439>>2]|0;
  $441 = (_node_editor_find($437,$440)|0);
  $31 = $441;
  $442 = $16;
  $443 = ((($442)) + 8|0);
  $444 = ((($443)) + 12|0);
  $445 = +HEAPF32[$444>>2];
  $446 = $30;
  $447 = ((($446)) + 64|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = (($448) + 1)|0;
  $450 = (+($449|0));
  $451 = $445 / $450;
  $32 = $451;
  $452 = $16;
  $453 = ((($452)) + 8|0);
  $454 = ((($453)) + 12|0);
  $455 = +HEAPF32[$454>>2];
  $456 = $31;
  $457 = ((($456)) + 60|0);
  $458 = HEAP32[$457>>2]|0;
  $459 = (($458) + 1)|0;
  $460 = (+($459|0));
  $461 = $455 / $460;
  $33 = $461;
  $462 = $1;
  $463 = $30;
  $464 = ((($463)) + 36|0);
  $465 = +HEAPF32[$464>>2];
  $466 = $30;
  $467 = ((($466)) + 36|0);
  $468 = ((($467)) + 8|0);
  $469 = +HEAPF32[$468>>2];
  $470 = $465 + $469;
  $471 = $30;
  $472 = ((($471)) + 36|0);
  $473 = ((($472)) + 4|0);
  $474 = +HEAPF32[$473>>2];
  $475 = 3.0 + $474;
  $476 = $32;
  $477 = $29;
  $478 = ((($477)) + 4|0);
  $479 = HEAP32[$478>>2]|0;
  $480 = (($479) + 1)|0;
  $481 = (+($480|0));
  $482 = $476 * $481;
  $483 = $475 + $482;
  _nk_vec2($35,$470,$483);
  ;HEAP32[$$byval_copy16>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$35+4>>2]|0;
  _nk_layout_space_to_screen($34,$462,$$byval_copy16);
  $484 = $1;
  $485 = $31;
  $486 = ((($485)) + 36|0);
  $487 = +HEAPF32[$486>>2];
  $488 = $31;
  $489 = ((($488)) + 36|0);
  $490 = ((($489)) + 4|0);
  $491 = +HEAPF32[$490>>2];
  $492 = 3.0 + $491;
  $493 = $33;
  $494 = $29;
  $495 = ((($494)) + 12|0);
  $496 = HEAP32[$495>>2]|0;
  $497 = (($496) + 1)|0;
  $498 = (+($497|0));
  $499 = $493 * $498;
  $500 = $492 + $499;
  _nk_vec2($37,$487,$500);
  ;HEAP32[$$byval_copy17>>2]=HEAP32[$37>>2]|0;HEAP32[$$byval_copy17+4>>2]=HEAP32[$37+4>>2]|0;
  _nk_layout_space_to_screen($36,$484,$$byval_copy17);
  $501 = $7;
  $502 = ((($501)) + 4524|0);
  $503 = +HEAPF32[$502>>2];
  $504 = +HEAPF32[$34>>2];
  $505 = $504 - $503;
  HEAPF32[$34>>2] = $505;
  $506 = $7;
  $507 = ((($506)) + 4524|0);
  $508 = ((($507)) + 4|0);
  $509 = +HEAPF32[$508>>2];
  $510 = ((($34)) + 4|0);
  $511 = +HEAPF32[$510>>2];
  $512 = $511 - $509;
  HEAPF32[$510>>2] = $512;
  $513 = $7;
  $514 = ((($513)) + 4524|0);
  $515 = +HEAPF32[$514>>2];
  $516 = +HEAPF32[$36>>2];
  $517 = $516 - $515;
  HEAPF32[$36>>2] = $517;
  $518 = $7;
  $519 = ((($518)) + 4524|0);
  $520 = ((($519)) + 4|0);
  $521 = +HEAPF32[$520>>2];
  $522 = ((($36)) + 4|0);
  $523 = +HEAPF32[$522>>2];
  $524 = $523 - $521;
  HEAPF32[$522>>2] = $524;
  $525 = $5;
  $526 = +HEAPF32[$34>>2];
  $527 = ((($34)) + 4|0);
  $528 = +HEAPF32[$527>>2];
  $529 = +HEAPF32[$34>>2];
  $530 = $529 + 50.0;
  $531 = ((($34)) + 4|0);
  $532 = +HEAPF32[$531>>2];
  $533 = +HEAPF32[$36>>2];
  $534 = $533 - 50.0;
  $535 = ((($36)) + 4|0);
  $536 = +HEAPF32[$535>>2];
  $537 = +HEAPF32[$36>>2];
  $538 = ((($36)) + 4|0);
  $539 = +HEAPF32[$538>>2];
  _nk_rgb($38,100,100,100);
  ;HEAP8[$$byval_copy18>>0]=HEAP8[$38>>0]|0;HEAP8[$$byval_copy18+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$$byval_copy18+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$$byval_copy18+3>>0]=HEAP8[$38+3>>0]|0;
  _nk_stroke_curve($525,$526,$528,$530,$532,$534,$536,$537,$539,1.0,$$byval_copy18);
  $540 = $2;
  $541 = (($540) + 1)|0;
  $2 = $541;
 }
 $542 = $6;
 $543 = ($542|0)!=(0|0);
 if ($543) {
  $544 = $7;
  $545 = $6;
  _node_editor_pop($544,$545);
  $546 = $7;
  $547 = $6;
  _node_editor_push($546,$547);
 }
 $548 = $4;
 $549 = $1;
 _nk_layout_space_bounds($39,$549);
 ;HEAP32[$$byval_copy19>>2]=HEAP32[$39>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$$byval_copy19+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$$byval_copy19+12>>2]=HEAP32[$39+12>>2]|0;
 $550 = (_nk_input_mouse_clicked($548,0,$$byval_copy19)|0);
 $551 = ($550|0)!=(0);
 L63: do {
  if ($551) {
   $552 = $7;
   $553 = ((($552)) + 4484|0);
   $554 = HEAP32[$553>>2]|0;
   $10 = $554;
   $555 = $7;
   $556 = ((($555)) + 4516|0);
   HEAP32[$556>>2] = 0;
   $557 = $7;
   $558 = ((($557)) + 4500|0);
   $559 = $4;
   $560 = ((($559)) + 260|0);
   $561 = ((($560)) + 48|0);
   $562 = +HEAPF32[$561>>2];
   $563 = $4;
   $564 = ((($563)) + 260|0);
   $565 = ((($564)) + 48|0);
   $566 = ((($565)) + 4|0);
   $567 = +HEAPF32[$566>>2];
   _nk_rect($40,$562,$567,100.0,200.0);
   ;HEAP32[$558>>2]=HEAP32[$40>>2]|0;HEAP32[$558+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$558+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$558+12>>2]=HEAP32[$40+12>>2]|0;
   while(1) {
    $568 = $10;
    $569 = ($568|0)!=(0|0);
    if (!($569)) {
     break L63;
    }
    $570 = $1;
    $571 = $10;
    $572 = ((($571)) + 36|0);
    ;HEAP32[$$byval_copy20>>2]=HEAP32[$572>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$572+4>>2]|0;HEAP32[$$byval_copy20+8>>2]=HEAP32[$572+8>>2]|0;HEAP32[$$byval_copy20+12>>2]=HEAP32[$572+12>>2]|0;
    _nk_layout_space_rect_to_screen($41,$570,$$byval_copy20);
    $573 = $7;
    $574 = ((($573)) + 4524|0);
    $575 = +HEAPF32[$574>>2];
    $576 = +HEAPF32[$41>>2];
    $577 = $576 - $575;
    HEAPF32[$41>>2] = $577;
    $578 = $7;
    $579 = ((($578)) + 4524|0);
    $580 = ((($579)) + 4|0);
    $581 = +HEAPF32[$580>>2];
    $582 = ((($41)) + 4|0);
    $583 = +HEAPF32[$582>>2];
    $584 = $583 - $581;
    HEAPF32[$582>>2] = $584;
    $585 = $4;
    ;HEAP32[$$byval_copy21>>2]=HEAP32[$41>>2]|0;HEAP32[$$byval_copy21+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$$byval_copy21+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$$byval_copy21+12>>2]=HEAP32[$41+12>>2]|0;
    $586 = (_nk_input_is_mouse_hovering_rect($585,$$byval_copy21)|0);
    $587 = ($586|0)!=(0);
    if ($587) {
     $588 = $10;
     $589 = $7;
     $590 = ((($589)) + 4516|0);
     HEAP32[$590>>2] = $588;
    }
    $591 = $10;
    $592 = ((($591)) + 68|0);
    $593 = HEAP32[$592>>2]|0;
    $10 = $593;
   }
  }
 } while(0);
 $594 = $1;
 _nk_vec2($42,100.0,220.0);
 $595 = $1;
 _nk_window_get_bounds($43,$595);
 ;HEAP32[$$byval_copy22>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy22+4>>2]=HEAP32[$42+4>>2]|0;
 ;HEAP32[$$byval_copy23>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$$byval_copy23+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$$byval_copy23+12>>2]=HEAP32[$43+12>>2]|0;
 $596 = (_nk_contextual_begin($594,0,$$byval_copy22,$$byval_copy23)|0);
 $597 = ($596|0)!=(0);
 if ($597) {
  ;HEAP32[$44>>2]=HEAP32[384>>2]|0;HEAP32[$44+4>>2]=HEAP32[384+4>>2]|0;
  $598 = $1;
  _nk_layout_row_dynamic($598,25.0,1);
  $599 = $1;
  $600 = (_nk_contextual_item_label($599,25048,18)|0);
  $601 = ($600|0)!=(0);
  if ($601) {
   $602 = $7;
   _nk_rect($45,400.0,260.0,180.0,220.0);
   _nk_rgb($46,255,255,255);
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[$45+12>>2]|0;
   ;HEAP8[$$byval_copy25>>0]=HEAP8[$46>>0]|0;HEAP8[$$byval_copy25+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$$byval_copy25+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$$byval_copy25+3>>0]=HEAP8[$46+3>>0]|0;
   _node_editor_add($602,25048,$$byval_copy24,$$byval_copy25,1,2);
  }
  $603 = $1;
  $604 = $7;
  $605 = ((($604)) + 4520|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = (($44) + ($606<<2)|0);
  $608 = HEAP32[$607>>2]|0;
  $609 = (_nk_contextual_item_label($603,$608,18)|0);
  $610 = ($609|0)!=(0);
  if ($610) {
   $611 = $7;
   $612 = ((($611)) + 4520|0);
   $613 = HEAP32[$612>>2]|0;
   $614 = ($613|0)!=(0);
   $615 = $614 ^ 1;
   $616 = $615&1;
   $617 = $7;
   $618 = ((($617)) + 4520|0);
   HEAP32[$618>>2] = $616;
  }
  $619 = $1;
  _nk_contextual_end($619);
 }
 $620 = $1;
 _nk_layout_space_end($620);
 $621 = $4;
 $622 = $1;
 _nk_window_get_bounds($47,$622);
 ;HEAP32[$$byval_copy26>>2]=HEAP32[$47>>2]|0;HEAP32[$$byval_copy26+4>>2]=HEAP32[$47+4>>2]|0;HEAP32[$$byval_copy26+8>>2]=HEAP32[$47+8>>2]|0;HEAP32[$$byval_copy26+12>>2]=HEAP32[$47+12>>2]|0;
 $623 = (_nk_input_is_mouse_hovering_rect($621,$$byval_copy26)|0);
 $624 = ($623|0)!=(0);
 if (!($624)) {
  $646 = $1;
  _nk_end($646);
  $647 = $1;
  $648 = (_nk_window_is_closed($647,25003)|0);
  $649 = ($648|0)!=(0);
  $650 = $649 ^ 1;
  $651 = $650&1;
  STACKTOP = sp;return ($651|0);
 }
 $625 = $4;
 $626 = (_nk_input_is_mouse_down($625,1)|0);
 $627 = ($626|0)!=(0);
 if (!($627)) {
  $646 = $1;
  _nk_end($646);
  $647 = $1;
  $648 = (_nk_window_is_closed($647,25003)|0);
  $649 = ($648|0)!=(0);
  $650 = $649 ^ 1;
  $651 = $650&1;
  STACKTOP = sp;return ($651|0);
 }
 $628 = $4;
 $629 = ((($628)) + 260|0);
 $630 = ((($629)) + 64|0);
 $631 = +HEAPF32[$630>>2];
 $632 = $7;
 $633 = ((($632)) + 4524|0);
 $634 = +HEAPF32[$633>>2];
 $635 = $634 + $631;
 HEAPF32[$633>>2] = $635;
 $636 = $4;
 $637 = ((($636)) + 260|0);
 $638 = ((($637)) + 64|0);
 $639 = ((($638)) + 4|0);
 $640 = +HEAPF32[$639>>2];
 $641 = $7;
 $642 = ((($641)) + 4524|0);
 $643 = ((($642)) + 4|0);
 $644 = +HEAPF32[$643>>2];
 $645 = $644 + $640;
 HEAPF32[$643>>2] = $645;
 $646 = $1;
 _nk_end($646);
 $647 = $1;
 $648 = (_nk_window_is_closed($647,25003)|0);
 $649 = ($648|0)!=(0);
 $650 = $649 ^ 1;
 $651 = $650&1;
 STACKTOP = sp;return ($651|0);
}
function _overview($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy100 = 0, $$byval_copy101 = 0, $$byval_copy102 = 0, $$byval_copy103 = 0, $$byval_copy104 = 0, $$byval_copy105 = 0, $$byval_copy106 = 0, $$byval_copy107 = 0, $$byval_copy108 = 0, $$byval_copy109 = 0, $$byval_copy110 = 0, $$byval_copy111 = 0, $$byval_copy112 = 0, $$byval_copy113 = 0, $$byval_copy114 = 0, $$byval_copy115 = 0, $$byval_copy116 = 0, $$byval_copy117 = 0, $$byval_copy60 = 0;
 var $$byval_copy61 = 0, $$byval_copy62 = 0, $$byval_copy63 = 0, $$byval_copy64 = 0, $$byval_copy65 = 0, $$byval_copy66 = 0, $$byval_copy69 = 0, $$byval_copy70 = 0, $$byval_copy71 = 0, $$byval_copy72 = 0, $$byval_copy73 = 0, $$byval_copy74 = 0, $$byval_copy75 = 0, $$byval_copy76 = 0, $$byval_copy77 = 0, $$byval_copy78 = 0, $$byval_copy79 = 0, $$byval_copy80 = 0, $$byval_copy81 = 0, $$byval_copy82 = 0;
 var $$byval_copy83 = 0, $$byval_copy84 = 0, $$byval_copy85 = 0, $$byval_copy86 = 0, $$byval_copy87 = 0, $$byval_copy88 = 0, $$byval_copy89 = 0, $$byval_copy90 = 0, $$byval_copy91 = 0, $$byval_copy92 = 0, $$byval_copy93 = 0, $$byval_copy94 = 0, $$byval_copy95 = 0, $$byval_copy96 = 0, $$byval_copy97 = 0, $$byval_copy98 = 0, $$byval_copy99 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
 var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
 var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0;
 var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0;
 var $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0;
 var $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0;
 var $1145 = 0, $1146 = 0, $1147 = 0.0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0;
 var $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0;
 var $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0.0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0;
 var $12 = 0, $120 = 0, $1200 = 0, $1201 = 0.0, $1202 = 0.0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0.0, $1208 = 0.0, $1209 = 0.0, $121 = 0, $1210 = 0, $1211 = 0.0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0;
 var $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0;
 var $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0;
 var $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0.0, $1263 = 0.0, $1264 = 0.0, $1265 = 0.0, $1266 = 0.0, $1267 = 0, $1268 = 0.0, $1269 = 0.0, $127 = 0, $1270 = 0.0;
 var $1271 = 0.0, $1272 = 0.0, $1273 = 0.0, $1274 = 0.0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0.0, $1287 = 0.0, $1288 = 0.0, $1289 = 0.0;
 var $129 = 0, $1290 = 0.0, $1291 = 0.0, $1292 = 0.0, $1293 = 0.0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0;
 var $1307 = 0.0, $1308 = 0.0, $1309 = 0.0, $131 = 0, $1310 = 0.0, $1311 = 0.0, $1312 = 0, $1313 = 0.0, $1314 = 0.0, $1315 = 0.0, $1316 = 0.0, $1317 = 0.0, $1318 = 0, $1319 = 0.0, $132 = 0, $1320 = 0.0, $1321 = 0.0, $1322 = 0.0, $1323 = 0.0, $1324 = 0.0;
 var $1325 = 0.0, $1326 = 0.0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0;
 var $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0;
 var $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0;
 var $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0;
 var $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0;
 var $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0;
 var $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0;
 var $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0;
 var $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0.0, $148 = 0, $1480 = 0, $1481 = 0.0, $1482 = 0, $1483 = 0, $1484 = 0.0, $1485 = 0, $1486 = 0, $1487 = 0;
 var $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0;
 var $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0.0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0.0, $1521 = 0.0, $1522 = 0;
 var $1523 = 0.0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0.0, $1528 = 0.0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0;
 var $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0.0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0.0, $1557 = 0.0, $1558 = 0, $1559 = 0.0;
 var $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0.0, $1564 = 0.0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0;
 var $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0.0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0;
 var $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0;
 var $1613 = 0.0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0.0, $1619 = 0.0, $162 = 0, $1620 = 0.0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0.0, $1626 = 0.0, $1627 = 0, $1628 = 0.0, $1629 = 0, $163 = 0, $1630 = 0;
 var $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0;
 var $165 = 0, $1650 = 0, $1651 = 0.0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0.0, $1657 = 0.0, $1658 = 0.0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0.0, $1664 = 0.0, $1665 = 0, $1666 = 0.0, $1667 = 0;
 var $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0;
 var $1686 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0;
 var $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0.0, $809 = 0.0, $81 = 0, $810 = 0.0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0.0, $817 = 0.0, $818 = 0.0, $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0.0, $822 = 0.0, $823 = 0.0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0.0, $831 = 0.0, $832 = 0.0, $833 = 0.0;
 var $834 = 0.0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0, $84 = 0.0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0.0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0.0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0.0, $867 = 0, $868 = 0.0, $869 = 0.0, $87 = 0;
 var $870 = 0.0, $871 = 0.0, $872 = 0.0, $873 = 0.0, $874 = 0.0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0.0, $880 = 0.0, $881 = 0, $882 = 0.0, $883 = 0.0, $884 = 0.0, $885 = 0.0, $886 = 0.0, $887 = 0.0, $888 = 0.0;
 var $889 = 0, $89 = 0.0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0.0, $9 = 0, $90 = 0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0.0, $904 = 0, $905 = 0.0;
 var $906 = 0.0, $907 = 0.0, $908 = 0.0, $909 = 0, $91 = 0, $910 = 0.0, $911 = 0.0, $912 = 0.0, $913 = 0.0, $914 = 0.0, $915 = 0.0, $916 = 0.0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0, $936 = 0.0, $937 = 0.0, $938 = 0.0, $939 = 0.0, $94 = 0, $940 = 0, $941 = 0.0;
 var $942 = 0.0, $943 = 0.0, $944 = 0.0, $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $overview$color$byval_copy = 0, $overview$combo_color$byval_copy = 0, $overview$combo_color2$byval_copy = 0, $overview$combo_color2$byval_copy67 = 0, $overview$combo_color2$byval_copy68 = 0, $overview$s$448$byval_copy = 0, $overview$s$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2224|0);
 $$byval_copy117 = sp + 1608|0;
 $$byval_copy116 = sp + 1592|0;
 $$byval_copy115 = sp + 1576|0;
 $$byval_copy114 = sp + 1560|0;
 $$byval_copy113 = sp + 1544|0;
 $$byval_copy112 = sp + 1528|0;
 $$byval_copy111 = sp + 1512|0;
 $$byval_copy110 = sp + 1496|0;
 $$byval_copy109 = sp + 1480|0;
 $$byval_copy108 = sp + 1464|0;
 $$byval_copy107 = sp + 1448|0;
 $$byval_copy106 = sp + 1432|0;
 $$byval_copy105 = sp + 1416|0;
 $$byval_copy104 = sp + 1400|0;
 $$byval_copy103 = sp + 2208|0;
 $$byval_copy102 = sp + 2204|0;
 $$byval_copy101 = sp + 2200|0;
 $$byval_copy100 = sp + 2196|0;
 $$byval_copy99 = sp + 2192|0;
 $$byval_copy98 = sp + 2188|0;
 $$byval_copy97 = sp + 2184|0;
 $$byval_copy96 = sp + 2180|0;
 $$byval_copy95 = sp + 2176|0;
 $$byval_copy94 = sp + 2172|0;
 $$byval_copy93 = sp + 2168|0;
 $$byval_copy92 = sp + 2164|0;
 $$byval_copy91 = sp + 1392|0;
 $$byval_copy90 = sp + 1384|0;
 $$byval_copy89 = sp + 1368|0;
 $$byval_copy88 = sp + 1352|0;
 $$byval_copy87 = sp + 1336|0;
 $$byval_copy86 = sp + 1320|0;
 $$byval_copy85 = sp + 1304|0;
 $overview$s$448$byval_copy = sp + 1288|0;
 $$byval_copy84 = sp + 1272|0;
 $$byval_copy83 = sp + 1264|0;
 $overview$color$byval_copy = sp + 2160|0;
 $$byval_copy82 = sp + 1248|0;
 $$byval_copy81 = sp + 1240|0;
 $$byval_copy80 = sp + 2156|0;
 $$byval_copy79 = sp + 2152|0;
 $$byval_copy78 = sp + 2148|0;
 $$byval_copy77 = sp + 2144|0;
 $$byval_copy76 = sp + 2140|0;
 $$byval_copy75 = sp + 2136|0;
 $$byval_copy74 = sp + 1232|0;
 $$byval_copy73 = sp + 1224|0;
 $$byval_copy72 = sp + 1216|0;
 $$byval_copy71 = sp + 1208|0;
 $$byval_copy70 = sp + 1200|0;
 $$byval_copy69 = sp + 1192|0;
 $overview$combo_color2$byval_copy68 = sp + 2132|0;
 $overview$combo_color2$byval_copy67 = sp + 2128|0;
 $$byval_copy66 = sp + 1184|0;
 $overview$combo_color2$byval_copy = sp + 2124|0;
 $$byval_copy65 = sp + 1176|0;
 $overview$combo_color$byval_copy = sp + 2120|0;
 $$byval_copy64 = sp + 1168|0;
 $$byval_copy63 = sp + 2116|0;
 $$byval_copy62 = sp + 2112|0;
 $$byval_copy61 = sp + 2108|0;
 $overview$s$byval_copy = sp + 1152|0;
 $$byval_copy60 = sp + 1144|0;
 $$byval_copy = sp + 1128|0;
 $vararg_buffer57 = sp + 176|0;
 $vararg_buffer54 = sp + 168|0;
 $vararg_buffer51 = sp + 160|0;
 $vararg_buffer48 = sp + 152|0;
 $vararg_buffer45 = sp + 144|0;
 $vararg_buffer42 = sp + 136|0;
 $vararg_buffer39 = sp + 128|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 1104|0;
 $3 = sp + 1096|0;
 $4 = sp + 2104|0;
 $5 = sp + 2100|0;
 $6 = sp + 2096|0;
 $10 = sp + 2032|0;
 $12 = sp + 1072|0;
 $13 = sp + 1064|0;
 $14 = sp + 1056|0;
 $15 = sp + 1048|0;
 $16 = sp + 2024|0;
 $17 = sp + 2020|0;
 $18 = sp + 2016|0;
 $19 = sp + 1040|0;
 $20 = sp + 1032|0;
 $21 = sp + 1024|0;
 $22 = sp + 1016|0;
 $25 = sp + 1004|0;
 $27 = sp + 992|0;
 $28 = sp + 984|0;
 $30 = sp + 928|0;
 $31 = sp + 900|0;
 $45 = sp + 1952|0;
 $50 = sp + 816|0;
 $51 = sp + 800|0;
 $53 = sp + 1888|0;
 $55 = sp + 776|0;
 $57 = sp + 1824|0;
 $58 = sp + 752|0;
 $59 = sp + 736|0;
 $60 = sp + 1820|0;
 $61 = sp + 1816|0;
 $62 = sp + 1812|0;
 $63 = sp + 1808|0;
 $64 = sp + 1804|0;
 $65 = sp + 1800|0;
 $67 = sp + 712|0;
 $68 = sp + 696|0;
 $69 = sp + 688|0;
 $70 = sp + 672|0;
 $71 = sp + 664|0;
 $72 = sp + 648|0;
 $73 = sp + 636|0;
 $74 = sp + 624|0;
 $75 = sp + 608|0;
 $76 = sp + 592|0;
 $77 = sp + 576|0;
 $78 = sp + 560|0;
 $81 = sp + 536|0;
 $83 = sp + 520|0;
 $86 = sp + 504|0;
 $90 = sp + 472|0;
 $91 = sp + 456|0;
 $92 = sp + 1796|0;
 $93 = sp + 1792|0;
 $94 = sp + 1788|0;
 $95 = sp + 1784|0;
 $96 = sp + 440|0;
 $97 = sp + 1780|0;
 $98 = sp + 1776|0;
 $99 = sp + 424|0;
 $100 = sp + 1772|0;
 $101 = sp + 1768|0;
 $102 = sp + 1764|0;
 $103 = sp + 1760|0;
 $104 = sp + 1756|0;
 $105 = sp + 1752|0;
 $107 = sp + 1688|0;
 $109 = sp + 1624|0;
 $111 = sp + 392|0;
 $112 = sp + 376|0;
 $113 = sp + 360|0;
 $114 = sp + 344|0;
 $115 = sp + 328|0;
 $116 = sp + 312|0;
 $118 = sp + 288|0;
 $119 = sp + 264|0;
 $120 = sp + 248|0;
 $121 = sp + 232|0;
 $122 = sp + 216|0;
 $123 = sp + 200|0;
 $124 = sp + 184|0;
 $1 = $0;
 HEAP32[12349] = 0;
 $125 = HEAP32[104]|0;
 $126 = $1;
 $127 = ((($126)) + 340|0);
 $128 = ((($127)) + 4832|0);
 $129 = ((($128)) + 340|0);
 HEAP32[$129>>2] = $125;
 $130 = HEAP32[100]|0;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = HEAP32[12349]|0;
  $133 = $132 | 1;
  HEAP32[12349] = $133;
 }
 $134 = HEAP32[101]|0;
 $135 = ($134|0)!=(0);
 if ($135) {
  $136 = HEAP32[12349]|0;
  $137 = $136 | 4;
  HEAP32[12349] = $137;
 }
 $138 = HEAP32[102]|0;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = HEAP32[12349]|0;
  $141 = $140 | 2;
  HEAP32[12349] = $141;
 }
 $142 = HEAP32[12348]|0;
 $143 = ($142|0)!=(0);
 if ($143) {
  $144 = HEAP32[12349]|0;
  $145 = $144 | 32;
  HEAP32[12349] = $145;
 }
 $146 = HEAP32[103]|0;
 $147 = ($146|0)!=(0);
 if ($147) {
  $148 = HEAP32[12349]|0;
  $149 = $148 | 16;
  HEAP32[12349] = $149;
 }
 $150 = $1;
 _nk_rect($2,10.0,10.0,400.0,600.0);
 $151 = HEAP32[12349]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $152 = (_nk_begin($150,25217,$$byval_copy,$151)|0);
 $153 = ($152|0)!=(0);
 if (!($153)) {
  $1681 = $1;
  _nk_end($1681);
  $1682 = $1;
  $1683 = (_nk_window_is_closed($1682,25217)|0);
  $1684 = ($1683|0)!=(0);
  $1685 = $1684 ^ 1;
  $1686 = $1685&1;
  STACKTOP = sp;return ($1686|0);
 }
 $154 = HEAP32[98]|0;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $1;
  _nk_menubar_begin($156);
  $157 = $1;
  _nk_layout_row_begin($157,1,25.0,4);
  $158 = $1;
  _nk_layout_row_push($158,45.0);
  $159 = $1;
  _nk_vec2($3,120.0,200.0);
  ;HEAP32[$$byval_copy60>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy60+4>>2]=HEAP32[$3+4>>2]|0;
  $160 = (_nk_menu_begin_label($159,25226,17,$$byval_copy60)|0);
  $161 = ($160|0)!=(0);
  if ($161) {
   $162 = $1;
   _nk_layout_row_dynamic($162,25.0,1);
   $163 = $1;
   $164 = (_nk_menu_item_label($163,25231,17)|0);
   $165 = ($164|0)!=(0);
   if ($165) {
    HEAP32[98] = 0;
   }
   $166 = $1;
   $167 = (_nk_menu_item_label($166,25236,17)|0);
   $168 = ($167|0)!=(0);
   if ($168) {
    HEAP32[12350] = 1;
   }
   $169 = $1;
   (_nk_progress($169,432,100,1)|0);
   $170 = $1;
   (_nk_slider_int($170,0,436,16,1)|0);
   $171 = $1;
   (_nk_checkbox_label($171,25242,440)|0);
   $172 = $1;
   _nk_menu_end($172);
  }
  $173 = $1;
  _nk_layout_row_push($173,70.0);
  $174 = $1;
  (_nk_progress($174,420,100,1)|0);
  $175 = $1;
  (_nk_slider_int($175,0,424,16,1)|0);
  $176 = $1;
  (_nk_checkbox_label($176,25242,428)|0);
  $177 = $1;
  _nk_menubar_end($177);
 }
 $178 = HEAP32[12350]|0;
 $179 = ($178|0)!=(0);
 do {
  if ($179) {
   $180 = $1;
   ;HEAP32[$overview$s$byval_copy>>2]=HEAP32[444>>2]|0;HEAP32[$overview$s$byval_copy+4>>2]=HEAP32[444+4>>2]|0;HEAP32[$overview$s$byval_copy+8>>2]=HEAP32[444+8>>2]|0;HEAP32[$overview$s$byval_copy+12>>2]=HEAP32[444+12>>2]|0;
   $181 = (_nk_popup_begin($180,0,25236,8,$overview$s$byval_copy)|0);
   $182 = ($181|0)!=(0);
   if ($182) {
    $183 = $1;
    _nk_layout_row_dynamic($183,20.0,1);
    $184 = $1;
    _nk_label($184,25248,17);
    $185 = $1;
    _nk_label($185,25256,17);
    $186 = $1;
    _nk_label($186,25272,17);
    $187 = $1;
    _nk_popup_end($187);
    break;
   } else {
    HEAP32[12350] = 0;
    break;
   }
  }
 } while(0);
 $188 = $1;
 $189 = (_nk_strlen(25332)|0);
 $190 = (_nk_tree_push_hashed($188,1,25325,0,25332,$189,78)|0);
 $191 = ($190|0)!=(0);
 if ($191) {
  $192 = $1;
  _nk_layout_row_dynamic($192,30.0,2);
  $193 = $1;
  (_nk_checkbox_label($193,25348,396)|0);
  $194 = $1;
  (_nk_checkbox_label($194,25357,392)|0);
  $195 = $1;
  (_nk_checkbox_label($195,25362,400)|0);
  $196 = $1;
  (_nk_checkbox_label($196,25369,404)|0);
  $197 = $1;
  (_nk_checkbox_label($197,25379,408)|0);
  $198 = $1;
  (_nk_checkbox_label($198,25387,49392)|0);
  $199 = $1;
  (_nk_checkbox_label($199,25400,412)|0);
  $200 = $1;
  _nk_tree_pop($200);
 }
 $201 = $1;
 $202 = (_nk_strlen(25420)|0);
 $203 = (_nk_tree_push_hashed($201,1,25412,0,25420,$202,90)|0);
 $204 = ($203|0)!=(0);
 if ($204) {
  $205 = $1;
  $206 = (_nk_strlen(25441)|0);
  $207 = (_nk_tree_push_hashed($205,0,25436,0,25441,$206,95)|0);
  $208 = ($207|0)!=(0);
  if ($208) {
   $209 = $1;
   _nk_layout_row_dynamic($209,20.0,1);
   $210 = $1;
   _nk_label($210,25457,17);
   $211 = $1;
   _nk_label($211,25476,18);
   $212 = $1;
   _nk_label($212,25499,20);
   $213 = $1;
   _nk_rgb($4,0,0,255);
   ;HEAP8[$$byval_copy61>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy61+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy61+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy61+3>>0]=HEAP8[$4+3>>0]|0;
   _nk_label_colored($213,25519,17,$$byval_copy61);
   $214 = $1;
   _nk_rgb($5,255,255,0);
   ;HEAP8[$$byval_copy62>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy62+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy62+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy62+3>>0]=HEAP8[$5+3>>0]|0;
   _nk_label_colored($214,25529,17,$$byval_copy62);
   $215 = $1;
   _nk_text($215,25541,15,20);
   $216 = $1;
   _nk_layout_row_static($216,100.0,200,1);
   $217 = $1;
   _nk_label_wrap($217,25557);
   $218 = $1;
   _nk_layout_row_dynamic($218,100.0,1);
   $219 = $1;
   _nk_label_wrap($219,25665);
   $220 = $1;
   _nk_tree_pop($220);
  }
  $221 = $1;
  $222 = (_nk_strlen(25747)|0);
  $223 = (_nk_tree_push_hashed($221,0,25740,0,25747,$222,113)|0);
  $224 = ($223|0)!=(0);
  if ($224) {
   $225 = $1;
   _nk_layout_row_static($225,30.0,100,3);
   $226 = $1;
   $227 = (_nk_button_label($226,25740)|0);
   $228 = ($227|0)!=(0);
   if ($228) {
    $229 = HEAP32[232]|0;
    (_fprintf($229,25764,$vararg_buffer)|0);
   }
   $230 = $1;
   _nk_button_set_behavior($230,1);
   $231 = $1;
   $232 = (_nk_button_label($231,25781)|0);
   $233 = ($232|0)!=(0);
   if ($233) {
    $234 = HEAP32[232]|0;
    (_fprintf($234,25790,$vararg_buffer2)|0);
   }
   $235 = $1;
   _nk_button_set_behavior($235,0);
   $236 = $1;
   _nk_rgb($6,0,0,255);
   ;HEAP8[$$byval_copy63>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy63+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy63+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy63+3>>0]=HEAP8[$6+3>>0]|0;
   (_nk_button_color($236,$$byval_copy63)|0);
   $237 = $1;
   _nk_layout_row_static($237,25.0,25,8);
   $238 = $1;
   (_nk_button_symbol($238,3)|0);
   $239 = $1;
   (_nk_button_symbol($239,4)|0);
   $240 = $1;
   (_nk_button_symbol($240,5)|0);
   $241 = $1;
   (_nk_button_symbol($241,6)|0);
   $242 = $1;
   (_nk_button_symbol($242,7)|0);
   $243 = $1;
   (_nk_button_symbol($243,8)|0);
   $244 = $1;
   (_nk_button_symbol($244,9)|0);
   $245 = $1;
   (_nk_button_symbol($245,10)|0);
   $246 = $1;
   _nk_layout_row_static($246,30.0,100,2);
   $247 = $1;
   (_nk_button_symbol_label($247,9,25818,20)|0);
   $248 = $1;
   (_nk_button_symbol_label($248,10,25823,17)|0);
   $249 = $1;
   _nk_tree_pop($249);
  }
  $250 = $1;
  $251 = (_nk_strlen(25834)|0);
  $252 = (_nk_tree_push_hashed($250,0,25828,0,25834,$251,141)|0);
  $253 = ($252|0)!=(0);
  if ($253) {
   $254 = $1;
   _nk_layout_row_static($254,30.0,100,1);
   $255 = $1;
   (_nk_checkbox_label($255,25851,49404)|0);
   $256 = $1;
   _nk_layout_row_static($256,30.0,80,3);
   $257 = $1;
   $258 = HEAP32[12352]|0;
   $259 = ($258|0)==(0);
   $260 = $259&1;
   $261 = (_nk_option_label($257,25860,$260)|0);
   $262 = ($261|0)!=(0);
   $263 = HEAP32[12352]|0;
   $264 = $262 ? 0 : $263;
   HEAP32[12352] = $264;
   $265 = $1;
   $266 = HEAP32[12352]|0;
   $267 = ($266|0)==(1);
   $268 = $267&1;
   $269 = (_nk_option_label($265,25868,$268)|0);
   $270 = ($269|0)!=(0);
   $271 = HEAP32[12352]|0;
   $272 = $270 ? 1 : $271;
   HEAP32[12352] = $272;
   $273 = $1;
   $274 = HEAP32[12352]|0;
   $275 = ($274|0)==(2);
   $276 = $275&1;
   $277 = (_nk_option_label($273,25876,$276)|0);
   $278 = ($277|0)!=(0);
   $279 = HEAP32[12352]|0;
   $280 = $278 ? 2 : $279;
   HEAP32[12352] = $280;
   $281 = $1;
   _nk_layout_row($281,1,30.0,2,500);
   $282 = $1;
   _nk_labelf($282,17,25884,$vararg_buffer4);
   $283 = $1;
   (_nk_slider_int($283,0,460,10,1)|0);
   $284 = $1;
   _nk_label($284,25895,17);
   $285 = $1;
   (_nk_slider_float($285,0.0,464,5.0,0.5)|0);
   $286 = $1;
   $287 = HEAP32[117]|0;
   HEAP32[$vararg_buffer6>>2] = $287;
   _nk_labelf($286,17,25908,$vararg_buffer6);
   $288 = $1;
   (_nk_progress($288,468,100,1)|0);
   $289 = $1;
   _nk_layout_row($289,1,25.0,2,500);
   $290 = $1;
   _nk_label($290,25920,17);
   $291 = $1;
   _nk_property_float($291,25936,0.0,472,64.0,0.10000000149011612,0.20000000298023224);
   $292 = $1;
   _nk_label($292,25943,17);
   $293 = $1;
   _nk_property_int($293,25957,0,476,100,1,1.0);
   $294 = $1;
   _nk_label($294,25962,17);
   $295 = $1;
   _nk_property_int($295,25976,-10,480,10,1,1.0);
   $296 = $1;
   _nk_layout_row_dynamic($296,25.0,1);
   $297 = $1;
   _nk_label($297,25981,17);
   $298 = $1;
   _nk_layout_row_dynamic($298,25.0,3);
   $299 = $1;
   $300 = +HEAPF32[121];
   _nk_property_float($299,25988,0.0,49412,$300,1.0,0.20000000298023224);
   $301 = $1;
   $302 = +HEAPF32[12353];
   $303 = +HEAPF32[121];
   _nk_property_float($301,25994,$302,488,$303,1.0,0.20000000298023224);
   $304 = $1;
   $305 = +HEAPF32[12353];
   _nk_property_float($304,26002,$305,484,100.0,1.0,0.20000000298023224);
   $306 = $1;
   $307 = HEAP32[124]|0;
   _nk_property_int($306,25988,-2147483648,49416,$307,1,10.0);
   $308 = $1;
   $309 = HEAP32[12354]|0;
   $310 = HEAP32[124]|0;
   _nk_property_int($308,26008,$309,492,$310,1,10.0);
   $311 = $1;
   $312 = HEAP32[12354]|0;
   _nk_property_int($311,26002,$312,496,2147483647,1,10.0);
   $313 = $1;
   _nk_tree_pop($313);
  }
  $314 = $1;
  $315 = (_nk_strlen(26025)|0);
  $316 = (_nk_tree_push_hashed($314,0,26014,0,26025,$315,199)|0);
  $317 = ($316|0)!=(0);
  if ($317) {
   $318 = $1;
   $319 = (_nk_strlen(26047)|0);
   $320 = (_nk_tree_push_hashed($318,0,26042,0,26047,$319,201)|0);
   $321 = ($320|0)!=(0);
   if ($321) {
    $322 = $1;
    _nk_layout_row_static($322,18.0,100,1);
    $323 = $1;
    (_nk_selectable_label($323,26014,17,508)|0);
    $324 = $1;
    (_nk_selectable_label($324,26014,17,(512))|0);
    $325 = $1;
    _nk_label($325,26064,17);
    $326 = $1;
    (_nk_selectable_label($326,26014,17,(516))|0);
    $327 = $1;
    (_nk_selectable_label($327,26014,17,(520))|0);
    $328 = $1;
    _nk_tree_pop($328);
   }
   $329 = $1;
   $330 = (_nk_strlen(26084)|0);
   $331 = (_nk_tree_push_hashed($329,0,26079,0,26084,$330,212)|0);
   $332 = ($331|0)!=(0);
   if ($332) {
    $333 = $1;
    _nk_layout_row_static($333,50.0,50,4);
    $7 = 0;
    while(1) {
     $334 = $7;
     $335 = ($334|0)<(16);
     $336 = $1;
     if (!($335)) {
      break;
     }
     $337 = $7;
     $338 = (524 + ($337<<2)|0);
     $339 = (_nk_selectable_label($336,26101,18,$338)|0);
     $340 = ($339|0)!=(0);
     do {
      if ($340) {
       $341 = $7;
       $342 = (($341|0) % 4)&-1;
       $8 = $342;
       $343 = $7;
       $344 = (($343|0) / 4)&-1;
       $9 = $344;
       $345 = $8;
       $346 = ($345|0)>(0);
       if ($346) {
        $347 = $7;
        $348 = (($347) - 1)|0;
        $349 = (524 + ($348<<2)|0);
        $350 = HEAP32[$349>>2]|0;
        $351 = $350 ^ 1;
        HEAP32[$349>>2] = $351;
       }
       $352 = $8;
       $353 = ($352|0)<(3);
       if ($353) {
        $354 = $7;
        $355 = (($354) + 1)|0;
        $356 = (524 + ($355<<2)|0);
        $357 = HEAP32[$356>>2]|0;
        $358 = $357 ^ 1;
        HEAP32[$356>>2] = $358;
       }
       $359 = $9;
       $360 = ($359|0)>(0);
       if ($360) {
        $361 = $7;
        $362 = (($361) - 4)|0;
        $363 = (524 + ($362<<2)|0);
        $364 = HEAP32[$363>>2]|0;
        $365 = $364 ^ 1;
        HEAP32[$363>>2] = $365;
       }
       $366 = $9;
       $367 = ($366|0)<(3);
       if (!($367)) {
        break;
       }
       $368 = $7;
       $369 = (($368) + 4)|0;
       $370 = (524 + ($369<<2)|0);
       $371 = HEAP32[$370>>2]|0;
       $372 = $371 ^ 1;
       HEAP32[$370>>2] = $372;
      }
     } while(0);
     $373 = $7;
     $374 = (($373) + 1)|0;
     $7 = $374;
    }
    _nk_tree_pop($336);
   }
   $375 = $1;
   _nk_tree_pop($375);
  }
  $376 = $1;
  $377 = (_nk_strlen(26109)|0);
  $378 = (_nk_tree_push_hashed($376,0,26103,0,26109,$377,231)|0);
  $379 = ($378|0)!=(0);
  if ($379) {
   $11 = 0;
   $380 = $1;
   _nk_layout_row_static($380,25.0,200,1);
   $381 = $1;
   $382 = HEAP32[12355]|0;
   _nk_vec2($12,200.0,200.0);
   ;HEAP32[$$byval_copy64>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy64+4>>2]=HEAP32[$12+4>>2]|0;
   $383 = (_nk_combo($381,608,5,$382,25,$$byval_copy64)|0);
   HEAP32[12355] = $383;
   $384 = $1;
   _nk_vec2($13,200.0,200.0);
   ;HEAP8[$overview$combo_color$byval_copy>>0]=HEAP8[26126>>0]|0;HEAP8[$overview$combo_color$byval_copy+1>>0]=HEAP8[26126+1>>0]|0;HEAP8[$overview$combo_color$byval_copy+2>>0]=HEAP8[26126+2>>0]|0;HEAP8[$overview$combo_color$byval_copy+3>>0]=HEAP8[26126+3>>0]|0;
   ;HEAP32[$$byval_copy65>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy65+4>>2]=HEAP32[$13+4>>2]|0;
   $385 = (_nk_combo_begin_color($384,$overview$combo_color$byval_copy,$$byval_copy65)|0);
   $386 = ($385|0)!=(0);
   if ($386) {
    ;HEAP32[$14>>2]=HEAP32[628>>2]|0;HEAP32[$14+4>>2]=HEAP32[628+4>>2]|0;
    $387 = $1;
    _nk_layout_row($387,0,30.0,2,$14);
    $388 = $1;
    _nk_label($388,26165,17);
    $389 = $1;
    $390 = HEAP8[26126]|0;
    $391 = $390&255;
    $392 = (_nk_slide_int($389,0,$391,255,5)|0);
    $393 = $392&255;
    HEAP8[26126] = $393;
    $394 = $1;
    _nk_label($394,26168,17);
    $395 = $1;
    $396 = HEAP8[(26127)>>0]|0;
    $397 = $396&255;
    $398 = (_nk_slide_int($395,0,$397,255,5)|0);
    $399 = $398&255;
    HEAP8[(26127)>>0] = $399;
    $400 = $1;
    _nk_label($400,26171,17);
    $401 = $1;
    $402 = HEAP8[(26128)>>0]|0;
    $403 = $402&255;
    $404 = (_nk_slide_int($401,0,$403,255,5)|0);
    $405 = $404&255;
    HEAP8[(26128)>>0] = $405;
    $406 = $1;
    _nk_label($406,26174,17);
    $407 = $1;
    $408 = HEAP8[(26129)>>0]|0;
    $409 = $408&255;
    $410 = (_nk_slide_int($407,0,$409,255,5)|0);
    $411 = $410&255;
    HEAP8[(26129)>>0] = $411;
    $412 = $1;
    _nk_combo_end($412);
   }
   $413 = $1;
   _nk_vec2($15,200.0,400.0);
   ;HEAP8[$overview$combo_color2$byval_copy>>0]=HEAP8[26130>>0]|0;HEAP8[$overview$combo_color2$byval_copy+1>>0]=HEAP8[26130+1>>0]|0;HEAP8[$overview$combo_color2$byval_copy+2>>0]=HEAP8[26130+2>>0]|0;HEAP8[$overview$combo_color2$byval_copy+3>>0]=HEAP8[26130+3>>0]|0;
   ;HEAP32[$$byval_copy66>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy66+4>>2]=HEAP32[$15+4>>2]|0;
   $414 = (_nk_combo_begin_color($413,$overview$combo_color2$byval_copy,$$byval_copy66)|0);
   $415 = ($414|0)!=(0);
   if ($415) {
    $416 = $1;
    _nk_layout_row_dynamic($416,120.0,1);
    $417 = $1;
    ;HEAP8[$overview$combo_color2$byval_copy67>>0]=HEAP8[26130>>0]|0;HEAP8[$overview$combo_color2$byval_copy67+1>>0]=HEAP8[26130+1>>0]|0;HEAP8[$overview$combo_color2$byval_copy67+2>>0]=HEAP8[26130+2>>0]|0;HEAP8[$overview$combo_color2$byval_copy67+3>>0]=HEAP8[26130+3>>0]|0;
    _nk_color_picker($16,$417,$overview$combo_color2$byval_copy67,1);
    ;HEAP8[26130>>0]=HEAP8[$16>>0]|0;HEAP8[26130+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[26130+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[26130+3>>0]=HEAP8[$16+3>>0]|0;
    $418 = $1;
    _nk_layout_row_dynamic($418,25.0,2);
    $419 = $1;
    $420 = HEAP32[12364]|0;
    $421 = ($420|0)==(0);
    $422 = $421&1;
    $423 = (_nk_option_label($419,26177,$422)|0);
    $424 = ($423|0)!=(0);
    $425 = HEAP32[12364]|0;
    $426 = $424 ? 0 : $425;
    HEAP32[12364] = $426;
    $427 = $1;
    $428 = HEAP32[12364]|0;
    $429 = ($428|0)==(1);
    $430 = $429&1;
    $431 = (_nk_option_label($427,26181,$430)|0);
    $432 = ($431|0)!=(0);
    $433 = HEAP32[12364]|0;
    $434 = $432 ? 1 : $433;
    HEAP32[12364] = $434;
    $435 = $1;
    _nk_layout_row_dynamic($435,25.0,1);
    $436 = HEAP32[12364]|0;
    $437 = ($436|0)==(0);
    if ($437) {
     $438 = $1;
     $439 = HEAP8[26130]|0;
     $440 = $439&255;
     $441 = (_nk_propertyi($438,21461,0,$440,255,1,1.0)|0);
     $442 = $441&255;
     HEAP8[26130] = $442;
     $443 = $1;
     $444 = HEAP8[(26131)>>0]|0;
     $445 = $444&255;
     $446 = (_nk_propertyi($443,21465,0,$445,255,1,1.0)|0);
     $447 = $446&255;
     HEAP8[(26131)>>0] = $447;
     $448 = $1;
     $449 = HEAP8[(26132)>>0]|0;
     $450 = $449&255;
     $451 = (_nk_propertyi($448,21469,0,$450,255,1,1.0)|0);
     $452 = $451&255;
     HEAP8[(26132)>>0] = $452;
     $453 = $1;
     $454 = HEAP8[(26133)>>0]|0;
     $455 = $454&255;
     $456 = (_nk_propertyi($453,21473,0,$455,255,1,1.0)|0);
     $457 = $456&255;
     HEAP8[(26133)>>0] = $457;
    } else {
     ;HEAP8[$overview$combo_color2$byval_copy68>>0]=HEAP8[26130>>0]|0;HEAP8[$overview$combo_color2$byval_copy68+1>>0]=HEAP8[26130+1>>0]|0;HEAP8[$overview$combo_color2$byval_copy68+2>>0]=HEAP8[26130+2>>0]|0;HEAP8[$overview$combo_color2$byval_copy68+3>>0]=HEAP8[26130+3>>0]|0;
     _nk_color_hsva_bv($17,$overview$combo_color2$byval_copy68);
     $458 = $1;
     $459 = HEAP8[$17>>0]|0;
     $460 = $459&255;
     $461 = (_nk_propertyi($458,26185,0,$460,255,1,1.0)|0);
     $462 = $461&255;
     HEAP8[$17>>0] = $462;
     $463 = $1;
     $464 = ((($17)) + 1|0);
     $465 = HEAP8[$464>>0]|0;
     $466 = $465&255;
     $467 = (_nk_propertyi($463,26189,0,$466,255,1,1.0)|0);
     $468 = $467&255;
     $469 = ((($17)) + 1|0);
     HEAP8[$469>>0] = $468;
     $470 = $1;
     $471 = ((($17)) + 2|0);
     $472 = HEAP8[$471>>0]|0;
     $473 = $472&255;
     $474 = (_nk_propertyi($470,26193,0,$473,255,1,1.0)|0);
     $475 = $474&255;
     $476 = ((($17)) + 2|0);
     HEAP8[$476>>0] = $475;
     $477 = $1;
     $478 = ((($17)) + 3|0);
     $479 = HEAP8[$478>>0]|0;
     $480 = $479&255;
     $481 = (_nk_propertyi($477,21473,0,$480,255,1,1.0)|0);
     $482 = $481&255;
     $483 = ((($17)) + 3|0);
     HEAP8[$483>>0] = $482;
     _nk_hsva_bv($18,$17);
     ;HEAP8[26130>>0]=HEAP8[$18>>0]|0;HEAP8[26130+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[26130+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[26130+3>>0]=HEAP8[$18+3>>0]|0;
    }
    $484 = $1;
    _nk_combo_end($484);
   }
   $485 = HEAP32[148]|0;
   $486 = HEAP32[149]|0;
   $487 = (($485) + ($486))|0;
   $488 = HEAP32[150]|0;
   $489 = (($487) + ($488))|0;
   $490 = HEAP32[151]|0;
   $491 = (($489) + ($490))|0;
   $11 = $491;
   $492 = $11;
   HEAP32[$vararg_buffer8>>2] = $492;
   (_sprintf($10,26197,$vararg_buffer8)|0);
   $493 = $1;
   _nk_vec2($19,200.0,200.0);
   ;HEAP32[$$byval_copy69>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy69+4>>2]=HEAP32[$19+4>>2]|0;
   $494 = (_nk_combo_begin_label($493,$10,$$byval_copy69)|0);
   $495 = ($494|0)!=(0);
   if ($495) {
    $496 = $1;
    _nk_layout_row_dynamic($496,30.0,1);
    $497 = $1;
    (_nk_progress($497,592,100,1)|0);
    $498 = $1;
    (_nk_progress($498,596,100,1)|0);
    $499 = $1;
    (_nk_progress($499,600,100,1)|0);
    $500 = $1;
    (_nk_progress($500,604,100,1)|0);
    $501 = $1;
    _nk_combo_end($501);
   }
   $502 = HEAP32[12356]|0;
   $503 = HEAP32[(49428)>>2]|0;
   $504 = (($502) + ($503))|0;
   $505 = HEAP32[(49432)>>2]|0;
   $506 = (($504) + ($505))|0;
   $507 = HEAP32[(49436)>>2]|0;
   $508 = (($506) + ($507))|0;
   $509 = HEAP32[(49440)>>2]|0;
   $510 = (($508) + ($509))|0;
   $11 = $510;
   $511 = $11;
   HEAP32[$vararg_buffer11>>2] = $511;
   (_sprintf($10,26197,$vararg_buffer11)|0);
   $512 = $1;
   _nk_vec2($20,200.0,200.0);
   ;HEAP32[$$byval_copy70>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy70+4>>2]=HEAP32[$20+4>>2]|0;
   $513 = (_nk_combo_begin_label($512,$10,$$byval_copy70)|0);
   $514 = ($513|0)!=(0);
   if ($514) {
    $515 = $1;
    _nk_layout_row_dynamic($515,30.0,1);
    $516 = $1;
    $517 = HEAP32[152]|0;
    (_nk_checkbox_label($516,$517,49424)|0);
    $518 = $1;
    $519 = HEAP32[(612)>>2]|0;
    (_nk_checkbox_label($518,$519,(49428))|0);
    $520 = $1;
    $521 = HEAP32[(616)>>2]|0;
    (_nk_checkbox_label($520,$521,(49432))|0);
    $522 = $1;
    $523 = HEAP32[(620)>>2]|0;
    (_nk_checkbox_label($522,$523,(49436))|0);
    $524 = $1;
    _nk_combo_end($524);
   }
   $525 = +HEAPF32[12361];
   $526 = $525;
   $527 = +HEAPF32[(49448)>>2];
   $528 = $527;
   $529 = +HEAPF32[(49452)>>2];
   $530 = $529;
   HEAPF64[$vararg_buffer14>>3] = $526;
   $vararg_ptr17 = ((($vararg_buffer14)) + 8|0);
   HEAPF64[$vararg_ptr17>>3] = $528;
   $vararg_ptr18 = ((($vararg_buffer14)) + 16|0);
   HEAPF64[$vararg_ptr18>>3] = $530;
   (_sprintf($10,26201,$vararg_buffer14)|0);
   $531 = $1;
   _nk_vec2($21,200.0,200.0);
   ;HEAP32[$$byval_copy71>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy71+4>>2]=HEAP32[$21+4>>2]|0;
   $532 = (_nk_combo_begin_label($531,$10,$$byval_copy71)|0);
   $533 = ($532|0)!=(0);
   if ($533) {
    $534 = $1;
    _nk_layout_row_dynamic($534,25.0,1);
    $535 = $1;
    _nk_property_float($535,26218,-1024.0,49444,1024.0,1.0,0.5);
    $536 = $1;
    _nk_property_float($536,26222,-1024.0,(49448),1024.0,1.0,0.5);
    $537 = $1;
    _nk_property_float($537,26226,-1024.0,(49452),1024.0,1.0,0.5);
    $538 = $1;
    _nk_combo_end($538);
   }
   $539 = +HEAPF32[147];
   $540 = $539;
   HEAPF64[$vararg_buffer19>>3] = $540;
   (_sprintf($10,26230,$vararg_buffer19)|0);
   $541 = $1;
   _nk_vec2($22,200.0,250.0);
   ;HEAP32[$$byval_copy72>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy72+4>>2]=HEAP32[$22+4>>2]|0;
   $542 = (_nk_combo_begin_label($541,$10,$$byval_copy72)|0);
   $543 = ($542|0)!=(0);
   if ($543) {
    $23 = 0;
    $544 = $1;
    _nk_layout_row_dynamic($544,150.0,1);
    $545 = $1;
    (_nk_chart_begin($545,1,13,0.0,50.0)|0);
    $23 = 0;
    while(1) {
     $546 = $23;
     $547 = ($546>>>0)<(13);
     $548 = $1;
     if (!($547)) {
      break;
     }
     $549 = $23;
     $550 = (636 + ($549<<2)|0);
     $551 = +HEAPF32[$550>>2];
     $552 = (_nk_chart_push($548,$551)|0);
     $24 = $552;
     $553 = $24;
     $554 = $553 & 2;
     $555 = ($554|0)!=(0);
     if ($555) {
      $556 = $23;
      $557 = (636 + ($556<<2)|0);
      $558 = +HEAPF32[$557>>2];
      HEAPF32[147] = $558;
      $559 = $1;
      _nk_combo_close($559);
     }
     $560 = $23;
     $561 = (($560) + 1)|0;
     $23 = $561;
    }
    _nk_chart_end($548);
    $562 = $1;
    _nk_combo_end($562);
   }
   $563 = HEAP32[12365]|0;
   $564 = ($563|0)!=(0);
   $565 = HEAP32[12366]|0;
   $566 = ($565|0)!=(0);
   $or$cond = $564 & $566;
   do {
    if (!($or$cond)) {
     $567 = (_time((0|0))|0);
     HEAP32[$25>>2] = $567;
     $568 = (_localtime(($25|0))|0);
     $26 = $568;
     $569 = HEAP32[12365]|0;
     $570 = ($569|0)!=(0);
     if (!($570)) {
      $571 = $26;
      dest=49468; src=$571; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     }
     $572 = HEAP32[12366]|0;
     $573 = ($572|0)!=(0);
     if ($573) {
      break;
     }
     $574 = $26;
     dest=49512; src=$574; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    }
   } while(0);
   $575 = HEAP32[(49476)>>2]|0;
   $576 = HEAP32[(49472)>>2]|0;
   $577 = HEAP32[12367]|0;
   HEAP32[$vararg_buffer22>>2] = $575;
   $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
   HEAP32[$vararg_ptr25>>2] = $576;
   $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
   HEAP32[$vararg_ptr26>>2] = $577;
   (_sprintf($10,26235,$vararg_buffer22)|0);
   $578 = $1;
   _nk_vec2($27,200.0,250.0);
   ;HEAP32[$$byval_copy73>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy73+4>>2]=HEAP32[$27+4>>2]|0;
   $579 = (_nk_combo_begin_label($578,$10,$$byval_copy73)|0);
   $580 = ($579|0)!=(0);
   if ($580) {
    HEAP32[12365] = 1;
    $581 = $1;
    _nk_layout_row_dynamic($581,25.0,1);
    $582 = $1;
    $583 = HEAP32[12367]|0;
    $584 = (_nk_propertyi($582,26189,0,$583,60,1,1.0)|0);
    HEAP32[12367] = $584;
    $585 = $1;
    $586 = HEAP32[(49472)>>2]|0;
    $587 = (_nk_propertyi($585,26250,0,$586,60,1,1.0)|0);
    HEAP32[(49472)>>2] = $587;
    $588 = $1;
    $589 = HEAP32[(49476)>>2]|0;
    $590 = (_nk_propertyi($588,26185,0,$589,23,1,1.0)|0);
    HEAP32[(49476)>>2] = $590;
    $591 = $1;
    _nk_combo_end($591);
   }
   $592 = HEAP32[(49524)>>2]|0;
   $593 = HEAP32[(49528)>>2]|0;
   $594 = (($593) + 1)|0;
   $595 = HEAP32[(49532)>>2]|0;
   $596 = (($595) + 1900)|0;
   HEAP32[$vararg_buffer27>>2] = $592;
   $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
   HEAP32[$vararg_ptr30>>2] = $594;
   $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
   HEAP32[$vararg_ptr31>>2] = $596;
   (_sprintf($10,26254,$vararg_buffer27)|0);
   $597 = $1;
   _nk_vec2($28,350.0,400.0);
   ;HEAP32[$$byval_copy74>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy74+4>>2]=HEAP32[$28+4>>2]|0;
   $598 = (_nk_combo_begin_label($597,$10,$$byval_copy74)|0);
   $599 = ($598|0)!=(0);
   if ($599) {
    $29 = 0;
    dest=$30; src=688; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    ;HEAP32[$31>>2]=HEAP32[736>>2]|0;HEAP32[$31+4>>2]=HEAP32[736+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[736+8>>2]|0;HEAP32[$31+12>>2]=HEAP32[736+12>>2]|0;HEAP32[$31+16>>2]=HEAP32[736+16>>2]|0;HEAP32[$31+20>>2]=HEAP32[736+20>>2]|0;HEAP32[$31+24>>2]=HEAP32[736+24>>2]|0;
    $600 = HEAP32[(49532)>>2]|0;
    $601 = (($600) + 1900)|0;
    $32 = $601;
    $602 = $32;
    $603 = (($602|0) % 4)&-1;
    $604 = ($603|0)!=(0);
    if ($604) {
     label = 86;
    } else {
     $605 = $32;
     $606 = (($605|0) % 100)&-1;
     $607 = ($606|0)!=(0);
     if ($607) {
      $613 = 1;
     } else {
      label = 86;
     }
    }
    if ((label|0) == 86) {
     $608 = $32;
     $609 = (($608|0) % 400)&-1;
     $610 = ($609|0)!=(0);
     $611 = $610 ^ 1;
     $613 = $611;
    }
    $612 = $613&1;
    $33 = $612;
    $614 = HEAP32[(49528)>>2]|0;
    $615 = ($614|0)==(1);
    $616 = HEAP32[(49528)>>2]|0;
    $617 = (764 + ($616<<2)|0);
    $618 = HEAP32[$617>>2]|0;
    $619 = $33;
    $620 = (($618) + ($619))|0;
    $621 = $615 ? $620 : $618;
    $34 = $621;
    HEAP32[12366] = 1;
    $622 = $1;
    _nk_layout_row_begin($622,0,20.0,3);
    $623 = $1;
    _nk_layout_row_push($623,0.05000000074505806);
    $624 = $1;
    $625 = (_nk_button_symbol($624,9)|0);
    $626 = ($625|0)!=(0);
    do {
     if ($626) {
      $627 = HEAP32[(49528)>>2]|0;
      $628 = ($627|0)==(0);
      if ($628) {
       HEAP32[(49528)>>2] = 11;
       $629 = HEAP32[(49532)>>2]|0;
       $630 = (($629) - 1)|0;
       $631 = (0)<($630|0);
       $632 = HEAP32[(49532)>>2]|0;
       $633 = (($632) - 1)|0;
       $634 = $631 ? $633 : 0;
       HEAP32[(49532)>>2] = $634;
       break;
      } else {
       $635 = HEAP32[(49528)>>2]|0;
       $636 = (($635) + -1)|0;
       HEAP32[(49528)>>2] = $636;
       break;
      }
     }
    } while(0);
    $637 = $1;
    _nk_layout_row_push($637,0.89999997615814208);
    $638 = HEAP32[(49528)>>2]|0;
    $639 = (($30) + ($638<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = $32;
    HEAP32[$vararg_buffer32>>2] = $640;
    $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
    HEAP32[$vararg_ptr35>>2] = $641;
    (_sprintf($10,26383,$vararg_buffer32)|0);
    $642 = $1;
    _nk_label($642,$10,18);
    $643 = $1;
    _nk_layout_row_push($643,0.05000000074505806);
    $644 = $1;
    $645 = (_nk_button_symbol($644,10)|0);
    $646 = ($645|0)!=(0);
    do {
     if ($646) {
      $647 = HEAP32[(49528)>>2]|0;
      $648 = ($647|0)==(11);
      if ($648) {
       HEAP32[(49528)>>2] = 0;
       $649 = HEAP32[(49532)>>2]|0;
       $650 = (($649) + 1)|0;
       HEAP32[(49532)>>2] = $650;
       break;
      } else {
       $651 = HEAP32[(49528)>>2]|0;
       $652 = (($651) + 1)|0;
       HEAP32[(49528)>>2] = $652;
       break;
      }
     }
    } while(0);
    $653 = $1;
    _nk_layout_row_end($653);
    $654 = HEAP32[(49528)>>2]|0;
    $655 = ($654|0)<(2);
    $656 = $32;
    $657 = (($656) - 1)|0;
    $658 = $655 ? $657 : $656;
    $35 = $658;
    $659 = $35;
    $660 = (($659|0) % 100)&-1;
    $36 = $660;
    $661 = $35;
    $662 = (($661|0) / 100)&-1;
    $37 = $662;
    $663 = $36;
    $664 = (+($663|0));
    $665 = $664 / 4.0;
    $666 = (~~(($665)));
    $38 = $666;
    $667 = $37;
    $668 = (+($667|0));
    $669 = $668 / 4.0;
    $670 = (~~(($669)));
    $39 = $670;
    $671 = HEAP32[(49528)>>2]|0;
    $672 = (($671) + 10)|0;
    $673 = (($672|0) % 12)&-1;
    $674 = (($673) + 1)|0;
    $675 = (+($674|0));
    $676 = 2.6000000000000001 * $675;
    $677 = $676 - 0.20000000000000001;
    $678 = (~~(($677)));
    $40 = $678;
    $679 = $40;
    $680 = (1 + ($679))|0;
    $681 = $36;
    $682 = (($680) + ($681))|0;
    $683 = $38;
    $684 = (($682) + ($683))|0;
    $685 = $39;
    $686 = (($684) + ($685))|0;
    $687 = $37;
    $688 = $687<<1;
    $689 = (($686) - ($688))|0;
    $690 = (($689|0) % 7)&-1;
    $691 = (($690) + 7)|0;
    $692 = (($691|0) % 7)&-1;
    $41 = $692;
    $693 = $1;
    _nk_layout_row_dynamic($693,35.0,7);
    $29 = 0;
    while(1) {
     $694 = $29;
     $695 = ($694|0)<(7);
     if (!($695)) {
      break;
     }
     $696 = $1;
     $697 = $29;
     $698 = (($31) + ($697<<2)|0);
     $699 = HEAP32[$698>>2]|0;
     _nk_label($696,$699,18);
     $700 = $29;
     $701 = (($700) + 1)|0;
     $29 = $701;
    }
    $702 = $41;
    $703 = ($702|0)>(0);
    if ($703) {
     $704 = $1;
     $705 = $41;
     _nk_spacing($704,$705);
    }
    $29 = 1;
    while(1) {
     $706 = $29;
     $707 = $34;
     $708 = ($706|0)<=($707|0);
     if (!($708)) {
      break;
     }
     $709 = $29;
     HEAP32[$vararg_buffer36>>2] = $709;
     (_sprintf($10,26389,$vararg_buffer36)|0);
     $710 = $1;
     $711 = (_nk_button_label($710,$10)|0);
     $712 = ($711|0)!=(0);
     if ($712) {
      $713 = $29;
      HEAP32[(49524)>>2] = $713;
      $714 = $1;
      _nk_combo_close($714);
     }
     $715 = $29;
     $716 = (($715) + 1)|0;
     $29 = $716;
    }
    $717 = $1;
    _nk_combo_end($717);
   }
   $718 = $1;
   _nk_tree_pop($718);
  }
  $719 = $1;
  $720 = (_nk_strlen(26398)|0);
  $721 = (_nk_tree_push_hashed($719,0,26392,0,26398,$720,466)|0);
  $722 = ($721|0)!=(0);
  if ($722) {
   $723 = $1;
   _nk_layout_row($723,1,25.0,2,812);
   $724 = $1;
   _nk_label($724,26415,17);
   $725 = $1;
   (_nk_edit_string($725,512,50500,49556,64,12)|0);
   $726 = $1;
   _nk_label($726,25957,17);
   $727 = $1;
   (_nk_edit_string($727,512,(50564),(49560),64,1)|0);
   $728 = $1;
   _nk_label($728,25936,17);
   $729 = $1;
   (_nk_edit_string($729,512,(50628),(49564),64,2)|0);
   $730 = $1;
   _nk_label($730,26424,17);
   $731 = $1;
   (_nk_edit_string($731,512,(50756),(49572),64,17)|0);
   $732 = $1;
   _nk_label($732,26429,17);
   $733 = $1;
   (_nk_edit_string($733,512,(50820),(49576),64,18)|0);
   $734 = $1;
   _nk_label($734,26436,17);
   $735 = $1;
   (_nk_edit_string($735,512,(50884),(49580),64,19)|0);
   $736 = $1;
   _nk_label($736,26444,17);
   $43 = 0;
   $737 = HEAP32[(49588)>>2]|0;
   $44 = $737;
   $43 = 0;
   while(1) {
    $738 = $43;
    $739 = HEAP32[(49588)>>2]|0;
    $740 = ($738|0)<($739|0);
    if (!($740)) {
     break;
    }
    $741 = $43;
    $742 = (($45) + ($741)|0);
    HEAP8[$742>>0] = 42;
    $743 = $43;
    $744 = (($743) + 1)|0;
    $43 = $744;
   }
   $745 = $1;
   (_nk_edit_string($745,608,$45,(49588),64,12)|0);
   $746 = $44;
   $747 = HEAP32[(49588)>>2]|0;
   $748 = ($746|0)<($747|0);
   if ($748) {
    $749 = $44;
    $750 = ((51012) + ($749)|0);
    $751 = $44;
    $752 = (($45) + ($751)|0);
    $753 = HEAP32[(49588)>>2]|0;
    $754 = $44;
    $755 = (($753) - ($754))|0;
    _memcpy(($750|0),($752|0),($755|0))|0;
   }
   $756 = $1;
   _nk_label($756,26454,17);
   $757 = $1;
   (_nk_edit_string($757,608,50436,49592,64,12)|0);
   $758 = $1;
   _nk_label($758,26461,17);
   $759 = $1;
   _nk_layout_row_static($759,180.0,278,1);
   $760 = $1;
   (_nk_edit_string($760,2664,51076,49596,512,12)|0);
   $761 = $1;
   _nk_layout_row($761,1,25.0,2,812);
   $762 = $1;
   $763 = (_nk_edit_string($762,612,(50948),(49584),64,20)|0);
   $42 = $763;
   $764 = $1;
   $765 = (_nk_button_label($764,26466)|0);
   $766 = ($765|0)!=(0);
   if ($766) {
    label = 115;
   } else {
    $767 = $42;
    $768 = $767 & 16;
    $769 = ($768|0)!=(0);
    if ($769) {
     label = 115;
    }
   }
   if ((label|0) == 115) {
    $770 = HEAP32[(49584)>>2]|0;
    $771 = ((50948) + ($770)|0);
    HEAP8[$771>>0] = 10;
    $772 = HEAP32[(49584)>>2]|0;
    $773 = (($772) + 1)|0;
    HEAP32[(49584)>>2] = $773;
    $774 = HEAP32[12399]|0;
    $775 = (51076 + ($774)|0);
    $776 = HEAP32[(49584)>>2]|0;
    _memcpy(($775|0),((50948)|0),($776|0))|0;
    $777 = HEAP32[(49584)>>2]|0;
    $778 = HEAP32[12399]|0;
    $779 = (($778) + ($777))|0;
    HEAP32[12399] = $779;
    HEAP32[(49584)>>2] = 0;
   }
   $780 = $1;
   _nk_layout_row_end($780);
   $781 = $1;
   _nk_tree_pop($781);
  }
  $782 = $1;
  _nk_tree_pop($782);
 }
 $783 = $1;
 $784 = (_nk_strlen(26479)|0);
 $785 = (_nk_tree_push_hashed($783,1,26473,0,26479,$784,527)|0);
 $786 = ($785|0)!=(0);
 if ($786) {
  $46 = 0.0;
  $47 = 0.19634954631328583;
  $49 = -1;
  $46 = 0.0;
  $49 = -1;
  $787 = $1;
  _nk_layout_row_dynamic($787,100.0,1);
  $788 = $1;
  _nk_widget_bounds($51,$788);
  ;HEAP32[$50>>2]=HEAP32[$51>>2]|0;HEAP32[$50+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$50+12>>2]=HEAP32[$51+12>>2]|0;
  $789 = $1;
  $790 = (_nk_chart_begin($789,0,32,-1.0,1.0)|0);
  $791 = ($790|0)!=(0);
  if ($791) {
   $48 = 0;
   while(1) {
    $792 = $48;
    $793 = ($792|0)<(32);
    $794 = $1;
    if (!($793)) {
     break;
    }
    $795 = $46;
    $796 = $795;
    $797 = (+Math_cos((+$796)));
    $798 = $797;
    $799 = (_nk_chart_push($794,$798)|0);
    $52 = $799;
    $800 = $52;
    $801 = $800 & 1;
    $802 = ($801|0)!=(0);
    if ($802) {
     $803 = $48;
     $49 = $803;
    }
    $804 = $52;
    $805 = $804 & 2;
    $806 = ($805|0)!=(0);
    if ($806) {
     $807 = $48;
     HEAP32[206] = $807;
    }
    $808 = $47;
    $809 = $46;
    $810 = $809 + $808;
    $46 = $810;
    $811 = $48;
    $812 = (($811) + 1)|0;
    $48 = $812;
   }
   _nk_chart_end($794);
  }
  $813 = $49;
  $814 = ($813|0)!=(-1);
  if ($814) {
   $815 = $49;
   $816 = (+($815|0));
   $817 = $47;
   $818 = $816 * $817;
   $819 = $818;
   $820 = (+Math_cos((+$819)));
   $821 = $820;
   $54 = $821;
   $822 = $54;
   $823 = $822;
   HEAPF64[$vararg_buffer39>>3] = $823;
   (_sprintf($53,26496,$vararg_buffer39)|0);
   $824 = $1;
   _nk_tooltip($824,$53);
  }
  $825 = HEAP32[206]|0;
  $826 = ($825|0)!=(-1);
  if ($826) {
   $827 = $1;
   _nk_layout_row_dynamic($827,20.0,1);
   $828 = $1;
   $829 = $49;
   $830 = (+($829|0));
   $831 = $47;
   $832 = $830 * $831;
   $833 = $832;
   $834 = (+Math_cos((+$833)));
   $835 = $834;
   $836 = $835;
   HEAPF64[$vararg_buffer42>>3] = $836;
   _nk_labelf($828,17,26508,$vararg_buffer42);
  }
  $837 = $1;
  _nk_layout_row_dynamic($837,100.0,1);
  $838 = $1;
  _nk_widget_bounds($55,$838);
  ;HEAP32[$50>>2]=HEAP32[$55>>2]|0;HEAP32[$50+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$50+12>>2]=HEAP32[$55+12>>2]|0;
  $839 = $1;
  $840 = (_nk_chart_begin($839,1,32,0.0,1.0)|0);
  $841 = ($840|0)!=(0);
  if ($841) {
   $48 = 0;
   while(1) {
    $842 = $48;
    $843 = ($842|0)<(32);
    $844 = $1;
    if (!($843)) {
     break;
    }
    $845 = $46;
    $846 = $845;
    $847 = (+Math_sin((+$846)));
    $848 = (+Math_abs((+$847)));
    $849 = $848;
    $850 = (_nk_chart_push($844,$849)|0);
    $56 = $850;
    $851 = $56;
    $852 = $851 & 1;
    $853 = ($852|0)!=(0);
    if ($853) {
     $854 = $48;
     $49 = $854;
    }
    $855 = $56;
    $856 = $855 & 2;
    $857 = ($856|0)!=(0);
    if ($857) {
     $858 = $48;
     HEAP32[205] = $858;
    }
    $859 = $47;
    $860 = $46;
    $861 = $860 + $859;
    $46 = $861;
    $862 = $48;
    $863 = (($862) + 1)|0;
    $48 = $863;
   }
   _nk_chart_end($844);
  }
  $864 = $49;
  $865 = ($864|0)!=(-1);
  if ($865) {
   $866 = $47;
   $867 = $49;
   $868 = (+($867|0));
   $869 = $866 * $868;
   $870 = $869;
   $871 = (+Math_sin((+$870)));
   $872 = (+Math_abs((+$871)));
   $873 = $872;
   $874 = $873;
   HEAPF64[$vararg_buffer45>>3] = $874;
   (_sprintf($57,26496,$vararg_buffer45)|0);
   $875 = $1;
   _nk_tooltip($875,$57);
  }
  $876 = HEAP32[205]|0;
  $877 = ($876|0)!=(-1);
  if ($877) {
   $878 = $1;
   _nk_layout_row_dynamic($878,20.0,1);
   $879 = $1;
   $880 = $47;
   $881 = HEAP32[205]|0;
   $882 = (+($881|0));
   $883 = $880 * $882;
   $884 = $883;
   $885 = (+Math_sin((+$884)));
   $886 = (+Math_abs((+$885)));
   $887 = $886;
   $888 = $887;
   HEAPF64[$vararg_buffer48>>3] = $888;
   _nk_labelf($879,17,26508,$vararg_buffer48);
  }
  $889 = $1;
  _nk_layout_row_dynamic($889,100.0,1);
  $890 = $1;
  _nk_widget_bounds($58,$890);
  ;HEAP32[$50>>2]=HEAP32[$58>>2]|0;HEAP32[$50+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$50+12>>2]=HEAP32[$58+12>>2]|0;
  $891 = $1;
  $892 = (_nk_chart_begin($891,1,32,0.0,1.0)|0);
  $893 = ($892|0)!=(0);
  L215: do {
   if ($893) {
    $894 = $1;
    _nk_chart_add_slot($894,0,32,-1.0,1.0);
    $895 = $1;
    _nk_chart_add_slot($895,0,32,-1.0,1.0);
    $46 = 0.0;
    $48 = 0;
    while(1) {
     $896 = $48;
     $897 = ($896|0)<(32);
     if (!($897)) {
      break L215;
     }
     $898 = $1;
     $899 = $46;
     $900 = $899;
     $901 = (+Math_sin((+$900)));
     $902 = (+Math_abs((+$901)));
     $903 = $902;
     (_nk_chart_push_slot($898,$903,0)|0);
     $904 = $1;
     $905 = $46;
     $906 = $905;
     $907 = (+Math_cos((+$906)));
     $908 = $907;
     (_nk_chart_push_slot($904,$908,1)|0);
     $909 = $1;
     $910 = $46;
     $911 = $910;
     $912 = (+Math_sin((+$911)));
     $913 = $912;
     (_nk_chart_push_slot($909,$913,2)|0);
     $914 = $47;
     $915 = $46;
     $916 = $915 + $914;
     $46 = $916;
     $917 = $48;
     $918 = (($917) + 1)|0;
     $48 = $918;
    }
   }
  } while(0);
  $919 = $1;
  _nk_chart_end($919);
  $920 = $1;
  _nk_layout_row_dynamic($920,100.0,1);
  $921 = $1;
  _nk_widget_bounds($59,$921);
  ;HEAP32[$50>>2]=HEAP32[$59>>2]|0;HEAP32[$50+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$59+8>>2]|0;HEAP32[$50+12>>2]=HEAP32[$59+12>>2]|0;
  $922 = $1;
  _nk_rgb($60,255,0,0);
  _nk_rgb($61,150,0,0);
  ;HEAP8[$$byval_copy75>>0]=HEAP8[$60>>0]|0;HEAP8[$$byval_copy75+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$$byval_copy75+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$$byval_copy75+3>>0]=HEAP8[$60+3>>0]|0;
  ;HEAP8[$$byval_copy76>>0]=HEAP8[$61>>0]|0;HEAP8[$$byval_copy76+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$$byval_copy76+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$$byval_copy76+3>>0]=HEAP8[$61+3>>0]|0;
  $923 = (_nk_chart_begin_colored($922,0,$$byval_copy75,$$byval_copy76,32,0.0,1.0)|0);
  $924 = ($923|0)!=(0);
  L221: do {
   if ($924) {
    $925 = $1;
    _nk_rgb($62,0,0,255);
    _nk_rgb($63,0,0,150);
    ;HEAP8[$$byval_copy77>>0]=HEAP8[$62>>0]|0;HEAP8[$$byval_copy77+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$$byval_copy77+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$$byval_copy77+3>>0]=HEAP8[$62+3>>0]|0;
    ;HEAP8[$$byval_copy78>>0]=HEAP8[$63>>0]|0;HEAP8[$$byval_copy78+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$$byval_copy78+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$$byval_copy78+3>>0]=HEAP8[$63+3>>0]|0;
    _nk_chart_add_slot_colored($925,0,$$byval_copy77,$$byval_copy78,32,-1.0,1.0);
    $926 = $1;
    _nk_rgb($64,0,255,0);
    _nk_rgb($65,0,150,0);
    ;HEAP8[$$byval_copy79>>0]=HEAP8[$64>>0]|0;HEAP8[$$byval_copy79+1>>0]=HEAP8[$64+1>>0]|0;HEAP8[$$byval_copy79+2>>0]=HEAP8[$64+2>>0]|0;HEAP8[$$byval_copy79+3>>0]=HEAP8[$64+3>>0]|0;
    ;HEAP8[$$byval_copy80>>0]=HEAP8[$65>>0]|0;HEAP8[$$byval_copy80+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$$byval_copy80+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$$byval_copy80+3>>0]=HEAP8[$65+3>>0]|0;
    _nk_chart_add_slot_colored($926,0,$$byval_copy79,$$byval_copy80,32,-1.0,1.0);
    $46 = 0.0;
    $48 = 0;
    while(1) {
     $927 = $48;
     $928 = ($927|0)<(32);
     if (!($928)) {
      break L221;
     }
     $929 = $1;
     $930 = $46;
     $931 = $930;
     $932 = (+Math_sin((+$931)));
     $933 = (+Math_abs((+$932)));
     $934 = $933;
     (_nk_chart_push_slot($929,$934,0)|0);
     $935 = $1;
     $936 = $46;
     $937 = $936;
     $938 = (+Math_cos((+$937)));
     $939 = $938;
     (_nk_chart_push_slot($935,$939,1)|0);
     $940 = $1;
     $941 = $46;
     $942 = $941;
     $943 = (+Math_sin((+$942)));
     $944 = $943;
     (_nk_chart_push_slot($940,$944,2)|0);
     $945 = $47;
     $946 = $46;
     $947 = $946 + $945;
     $46 = $947;
     $948 = $48;
     $949 = (($948) + 1)|0;
     $48 = $949;
    }
   }
  } while(0);
  $950 = $1;
  _nk_chart_end($950);
  $951 = $1;
  _nk_tree_pop($951);
 }
 $952 = $1;
 $953 = (_nk_strlen(26535)|0);
 $954 = (_nk_tree_push_hashed($952,1,26529,0,26535,$953,632)|0);
 $955 = ($954|0)!=(0);
 if ($955) {
  $956 = $1;
  $66 = $956;
  $957 = $1;
  _nk_layout_row_static($957,30.0,150,1);
  $958 = $1;
  _nk_widget_bounds($68,$958);
  ;HEAP32[$67>>2]=HEAP32[$68>>2]|0;HEAP32[$67+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$67+12>>2]=HEAP32[$68+12>>2]|0;
  $959 = $1;
  _nk_label($959,26556,17);
  $960 = $1;
  _nk_vec2($69,100.0,300.0);
  ;HEAP32[$$byval_copy81>>2]=HEAP32[$69>>2]|0;HEAP32[$$byval_copy81+4>>2]=HEAP32[$69+4>>2]|0;
  ;HEAP32[$$byval_copy82>>2]=HEAP32[$67>>2]|0;HEAP32[$$byval_copy82+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$$byval_copy82+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$$byval_copy82+12>>2]=HEAP32[$67+12>>2]|0;
  $961 = (_nk_contextual_begin($960,0,$$byval_copy81,$$byval_copy82)|0);
  $962 = ($961|0)!=(0);
  if ($962) {
   $963 = $1;
   _nk_layout_row_dynamic($963,25.0,1);
   $964 = $1;
   (_nk_checkbox_label($964,25357,392)|0);
   $965 = $1;
   (_nk_progress($965,828,100,1)|0);
   $966 = $1;
   (_nk_slider_int($966,0,832,16,1)|0);
   $967 = $1;
   $968 = (_nk_contextual_item_label($967,25236,18)|0);
   $969 = ($968|0)!=(0);
   if ($969) {
    HEAP32[12350] = 1;
   }
   $970 = $1;
   $971 = HEAP32[12400]|0;
   $972 = ($971|0)!=(0);
   $973 = $972 ? 26580 : 26589;
   (_nk_selectable_label($970,$973,17,49600)|0);
   $974 = $1;
   $975 = HEAP32[(49604)>>2]|0;
   $976 = ($975|0)!=(0);
   $977 = $976 ? 26580 : 26589;
   (_nk_selectable_label($974,$977,17,(49604))|0);
   $978 = $1;
   $979 = HEAP32[(49608)>>2]|0;
   $980 = ($979|0)!=(0);
   $981 = $980 ? 26580 : 26589;
   (_nk_selectable_label($978,$981,17,(49608))|0);
   $982 = $1;
   $983 = HEAP32[(49612)>>2]|0;
   $984 = ($983|0)!=(0);
   $985 = $984 ? 26580 : 26589;
   (_nk_selectable_label($982,$985,17,(49612))|0);
   $986 = $1;
   _nk_contextual_end($986);
  }
  $987 = $1;
  _nk_layout_row_begin($987,1,30.0,2);
  $988 = $1;
  _nk_layout_row_push($988,100.0);
  $989 = $1;
  _nk_label($989,26596,17);
  $990 = $1;
  _nk_layout_row_push($990,50.0);
  $991 = $1;
  _nk_widget_bounds($70,$991);
  ;HEAP32[$67>>2]=HEAP32[$70>>2]|0;HEAP32[$67+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$70+8>>2]|0;HEAP32[$67+12>>2]=HEAP32[$70+12>>2]|0;
  $992 = $1;
  ;HEAP8[$overview$color$byval_copy>>0]=HEAP8[26552>>0]|0;HEAP8[$overview$color$byval_copy+1>>0]=HEAP8[26552+1>>0]|0;HEAP8[$overview$color$byval_copy+2>>0]=HEAP8[26552+2>>0]|0;HEAP8[$overview$color$byval_copy+3>>0]=HEAP8[26552+3>>0]|0;
  (_nk_button_color($992,$overview$color$byval_copy)|0);
  $993 = $1;
  _nk_layout_row_end($993);
  $994 = $1;
  _nk_vec2($71,350.0,60.0);
  ;HEAP32[$$byval_copy83>>2]=HEAP32[$71>>2]|0;HEAP32[$$byval_copy83+4>>2]=HEAP32[$71+4>>2]|0;
  ;HEAP32[$$byval_copy84>>2]=HEAP32[$67>>2]|0;HEAP32[$$byval_copy84+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$$byval_copy84+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$$byval_copy84+12>>2]=HEAP32[$67+12>>2]|0;
  $995 = (_nk_contextual_begin($994,0,$$byval_copy83,$$byval_copy84)|0);
  $996 = ($995|0)!=(0);
  if ($996) {
   $997 = $1;
   _nk_layout_row_dynamic($997,30.0,4);
   $998 = $1;
   $999 = HEAP8[26552]|0;
   $1000 = $999&255;
   $1001 = (_nk_propertyi($998,26614,0,$1000,255,1,1.0)|0);
   $1002 = $1001&255;
   HEAP8[26552] = $1002;
   $1003 = $1;
   $1004 = HEAP8[(26553)>>0]|0;
   $1005 = $1004&255;
   $1006 = (_nk_propertyi($1003,26617,0,$1005,255,1,1.0)|0);
   $1007 = $1006&255;
   HEAP8[(26553)>>0] = $1007;
   $1008 = $1;
   $1009 = HEAP8[(26554)>>0]|0;
   $1010 = $1009&255;
   $1011 = (_nk_propertyi($1008,26620,0,$1010,255,1,1.0)|0);
   $1012 = $1011&255;
   HEAP8[(26554)>>0] = $1012;
   $1013 = $1;
   $1014 = HEAP8[(26555)>>0]|0;
   $1015 = $1014&255;
   $1016 = (_nk_propertyi($1013,26623,0,$1015,255,1,1.0)|0);
   $1017 = $1016&255;
   HEAP8[(26555)>>0] = $1017;
   $1018 = $1;
   _nk_contextual_end($1018);
  }
  $1019 = $1;
  _nk_layout_row_begin($1019,1,30.0,2);
  $1020 = $1;
  _nk_layout_row_push($1020,100.0);
  $1021 = $1;
  _nk_label($1021,26626,17);
  $1022 = $1;
  _nk_layout_row_push($1022,50.0);
  $1023 = $1;
  $1024 = (_nk_button_label($1023,26529)|0);
  $1025 = ($1024|0)!=(0);
  if ($1025) {
   HEAP32[12404] = 1;
  }
  $1026 = $1;
  _nk_layout_row_end($1026);
  $1027 = HEAP32[12404]|0;
  $1028 = ($1027|0)!=(0);
  do {
   if ($1028) {
    $1029 = $1;
    ;HEAP32[$overview$s$448$byval_copy>>2]=HEAP32[836>>2]|0;HEAP32[$overview$s$448$byval_copy+4>>2]=HEAP32[836+4>>2]|0;HEAP32[$overview$s$448$byval_copy+8>>2]=HEAP32[836+8>>2]|0;HEAP32[$overview$s$448$byval_copy+12>>2]=HEAP32[836+12>>2]|0;
    $1030 = (_nk_popup_begin($1029,0,26633,0,$overview$s$448$byval_copy)|0);
    $1031 = ($1030|0)!=(0);
    if (!($1031)) {
     HEAP32[12404] = 0;
     break;
    }
    $1032 = $1;
    _nk_layout_row_dynamic($1032,25.0,1);
    $1033 = $1;
    _nk_label($1033,26639,17);
    $1034 = $1;
    _nk_layout_row_dynamic($1034,25.0,2);
    $1035 = $1;
    $1036 = (_nk_button_label($1035,26667)|0);
    $1037 = ($1036|0)!=(0);
    if ($1037) {
     HEAP32[12404] = 0;
     $1038 = $1;
     _nk_popup_close($1038);
    }
    $1039 = $1;
    $1040 = (_nk_button_label($1039,26670)|0);
    $1041 = ($1040|0)!=(0);
    if ($1041) {
     HEAP32[12404] = 0;
     $1042 = $1;
     _nk_popup_close($1042);
    }
    $1043 = $1;
    _nk_popup_end($1043);
   }
  } while(0);
  $1044 = $1;
  _nk_layout_row_static($1044,30.0,150,1);
  $1045 = $1;
  _nk_widget_bounds($72,$1045);
  ;HEAP32[$67>>2]=HEAP32[$72>>2]|0;HEAP32[$67+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$72+8>>2]|0;HEAP32[$67+12>>2]=HEAP32[$72+12>>2]|0;
  $1046 = $1;
  _nk_label($1046,26677,17);
  $1047 = $66;
  ;HEAP32[$$byval_copy85>>2]=HEAP32[$67>>2]|0;HEAP32[$$byval_copy85+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$$byval_copy85+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$$byval_copy85+12>>2]=HEAP32[$67+12>>2]|0;
  $1048 = (_nk_input_is_mouse_hovering_rect($1047,$$byval_copy85)|0);
  $1049 = ($1048|0)!=(0);
  if ($1049) {
   $1050 = $1;
   _nk_tooltip($1050,26698);
  }
  $1051 = $1;
  _nk_tree_pop($1051);
 }
 $1052 = $1;
 $1053 = (_nk_strlen(26723)|0);
 $1054 = (_nk_tree_push_hashed($1052,1,26716,0,26723,$1053,719)|0);
 $1055 = ($1054|0)!=(0);
 if (!($1055)) {
  $1681 = $1;
  _nk_end($1681);
  $1682 = $1;
  $1683 = (_nk_window_is_closed($1682,25217)|0);
  $1684 = ($1683|0)!=(0);
  $1685 = $1684 ^ 1;
  $1686 = $1685&1;
  STACKTOP = sp;return ($1686|0);
 }
 $1056 = $1;
 $1057 = (_nk_strlen(26747)|0);
 $1058 = (_nk_tree_push_hashed($1056,0,26740,0,26747,$1057,721)|0);
 $1059 = ($1058|0)!=(0);
 if ($1059) {
  ;HEAP32[$73>>2]=HEAP32[852>>2]|0;HEAP32[$73+4>>2]=HEAP32[852+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[852+8>>2]|0;
  ;HEAP32[$74>>2]=HEAP32[864>>2]|0;HEAP32[$74+4>>2]=HEAP32[864+4>>2]|0;HEAP32[$74+8>>2]=HEAP32[864+8>>2]|0;
  $1060 = $1;
  _nk_layout_row_dynamic($1060,30.0,1);
  $1061 = $1;
  _nk_label($1061,26764,17);
  $1062 = $1;
  _nk_layout_row_dynamic($1062,30.0,3);
  $1063 = $1;
  (_nk_button_label($1063,21403)|0);
  $1064 = $1;
  (_nk_button_label($1064,21403)|0);
  $1065 = $1;
  (_nk_button_label($1065,21403)|0);
  $1066 = $1;
  _nk_layout_row_dynamic($1066,30.0,1);
  $1067 = $1;
  _nk_label($1067,26826,17);
  $1068 = $1;
  _nk_layout_row_static($1068,30.0,100,3);
  $1069 = $1;
  (_nk_button_label($1069,21403)|0);
  $1070 = $1;
  (_nk_button_label($1070,21403)|0);
  $1071 = $1;
  (_nk_button_label($1071,21403)|0);
  $1072 = $1;
  _nk_layout_row_dynamic($1072,30.0,1);
  $1073 = $1;
  _nk_label($1073,26887,17);
  $1074 = $1;
  _nk_layout_row($1074,0,30.0,3,$73);
  $1075 = $1;
  (_nk_button_label($1075,21403)|0);
  $1076 = $1;
  (_nk_button_label($1076,21403)|0);
  $1077 = $1;
  (_nk_button_label($1077,21403)|0);
  $1078 = $1;
  _nk_layout_row_dynamic($1078,30.0,1);
  $1079 = $1;
  _nk_label($1079,26969,17);
  $1080 = $1;
  _nk_layout_row($1080,1,30.0,3,$74);
  $1081 = $1;
  (_nk_button_label($1081,21403)|0);
  $1082 = $1;
  (_nk_button_label($1082,21403)|0);
  $1083 = $1;
  (_nk_button_label($1083,21403)|0);
  $1084 = $1;
  _nk_layout_row_dynamic($1084,30.0,1);
  $1085 = $1;
  _nk_label($1085,27050,17);
  $1086 = $1;
  _nk_layout_row_begin($1086,0,30.0,3);
  $1087 = $1;
  _nk_layout_row_push($1087,0.20000000298023224);
  $1088 = $1;
  (_nk_button_label($1088,21403)|0);
  $1089 = $1;
  _nk_layout_row_push($1089,0.60000002384185791);
  $1090 = $1;
  (_nk_button_label($1090,21403)|0);
  $1091 = $1;
  _nk_layout_row_push($1091,0.20000000298023224);
  $1092 = $1;
  (_nk_button_label($1092,21403)|0);
  $1093 = $1;
  _nk_layout_row_end($1093);
  $1094 = $1;
  _nk_layout_row_dynamic($1094,30.0,1);
  $1095 = $1;
  _nk_label($1095,27135,17);
  $1096 = $1;
  _nk_layout_row_begin($1096,1,30.0,3);
  $1097 = $1;
  _nk_layout_row_push($1097,100.0);
  $1098 = $1;
  (_nk_button_label($1098,21403)|0);
  $1099 = $1;
  _nk_layout_row_push($1099,200.0);
  $1100 = $1;
  (_nk_button_label($1100,21403)|0);
  $1101 = $1;
  _nk_layout_row_push($1101,50.0);
  $1102 = $1;
  (_nk_button_label($1102,21403)|0);
  $1103 = $1;
  _nk_layout_row_end($1103);
  $1104 = $1;
  _nk_layout_row_dynamic($1104,30.0,1);
  $1105 = $1;
  _nk_label($1105,27219,17);
  $1106 = $1;
  _nk_layout_space_begin($1106,1,120.0,4);
  $1107 = $1;
  _nk_rect($75,100.0,0.0,100.0,30.0);
  ;HEAP32[$$byval_copy86>>2]=HEAP32[$75>>2]|0;HEAP32[$$byval_copy86+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$$byval_copy86+8>>2]=HEAP32[$75+8>>2]|0;HEAP32[$$byval_copy86+12>>2]=HEAP32[$75+12>>2]|0;
  _nk_layout_space_push($1107,$$byval_copy86);
  $1108 = $1;
  (_nk_button_label($1108,21403)|0);
  $1109 = $1;
  _nk_rect($76,0.0,15.0,100.0,30.0);
  ;HEAP32[$$byval_copy87>>2]=HEAP32[$76>>2]|0;HEAP32[$$byval_copy87+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$$byval_copy87+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$$byval_copy87+12>>2]=HEAP32[$76+12>>2]|0;
  _nk_layout_space_push($1109,$$byval_copy87);
  $1110 = $1;
  (_nk_button_label($1110,21403)|0);
  $1111 = $1;
  _nk_rect($77,200.0,15.0,100.0,30.0);
  ;HEAP32[$$byval_copy88>>2]=HEAP32[$77>>2]|0;HEAP32[$$byval_copy88+4>>2]=HEAP32[$77+4>>2]|0;HEAP32[$$byval_copy88+8>>2]=HEAP32[$77+8>>2]|0;HEAP32[$$byval_copy88+12>>2]=HEAP32[$77+12>>2]|0;
  _nk_layout_space_push($1111,$$byval_copy88);
  $1112 = $1;
  (_nk_button_label($1112,21403)|0);
  $1113 = $1;
  _nk_rect($78,100.0,30.0,100.0,30.0);
  ;HEAP32[$$byval_copy89>>2]=HEAP32[$78>>2]|0;HEAP32[$$byval_copy89+4>>2]=HEAP32[$78+4>>2]|0;HEAP32[$$byval_copy89+8>>2]=HEAP32[$78+8>>2]|0;HEAP32[$$byval_copy89+12>>2]=HEAP32[$78+12>>2]|0;
  _nk_layout_space_push($1113,$$byval_copy89);
  $1114 = $1;
  (_nk_button_label($1114,21403)|0);
  $1115 = $1;
  _nk_layout_space_end($1115);
  $1116 = $1;
  _nk_tree_pop($1116);
 }
 $1117 = $1;
 $1118 = (_nk_strlen(27281)|0);
 $1119 = (_nk_tree_push_hashed($1117,0,27275,0,27281,$1118,791)|0);
 $1120 = ($1119|0)!=(0);
 if ($1120) {
  $79 = 0;
  $1121 = HEAP32[219]|0;
  $1122 = ($1121|0)!=(0);
  if ($1122) {
   $1123 = $79;
   $1124 = $1123 | 1;
   $79 = $1124;
  }
  $1125 = HEAP32[12406]|0;
  $1126 = ($1125|0)!=(0);
  if ($1126) {
   $1127 = $79;
   $1128 = $1127 | 32;
   $79 = $1128;
  }
  $1129 = HEAP32[12405]|0;
  $1130 = ($1129|0)!=(0);
  if ($1130) {
   $1131 = $79;
   $1132 = $1131 | 64;
   $79 = $1132;
  }
  $1133 = $1;
  _nk_layout_row_dynamic($1133,30.0,3);
  $1134 = $1;
  (_nk_checkbox_label($1134,25348,49620)|0);
  $1135 = $1;
  (_nk_checkbox_label($1135,25362,876)|0);
  $1136 = $1;
  (_nk_checkbox_label($1136,25387,49624)|0);
  $1137 = $1;
  _nk_layout_row_begin($1137,1,22.0,3);
  $1138 = $1;
  _nk_layout_row_push($1138,50.0);
  $1139 = $1;
  _nk_label($1139,27298,17);
  $1140 = $1;
  _nk_layout_row_push($1140,130.0);
  $1141 = $1;
  _nk_property_int($1141,27304,100,880,500,10,1.0);
  $1142 = $1;
  _nk_layout_row_push($1142,130.0);
  $1143 = $1;
  _nk_property_int($1143,27312,100,884,500,10,1.0);
  $1144 = $1;
  _nk_layout_row_end($1144);
  $1145 = $1;
  $1146 = HEAP32[221]|0;
  $1147 = (+($1146|0));
  $1148 = HEAP32[220]|0;
  _nk_layout_row_static($1145,$1147,$1148,2);
  $1149 = $1;
  $1150 = $79;
  $1151 = (_nk_group_begin($1149,27275,$1150)|0);
  $1152 = ($1151|0)!=(0);
  if ($1152) {
   $80 = 0;
   $1153 = $1;
   _nk_layout_row_static($1153,18.0,100,1);
   $80 = 0;
   while(1) {
    $1154 = $80;
    $1155 = ($1154|0)<(16);
    $1156 = $1;
    if (!($1155)) {
     break;
    }
    $1157 = $80;
    $1158 = (49628 + ($1157<<2)|0);
    $1159 = HEAP32[$1158>>2]|0;
    $1160 = ($1159|0)!=(0);
    $1161 = $1160 ? 27321 : 27330;
    $1162 = $80;
    $1163 = (49628 + ($1162<<2)|0);
    (_nk_selectable_label($1156,$1161,18,$1163)|0);
    $1164 = $80;
    $1165 = (($1164) + 1)|0;
    $80 = $1165;
   }
   _nk_group_end($1156);
  }
  $1166 = $1;
  _nk_tree_pop($1166);
 }
 $1167 = $1;
 $1168 = (_nk_strlen(27350)|0);
 $1169 = (_nk_tree_push_hashed($1167,0,27341,0,27350,$1168,830)|0);
 $1170 = ($1169|0)!=(0);
 if ($1170) {
  $82 = 0.19634954631328583;
  ;HEAP32[$83>>2]=HEAP32[888>>2]|0;HEAP32[$83+4>>2]=HEAP32[888+4>>2]|0;HEAP32[$83+8>>2]=HEAP32[888+8>>2]|0;
  $84 = 0.0;
  $1171 = $1;
  $1172 = $1;
  $1173 = ((($1172)) + 340|0);
  $1174 = ((($1173)) + 4832|0);
  $1175 = ((($1174)) + 472|0);
  _nk_vec2($86,0.0,0.0);
  ;HEAP32[$$byval_copy90>>2]=HEAP32[$86>>2]|0;HEAP32[$$byval_copy90+4>>2]=HEAP32[$86+4>>2]|0;
  (_nk_style_push_vec2($1171,$1175,$$byval_copy90)|0);
  $1176 = $1;
  $1177 = $1;
  $1178 = ((($1177)) + 340|0);
  $1179 = ((($1178)) + 56|0);
  $1180 = ((($1179)) + 88|0);
  (_nk_style_push_float($1176,$1180,0.0)|0);
  $1181 = $1;
  _nk_layout_row_begin($1181,1,20.0,3);
  $85 = 0;
  while(1) {
   $1182 = $85;
   $1183 = ($1182|0)<(3);
   $1184 = $1;
   if (!($1183)) {
    break;
   }
   $1185 = ((($1184)) + 340|0);
   $1186 = HEAP32[$1185>>2]|0;
   $87 = $1186;
   $1187 = $87;
   $1188 = ((($1187)) + 8|0);
   $1189 = HEAP32[$1188>>2]|0;
   $1190 = $87;
   $1191 = $87;
   $1192 = ((($1191)) + 4|0);
   $1193 = +HEAPF32[$1192>>2];
   $1194 = $85;
   $1195 = (($83) + ($1194<<2)|0);
   $1196 = HEAP32[$1195>>2]|0;
   $1197 = $85;
   $1198 = (($83) + ($1197<<2)|0);
   $1199 = HEAP32[$1198>>2]|0;
   $1200 = (_nk_strlen($1199)|0);
   ;HEAP32[$$byval_copy91>>2]=HEAP32[$1190>>2]|0;
   $1201 = (+FUNCTION_TABLE_didii[$1189 & 15]($$byval_copy91,$1193,$1196,$1200));
   $88 = $1201;
   $1202 = $88;
   $1203 = $1;
   $1204 = ((($1203)) + 340|0);
   $1205 = ((($1204)) + 56|0);
   $1206 = ((($1205)) + 92|0);
   $1207 = +HEAPF32[$1206>>2];
   $1208 = 3.0 * $1207;
   $1209 = $1202 + $1208;
   $89 = $1209;
   $1210 = $1;
   $1211 = $89;
   _nk_layout_row_push($1210,$1211);
   $1212 = HEAP32[12423]|0;
   $1213 = $85;
   $1214 = ($1212|0)==($1213|0);
   $1215 = $1;
   if ($1214) {
    $1216 = ((($1215)) + 340|0);
    $1217 = ((($1216)) + 56|0);
    ;HEAP32[$90>>2]=HEAP32[$1217>>2]|0;HEAP32[$90+4>>2]=HEAP32[$1217+4>>2]|0;HEAP32[$90+8>>2]=HEAP32[$1217+8>>2]|0;HEAP32[$90+12>>2]=HEAP32[$1217+12>>2]|0;HEAP32[$90+16>>2]=HEAP32[$1217+16>>2]|0;
    $1218 = $1;
    $1219 = ((($1218)) + 340|0);
    $1220 = ((($1219)) + 56|0);
    $1221 = $1;
    $1222 = ((($1221)) + 340|0);
    $1223 = ((($1222)) + 56|0);
    $1224 = ((($1223)) + 40|0);
    ;HEAP32[$1220>>2]=HEAP32[$1224>>2]|0;HEAP32[$1220+4>>2]=HEAP32[$1224+4>>2]|0;HEAP32[$1220+8>>2]=HEAP32[$1224+8>>2]|0;HEAP32[$1220+12>>2]=HEAP32[$1224+12>>2]|0;HEAP32[$1220+16>>2]=HEAP32[$1224+16>>2]|0;
    $1225 = $1;
    $1226 = $85;
    $1227 = (($83) + ($1226<<2)|0);
    $1228 = HEAP32[$1227>>2]|0;
    $1229 = (_nk_button_label($1225,$1228)|0);
    $1230 = ($1229|0)!=(0);
    $1231 = $85;
    $1232 = HEAP32[12423]|0;
    $1233 = $1230 ? $1231 : $1232;
    HEAP32[12423] = $1233;
    $1234 = $1;
    $1235 = ((($1234)) + 340|0);
    $1236 = ((($1235)) + 56|0);
    ;HEAP32[$1236>>2]=HEAP32[$90>>2]|0;HEAP32[$1236+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$1236+8>>2]=HEAP32[$90+8>>2]|0;HEAP32[$1236+12>>2]=HEAP32[$90+12>>2]|0;HEAP32[$1236+16>>2]=HEAP32[$90+16>>2]|0;
   } else {
    $1237 = $85;
    $1238 = (($83) + ($1237<<2)|0);
    $1239 = HEAP32[$1238>>2]|0;
    $1240 = (_nk_button_label($1215,$1239)|0);
    $1241 = ($1240|0)!=(0);
    $1242 = $85;
    $1243 = HEAP32[12423]|0;
    $1244 = $1241 ? $1242 : $1243;
    HEAP32[12423] = $1244;
   }
   $1245 = $85;
   $1246 = (($1245) + 1)|0;
   $85 = $1246;
  }
  (_nk_style_pop_float($1184)|0);
  $1247 = $1;
  _nk_layout_row_dynamic($1247,140.0,1);
  $1248 = $1;
  $1249 = (_nk_group_begin($1248,27341,1)|0);
  $1250 = ($1249|0)!=(0);
  $1251 = $1;
  (_nk_style_pop_vec2($1251)|0);
  if ($1250) {
   $1252 = HEAP32[12423]|0;
   switch ($1252|0) {
   case 0:  {
    $1253 = $1;
    _nk_layout_row_dynamic($1253,100.0,1);
    $1254 = $1;
    _nk_widget_bounds($91,$1254);
    ;HEAP32[$81>>2]=HEAP32[$91>>2]|0;HEAP32[$81+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$91+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$91+12>>2]|0;
    $1255 = $1;
    _nk_rgb($92,255,0,0);
    _nk_rgb($93,150,0,0);
    ;HEAP8[$$byval_copy92>>0]=HEAP8[$92>>0]|0;HEAP8[$$byval_copy92+1>>0]=HEAP8[$92+1>>0]|0;HEAP8[$$byval_copy92+2>>0]=HEAP8[$92+2>>0]|0;HEAP8[$$byval_copy92+3>>0]=HEAP8[$92+3>>0]|0;
    ;HEAP8[$$byval_copy93>>0]=HEAP8[$93>>0]|0;HEAP8[$$byval_copy93+1>>0]=HEAP8[$93+1>>0]|0;HEAP8[$$byval_copy93+2>>0]=HEAP8[$93+2>>0]|0;HEAP8[$$byval_copy93+3>>0]=HEAP8[$93+3>>0]|0;
    $1256 = (_nk_chart_begin_colored($1255,0,$$byval_copy92,$$byval_copy93,32,0.0,1.0)|0);
    $1257 = ($1256|0)!=(0);
    L297: do {
     if ($1257) {
      $1258 = $1;
      _nk_rgb($94,0,0,255);
      _nk_rgb($95,0,0,150);
      ;HEAP8[$$byval_copy94>>0]=HEAP8[$94>>0]|0;HEAP8[$$byval_copy94+1>>0]=HEAP8[$94+1>>0]|0;HEAP8[$$byval_copy94+2>>0]=HEAP8[$94+2>>0]|0;HEAP8[$$byval_copy94+3>>0]=HEAP8[$94+3>>0]|0;
      ;HEAP8[$$byval_copy95>>0]=HEAP8[$95>>0]|0;HEAP8[$$byval_copy95+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$$byval_copy95+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$$byval_copy95+3>>0]=HEAP8[$95+3>>0]|0;
      _nk_chart_add_slot_colored($1258,0,$$byval_copy94,$$byval_copy95,32,-1.0,1.0);
      $85 = 0;
      $84 = 0.0;
      while(1) {
       $1259 = $85;
       $1260 = ($1259|0)<(32);
       if (!($1260)) {
        break L297;
       }
       $1261 = $1;
       $1262 = $84;
       $1263 = $1262;
       $1264 = (+Math_sin((+$1263)));
       $1265 = (+Math_abs((+$1264)));
       $1266 = $1265;
       (_nk_chart_push_slot($1261,$1266,0)|0);
       $1267 = $1;
       $1268 = $84;
       $1269 = $1268;
       $1270 = (+Math_cos((+$1269)));
       $1271 = $1270;
       (_nk_chart_push_slot($1267,$1271,1)|0);
       $1272 = $82;
       $1273 = $84;
       $1274 = $1273 + $1272;
       $84 = $1274;
       $1275 = $85;
       $1276 = (($1275) + 1)|0;
       $85 = $1276;
      }
     }
    } while(0);
    $1277 = $1;
    _nk_chart_end($1277);
    break;
   }
   case 1:  {
    $1278 = $1;
    _nk_layout_row_dynamic($1278,100.0,1);
    $1279 = $1;
    _nk_widget_bounds($96,$1279);
    ;HEAP32[$81>>2]=HEAP32[$96>>2]|0;HEAP32[$81+4>>2]=HEAP32[$96+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$96+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$96+12>>2]|0;
    $1280 = $1;
    _nk_rgb($97,255,0,0);
    _nk_rgb($98,150,0,0);
    ;HEAP8[$$byval_copy96>>0]=HEAP8[$97>>0]|0;HEAP8[$$byval_copy96+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$$byval_copy96+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$$byval_copy96+3>>0]=HEAP8[$97+3>>0]|0;
    ;HEAP8[$$byval_copy97>>0]=HEAP8[$98>>0]|0;HEAP8[$$byval_copy97+1>>0]=HEAP8[$98+1>>0]|0;HEAP8[$$byval_copy97+2>>0]=HEAP8[$98+2>>0]|0;HEAP8[$$byval_copy97+3>>0]=HEAP8[$98+3>>0]|0;
    $1281 = (_nk_chart_begin_colored($1280,1,$$byval_copy96,$$byval_copy97,32,0.0,1.0)|0);
    $1282 = ($1281|0)!=(0);
    L304: do {
     if ($1282) {
      $85 = 0;
      $84 = 0.0;
      while(1) {
       $1283 = $85;
       $1284 = ($1283|0)<(32);
       if (!($1284)) {
        break L304;
       }
       $1285 = $1;
       $1286 = $84;
       $1287 = $1286;
       $1288 = (+Math_sin((+$1287)));
       $1289 = (+Math_abs((+$1288)));
       $1290 = $1289;
       (_nk_chart_push_slot($1285,$1290,0)|0);
       $1291 = $82;
       $1292 = $84;
       $1293 = $1292 + $1291;
       $84 = $1293;
       $1294 = $85;
       $1295 = (($1294) + 1)|0;
       $85 = $1295;
      }
     }
    } while(0);
    $1296 = $1;
    _nk_chart_end($1296);
    break;
   }
   case 2:  {
    $1297 = $1;
    _nk_layout_row_dynamic($1297,100.0,1);
    $1298 = $1;
    _nk_widget_bounds($99,$1298);
    ;HEAP32[$81>>2]=HEAP32[$99>>2]|0;HEAP32[$81+4>>2]=HEAP32[$99+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$99+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$99+12>>2]|0;
    $1299 = $1;
    _nk_rgb($100,255,0,0);
    _nk_rgb($101,150,0,0);
    ;HEAP8[$$byval_copy98>>0]=HEAP8[$100>>0]|0;HEAP8[$$byval_copy98+1>>0]=HEAP8[$100+1>>0]|0;HEAP8[$$byval_copy98+2>>0]=HEAP8[$100+2>>0]|0;HEAP8[$$byval_copy98+3>>0]=HEAP8[$100+3>>0]|0;
    ;HEAP8[$$byval_copy99>>0]=HEAP8[$101>>0]|0;HEAP8[$$byval_copy99+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$$byval_copy99+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$$byval_copy99+3>>0]=HEAP8[$101+3>>0]|0;
    $1300 = (_nk_chart_begin_colored($1299,0,$$byval_copy98,$$byval_copy99,32,0.0,1.0)|0);
    $1301 = ($1300|0)!=(0);
    L311: do {
     if ($1301) {
      $1302 = $1;
      _nk_rgb($102,0,0,255);
      _nk_rgb($103,0,0,150);
      ;HEAP8[$$byval_copy100>>0]=HEAP8[$102>>0]|0;HEAP8[$$byval_copy100+1>>0]=HEAP8[$102+1>>0]|0;HEAP8[$$byval_copy100+2>>0]=HEAP8[$102+2>>0]|0;HEAP8[$$byval_copy100+3>>0]=HEAP8[$102+3>>0]|0;
      ;HEAP8[$$byval_copy101>>0]=HEAP8[$103>>0]|0;HEAP8[$$byval_copy101+1>>0]=HEAP8[$103+1>>0]|0;HEAP8[$$byval_copy101+2>>0]=HEAP8[$103+2>>0]|0;HEAP8[$$byval_copy101+3>>0]=HEAP8[$103+3>>0]|0;
      _nk_chart_add_slot_colored($1302,0,$$byval_copy100,$$byval_copy101,32,-1.0,1.0);
      $1303 = $1;
      _nk_rgb($104,0,255,0);
      _nk_rgb($105,0,150,0);
      ;HEAP8[$$byval_copy102>>0]=HEAP8[$104>>0]|0;HEAP8[$$byval_copy102+1>>0]=HEAP8[$104+1>>0]|0;HEAP8[$$byval_copy102+2>>0]=HEAP8[$104+2>>0]|0;HEAP8[$$byval_copy102+3>>0]=HEAP8[$104+3>>0]|0;
      ;HEAP8[$$byval_copy103>>0]=HEAP8[$105>>0]|0;HEAP8[$$byval_copy103+1>>0]=HEAP8[$105+1>>0]|0;HEAP8[$$byval_copy103+2>>0]=HEAP8[$105+2>>0]|0;HEAP8[$$byval_copy103+3>>0]=HEAP8[$105+3>>0]|0;
      _nk_chart_add_slot_colored($1303,1,$$byval_copy102,$$byval_copy103,32,0.0,1.0);
      $85 = 0;
      $84 = 0.0;
      while(1) {
       $1304 = $85;
       $1305 = ($1304|0)<(32);
       if (!($1305)) {
        break L311;
       }
       $1306 = $1;
       $1307 = $84;
       $1308 = $1307;
       $1309 = (+Math_sin((+$1308)));
       $1310 = (+Math_abs((+$1309)));
       $1311 = $1310;
       (_nk_chart_push_slot($1306,$1311,0)|0);
       $1312 = $1;
       $1313 = $84;
       $1314 = $1313;
       $1315 = (+Math_cos((+$1314)));
       $1316 = (+Math_abs((+$1315)));
       $1317 = $1316;
       (_nk_chart_push_slot($1312,$1317,1)|0);
       $1318 = $1;
       $1319 = $84;
       $1320 = $1319;
       $1321 = (+Math_sin((+$1320)));
       $1322 = (+Math_abs((+$1321)));
       $1323 = $1322;
       (_nk_chart_push_slot($1318,$1323,2)|0);
       $1324 = $82;
       $1325 = $84;
       $1326 = $1325 + $1324;
       $84 = $1326;
       $1327 = $85;
       $1328 = (($1327) + 1)|0;
       $85 = $1328;
      }
     }
    } while(0);
    $1329 = $1;
    _nk_chart_end($1329);
    break;
   }
   default: {
   }
   }
   $1330 = $1;
   _nk_group_end($1330);
  }
  $1331 = $1;
  _nk_tree_pop($1331);
 }
 $1332 = $1;
 $1333 = (_nk_strlen(27394)|0);
 $1334 = (_nk_tree_push_hashed($1332,0,27387,0,27394,$1333,912)|0);
 $1335 = ($1334|0)!=(0);
 if ($1335) {
  $1336 = $1;
  _nk_layout_row_dynamic($1336,300.0,2);
  $1337 = $1;
  $1338 = (_nk_group_begin($1337,27411,0)|0);
  $1339 = ($1338|0)!=(0);
  if ($1339) {
   $106 = 0;
   $1340 = $1;
   _nk_layout_row_static($1340,18.0,150,1);
   $106 = 0;
   while(1) {
    $1341 = $106;
    $1342 = ($1341|0)<(64);
    if (!($1342)) {
     break;
    }
    $1343 = $106;
    HEAP32[$vararg_buffer51>>2] = $1343;
    (_sprintf($107,27432,$vararg_buffer51)|0);
    $1344 = $1;
    HEAP32[$vararg_buffer54>>2] = $107;
    _nk_labelf($1344,17,27439,$vararg_buffer54);
    $1345 = $106;
    $1346 = (($1345) + 1)|0;
    $106 = $1346;
   }
   $1347 = $1;
   _nk_group_end($1347);
  }
  $1348 = $1;
  $1349 = (_nk_group_begin($1348,27461,1)|0);
  $1350 = ($1349|0)!=(0);
  if ($1350) {
   $108 = 0;
   $1351 = $1;
   _nk_layout_row_dynamic($1351,25.0,2);
   $108 = 0;
   while(1) {
    $1352 = $108;
    $1353 = ($1352|0)<(64);
    if (!($1353)) {
     break;
    }
    $1354 = $108;
    $1355 = (($1354|0) % 7)&-1;
    $1356 = ($1355*10)|0;
    $1357 = $1356 ^ 32;
    $1358 = $108;
    $1359 = (($1358|0) % 2)&-1;
    $1360 = $1359<<1;
    $1361 = (64 + ($1360))|0;
    $1362 = (($1357) + ($1361))|0;
    HEAP32[$vararg_buffer57>>2] = $1362;
    (_sprintf($109,27479,$vararg_buffer57)|0);
    $1363 = $1;
    (_nk_button_label($1363,$109)|0);
    $1364 = $108;
    $1365 = (($1364) + 1)|0;
    $108 = $1365;
   }
   $1366 = $1;
   _nk_group_end($1366);
  }
  $1367 = $1;
  _nk_tree_pop($1367);
 }
 $1368 = $1;
 $1369 = (_nk_strlen(27492)|0);
 $1370 = (_nk_tree_push_hashed($1368,0,27484,0,27492,$1369,938)|0);
 $1371 = ($1370|0)!=(0);
 if ($1371) {
  $1372 = $1;
  _nk_layout_space_begin($1372,1,500.0,64);
  $1373 = $1;
  _nk_rect($111,0.0,0.0,150.0,500.0);
  ;HEAP32[$$byval_copy104>>2]=HEAP32[$111>>2]|0;HEAP32[$$byval_copy104+4>>2]=HEAP32[$111+4>>2]|0;HEAP32[$$byval_copy104+8>>2]=HEAP32[$111+8>>2]|0;HEAP32[$$byval_copy104+12>>2]=HEAP32[$111+12>>2]|0;
  _nk_layout_space_push($1373,$$byval_copy104);
  $1374 = $1;
  $1375 = (_nk_group_begin($1374,27509,1)|0);
  $1376 = ($1375|0)!=(0);
  if ($1376) {
   $1377 = $1;
   _nk_layout_row_static($1377,18.0,100,1);
   $110 = 0;
   while(1) {
    $1378 = $110;
    $1379 = ($1378|0)<(32);
    $1380 = $1;
    if (!($1379)) {
     break;
    }
    $1381 = $110;
    $1382 = (49696 + ($1381<<2)|0);
    $1383 = HEAP32[$1382>>2]|0;
    $1384 = ($1383|0)!=(0);
    $1385 = $1384 ? 27321 : 27330;
    $1386 = $110;
    $1387 = (49696 + ($1386<<2)|0);
    (_nk_selectable_label($1380,$1385,18,$1387)|0);
    $1388 = $110;
    $1389 = (($1388) + 1)|0;
    $110 = $1389;
   }
   _nk_group_end($1380);
  }
  $1390 = $1;
  _nk_rect($112,160.0,0.0,150.0,240.0);
  ;HEAP32[$$byval_copy105>>2]=HEAP32[$112>>2]|0;HEAP32[$$byval_copy105+4>>2]=HEAP32[$112+4>>2]|0;HEAP32[$$byval_copy105+8>>2]=HEAP32[$112+8>>2]|0;HEAP32[$$byval_copy105+12>>2]=HEAP32[$112+12>>2]|0;
  _nk_layout_space_push($1390,$$byval_copy105);
  $1391 = $1;
  $1392 = (_nk_group_begin($1391,27520,1)|0);
  $1393 = ($1392|0)!=(0);
  if ($1393) {
   $1394 = $1;
   _nk_layout_row_dynamic($1394,25.0,1);
   $1395 = $1;
   (_nk_button_label($1395,27530)|0);
   $1396 = $1;
   (_nk_button_label($1396,27536)|0);
   $1397 = $1;
   (_nk_button_label($1397,27542)|0);
   $1398 = $1;
   (_nk_button_label($1398,27548)|0);
   $1399 = $1;
   (_nk_button_label($1399,27554)|0);
   $1400 = $1;
   (_nk_button_label($1400,27560)|0);
   $1401 = $1;
   _nk_group_end($1401);
  }
  $1402 = $1;
  _nk_rect($113,160.0,250.0,150.0,250.0);
  ;HEAP32[$$byval_copy106>>2]=HEAP32[$113>>2]|0;HEAP32[$$byval_copy106+4>>2]=HEAP32[$113+4>>2]|0;HEAP32[$$byval_copy106+8>>2]=HEAP32[$113+8>>2]|0;HEAP32[$$byval_copy106+12>>2]=HEAP32[$113+12>>2]|0;
  _nk_layout_space_push($1402,$$byval_copy106);
  $1403 = $1;
  $1404 = (_nk_group_begin($1403,27566,1)|0);
  $1405 = ($1404|0)!=(0);
  if ($1405) {
   $1406 = $1;
   _nk_layout_row_dynamic($1406,25.0,1);
   $1407 = $1;
   (_nk_button_label($1407,27530)|0);
   $1408 = $1;
   (_nk_button_label($1408,27536)|0);
   $1409 = $1;
   (_nk_button_label($1409,27542)|0);
   $1410 = $1;
   (_nk_button_label($1410,27548)|0);
   $1411 = $1;
   (_nk_button_label($1411,27554)|0);
   $1412 = $1;
   (_nk_button_label($1412,27560)|0);
   $1413 = $1;
   _nk_group_end($1413);
  }
  $1414 = $1;
  _nk_rect($114,320.0,0.0,150.0,150.0);
  ;HEAP32[$$byval_copy107>>2]=HEAP32[$114>>2]|0;HEAP32[$$byval_copy107+4>>2]=HEAP32[$114+4>>2]|0;HEAP32[$$byval_copy107+8>>2]=HEAP32[$114+8>>2]|0;HEAP32[$$byval_copy107+12>>2]=HEAP32[$114+12>>2]|0;
  _nk_layout_space_push($1414,$$byval_copy107);
  $1415 = $1;
  $1416 = (_nk_group_begin($1415,27579,1)|0);
  $1417 = ($1416|0)!=(0);
  if ($1417) {
   $1418 = $1;
   _nk_layout_row_static($1418,18.0,100,1);
   $110 = 0;
   while(1) {
    $1419 = $110;
    $1420 = ($1419|0)<(4);
    $1421 = $1;
    if (!($1420)) {
     break;
    }
    $1422 = $110;
    $1423 = (49824 + ($1422<<2)|0);
    $1424 = HEAP32[$1423>>2]|0;
    $1425 = ($1424|0)!=(0);
    $1426 = $1425 ? 27321 : 27330;
    $1427 = $110;
    $1428 = (49824 + ($1427<<2)|0);
    (_nk_selectable_label($1421,$1426,18,$1428)|0);
    $1429 = $110;
    $1430 = (($1429) + 1)|0;
    $110 = $1430;
   }
   _nk_group_end($1421);
  }
  $1431 = $1;
  _nk_rect($115,320.0,160.0,150.0,150.0);
  ;HEAP32[$$byval_copy108>>2]=HEAP32[$115>>2]|0;HEAP32[$$byval_copy108+4>>2]=HEAP32[$115+4>>2]|0;HEAP32[$$byval_copy108+8>>2]=HEAP32[$115+8>>2]|0;HEAP32[$$byval_copy108+12>>2]=HEAP32[$115+12>>2]|0;
  _nk_layout_space_push($1431,$$byval_copy108);
  $1432 = $1;
  $1433 = (_nk_group_begin($1432,27595,1)|0);
  $1434 = ($1433|0)!=(0);
  if ($1434) {
   $1435 = $1;
   _nk_layout_row_static($1435,18.0,100,1);
   $110 = 0;
   while(1) {
    $1436 = $110;
    $1437 = ($1436|0)<(4);
    $1438 = $1;
    if (!($1437)) {
     break;
    }
    $1439 = $110;
    $1440 = (49840 + ($1439<<2)|0);
    $1441 = HEAP32[$1440>>2]|0;
    $1442 = ($1441|0)!=(0);
    $1443 = $1442 ? 27321 : 27330;
    $1444 = $110;
    $1445 = (49840 + ($1444<<2)|0);
    (_nk_selectable_label($1438,$1443,18,$1445)|0);
    $1446 = $110;
    $1447 = (($1446) + 1)|0;
    $110 = $1447;
   }
   _nk_group_end($1438);
  }
  $1448 = $1;
  _nk_rect($116,320.0,320.0,150.0,150.0);
  ;HEAP32[$$byval_copy109>>2]=HEAP32[$116>>2]|0;HEAP32[$$byval_copy109+4>>2]=HEAP32[$116+4>>2]|0;HEAP32[$$byval_copy109+8>>2]=HEAP32[$116+8>>2]|0;HEAP32[$$byval_copy109+12>>2]=HEAP32[$116+12>>2]|0;
  _nk_layout_space_push($1448,$$byval_copy109);
  $1449 = $1;
  $1450 = (_nk_group_begin($1449,27614,1)|0);
  $1451 = ($1450|0)!=(0);
  if ($1451) {
   $1452 = $1;
   _nk_layout_row_static($1452,18.0,100,1);
   $110 = 0;
   while(1) {
    $1453 = $110;
    $1454 = ($1453|0)<(4);
    $1455 = $1;
    if (!($1454)) {
     break;
    }
    $1456 = $110;
    $1457 = (49856 + ($1456<<2)|0);
    $1458 = HEAP32[$1457>>2]|0;
    $1459 = ($1458|0)!=(0);
    $1460 = $1459 ? 27321 : 27330;
    $1461 = $110;
    $1462 = (49856 + ($1461<<2)|0);
    (_nk_selectable_label($1455,$1460,18,$1462)|0);
    $1463 = $110;
    $1464 = (($1463) + 1)|0;
    $110 = $1464;
   }
   _nk_group_end($1455);
  }
  $1465 = $1;
  _nk_layout_space_end($1465);
  $1466 = $1;
  _nk_tree_pop($1466);
 }
 $1467 = $1;
 $1468 = (_nk_strlen(27642)|0);
 $1469 = (_nk_tree_push_hashed($1467,0,27633,0,27642,$1468,1005)|0);
 $1470 = ($1469|0)!=(0);
 if ($1470) {
  $1471 = $1;
  $117 = $1471;
  $1472 = $1;
  _nk_layout_row_static($1472,20.0,320,1);
  $1473 = $1;
  _nk_label($1473,27660,17);
  $1474 = $1;
  _nk_label($1474,27703,17);
  $1475 = $1;
  $1476 = (_nk_strlen(27762)|0);
  $1477 = (_nk_tree_push_hashed($1475,0,27753,0,27762,$1476,1012)|0);
  $1478 = ($1477|0)!=(0);
  if ($1478) {
   $1479 = +HEAPF32[225];
   HEAPF32[$119>>2] = $1479;
   $1480 = ((($119)) + 4|0);
   HEAPF32[$1480>>2] = 8.0;
   $1481 = +HEAPF32[226];
   $1482 = ((($119)) + 8|0);
   HEAPF32[$1482>>2] = $1481;
   $1483 = ((($119)) + 12|0);
   HEAPF32[$1483>>2] = 8.0;
   $1484 = +HEAPF32[227];
   $1485 = ((($119)) + 16|0);
   HEAPF32[$1485>>2] = $1484;
   $1486 = $1;
   _nk_layout_row_static($1486,30.0,100,2);
   $1487 = $1;
   _nk_label($1487,27780,17);
   $1488 = $1;
   (_nk_slider_float($1488,10.0,900,200.0,10.0)|0);
   $1489 = $1;
   _nk_label($1489,27786,17);
   $1490 = $1;
   (_nk_slider_float($1490,10.0,904,200.0,10.0)|0);
   $1491 = $1;
   _nk_label($1491,27794,17);
   $1492 = $1;
   (_nk_slider_float($1492,10.0,908,200.0,10.0)|0);
   $1493 = $1;
   _nk_layout_row($1493,1,200.0,5,$119);
   $1494 = $1;
   $1495 = (_nk_group_begin($1494,27801,33)|0);
   $1496 = ($1495|0)!=(0);
   if ($1496) {
    $1497 = $1;
    _nk_layout_row_dynamic($1497,25.0,1);
    $1498 = $1;
    (_nk_button_label($1498,27530)|0);
    $1499 = $1;
    (_nk_button_label($1499,27536)|0);
    $1500 = $1;
    (_nk_button_label($1500,27542)|0);
    $1501 = $1;
    (_nk_button_label($1501,27548)|0);
    $1502 = $1;
    (_nk_button_label($1502,27554)|0);
    $1503 = $1;
    (_nk_button_label($1503,27560)|0);
    $1504 = $1;
    _nk_group_end($1504);
   }
   $1505 = $1;
   _nk_widget_bounds($120,$1505);
   ;HEAP32[$118>>2]=HEAP32[$120>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$118+12>>2]=HEAP32[$120+12>>2]|0;
   $1506 = $1;
   _nk_spacing($1506,1);
   $1507 = $117;
   ;HEAP32[$$byval_copy110>>2]=HEAP32[$118>>2]|0;HEAP32[$$byval_copy110+4>>2]=HEAP32[$118+4>>2]|0;HEAP32[$$byval_copy110+8>>2]=HEAP32[$118+8>>2]|0;HEAP32[$$byval_copy110+12>>2]=HEAP32[$118+12>>2]|0;
   $1508 = (_nk_input_is_mouse_hovering_rect($1507,$$byval_copy110)|0);
   $1509 = ($1508|0)!=(0);
   if ($1509) {
    label = 260;
   } else {
    $1510 = $117;
    ;HEAP32[$$byval_copy111>>2]=HEAP32[$118>>2]|0;HEAP32[$$byval_copy111+4>>2]=HEAP32[$118+4>>2]|0;HEAP32[$$byval_copy111+8>>2]=HEAP32[$118+8>>2]|0;HEAP32[$$byval_copy111+12>>2]=HEAP32[$118+12>>2]|0;
    $1511 = (_nk_input_is_mouse_prev_hovering_rect($1510,$$byval_copy111)|0);
    $1512 = ($1511|0)!=(0);
    if ($1512) {
     label = 260;
    }
   }
   do {
    if ((label|0) == 260) {
     $1513 = $117;
     $1514 = (_nk_input_is_mouse_down($1513,0)|0);
     $1515 = ($1514|0)!=(0);
     if (!($1515)) {
      break;
     }
     $1516 = +HEAPF32[$119>>2];
     $1517 = $117;
     $1518 = ((($1517)) + 260|0);
     $1519 = ((($1518)) + 64|0);
     $1520 = +HEAPF32[$1519>>2];
     $1521 = $1516 + $1520;
     HEAPF32[225] = $1521;
     $1522 = ((($119)) + 8|0);
     $1523 = +HEAPF32[$1522>>2];
     $1524 = $117;
     $1525 = ((($1524)) + 260|0);
     $1526 = ((($1525)) + 64|0);
     $1527 = +HEAPF32[$1526>>2];
     $1528 = $1523 - $1527;
     HEAPF32[226] = $1528;
    }
   } while(0);
   $1529 = $1;
   $1530 = (_nk_group_begin($1529,27806,33)|0);
   $1531 = ($1530|0)!=(0);
   if ($1531) {
    $1532 = $1;
    _nk_layout_row_dynamic($1532,25.0,1);
    $1533 = $1;
    (_nk_button_label($1533,27530)|0);
    $1534 = $1;
    (_nk_button_label($1534,27536)|0);
    $1535 = $1;
    (_nk_button_label($1535,27542)|0);
    $1536 = $1;
    (_nk_button_label($1536,27548)|0);
    $1537 = $1;
    (_nk_button_label($1537,27554)|0);
    $1538 = $1;
    (_nk_button_label($1538,27560)|0);
    $1539 = $1;
    _nk_group_end($1539);
   }
   $1540 = $1;
   _nk_widget_bounds($121,$1540);
   ;HEAP32[$118>>2]=HEAP32[$121>>2]|0;HEAP32[$118+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$121+8>>2]|0;HEAP32[$118+12>>2]=HEAP32[$121+12>>2]|0;
   $1541 = $1;
   _nk_spacing($1541,1);
   $1542 = $117;
   ;HEAP32[$$byval_copy112>>2]=HEAP32[$118>>2]|0;HEAP32[$$byval_copy112+4>>2]=HEAP32[$118+4>>2]|0;HEAP32[$$byval_copy112+8>>2]=HEAP32[$118+8>>2]|0;HEAP32[$$byval_copy112+12>>2]=HEAP32[$118+12>>2]|0;
   $1543 = (_nk_input_is_mouse_hovering_rect($1542,$$byval_copy112)|0);
   $1544 = ($1543|0)!=(0);
   if ($1544) {
    label = 266;
   } else {
    $1545 = $117;
    ;HEAP32[$$byval_copy113>>2]=HEAP32[$118>>2]|0;HEAP32[$$byval_copy113+4>>2]=HEAP32[$118+4>>2]|0;HEAP32[$$byval_copy113+8>>2]=HEAP32[$118+8>>2]|0;HEAP32[$$byval_copy113+12>>2]=HEAP32[$118+12>>2]|0;
    $1546 = (_nk_input_is_mouse_prev_hovering_rect($1545,$$byval_copy113)|0);
    $1547 = ($1546|0)!=(0);
    if ($1547) {
     label = 266;
    }
   }
   do {
    if ((label|0) == 266) {
     $1548 = $117;
     $1549 = (_nk_input_is_mouse_down($1548,0)|0);
     $1550 = ($1549|0)!=(0);
     if (!($1550)) {
      break;
     }
     $1551 = ((($119)) + 8|0);
     $1552 = +HEAPF32[$1551>>2];
     $1553 = $117;
     $1554 = ((($1553)) + 260|0);
     $1555 = ((($1554)) + 64|0);
     $1556 = +HEAPF32[$1555>>2];
     $1557 = $1552 + $1556;
     HEAPF32[226] = $1557;
     $1558 = ((($119)) + 16|0);
     $1559 = +HEAPF32[$1558>>2];
     $1560 = $117;
     $1561 = ((($1560)) + 260|0);
     $1562 = ((($1561)) + 64|0);
     $1563 = +HEAPF32[$1562>>2];
     $1564 = $1559 - $1563;
     HEAPF32[227] = $1564;
    }
   } while(0);
   $1565 = $1;
   $1566 = (_nk_group_begin($1565,27813,33)|0);
   $1567 = ($1566|0)!=(0);
   if ($1567) {
    $1568 = $1;
    _nk_layout_row_dynamic($1568,25.0,1);
    $1569 = $1;
    (_nk_button_label($1569,27530)|0);
    $1570 = $1;
    (_nk_button_label($1570,27536)|0);
    $1571 = $1;
    (_nk_button_label($1571,27542)|0);
    $1572 = $1;
    (_nk_button_label($1572,27548)|0);
    $1573 = $1;
    (_nk_button_label($1573,27554)|0);
    $1574 = $1;
    (_nk_button_label($1574,27560)|0);
    $1575 = $1;
    _nk_group_end($1575);
   }
   $1576 = $1;
   _nk_tree_pop($1576);
  }
  $1577 = $1;
  $1578 = (_nk_strlen(27830)|0);
  $1579 = (_nk_tree_push_hashed($1577,0,27819,0,27830,$1578,1099)|0);
  $1580 = ($1579|0)!=(0);
  if ($1580) {
   $1581 = $1;
   _nk_layout_row_static($1581,30.0,100,2);
   $1582 = $1;
   _nk_label($1582,27848,17);
   $1583 = $1;
   (_nk_slider_float($1583,10.0,912,200.0,10.0)|0);
   $1584 = $1;
   _nk_label($1584,27786,17);
   $1585 = $1;
   (_nk_slider_float($1585,10.0,916,200.0,10.0)|0);
   $1586 = $1;
   _nk_label($1586,27853,17);
   $1587 = $1;
   (_nk_slider_float($1587,10.0,920,200.0,10.0)|0);
   $1588 = $1;
   $1589 = +HEAPF32[228];
   _nk_layout_row_dynamic($1588,$1589,1);
   $1590 = $1;
   $1591 = (_nk_group_begin($1590,27861,33)|0);
   $1592 = ($1591|0)!=(0);
   if ($1592) {
    $1593 = $1;
    _nk_layout_row_dynamic($1593,25.0,3);
    $1594 = $1;
    (_nk_button_label($1594,27530)|0);
    $1595 = $1;
    (_nk_button_label($1595,27536)|0);
    $1596 = $1;
    (_nk_button_label($1596,27542)|0);
    $1597 = $1;
    (_nk_button_label($1597,27548)|0);
    $1598 = $1;
    (_nk_button_label($1598,27554)|0);
    $1599 = $1;
    (_nk_button_label($1599,27560)|0);
    $1600 = $1;
    _nk_group_end($1600);
   }
   $1601 = $1;
   _nk_layout_row_dynamic($1601,8.0,1);
   $1602 = $1;
   _nk_widget_bounds($123,$1602);
   ;HEAP32[$122>>2]=HEAP32[$123>>2]|0;HEAP32[$122+4>>2]=HEAP32[$123+4>>2]|0;HEAP32[$122+8>>2]=HEAP32[$123+8>>2]|0;HEAP32[$122+12>>2]=HEAP32[$123+12>>2]|0;
   $1603 = $1;
   _nk_spacing($1603,1);
   $1604 = $117;
   ;HEAP32[$$byval_copy114>>2]=HEAP32[$122>>2]|0;HEAP32[$$byval_copy114+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$$byval_copy114+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$$byval_copy114+12>>2]=HEAP32[$122+12>>2]|0;
   $1605 = (_nk_input_is_mouse_hovering_rect($1604,$$byval_copy114)|0);
   $1606 = ($1605|0)!=(0);
   if ($1606) {
    label = 276;
   } else {
    $1607 = $117;
    ;HEAP32[$$byval_copy115>>2]=HEAP32[$122>>2]|0;HEAP32[$$byval_copy115+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$$byval_copy115+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$$byval_copy115+12>>2]=HEAP32[$122+12>>2]|0;
    $1608 = (_nk_input_is_mouse_prev_hovering_rect($1607,$$byval_copy115)|0);
    $1609 = ($1608|0)!=(0);
    if ($1609) {
     label = 276;
    }
   }
   do {
    if ((label|0) == 276) {
     $1610 = $117;
     $1611 = (_nk_input_is_mouse_down($1610,0)|0);
     $1612 = ($1611|0)!=(0);
     if (!($1612)) {
      break;
     }
     $1613 = +HEAPF32[228];
     $1614 = $117;
     $1615 = ((($1614)) + 260|0);
     $1616 = ((($1615)) + 64|0);
     $1617 = ((($1616)) + 4|0);
     $1618 = +HEAPF32[$1617>>2];
     $1619 = $1613 + $1618;
     HEAPF32[228] = $1619;
     $1620 = +HEAPF32[229];
     $1621 = $117;
     $1622 = ((($1621)) + 260|0);
     $1623 = ((($1622)) + 64|0);
     $1624 = ((($1623)) + 4|0);
     $1625 = +HEAPF32[$1624>>2];
     $1626 = $1620 - $1625;
     HEAPF32[229] = $1626;
    }
   } while(0);
   $1627 = $1;
   $1628 = +HEAPF32[229];
   _nk_layout_row_dynamic($1627,$1628,1);
   $1629 = $1;
   $1630 = (_nk_group_begin($1629,27865,33)|0);
   $1631 = ($1630|0)!=(0);
   if ($1631) {
    $1632 = $1;
    _nk_layout_row_dynamic($1632,25.0,3);
    $1633 = $1;
    (_nk_button_label($1633,27530)|0);
    $1634 = $1;
    (_nk_button_label($1634,27536)|0);
    $1635 = $1;
    (_nk_button_label($1635,27542)|0);
    $1636 = $1;
    (_nk_button_label($1636,27548)|0);
    $1637 = $1;
    (_nk_button_label($1637,27554)|0);
    $1638 = $1;
    (_nk_button_label($1638,27560)|0);
    $1639 = $1;
    _nk_group_end($1639);
   }
   $1640 = $1;
   _nk_layout_row_dynamic($1640,8.0,1);
   $1641 = $1;
   _nk_widget_bounds($124,$1641);
   ;HEAP32[$122>>2]=HEAP32[$124>>2]|0;HEAP32[$122+4>>2]=HEAP32[$124+4>>2]|0;HEAP32[$122+8>>2]=HEAP32[$124+8>>2]|0;HEAP32[$122+12>>2]=HEAP32[$124+12>>2]|0;
   $1642 = $117;
   ;HEAP32[$$byval_copy116>>2]=HEAP32[$122>>2]|0;HEAP32[$$byval_copy116+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$$byval_copy116+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$$byval_copy116+12>>2]=HEAP32[$122+12>>2]|0;
   $1643 = (_nk_input_is_mouse_hovering_rect($1642,$$byval_copy116)|0);
   $1644 = ($1643|0)!=(0);
   if ($1644) {
    label = 282;
   } else {
    $1645 = $117;
    ;HEAP32[$$byval_copy117>>2]=HEAP32[$122>>2]|0;HEAP32[$$byval_copy117+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$$byval_copy117+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$$byval_copy117+12>>2]=HEAP32[$122+12>>2]|0;
    $1646 = (_nk_input_is_mouse_prev_hovering_rect($1645,$$byval_copy117)|0);
    $1647 = ($1646|0)!=(0);
    if ($1647) {
     label = 282;
    }
   }
   do {
    if ((label|0) == 282) {
     $1648 = $117;
     $1649 = (_nk_input_is_mouse_down($1648,0)|0);
     $1650 = ($1649|0)!=(0);
     if (!($1650)) {
      break;
     }
     $1651 = +HEAPF32[229];
     $1652 = $117;
     $1653 = ((($1652)) + 260|0);
     $1654 = ((($1653)) + 64|0);
     $1655 = ((($1654)) + 4|0);
     $1656 = +HEAPF32[$1655>>2];
     $1657 = $1651 + $1656;
     HEAPF32[229] = $1657;
     $1658 = +HEAPF32[230];
     $1659 = $117;
     $1660 = ((($1659)) + 260|0);
     $1661 = ((($1660)) + 64|0);
     $1662 = ((($1661)) + 4|0);
     $1663 = +HEAPF32[$1662>>2];
     $1664 = $1658 - $1663;
     HEAPF32[230] = $1664;
    }
   } while(0);
   $1665 = $1;
   $1666 = +HEAPF32[230];
   _nk_layout_row_dynamic($1665,$1666,1);
   $1667 = $1;
   $1668 = (_nk_group_begin($1667,27872,33)|0);
   $1669 = ($1668|0)!=(0);
   if ($1669) {
    $1670 = $1;
    _nk_layout_row_dynamic($1670,25.0,3);
    $1671 = $1;
    (_nk_button_label($1671,27530)|0);
    $1672 = $1;
    (_nk_button_label($1672,27536)|0);
    $1673 = $1;
    (_nk_button_label($1673,27542)|0);
    $1674 = $1;
    (_nk_button_label($1674,27548)|0);
    $1675 = $1;
    (_nk_button_label($1675,27554)|0);
    $1676 = $1;
    (_nk_button_label($1676,27560)|0);
    $1677 = $1;
    _nk_group_end($1677);
   }
   $1678 = $1;
   _nk_tree_pop($1678);
  }
  $1679 = $1;
  _nk_tree_pop($1679);
 }
 $1680 = $1;
 _nk_tree_pop($1680);
 $1681 = $1;
 _nk_end($1681);
 $1682 = $1;
 $1683 = (_nk_window_is_closed($1682,25217)|0);
 $1684 = ($1683|0)!=(0);
 $1685 = $1684 ^ 1;
 $1686 = $1685&1;
 STACKTOP = sp;return ($1686|0);
}
function _calculator($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $calculator$b$calculator$a = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $5 = sp + 8|0;
 $6 = sp + 64|0;
 $1 = $0;
 $7 = $1;
 _nk_rect($2,450.0,270.0,180.0,250.0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 $8 = (_nk_begin($7,27879,$$byval_copy,35)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $110 = $1;
  _nk_end($110);
  STACKTOP = sp;return;
 }
 $3 = 0;
 $4 = 0;
 $10 = $1;
 _nk_layout_row_dynamic($10,35.0,1);
 $11 = HEAP32[231]|0;
 $12 = +HEAPF64[$11>>3];
 HEAPF64[$vararg_buffer>>3] = $12;
 $13 = (_snprintf($6,256,27905,$vararg_buffer)|0);
 HEAP32[$5>>2] = $13;
 $14 = $1;
 (_nk_edit_string($14,512,$6,$5,255,2)|0);
 $15 = HEAP32[$5>>2]|0;
 $16 = (($6) + ($15)|0);
 HEAP8[$16>>0] = 0;
 $17 = (+_atof($6));
 $18 = HEAP32[231]|0;
 HEAPF64[$18>>3] = $17;
 $19 = $1;
 _nk_layout_row_dynamic($19,35.0,4);
 $3 = 0;
 while(1) {
  $20 = $3;
  $21 = ($20>>>0)<(16);
  if (!($21)) {
   break;
  }
  $22 = $3;
  $23 = ($22>>>0)>=(12);
  $24 = $3;
  $25 = ($24>>>0)<(15);
  $or$cond = $23 & $25;
  $26 = $3;
  do {
   if ($or$cond) {
    $27 = ($26>>>0)>(12);
    if (!($27)) {
     $28 = $1;
     $29 = (_nk_button_label($28,27910)|0);
     $30 = ($29|0)!=(0);
     if ($30) {
      HEAP32[12470] = 0;
      HEAPF64[3795] = 0.0;
      HEAPF64[3794] = 0.0;
      HEAP32[231] = 30352;
      HEAP32[12468] = 0;
     }
     $31 = $1;
     $32 = (_nk_button_label($31,22521)|0);
     $33 = ($32|0)!=(0);
     if ($33) {
      $34 = HEAP32[231]|0;
      $35 = +HEAPF64[$34>>3];
      $36 = $35 * 10.0;
      $37 = HEAP32[231]|0;
      HEAPF64[$37>>3] = $36;
      HEAP32[12468] = 0;
     }
     $38 = $1;
     $39 = (_nk_button_label($38,27912)|0);
     $40 = ($39|0)!=(0);
     if ($40) {
      $4 = 1;
      $41 = HEAP32[12470]|0;
      HEAP32[12469] = $41;
      HEAP32[12470] = 0;
     }
    }
   } else {
    $42 = (($26) + 1)|0;
    $43 = (($42>>>0) % 4)&-1;
    $44 = ($43|0)!=(0);
    $45 = $1;
    $46 = $3;
    $47 = (($46>>>0) / 4)&-1;
    if ($44) {
     $48 = ($47*3)|0;
     $49 = $3;
     $50 = (($49>>>0) % 4)&-1;
     $51 = (($48) + ($50))|0;
     $52 = (27890 + ($51)|0);
     $53 = (_nk_button_text($45,$52,1)|0);
     $54 = ($53|0)!=(0);
     if (!($54)) {
      break;
     }
     $55 = HEAP32[231]|0;
     $56 = +HEAPF64[$55>>3];
     $57 = $56 * 10.0;
     $58 = $3;
     $59 = (($58>>>0) / 4)&-1;
     $60 = ($59*3)|0;
     $61 = $3;
     $62 = (($61>>>0) % 4)&-1;
     $63 = (($60) + ($62))|0;
     $64 = (27890 + ($63)|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = (+($66|0));
     $68 = $57 + $67;
     $69 = $68 - 48.0;
     $70 = HEAP32[231]|0;
     HEAPF64[$70>>3] = $69;
     HEAP32[12468] = 0;
     break;
    }
    $71 = (27900 + ($47)|0);
    $72 = (_nk_button_text($45,$71,1)|0);
    $73 = ($72|0)!=(0);
    if ($73) {
     $74 = HEAP32[12468]|0;
     $75 = ($74|0)!=(0);
     do {
      if (!($75)) {
       $76 = HEAP32[231]|0;
       $77 = ($76|0)!=(30360|0);
       if ($77) {
        HEAP32[231] = 30360;
        break;
       } else {
        $78 = HEAP32[12470]|0;
        HEAP32[12469] = $78;
        $4 = 1;
        break;
       }
      }
     } while(0);
     $79 = $3;
     $80 = (($79>>>0) / 4)&-1;
     $81 = (27900 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82 << 24 >> 24;
     HEAP32[12470] = $83;
     HEAP32[12468] = 1;
    }
   }
  } while(0);
  $84 = $3;
  $85 = (($84) + 1)|0;
  $3 = $85;
 }
 $86 = $4;
 $87 = ($86|0)!=(0);
 if (!($87)) {
  $110 = $1;
  _nk_end($110);
  STACKTOP = sp;return;
 }
 $88 = HEAP32[12469]|0;
 $89 = ($88|0)==(43);
 if ($89) {
  $90 = +HEAPF64[3794];
  $91 = +HEAPF64[3795];
  $92 = $90 + $91;
  HEAPF64[3794] = $92;
 }
 $93 = HEAP32[12469]|0;
 $94 = ($93|0)==(45);
 if ($94) {
  $95 = +HEAPF64[3794];
  $96 = +HEAPF64[3795];
  $97 = $95 - $96;
  HEAPF64[3794] = $97;
 }
 $98 = HEAP32[12469]|0;
 $99 = ($98|0)==(42);
 if ($99) {
  $100 = +HEAPF64[3794];
  $101 = +HEAPF64[3795];
  $102 = $100 * $101;
  HEAPF64[3794] = $102;
 }
 $103 = HEAP32[12469]|0;
 $104 = ($103|0)==(47);
 if ($104) {
  $105 = +HEAPF64[3794];
  $106 = +HEAPF64[3795];
  $107 = $105 / $106;
  HEAPF64[3794] = $107;
 }
 HEAP32[231] = 30352;
 $108 = HEAP32[12468]|0;
 $109 = ($108|0)!=(0);
 $calculator$b$calculator$a = $109 ? 30360 : 30352;
 HEAP32[231] = $calculator$b$calculator$a;
 HEAPF64[3795] = 0.0;
 HEAP32[12468] = 0;
 $110 = $1;
 _nk_end($110);
 STACKTOP = sp;return;
}
function _error_callback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[262]|0;
 $5 = $2;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 (_fprintf($4,21487,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _windowSizeCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = _emscripten_asm_const_i(0)|0;
 $6 = $7;
 $8 = $6;
 $9 = ($8|0)==(0);
 $10 = HEAP32[11198]|0;
 $11 = ($10|0)!=(0);
 $or$cond = $9 | $11;
 if (!($or$cond)) {
  (_printf(21640,$vararg_buffer)|0);
  $12 = $6;
  HEAP32[11198] = $12;
 }
 $13 = HEAP32[11198]|0;
 $14 = ($13|0)==(0);
 $15 = $6;
 $16 = ($15|0)!=(0);
 $or$cond3 = $14 | $16;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 (_printf(21687,$vararg_buffer4)|0);
 HEAP32[65] = 1;
 $17 = $6;
 HEAP32[11198] = $17;
 _emscripten_cancel_main_loop();
 STACKTOP = sp;return;
}
function _main() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 12|0;
 $2 = sp + 20|0;
 $0 = 0;
 (_glfwSetErrorCallback((21|0))|0);
 $3 = (_glfwInit()|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  HEAP32[65] = 0;
  (_printf(21723,$vararg_buffer)|0);
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 _glfwWindowHint(131075,1);
 $5 = (_glfwCreateWindow(1024,1024,(21762|0),(0|0),(0|0))|0);
 HEAP32[11204] = $5;
 $6 = HEAP32[11204]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[11204]|0;
  _glfwMakeContextCurrent(($8|0));
  $9 = HEAP32[11204]|0;
  (_glfwSetWindowSizeCallback(($9|0),(22|0))|0);
  $10 = HEAP32[11204]|0;
  $11 = (_nk_glfw3_init($10,1)|0);
  HEAP32[11202] = $11;
  _nk_glfw3_font_stash_begin($1);
  _nk_glfw3_font_stash_end();
  _nk_rgb($2,20,20,20);
  ;HEAP8[50428>>0]=HEAP8[$2>>0]|0;HEAP8[50428+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[50428+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[50428+3>>0]=HEAP8[$2+3>>0]|0;
  _emscripten_set_main_loop((23|0),0,1);
  _nk_glfw3_shutdown();
  _glfwTerminate();
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  HEAP32[65] = 0;
  (_printf(21723,$vararg_buffer1)|0);
  _glfwTerminate();
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _nk_buffer_align($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $9 = $7;
 $cond = ($9|0)==(1);
 $10 = $5;
 $11 = ($10|0)!=(0);
 $12 = $4;
 if ($cond) {
  if ($11) {
   $29 = $12;
   $30 = $5;
   $31 = (($30) - 1)|0;
   $32 = $31 ^ -1;
   $33 = $29 & $32;
   $34 = $33;
   $8 = $34;
   $35 = $4;
   $36 = $8;
   $37 = $35;
   $38 = $36;
   $39 = (($37) - ($38))|0;
   $40 = $6;
   HEAP32[$40>>2] = $39;
   $42 = $8;
   STACKTOP = sp;return ($42|0);
  } else {
   $8 = $12;
   $41 = $6;
   HEAP32[$41>>2] = 0;
   $42 = $8;
   STACKTOP = sp;return ($42|0);
  }
 } else {
  if ($11) {
   $13 = $5;
   $14 = (($13) - 1)|0;
   $15 = (($12) + ($14)|0);
   $16 = $15;
   $17 = $5;
   $18 = (($17) - 1)|0;
   $19 = $18 ^ -1;
   $20 = $16 & $19;
   $21 = $20;
   $8 = $21;
   $22 = $8;
   $23 = $4;
   $24 = $22;
   $25 = $23;
   $26 = (($24) - ($25))|0;
   $27 = $6;
   HEAP32[$27>>2] = $26;
   $42 = $8;
   STACKTOP = sp;return ($42|0);
  } else {
   $8 = $12;
   $28 = $6;
   HEAP32[$28>>2] = 0;
   $42 = $8;
   STACKTOP = sp;return ($42|0);
  }
 }
 return (0)|0;
}
function _nk_round_up_pow2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (($2) + -1)|0;
 $1 = $3;
 $4 = $1;
 $5 = $4 >>> 1;
 $6 = $1;
 $7 = $6 | $5;
 $1 = $7;
 $8 = $1;
 $9 = $8 >>> 2;
 $10 = $1;
 $11 = $10 | $9;
 $1 = $11;
 $12 = $1;
 $13 = $12 >>> 4;
 $14 = $1;
 $15 = $14 | $13;
 $1 = $15;
 $16 = $1;
 $17 = $16 >>> 8;
 $18 = $1;
 $19 = $18 | $17;
 $1 = $19;
 $20 = $1;
 $21 = $20 >>> 16;
 $22 = $1;
 $23 = $22 | $21;
 $1 = $23;
 $24 = $1;
 $25 = (($24) + 1)|0;
 $1 = $25;
 $26 = $1;
 STACKTOP = sp;return ($26|0);
}
function _nk_buffer_realloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy2 = sp + 40|0;
 $$byval_copy = sp + 36|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((1492|0),(1320|0),5365,(21922|0));
  // unreachable;
 }
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((1547|0),(1320|0),5366,(21922|0));
  // unreachable;
 }
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = $4;
  $21 = ((($20)) + 16|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = $4;
   $26 = ((($25)) + 16|0);
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = $4;
    $31 = ((($30)) + 32|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $8 = $33;
    $34 = $4;
    $35 = ((($34)) + 16|0);
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $4;
    $39 = ((($38)) + 16|0);
    $40 = $4;
    $41 = ((($40)) + 32|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $5;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$39>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$37 & 15]($$byval_copy,$42,$43)|0);
    $7 = $44;
    $45 = $7;
    $46 = ($45|0)!=(0|0);
    if (!($46)) {
     ___assert_fail((21940|0),(1320|0),5372,(21922|0));
     // unreachable;
    }
    $47 = $7;
    $48 = ($47|0)!=(0|0);
    if (!($48)) {
     $3 = 0;
     $103 = $3;
     STACKTOP = sp;return ($103|0);
    }
    $49 = $5;
    $50 = $6;
    HEAP32[$50>>2] = $49;
    $51 = $7;
    $52 = $4;
    $53 = ((($52)) + 32|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($51|0)!=($54|0);
    if ($55) {
     $56 = $7;
     $57 = $4;
     $58 = ((($57)) + 32|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $8;
     (_nk_memcopy($56,$59,$60)|0);
     $61 = $4;
     $62 = ((($61)) + 16|0);
     $63 = ((($62)) + 8|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $4;
     $66 = ((($65)) + 16|0);
     $67 = $4;
     $68 = ((($67)) + 32|0);
     $69 = HEAP32[$68>>2]|0;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$66>>2]|0;
     FUNCTION_TABLE_vii[$64 & 31]($$byval_copy2,$69);
    }
    $70 = $4;
    $71 = ((($70)) + 56|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $8;
    $74 = ($72|0)==($73|0);
    if ($74) {
     $75 = $5;
     $76 = $4;
     $77 = ((($76)) + 56|0);
     HEAP32[$77>>2] = $75;
     $78 = $7;
     $3 = $78;
     $103 = $3;
     STACKTOP = sp;return ($103|0);
    } else {
     $79 = $8;
     $80 = $4;
     $81 = ((($80)) + 56|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($79) - ($82))|0;
     $11 = $83;
     $84 = $7;
     $85 = $5;
     $86 = $11;
     $87 = (($85) - ($86))|0;
     $88 = (($84) + ($87)|0);
     $9 = $88;
     $89 = $7;
     $90 = $4;
     $91 = ((($90)) + 56|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($89) + ($92)|0);
     $10 = $93;
     $94 = $9;
     $95 = $10;
     $96 = $11;
     (_nk_memcopy($94,$95,$96)|0);
     $97 = $5;
     $98 = $11;
     $99 = (($97) - ($98))|0;
     $100 = $4;
     $101 = ((($100)) + 56|0);
     HEAP32[$101>>2] = $99;
     $102 = $7;
     $3 = $102;
     $103 = $3;
     STACKTOP = sp;return ($103|0);
    }
   }
  }
 }
 $3 = 0;
 $103 = $3;
 STACKTOP = sp;return ($103|0);
}
function _nk_draw_vertex_layout_element_is_end_of_layout($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 if ($4) {
  $10 = 1;
 } else {
  $5 = $1;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(18);
  $10 = $8;
 }
 $9 = $10&1;
 STACKTOP = sp;return ($9|0);
}
function _nk_draw_vertex_element($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 45|0;
 $11 = sp + 42|0;
 $12 = sp + 12|0;
 $13 = sp + 44|0;
 $14 = sp + 40|0;
 $15 = sp + 8|0;
 $16 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $17 = $4;
 $9 = $17;
 $18 = $7;
 $19 = ($18>>>0)<(8);
 if (!($19)) {
  ___assert_fail((22078|0),(1320|0),6852,(22109|0));
  // unreachable;
 }
 $20 = $7;
 $21 = ($20>>>0)>=(8);
 $22 = $7;
 $23 = ($22>>>0)<=(17);
 $or$cond = $21 & $23;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = 0;
 L7: while(1) {
  $24 = $8;
  $25 = $6;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   label = 47;
   break;
  }
  $27 = $7;
  switch ($27|0) {
  case 0:  {
   $28 = $8;
   $29 = $5;
   $30 = (($29) + ($28<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $31 < 127.0;
   if ($32) {
    $33 = $8;
    $34 = $5;
    $35 = (($34) + ($33<<2)|0);
    $36 = +HEAPF32[$35>>2];
    $38 = $36;
   } else {
    $38 = 127.0;
   }
   $37 = $38 < -127.0;
   if ($37) {
    $49 = -127.0;
   } else {
    $39 = $8;
    $40 = $5;
    $41 = (($40) + ($39<<2)|0);
    $42 = +HEAPF32[$41>>2];
    $43 = $42 < 127.0;
    if ($43) {
     $44 = $8;
     $45 = $5;
     $46 = (($45) + ($44<<2)|0);
     $47 = +HEAPF32[$46>>2];
     $49 = $47;
    } else {
     $49 = 127.0;
    }
   }
   $48 = (~~(($49)));
   HEAP8[$10>>0] = $48;
   $50 = $9;
   (_nk_memcopy($50,$10,1)|0);
   $51 = $9;
   $52 = ((($51)) + 1|0);
   $9 = $52;
   break;
  }
  case 1:  {
   $53 = $8;
   $54 = $5;
   $55 = (($54) + ($53<<2)|0);
   $56 = +HEAPF32[$55>>2];
   $57 = $56 < 32767.0;
   if ($57) {
    $58 = $8;
    $59 = $5;
    $60 = (($59) + ($58<<2)|0);
    $61 = +HEAPF32[$60>>2];
    $63 = $61;
   } else {
    $63 = 32767.0;
   }
   $62 = $63 < -32767.0;
   if ($62) {
    $74 = -32767.0;
   } else {
    $64 = $8;
    $65 = $5;
    $66 = (($65) + ($64<<2)|0);
    $67 = +HEAPF32[$66>>2];
    $68 = $67 < 32767.0;
    if ($68) {
     $69 = $8;
     $70 = $5;
     $71 = (($70) + ($69<<2)|0);
     $72 = +HEAPF32[$71>>2];
     $74 = $72;
    } else {
     $74 = 32767.0;
    }
   }
   $73 = (~~(($74)));
   HEAP16[$11>>1] = $73;
   $75 = $9;
   (_nk_memcopy($75,$11,2)|0);
   $76 = $9;
   $77 = ((($76)) + 2|0);
   $9 = $77;
   break;
  }
  case 2:  {
   $78 = $8;
   $79 = $5;
   $80 = (($79) + ($78<<2)|0);
   $81 = +HEAPF32[$80>>2];
   $82 = $81 < 2147483648.0;
   if ($82) {
    $83 = $8;
    $84 = $5;
    $85 = (($84) + ($83<<2)|0);
    $86 = +HEAPF32[$85>>2];
    $88 = $86;
   } else {
    $88 = 2147483648.0;
   }
   $87 = $88 < -2147483648.0;
   if ($87) {
    $99 = -2147483648.0;
   } else {
    $89 = $8;
    $90 = $5;
    $91 = (($90) + ($89<<2)|0);
    $92 = +HEAPF32[$91>>2];
    $93 = $92 < 2147483648.0;
    if ($93) {
     $94 = $8;
     $95 = $5;
     $96 = (($95) + ($94<<2)|0);
     $97 = +HEAPF32[$96>>2];
     $99 = $97;
    } else {
     $99 = 2147483648.0;
    }
   }
   $98 = (~~(($99)));
   HEAP32[$12>>2] = $98;
   $100 = $9;
   (_nk_memcopy($100,$12,4)|0);
   $101 = $9;
   $102 = ((($101)) + 4|0);
   $9 = $102;
   break;
  }
  case 3:  {
   $103 = $8;
   $104 = $5;
   $105 = (($104) + ($103<<2)|0);
   $106 = +HEAPF32[$105>>2];
   $107 = $106 < 256.0;
   if ($107) {
    $108 = $8;
    $109 = $5;
    $110 = (($109) + ($108<<2)|0);
    $111 = +HEAPF32[$110>>2];
    $113 = $111;
   } else {
    $113 = 256.0;
   }
   $112 = $113 < 0.0;
   if ($112) {
    $124 = 0.0;
   } else {
    $114 = $8;
    $115 = $5;
    $116 = (($115) + ($114<<2)|0);
    $117 = +HEAPF32[$116>>2];
    $118 = $117 < 256.0;
    if ($118) {
     $119 = $8;
     $120 = $5;
     $121 = (($120) + ($119<<2)|0);
     $122 = +HEAPF32[$121>>2];
     $124 = $122;
    } else {
     $124 = 256.0;
    }
   }
   $123 = (~~(($124))&255);
   HEAP8[$13>>0] = $123;
   $125 = $9;
   (_nk_memcopy($125,$13,1)|0);
   $126 = $9;
   $127 = ((($126)) + 1|0);
   $9 = $127;
   break;
  }
  case 4:  {
   $128 = $8;
   $129 = $5;
   $130 = (($129) + ($128<<2)|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $131 < 65535.0;
   if ($132) {
    $133 = $8;
    $134 = $5;
    $135 = (($134) + ($133<<2)|0);
    $136 = +HEAPF32[$135>>2];
    $138 = $136;
   } else {
    $138 = 65535.0;
   }
   $137 = $138 < 0.0;
   if ($137) {
    $149 = 0.0;
   } else {
    $139 = $8;
    $140 = $5;
    $141 = (($140) + ($139<<2)|0);
    $142 = +HEAPF32[$141>>2];
    $143 = $142 < 65535.0;
    if ($143) {
     $144 = $8;
     $145 = $5;
     $146 = (($145) + ($144<<2)|0);
     $147 = +HEAPF32[$146>>2];
     $149 = $147;
    } else {
     $149 = 65535.0;
    }
   }
   $148 = (~~(($149))&65535);
   HEAP16[$14>>1] = $148;
   $150 = $9;
   (_nk_memcopy($150,$14,2)|0);
   $151 = $9;
   $152 = ((($151)) + 2|0);
   $9 = $152;
   break;
  }
  case 5:  {
   $153 = $8;
   $154 = $5;
   $155 = (($154) + ($153<<2)|0);
   $156 = +HEAPF32[$155>>2];
   $157 = $156 < 4294967296.0;
   if ($157) {
    $158 = $8;
    $159 = $5;
    $160 = (($159) + ($158<<2)|0);
    $161 = +HEAPF32[$160>>2];
    $163 = $161;
   } else {
    $163 = 4294967296.0;
   }
   $162 = $163 < 0.0;
   if ($162) {
    $174 = 0.0;
   } else {
    $164 = $8;
    $165 = $5;
    $166 = (($165) + ($164<<2)|0);
    $167 = +HEAPF32[$166>>2];
    $168 = $167 < 4294967296.0;
    if ($168) {
     $169 = $8;
     $170 = $5;
     $171 = (($170) + ($169<<2)|0);
     $172 = +HEAPF32[$171>>2];
     $174 = $172;
    } else {
     $174 = 4294967296.0;
    }
   }
   $173 = (~~(($174))>>>0);
   HEAP32[$15>>2] = $173;
   $175 = $9;
   (_nk_memcopy($175,$15,4)|0);
   $176 = $9;
   $177 = ((($176)) + 4|0);
   $9 = $177;
   break;
  }
  case 6:  {
   $178 = $9;
   $179 = $8;
   $180 = $5;
   $181 = (($180) + ($179<<2)|0);
   (_nk_memcopy($178,$181,4)|0);
   $182 = $9;
   $183 = ((($182)) + 4|0);
   $9 = $183;
   break;
  }
  case 7:  {
   $184 = $8;
   $185 = $5;
   $186 = (($185) + ($184<<2)|0);
   $187 = +HEAPF32[$186>>2];
   $188 = $187;
   HEAPF64[$16>>3] = $188;
   $189 = $9;
   (_nk_memcopy($189,$16,8)|0);
   $190 = $9;
   $191 = ((($190)) + 8|0);
   $9 = $191;
   break;
  }
  default: {
   label = 7;
   break L7;
  }
  }
  $192 = $8;
  $193 = (($192) + 1)|0;
  $8 = $193;
 }
 if ((label|0) == 7) {
  ___assert_fail((22132|0),(1320|0),6856,(22109|0));
  // unreachable;
 }
 else if ((label|0) == 47) {
  STACKTOP = sp;return;
 }
}
function _nk_draw_vertex_color($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0;
 var $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0;
 var $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0;
 var $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0.0;
 var $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0.0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0.0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0, $387 = 0.0, $388 = 0;
 var $389 = 0, $39 = 0.0, $390 = 0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0;
 var $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0;
 var $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 104|0;
 $6 = sp + 100|0;
 $7 = sp + 88|0;
 $8 = sp + 80|0;
 $9 = sp + 56|0;
 $10 = sp + 40|0;
 $11 = sp;
 $12 = sp + 96|0;
 $13 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $5;
 $15 = ($14>>>0)>=(8);
 if (!($15)) {
  ___assert_fail((22168|0),(1320|0),6784,(22200|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ($16>>>0)<=(17);
 if (!($17)) {
  ___assert_fail((22221|0),(1320|0),6785,(22200|0));
  // unreachable;
 }
 $18 = $5;
 $19 = ($18>>>0)<(8);
 $20 = $5;
 $21 = ($20>>>0)>(17);
 $or$cond = $19 | $21;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $22 = $5;
 switch ($22|0) {
 case 8: case 11:  {
  $23 = $4;
  _nk_rgba_fv($6,$23);
  $24 = $3;
  (_nk_memcopy($24,$6,4)|0);
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $25 = $4;
  $26 = +HEAPF32[$25>>2];
  $27 = $26 * 65535.0;
  $28 = $27 < 65535.0;
  if ($28) {
   $29 = $4;
   $30 = +HEAPF32[$29>>2];
   $31 = $30 * 65535.0;
   $33 = $31;
  } else {
   $33 = 65535.0;
  }
  $32 = $33 < 0.0;
  if ($32) {
   $42 = 0.0;
  } else {
   $34 = $4;
   $35 = +HEAPF32[$34>>2];
   $36 = $35 * 65535.0;
   $37 = $36 < 65535.0;
   if ($37) {
    $38 = $4;
    $39 = +HEAPF32[$38>>2];
    $40 = $39 * 65535.0;
    $42 = $40;
   } else {
    $42 = 65535.0;
   }
  }
  $41 = (~~(($42))&65535);
  HEAP16[$7>>1] = $41;
  $43 = $4;
  $44 = ((($43)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $45 * 65535.0;
  $47 = $46 < 65535.0;
  if ($47) {
   $48 = $4;
   $49 = ((($48)) + 4|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $50 * 65535.0;
   $53 = $51;
  } else {
   $53 = 65535.0;
  }
  $52 = $53 < 0.0;
  if ($52) {
   $64 = 0.0;
  } else {
   $54 = $4;
   $55 = ((($54)) + 4|0);
   $56 = +HEAPF32[$55>>2];
   $57 = $56 * 65535.0;
   $58 = $57 < 65535.0;
   if ($58) {
    $59 = $4;
    $60 = ((($59)) + 4|0);
    $61 = +HEAPF32[$60>>2];
    $62 = $61 * 65535.0;
    $64 = $62;
   } else {
    $64 = 65535.0;
   }
  }
  $63 = (~~(($64))&65535);
  $65 = ((($7)) + 2|0);
  HEAP16[$65>>1] = $63;
  $66 = $4;
  $67 = ((($66)) + 8|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $68 * 65535.0;
  $70 = $69 < 65535.0;
  if ($70) {
   $71 = $4;
   $72 = ((($71)) + 8|0);
   $73 = +HEAPF32[$72>>2];
   $74 = $73 * 65535.0;
   $76 = $74;
  } else {
   $76 = 65535.0;
  }
  $75 = $76 < 0.0;
  if ($75) {
   $87 = 0.0;
  } else {
   $77 = $4;
   $78 = ((($77)) + 8|0);
   $79 = +HEAPF32[$78>>2];
   $80 = $79 * 65535.0;
   $81 = $80 < 65535.0;
   if ($81) {
    $82 = $4;
    $83 = ((($82)) + 8|0);
    $84 = +HEAPF32[$83>>2];
    $85 = $84 * 65535.0;
    $87 = $85;
   } else {
    $87 = 65535.0;
   }
  }
  $86 = (~~(($87))&65535);
  $88 = ((($7)) + 4|0);
  HEAP16[$88>>1] = $86;
  $89 = $3;
  (_nk_memcopy($89,$7,6)|0);
  STACKTOP = sp;return;
  break;
 }
 case 12:  {
  $90 = $4;
  $91 = +HEAPF32[$90>>2];
  $92 = $91 * 65535.0;
  $93 = $92 < 65535.0;
  if ($93) {
   $94 = $4;
   $95 = +HEAPF32[$94>>2];
   $96 = $95 * 65535.0;
   $98 = $96;
  } else {
   $98 = 65535.0;
  }
  $97 = $98 < 0.0;
  if ($97) {
   $107 = 0.0;
  } else {
   $99 = $4;
   $100 = +HEAPF32[$99>>2];
   $101 = $100 * 65535.0;
   $102 = $101 < 65535.0;
   if ($102) {
    $103 = $4;
    $104 = +HEAPF32[$103>>2];
    $105 = $104 * 65535.0;
    $107 = $105;
   } else {
    $107 = 65535.0;
   }
  }
  $106 = (~~(($107))&65535);
  HEAP16[$8>>1] = $106;
  $108 = $4;
  $109 = ((($108)) + 4|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $110 * 65535.0;
  $112 = $111 < 65535.0;
  if ($112) {
   $113 = $4;
   $114 = ((($113)) + 4|0);
   $115 = +HEAPF32[$114>>2];
   $116 = $115 * 65535.0;
   $118 = $116;
  } else {
   $118 = 65535.0;
  }
  $117 = $118 < 0.0;
  if ($117) {
   $129 = 0.0;
  } else {
   $119 = $4;
   $120 = ((($119)) + 4|0);
   $121 = +HEAPF32[$120>>2];
   $122 = $121 * 65535.0;
   $123 = $122 < 65535.0;
   if ($123) {
    $124 = $4;
    $125 = ((($124)) + 4|0);
    $126 = +HEAPF32[$125>>2];
    $127 = $126 * 65535.0;
    $129 = $127;
   } else {
    $129 = 65535.0;
   }
  }
  $128 = (~~(($129))&65535);
  $130 = ((($8)) + 2|0);
  HEAP16[$130>>1] = $128;
  $131 = $4;
  $132 = ((($131)) + 8|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $133 * 65535.0;
  $135 = $134 < 65535.0;
  if ($135) {
   $136 = $4;
   $137 = ((($136)) + 8|0);
   $138 = +HEAPF32[$137>>2];
   $139 = $138 * 65535.0;
   $141 = $139;
  } else {
   $141 = 65535.0;
  }
  $140 = $141 < 0.0;
  if ($140) {
   $152 = 0.0;
  } else {
   $142 = $4;
   $143 = ((($142)) + 8|0);
   $144 = +HEAPF32[$143>>2];
   $145 = $144 * 65535.0;
   $146 = $145 < 65535.0;
   if ($146) {
    $147 = $4;
    $148 = ((($147)) + 8|0);
    $149 = +HEAPF32[$148>>2];
    $150 = $149 * 65535.0;
    $152 = $150;
   } else {
    $152 = 65535.0;
   }
  }
  $151 = (~~(($152))&65535);
  $153 = ((($8)) + 4|0);
  HEAP16[$153>>1] = $151;
  $154 = $4;
  $155 = ((($154)) + 12|0);
  $156 = +HEAPF32[$155>>2];
  $157 = $156 * 65535.0;
  $158 = $157 < 65535.0;
  if ($158) {
   $159 = $4;
   $160 = ((($159)) + 12|0);
   $161 = +HEAPF32[$160>>2];
   $162 = $161 * 65535.0;
   $164 = $162;
  } else {
   $164 = 65535.0;
  }
  $163 = $164 < 0.0;
  if ($163) {
   $175 = 0.0;
  } else {
   $165 = $4;
   $166 = ((($165)) + 12|0);
   $167 = +HEAPF32[$166>>2];
   $168 = $167 * 65535.0;
   $169 = $168 < 65535.0;
   if ($169) {
    $170 = $4;
    $171 = ((($170)) + 12|0);
    $172 = +HEAPF32[$171>>2];
    $173 = $172 * 65535.0;
    $175 = $173;
   } else {
    $175 = 65535.0;
   }
  }
  $174 = (~~(($175))&65535);
  $176 = ((($8)) + 6|0);
  HEAP16[$176>>1] = $174;
  $177 = $3;
  (_nk_memcopy($177,$8,8)|0);
  STACKTOP = sp;return;
  break;
 }
 case 10:  {
  $178 = $4;
  $179 = +HEAPF32[$178>>2];
  $180 = $179 * 4294967296.0;
  $181 = $180 < 4294967296.0;
  if ($181) {
   $182 = $4;
   $183 = +HEAPF32[$182>>2];
   $184 = $183 * 4294967296.0;
   $186 = $184;
  } else {
   $186 = 4294967296.0;
  }
  $185 = $186 < 0.0;
  if ($185) {
   $195 = 0.0;
  } else {
   $187 = $4;
   $188 = +HEAPF32[$187>>2];
   $189 = $188 * 4294967296.0;
   $190 = $189 < 4294967296.0;
   if ($190) {
    $191 = $4;
    $192 = +HEAPF32[$191>>2];
    $193 = $192 * 4294967296.0;
    $195 = $193;
   } else {
    $195 = 4294967296.0;
   }
  }
  $194 = (~~(($195))>>>0);
  HEAP32[$9>>2] = $194;
  $196 = $4;
  $197 = ((($196)) + 4|0);
  $198 = +HEAPF32[$197>>2];
  $199 = $198 * 4294967296.0;
  $200 = $199 < 4294967296.0;
  if ($200) {
   $201 = $4;
   $202 = ((($201)) + 4|0);
   $203 = +HEAPF32[$202>>2];
   $204 = $203 * 4294967296.0;
   $206 = $204;
  } else {
   $206 = 4294967296.0;
  }
  $205 = $206 < 0.0;
  if ($205) {
   $217 = 0.0;
  } else {
   $207 = $4;
   $208 = ((($207)) + 4|0);
   $209 = +HEAPF32[$208>>2];
   $210 = $209 * 4294967296.0;
   $211 = $210 < 4294967296.0;
   if ($211) {
    $212 = $4;
    $213 = ((($212)) + 4|0);
    $214 = +HEAPF32[$213>>2];
    $215 = $214 * 4294967296.0;
    $217 = $215;
   } else {
    $217 = 4294967296.0;
   }
  }
  $216 = (~~(($217))>>>0);
  $218 = ((($9)) + 4|0);
  HEAP32[$218>>2] = $216;
  $219 = $4;
  $220 = ((($219)) + 8|0);
  $221 = +HEAPF32[$220>>2];
  $222 = $221 * 4294967296.0;
  $223 = $222 < 4294967296.0;
  if ($223) {
   $224 = $4;
   $225 = ((($224)) + 8|0);
   $226 = +HEAPF32[$225>>2];
   $227 = $226 * 4294967296.0;
   $229 = $227;
  } else {
   $229 = 4294967296.0;
  }
  $228 = $229 < 0.0;
  if ($228) {
   $240 = 0.0;
  } else {
   $230 = $4;
   $231 = ((($230)) + 8|0);
   $232 = +HEAPF32[$231>>2];
   $233 = $232 * 4294967296.0;
   $234 = $233 < 4294967296.0;
   if ($234) {
    $235 = $4;
    $236 = ((($235)) + 8|0);
    $237 = +HEAPF32[$236>>2];
    $238 = $237 * 4294967296.0;
    $240 = $238;
   } else {
    $240 = 4294967296.0;
   }
  }
  $239 = (~~(($240))>>>0);
  $241 = ((($9)) + 8|0);
  HEAP32[$241>>2] = $239;
  $242 = $3;
  (_nk_memcopy($242,$9,12)|0);
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  $243 = $4;
  $244 = +HEAPF32[$243>>2];
  $245 = $244 * 4294967296.0;
  $246 = $245 < 4294967296.0;
  if ($246) {
   $247 = $4;
   $248 = +HEAPF32[$247>>2];
   $249 = $248 * 4294967296.0;
   $251 = $249;
  } else {
   $251 = 4294967296.0;
  }
  $250 = $251 < 0.0;
  if ($250) {
   $260 = 0.0;
  } else {
   $252 = $4;
   $253 = +HEAPF32[$252>>2];
   $254 = $253 * 4294967296.0;
   $255 = $254 < 4294967296.0;
   if ($255) {
    $256 = $4;
    $257 = +HEAPF32[$256>>2];
    $258 = $257 * 4294967296.0;
    $260 = $258;
   } else {
    $260 = 4294967296.0;
   }
  }
  $259 = (~~(($260))>>>0);
  HEAP32[$10>>2] = $259;
  $261 = $4;
  $262 = ((($261)) + 4|0);
  $263 = +HEAPF32[$262>>2];
  $264 = $263 * 4294967296.0;
  $265 = $264 < 4294967296.0;
  if ($265) {
   $266 = $4;
   $267 = ((($266)) + 4|0);
   $268 = +HEAPF32[$267>>2];
   $269 = $268 * 4294967296.0;
   $271 = $269;
  } else {
   $271 = 4294967296.0;
  }
  $270 = $271 < 0.0;
  if ($270) {
   $282 = 0.0;
  } else {
   $272 = $4;
   $273 = ((($272)) + 4|0);
   $274 = +HEAPF32[$273>>2];
   $275 = $274 * 4294967296.0;
   $276 = $275 < 4294967296.0;
   if ($276) {
    $277 = $4;
    $278 = ((($277)) + 4|0);
    $279 = +HEAPF32[$278>>2];
    $280 = $279 * 4294967296.0;
    $282 = $280;
   } else {
    $282 = 4294967296.0;
   }
  }
  $281 = (~~(($282))>>>0);
  $283 = ((($10)) + 4|0);
  HEAP32[$283>>2] = $281;
  $284 = $4;
  $285 = ((($284)) + 8|0);
  $286 = +HEAPF32[$285>>2];
  $287 = $286 * 4294967296.0;
  $288 = $287 < 4294967296.0;
  if ($288) {
   $289 = $4;
   $290 = ((($289)) + 8|0);
   $291 = +HEAPF32[$290>>2];
   $292 = $291 * 4294967296.0;
   $294 = $292;
  } else {
   $294 = 4294967296.0;
  }
  $293 = $294 < 0.0;
  if ($293) {
   $305 = 0.0;
  } else {
   $295 = $4;
   $296 = ((($295)) + 8|0);
   $297 = +HEAPF32[$296>>2];
   $298 = $297 * 4294967296.0;
   $299 = $298 < 4294967296.0;
   if ($299) {
    $300 = $4;
    $301 = ((($300)) + 8|0);
    $302 = +HEAPF32[$301>>2];
    $303 = $302 * 4294967296.0;
    $305 = $303;
   } else {
    $305 = 4294967296.0;
   }
  }
  $304 = (~~(($305))>>>0);
  $306 = ((($10)) + 8|0);
  HEAP32[$306>>2] = $304;
  $307 = $4;
  $308 = ((($307)) + 12|0);
  $309 = +HEAPF32[$308>>2];
  $310 = $309 * 4294967296.0;
  $311 = $310 < 4294967296.0;
  if ($311) {
   $312 = $4;
   $313 = ((($312)) + 12|0);
   $314 = +HEAPF32[$313>>2];
   $315 = $314 * 4294967296.0;
   $317 = $315;
  } else {
   $317 = 4294967296.0;
  }
  $316 = $317 < 0.0;
  if ($316) {
   $328 = 0.0;
  } else {
   $318 = $4;
   $319 = ((($318)) + 12|0);
   $320 = +HEAPF32[$319>>2];
   $321 = $320 * 4294967296.0;
   $322 = $321 < 4294967296.0;
   if ($322) {
    $323 = $4;
    $324 = ((($323)) + 12|0);
    $325 = +HEAPF32[$324>>2];
    $326 = $325 * 4294967296.0;
    $328 = $326;
   } else {
    $328 = 4294967296.0;
   }
  }
  $327 = (~~(($328))>>>0);
  $329 = ((($10)) + 12|0);
  HEAP32[$329>>2] = $327;
  $330 = $3;
  (_nk_memcopy($330,$10,16)|0);
  STACKTOP = sp;return;
  break;
 }
 case 14:  {
  $331 = $3;
  $332 = $4;
  (_nk_memcopy($331,$332,16)|0);
  STACKTOP = sp;return;
  break;
 }
 case 15:  {
  $333 = $4;
  $334 = +HEAPF32[$333>>2];
  $335 = 1.0 < $334;
  if ($335) {
   $339 = 1.0;
  } else {
   $336 = $4;
   $337 = +HEAPF32[$336>>2];
   $339 = $337;
  }
  $338 = 0.0 < $339;
  if ($338) {
   $340 = $4;
   $341 = +HEAPF32[$340>>2];
   $342 = 1.0 < $341;
   if ($342) {
    $346 = 1.0;
   } else {
    $343 = $4;
    $344 = +HEAPF32[$343>>2];
    $346 = $344;
   }
  } else {
   $346 = 0.0;
  }
  $345 = $346;
  HEAPF64[$11>>3] = $345;
  $347 = $4;
  $348 = ((($347)) + 4|0);
  $349 = +HEAPF32[$348>>2];
  $350 = 1.0 < $349;
  if ($350) {
   $355 = 1.0;
  } else {
   $351 = $4;
   $352 = ((($351)) + 4|0);
   $353 = +HEAPF32[$352>>2];
   $355 = $353;
  }
  $354 = 0.0 < $355;
  if ($354) {
   $356 = $4;
   $357 = ((($356)) + 4|0);
   $358 = +HEAPF32[$357>>2];
   $359 = 1.0 < $358;
   if ($359) {
    $364 = 1.0;
   } else {
    $360 = $4;
    $361 = ((($360)) + 4|0);
    $362 = +HEAPF32[$361>>2];
    $364 = $362;
   }
  } else {
   $364 = 0.0;
  }
  $363 = $364;
  $365 = ((($11)) + 8|0);
  HEAPF64[$365>>3] = $363;
  $366 = $4;
  $367 = ((($366)) + 8|0);
  $368 = +HEAPF32[$367>>2];
  $369 = 1.0 < $368;
  if ($369) {
   $374 = 1.0;
  } else {
   $370 = $4;
   $371 = ((($370)) + 8|0);
   $372 = +HEAPF32[$371>>2];
   $374 = $372;
  }
  $373 = 0.0 < $374;
  if ($373) {
   $375 = $4;
   $376 = ((($375)) + 8|0);
   $377 = +HEAPF32[$376>>2];
   $378 = 1.0 < $377;
   if ($378) {
    $383 = 1.0;
   } else {
    $379 = $4;
    $380 = ((($379)) + 8|0);
    $381 = +HEAPF32[$380>>2];
    $383 = $381;
   }
  } else {
   $383 = 0.0;
  }
  $382 = $383;
  $384 = ((($11)) + 16|0);
  HEAPF64[$384>>3] = $382;
  $385 = $4;
  $386 = ((($385)) + 12|0);
  $387 = +HEAPF32[$386>>2];
  $388 = 1.0 < $387;
  if ($388) {
   $393 = 1.0;
  } else {
   $389 = $4;
   $390 = ((($389)) + 12|0);
   $391 = +HEAPF32[$390>>2];
   $393 = $391;
  }
  $392 = 0.0 < $393;
  if ($392) {
   $394 = $4;
   $395 = ((($394)) + 12|0);
   $396 = +HEAPF32[$395>>2];
   $397 = 1.0 < $396;
   if ($397) {
    $402 = 1.0;
   } else {
    $398 = $4;
    $399 = ((($398)) + 12|0);
    $400 = +HEAPF32[$399>>2];
    $402 = $400;
   }
  } else {
   $402 = 0.0;
  }
  $401 = $402;
  $403 = ((($11)) + 24|0);
  HEAPF64[$403>>3] = $401;
  $404 = $3;
  (_nk_memcopy($404,$11,32)|0);
  STACKTOP = sp;return;
  break;
 }
 case 17: case 16:  {
  $405 = $4;
  _nk_rgba_fv($12,$405);
  ;HEAP8[$$byval_copy>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$12+3>>0]|0;
  $406 = (_nk_color_u32($$byval_copy)|0);
  HEAP32[$13>>2] = $406;
  $407 = $3;
  (_nk_memcopy($407,$13,4)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((22251|0),(1320|0),6789,(22200|0));
  // unreachable;
 }
 }
}
function _nk_draw_list_push_command($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((2245|0),(1320|0),6662,(22315|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ((($10)) + 160|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_nk_buffer_alloc($12,1,24,4)|0);
 $5 = $13;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $3 = 0;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 $16 = $4;
 $17 = ((($16)) + 180|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = $4;
  $21 = ((($20)) + 160|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_nk_buffer_memory($22)|0);
  $6 = $23;
  $24 = $4;
  $25 = ((($24)) + 160|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_nk_buffer_total($26)|0);
  $7 = $27;
  $28 = $6;
  $29 = $7;
  $30 = (($28) + ($29)|0);
  $6 = $30;
  $31 = $6;
  $32 = $5;
  $33 = $31;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  $36 = $4;
  $37 = ((($36)) + 184|0);
  HEAP32[$37>>2] = $35;
 }
 $38 = $5;
 HEAP32[$38>>2] = 0;
 $39 = $5;
 $40 = ((($39)) + 4|0);
 ;HEAP32[$40>>2]=HEAP32[$1>>2]|0;HEAP32[$40+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$40+12>>2]=HEAP32[$1+12>>2]|0;
 $41 = $5;
 $42 = ((($41)) + 20|0);
 ;HEAP32[$42>>2]=HEAP32[$2>>2]|0;
 $43 = $4;
 $44 = ((($43)) + 180|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[$44>>2] = $46;
 $47 = $4;
 ;HEAP32[$47>>2]=HEAP32[$1>>2]|0;HEAP32[$47+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$47+12>>2]=HEAP32[$1+12>>2]|0;
 $48 = $5;
 $3 = $48;
 $49 = $3;
 STACKTOP = sp;return ($49|0);
}
function _nk_decompress_token($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)>=(32);
 $6 = $1;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 if ($5) {
  $9 = ($8|0)>=(128);
  if ($9) {
   $10 = HEAP32[11209]|0;
   $11 = $1;
   $12 = ((($11)) + 1|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = (0 - ($14))|0;
   $16 = (($10) + ($15)|0);
   $17 = ((($16)) + -1|0);
   $18 = $1;
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = (($20) - 128)|0;
   $22 = (($21) + 1)|0;
   _nk__match($17,$22);
   $23 = $1;
   $24 = ((($23)) + 2|0);
   $1 = $24;
   $258 = $1;
   STACKTOP = sp;return ($258|0);
  }
  $25 = $1;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = ($27|0)>=(64);
  if ($28) {
   $29 = HEAP32[11209]|0;
   $30 = $1;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $32 << 8;
   $34 = $1;
   $35 = ((($34)) + 1|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = (($33) + ($37))|0;
   $39 = (($38) - 16384)|0;
   $40 = (($39) + 1)|0;
   $41 = (0 - ($40))|0;
   $42 = (($29) + ($41)|0);
   $43 = $1;
   $44 = ((($43)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = (($46) + 1)|0;
   _nk__match($42,$47);
   $48 = $1;
   $49 = ((($48)) + 3|0);
   $1 = $49;
   $258 = $1;
   STACKTOP = sp;return ($258|0);
  } else {
   $50 = $1;
   $51 = ((($50)) + 1|0);
   $52 = $1;
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = (($54) - 32)|0;
   $56 = (($55) + 1)|0;
   _nk__lit($51,$56);
   $57 = $1;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (($59) - 32)|0;
   $61 = (($60) + 1)|0;
   $62 = (1 + ($61))|0;
   $63 = $1;
   $64 = (($63) + ($62)|0);
   $1 = $64;
   $258 = $1;
   STACKTOP = sp;return ($258|0);
  }
 }
 $65 = ($8|0)>=(24);
 if ($65) {
  $66 = HEAP32[11209]|0;
  $67 = $1;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $69 << 16;
  $71 = $1;
  $72 = ((($71)) + 1|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 << 8;
  $76 = $1;
  $77 = ((($76)) + 2|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($75) + ($79))|0;
  $81 = (($70) + ($80))|0;
  $82 = (($81) - 1572864)|0;
  $83 = (($82) + 1)|0;
  $84 = (0 - ($83))|0;
  $85 = (($66) + ($84)|0);
  $86 = $1;
  $87 = ((($86)) + 3|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = (($89) + 1)|0;
  _nk__match($85,$90);
  $91 = $1;
  $92 = ((($91)) + 4|0);
  $1 = $92;
  $258 = $1;
  STACKTOP = sp;return ($258|0);
 }
 $93 = $1;
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = ($95|0)>=(16);
 if ($96) {
  $97 = HEAP32[11209]|0;
  $98 = $1;
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = $100 << 16;
  $102 = $1;
  $103 = ((($102)) + 1|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $105 << 8;
  $107 = $1;
  $108 = ((($107)) + 2|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = (($106) + ($110))|0;
  $112 = (($101) + ($111))|0;
  $113 = (($112) - 1048576)|0;
  $114 = (($113) + 1)|0;
  $115 = (0 - ($114))|0;
  $116 = (($97) + ($115)|0);
  $117 = $1;
  $118 = ((($117)) + 3|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = $120 << 8;
  $122 = $1;
  $123 = ((($122)) + 4|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = (($121) + ($125))|0;
  $127 = (($126) + 1)|0;
  _nk__match($116,$127);
  $128 = $1;
  $129 = ((($128)) + 5|0);
  $1 = $129;
  $258 = $1;
  STACKTOP = sp;return ($258|0);
 }
 $130 = $1;
 $131 = HEAP8[$130>>0]|0;
 $132 = $131&255;
 $133 = ($132|0)>=(8);
 $134 = $1;
 if ($133) {
  $135 = ((($134)) + 2|0);
  $136 = $1;
  $137 = HEAP8[$136>>0]|0;
  $138 = $137&255;
  $139 = $138 << 8;
  $140 = $1;
  $141 = ((($140)) + 1|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = (($139) + ($143))|0;
  $145 = (($144) - 2048)|0;
  $146 = (($145) + 1)|0;
  _nk__lit($135,$146);
  $147 = $1;
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 << 8;
  $151 = $1;
  $152 = ((($151)) + 1|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $153&255;
  $155 = (($150) + ($154))|0;
  $156 = (($155) - 2048)|0;
  $157 = (($156) + 1)|0;
  $158 = (2 + ($157))|0;
  $159 = $1;
  $160 = (($159) + ($158)|0);
  $1 = $160;
  $258 = $1;
  STACKTOP = sp;return ($258|0);
 }
 $161 = HEAP8[$134>>0]|0;
 $162 = $161&255;
 $163 = ($162|0)==(7);
 $164 = $1;
 if ($163) {
  $165 = ((($164)) + 3|0);
  $166 = $1;
  $167 = ((($166)) + 1|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = $168&255;
  $170 = $169 << 8;
  $171 = $1;
  $172 = ((($171)) + 2|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = (($170) + ($174))|0;
  $176 = (($175) + 1)|0;
  _nk__lit($165,$176);
  $177 = $1;
  $178 = ((($177)) + 1|0);
  $179 = HEAP8[$178>>0]|0;
  $180 = $179&255;
  $181 = $180 << 8;
  $182 = $1;
  $183 = ((($182)) + 2|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = (($181) + ($185))|0;
  $187 = (($186) + 1)|0;
  $188 = (3 + ($187))|0;
  $189 = $1;
  $190 = (($189) + ($188)|0);
  $1 = $190;
  $258 = $1;
  STACKTOP = sp;return ($258|0);
 }
 $191 = HEAP8[$164>>0]|0;
 $192 = $191&255;
 $193 = ($192|0)==(6);
 if ($193) {
  $194 = HEAP32[11209]|0;
  $195 = $1;
  $196 = ((($195)) + 1|0);
  $197 = HEAP8[$196>>0]|0;
  $198 = $197&255;
  $199 = $198 << 16;
  $200 = $1;
  $201 = ((($200)) + 2|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = $203 << 8;
  $205 = $1;
  $206 = ((($205)) + 3|0);
  $207 = HEAP8[$206>>0]|0;
  $208 = $207&255;
  $209 = (($204) + ($208))|0;
  $210 = (($199) + ($209))|0;
  $211 = (($210) + 1)|0;
  $212 = (0 - ($211))|0;
  $213 = (($194) + ($212)|0);
  $214 = $1;
  $215 = ((($214)) + 4|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $216&255;
  $218 = (($217) + 1)|0;
  _nk__match($213,$218);
  $219 = $1;
  $220 = ((($219)) + 5|0);
  $1 = $220;
  $258 = $1;
  STACKTOP = sp;return ($258|0);
 }
 $221 = $1;
 $222 = HEAP8[$221>>0]|0;
 $223 = $222&255;
 $224 = ($223|0)==(4);
 if (!($224)) {
  $258 = $1;
  STACKTOP = sp;return ($258|0);
 }
 $225 = HEAP32[11209]|0;
 $226 = $1;
 $227 = ((($226)) + 1|0);
 $228 = HEAP8[$227>>0]|0;
 $229 = $228&255;
 $230 = $229 << 16;
 $231 = $1;
 $232 = ((($231)) + 2|0);
 $233 = HEAP8[$232>>0]|0;
 $234 = $233&255;
 $235 = $234 << 8;
 $236 = $1;
 $237 = ((($236)) + 3|0);
 $238 = HEAP8[$237>>0]|0;
 $239 = $238&255;
 $240 = (($235) + ($239))|0;
 $241 = (($230) + ($240))|0;
 $242 = (($241) + 1)|0;
 $243 = (0 - ($242))|0;
 $244 = (($225) + ($243)|0);
 $245 = $1;
 $246 = ((($245)) + 4|0);
 $247 = HEAP8[$246>>0]|0;
 $248 = $247&255;
 $249 = $248 << 8;
 $250 = $1;
 $251 = ((($250)) + 5|0);
 $252 = HEAP8[$251>>0]|0;
 $253 = $252&255;
 $254 = (($249) + ($253))|0;
 $255 = (($254) + 1)|0;
 _nk__match($244,$255);
 $256 = $1;
 $257 = ((($256)) + 6|0);
 $1 = $257;
 $258 = $1;
 STACKTOP = sp;return ($258|0);
}
function _nk_adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 65521;
 $11 = $3;
 $12 = $11 & 65535;
 $7 = $12;
 $13 = $3;
 $14 = $13 >>> 16;
 $8 = $14;
 $15 = $5;
 $16 = (($15>>>0) % 5552)&-1;
 $9 = $16;
 while(1) {
  $17 = $5;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   break;
  }
  $10 = 0;
  while(1) {
   $19 = $10;
   $20 = (($19) + 7)|0;
   $21 = $9;
   $22 = ($20>>>0)<($21>>>0);
   if (!($22)) {
    break;
   }
   $23 = $4;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $7;
   $27 = (($26) + ($25))|0;
   $7 = $27;
   $28 = $7;
   $29 = $8;
   $30 = (($29) + ($28))|0;
   $8 = $30;
   $31 = $4;
   $32 = ((($31)) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $7;
   $36 = (($35) + ($34))|0;
   $7 = $36;
   $37 = $7;
   $38 = $8;
   $39 = (($38) + ($37))|0;
   $8 = $39;
   $40 = $4;
   $41 = ((($40)) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = $7;
   $45 = (($44) + ($43))|0;
   $7 = $45;
   $46 = $7;
   $47 = $8;
   $48 = (($47) + ($46))|0;
   $8 = $48;
   $49 = $4;
   $50 = ((($49)) + 3|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $7;
   $54 = (($53) + ($52))|0;
   $7 = $54;
   $55 = $7;
   $56 = $8;
   $57 = (($56) + ($55))|0;
   $8 = $57;
   $58 = $4;
   $59 = ((($58)) + 4|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $7;
   $63 = (($62) + ($61))|0;
   $7 = $63;
   $64 = $7;
   $65 = $8;
   $66 = (($65) + ($64))|0;
   $8 = $66;
   $67 = $4;
   $68 = ((($67)) + 5|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = $7;
   $72 = (($71) + ($70))|0;
   $7 = $72;
   $73 = $7;
   $74 = $8;
   $75 = (($74) + ($73))|0;
   $8 = $75;
   $76 = $4;
   $77 = ((($76)) + 6|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $7;
   $81 = (($80) + ($79))|0;
   $7 = $81;
   $82 = $7;
   $83 = $8;
   $84 = (($83) + ($82))|0;
   $8 = $84;
   $85 = $4;
   $86 = ((($85)) + 7|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $89 = $7;
   $90 = (($89) + ($88))|0;
   $7 = $90;
   $91 = $7;
   $92 = $8;
   $93 = (($92) + ($91))|0;
   $8 = $93;
   $94 = $4;
   $95 = ((($94)) + 8|0);
   $4 = $95;
   $96 = $10;
   $97 = (($96) + 8)|0;
   $10 = $97;
  }
  while(1) {
   $98 = $10;
   $99 = $9;
   $100 = ($98>>>0)<($99>>>0);
   if (!($100)) {
    break;
   }
   $101 = $4;
   $102 = ((($101)) + 1|0);
   $4 = $102;
   $103 = HEAP8[$101>>0]|0;
   $104 = $103&255;
   $105 = $7;
   $106 = (($105) + ($104))|0;
   $7 = $106;
   $107 = $7;
   $108 = $8;
   $109 = (($108) + ($107))|0;
   $8 = $109;
   $110 = $10;
   $111 = (($110) + 1)|0;
   $10 = $111;
  }
  $112 = $7;
  $113 = (($112>>>0) % 65521)&-1;
  $7 = $113;
  $114 = $8;
  $115 = (($114>>>0) % 65521)&-1;
  $8 = $115;
  $116 = $9;
  $117 = $5;
  $118 = (($117) - ($116))|0;
  $5 = $118;
  $9 = 5552;
 }
 $119 = $8;
 $120 = $119 << 16;
 $121 = $7;
 $122 = (($120) + ($121))|0;
 STACKTOP = sp;return ($122|0);
}
function _nk__match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[11209]|0;
 $5 = $3;
 $6 = (($4) + ($5)|0);
 $7 = HEAP32[11207]|0;
 $8 = ($6>>>0)<=($7>>>0);
 if (!($8)) {
  ___assert_fail((22549|0),(1320|0),10606,(22582|0));
  // unreachable;
 }
 $9 = HEAP32[11209]|0;
 $10 = $3;
 $11 = (($9) + ($10)|0);
 $12 = HEAP32[11207]|0;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $14 = $3;
  $15 = HEAP32[11209]|0;
  $16 = (($15) + ($14)|0);
  HEAP32[11209] = $16;
  STACKTOP = sp;return;
 }
 $17 = $2;
 $18 = HEAP32[11208]|0;
 $19 = ($17>>>0)<($18>>>0);
 if ($19) {
  $20 = HEAP32[11207]|0;
  $21 = ((($20)) + 1|0);
  HEAP32[11209] = $21;
  STACKTOP = sp;return;
 }
 while(1) {
  $22 = $3;
  $23 = (($22) + -1)|0;
  $3 = $23;
  $24 = ($22|0)!=(0);
  if (!($24)) {
   break;
  }
  $25 = $2;
  $26 = ((($25)) + 1|0);
  $2 = $26;
  $27 = HEAP8[$25>>0]|0;
  $28 = HEAP32[11209]|0;
  $29 = ((($28)) + 1|0);
  HEAP32[11209] = $29;
  HEAP8[$28>>0] = $27;
 }
 STACKTOP = sp;return;
}
function _nk__lit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[11209]|0;
 $5 = $3;
 $6 = (($4) + ($5)|0);
 $7 = HEAP32[11207]|0;
 $8 = ($6>>>0)<=($7>>>0);
 if (!($8)) {
  ___assert_fail((22549|0),(1320|0),10615,(22592|0));
  // unreachable;
 }
 $9 = HEAP32[11209]|0;
 $10 = $3;
 $11 = (($9) + ($10)|0);
 $12 = HEAP32[11207]|0;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $14 = $3;
  $15 = HEAP32[11209]|0;
  $16 = (($15) + ($14)|0);
  HEAP32[11209] = $16;
  STACKTOP = sp;return;
 }
 $17 = $2;
 $18 = HEAP32[11205]|0;
 $19 = ($17>>>0)<($18>>>0);
 if ($19) {
  $20 = HEAP32[11207]|0;
  $21 = ((($20)) + 1|0);
  HEAP32[11209] = $21;
  STACKTOP = sp;return;
 } else {
  $22 = HEAP32[11209]|0;
  $23 = $2;
  $24 = $3;
  (_nk_memcopy($22,$23,$24)|0);
  $25 = $3;
  $26 = HEAP32[11209]|0;
  $27 = (($26) + ($25)|0);
  HEAP32[11209] = $27;
  STACKTOP = sp;return;
 }
}
function _nk_decode_85_byte($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)>=(92);
 $5 = $1;
 $6 = $5 << 24 >> 24;
 $7 = (($6) - 36)|0;
 $8 = (($6) - 35)|0;
 $9 = $4 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _nk_range_glyph_count($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 $4 = 0;
 while(1) {
  $9 = $4;
  $10 = $3;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $4;
  $13 = $12<<1;
  $14 = (($13) + 0)|0;
  $15 = $2;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $18 = $4;
  $19 = $18<<1;
  $20 = (($19) + 1)|0;
  $21 = $2;
  $22 = (($21) + ($20<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $8 = $23;
  $24 = $8;
  $25 = $7;
  $26 = ($24>>>0)>=($25>>>0);
  if (!($26)) {
   label = 4;
   break;
  }
  $27 = $8;
  $28 = $7;
  $29 = (($27) - ($28))|0;
  $30 = (($29) + 1)|0;
  $6 = $30;
  $31 = $6;
  $32 = $5;
  $33 = (($32) + ($31))|0;
  $5 = $33;
  $34 = $4;
  $35 = (($34) + 1)|0;
  $4 = $35;
 }
 if ((label|0) == 4) {
  ___assert_fail((22645|0),(1320|0),9945,(22652|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _nk_tt_InitFont($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $5;
 $11 = $13;
 $14 = $11;
 $15 = $4;
 HEAP32[$15>>2] = $14;
 $16 = $6;
 $17 = $4;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = $11;
 $20 = $6;
 $21 = (_nk_tt__find_table($19,$20,22795)|0);
 $7 = $21;
 $22 = $11;
 $23 = $6;
 $24 = (_nk_tt__find_table($22,$23,22800)|0);
 $25 = $4;
 $26 = ((($25)) + 12|0);
 HEAP32[$26>>2] = $24;
 $27 = $11;
 $28 = $6;
 $29 = (_nk_tt__find_table($27,$28,22805)|0);
 $30 = $4;
 $31 = ((($30)) + 16|0);
 HEAP32[$31>>2] = $29;
 $32 = $11;
 $33 = $6;
 $34 = (_nk_tt__find_table($32,$33,22810)|0);
 $35 = $4;
 $36 = ((($35)) + 20|0);
 HEAP32[$36>>2] = $34;
 $37 = $11;
 $38 = $6;
 $39 = (_nk_tt__find_table($37,$38,22815)|0);
 $40 = $4;
 $41 = ((($40)) + 24|0);
 HEAP32[$41>>2] = $39;
 $42 = $11;
 $43 = $6;
 $44 = (_nk_tt__find_table($42,$43,22820)|0);
 $45 = $4;
 $46 = ((($45)) + 28|0);
 HEAP32[$46>>2] = $44;
 $47 = $11;
 $48 = $6;
 $49 = (_nk_tt__find_table($47,$48,22825)|0);
 $50 = $4;
 $51 = ((($50)) + 32|0);
 HEAP32[$51>>2] = $49;
 $52 = $7;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $4;
  $55 = ((($54)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = $4;
   $59 = ((($58)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $4;
    $63 = ((($62)) + 20|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(0);
    if ($65) {
     $66 = $4;
     $67 = ((($66)) + 24|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)!=(0);
     if ($69) {
      $70 = $4;
      $71 = ((($70)) + 28|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)!=(0);
      if ($73) {
       $74 = $11;
       $75 = $6;
       $76 = (_nk_tt__find_table($74,$75,22830)|0);
       $8 = $76;
       $77 = $8;
       $78 = ($77|0)!=(0);
       if ($78) {
        $79 = $11;
        $80 = $8;
        $81 = (($79) + ($80)|0);
        $82 = ((($81)) + 4|0);
        $83 = (_nk_ttUSHORT($82)|0);
        $84 = $83&65535;
        $85 = $4;
        $86 = ((($85)) + 8|0);
        HEAP32[$86>>2] = $84;
       } else {
        $87 = $4;
        $88 = ((($87)) + 8|0);
        HEAP32[$88>>2] = 65535;
       }
       $89 = $11;
       $90 = $7;
       $91 = (($89) + ($90)|0);
       $92 = ((($91)) + 2|0);
       $93 = (_nk_ttUSHORT($92)|0);
       $94 = $93&65535;
       $10 = $94;
       $95 = $4;
       $96 = ((($95)) + 36|0);
       HEAP32[$96>>2] = 0;
       $9 = 0;
       while(1) {
        $97 = $9;
        $98 = $10;
        $99 = ($97|0)<($98|0);
        if (!($99)) {
         break;
        }
        $100 = $7;
        $101 = (($100) + 4)|0;
        $102 = $9;
        $103 = $102<<3;
        $104 = (($101) + ($103))|0;
        $12 = $104;
        $105 = $11;
        $106 = $12;
        $107 = (($105) + ($106)|0);
        $108 = (_nk_ttUSHORT($107)|0);
        $109 = $108&65535;
        L15: do {
         switch ($109|0) {
         case 3:  {
          $110 = $11;
          $111 = $12;
          $112 = (($110) + ($111)|0);
          $113 = ((($112)) + 2|0);
          $114 = (_nk_ttUSHORT($113)|0);
          $115 = $114&65535;
          switch ($115|0) {
          case 10: case 1:  {
           break;
          }
          default: {
           break L15;
          }
          }
          $116 = $7;
          $117 = $11;
          $118 = $12;
          $119 = (($117) + ($118)|0);
          $120 = ((($119)) + 4|0);
          $121 = (_nk_ttULONG($120)|0);
          $122 = (($116) + ($121))|0;
          $123 = $4;
          $124 = ((($123)) + 36|0);
          HEAP32[$124>>2] = $122;
          break;
         }
         case 0:  {
          $125 = $7;
          $126 = $11;
          $127 = $12;
          $128 = (($126) + ($127)|0);
          $129 = ((($128)) + 4|0);
          $130 = (_nk_ttULONG($129)|0);
          $131 = (($125) + ($130))|0;
          $132 = $4;
          $133 = ((($132)) + 36|0);
          HEAP32[$133>>2] = $131;
          break;
         }
         default: {
         }
         }
        } while(0);
        $134 = $9;
        $135 = (($134) + 1)|0;
        $9 = $135;
       }
       $136 = $4;
       $137 = ((($136)) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = ($138|0)==(0);
       if ($139) {
        $3 = 0;
        $150 = $3;
        STACKTOP = sp;return ($150|0);
       } else {
        $140 = $11;
        $141 = $4;
        $142 = ((($141)) + 16|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = (($140) + ($143)|0);
        $145 = ((($144)) + 50|0);
        $146 = (_nk_ttUSHORT($145)|0);
        $147 = $146&65535;
        $148 = $4;
        $149 = ((($148)) + 40|0);
        HEAP32[$149>>2] = $147;
        $3 = 1;
        $150 = $3;
        STACKTOP = sp;return ($150|0);
       }
      }
     }
    }
   }
  }
 }
 $3 = 0;
 $150 = $3;
 STACKTOP = sp;return ($150|0);
}
function _nk_tt_PackBegin($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy4 = sp + 56|0;
 $$byval_copy3 = sp + 52|0;
 $$byval_copy2 = sp + 48|0;
 $$byval_copy = sp + 44|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $18 = $10;
 $19 = $13;
 $20 = (($18) - ($19))|0;
 $15 = $20;
 $21 = $14;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $14;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$24>>2]|0;
 $25 = (FUNCTION_TABLE_iiii[$23 & 15]($$byval_copy,0,48)|0);
 $16 = $25;
 $26 = $14;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $14;
 $30 = $15;
 $31 = $30<<3;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$29>>2]|0;
 $32 = (FUNCTION_TABLE_iiii[$28 & 15]($$byval_copy2,0,$31)|0);
 $17 = $32;
 $33 = $16;
 $34 = ($33|0)==(0|0);
 $35 = $17;
 $36 = ($35|0)==(0|0);
 $or$cond = $34 | $36;
 if (!($or$cond)) {
  $51 = $10;
  $52 = $8;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $51;
  $54 = $11;
  $55 = $8;
  $56 = ((($55)) + 8|0);
  HEAP32[$56>>2] = $54;
  $57 = $9;
  $58 = $8;
  $59 = ((($58)) + 28|0);
  HEAP32[$59>>2] = $57;
  $60 = $16;
  $61 = $8;
  HEAP32[$61>>2] = $60;
  $62 = $17;
  $63 = $8;
  $64 = ((($63)) + 32|0);
  HEAP32[$64>>2] = $62;
  $65 = $13;
  $66 = $8;
  $67 = ((($66)) + 16|0);
  HEAP32[$67>>2] = $65;
  $68 = $12;
  $69 = ($68|0)!=(0);
  $70 = $12;
  $71 = $10;
  $72 = $69 ? $70 : $71;
  $73 = $8;
  $74 = ((($73)) + 12|0);
  HEAP32[$74>>2] = $72;
  $75 = $8;
  $76 = ((($75)) + 20|0);
  HEAP32[$76>>2] = 1;
  $77 = $8;
  $78 = ((($77)) + 24|0);
  HEAP32[$78>>2] = 1;
  $79 = $16;
  $80 = $10;
  $81 = $13;
  $82 = (($80) - ($81))|0;
  $83 = $11;
  $84 = $13;
  $85 = (($83) - ($84))|0;
  $86 = $17;
  $87 = $15;
  _nk_rp_init_target($79,$82,$85,$86,$87);
  $88 = $9;
  $89 = ($88|0)!=(0|0);
  if ($89) {
   $90 = $9;
   $91 = $10;
   $92 = $11;
   $93 = Math_imul($91, $92)|0;
   _nk_memset($90,0,$93);
  }
  $7 = 1;
  $94 = $7;
  STACKTOP = sp;return ($94|0);
 }
 $37 = $16;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $14;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $14;
  $43 = $16;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vii[$41 & 31]($$byval_copy3,$43);
 }
 $44 = $17;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $14;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $14;
  $50 = $17;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$48 & 31]($$byval_copy4,$50);
 }
 $7 = 0;
 $94 = $7;
 STACKTOP = sp;return ($94|0);
}
function _nk_tt_PackSetOversampling($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6>>>0)<=(8);
 if (!($7)) {
  ___assert_fail((22889|0),(1320|0),9603,(22907|0));
  // unreachable;
 }
 $8 = $5;
 $9 = ($8>>>0)<=(8);
 if (!($9)) {
  ___assert_fail((22933|0),(1320|0),9604,(22907|0));
  // unreachable;
 }
 $10 = $4;
 $11 = ($10>>>0)<=(8);
 if ($11) {
  $12 = $4;
  $13 = $3;
  $14 = ((($13)) + 20|0);
  HEAP32[$14>>2] = $12;
 }
 $15 = $5;
 $16 = ($15>>>0)<=(8);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $5;
 $18 = $3;
 $19 = ((($18)) + 24|0);
 HEAP32[$19>>2] = $17;
 STACKTOP = sp;return;
}
function _nk_rp_pack_rects($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $6;
  $12 = $6;
  $13 = $4;
  $14 = (($13) + ($12<<4)|0);
  $15 = ((($14)) + 12|0);
  HEAP32[$15>>2] = $11;
  $16 = $6;
  $17 = (($16) + 1)|0;
  $6 = $17;
 }
 $18 = $4;
 $19 = $5;
 _nk_rp_qsort($18,$19,24);
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = $5;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = $6;
  $25 = $4;
  $26 = (($25) + ($24<<4)|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = $6;
  $31 = $4;
  $32 = (($31) + ($30<<4)|0);
  $33 = ((($32)) + 6|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  _nk_rp__skyline_pack_rectangle($7,$23,$29,$35);
  $36 = ((($7)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0|0);
  if ($38) {
   $39 = HEAP32[$7>>2]|0;
   $40 = $39&65535;
   $41 = $6;
   $42 = $4;
   $43 = (($42) + ($41<<4)|0);
   $44 = ((($43)) + 8|0);
   HEAP16[$44>>1] = $40;
   $45 = ((($7)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46&65535;
   $48 = $6;
   $49 = $4;
   $50 = (($49) + ($48<<4)|0);
   $51 = ((($50)) + 10|0);
   HEAP16[$51>>1] = $47;
  } else {
   $52 = $6;
   $53 = $4;
   $54 = (($53) + ($52<<4)|0);
   $55 = ((($54)) + 10|0);
   HEAP16[$55>>1] = -1;
   $56 = $6;
   $57 = $4;
   $58 = (($57) + ($56<<4)|0);
   $59 = ((($58)) + 8|0);
   HEAP16[$59>>1] = -1;
  }
  $60 = $6;
  $61 = (($60) + 1)|0;
  $6 = $61;
 }
 $62 = $4;
 $63 = $5;
 _nk_rp_qsort($62,$63,25);
 $6 = 0;
 while(1) {
  $64 = $6;
  $65 = $5;
  $66 = ($64|0)<($65|0);
  if (!($66)) {
   break;
  }
  $67 = $6;
  $68 = $4;
  $69 = (($68) + ($67<<4)|0);
  $70 = ((($69)) + 8|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = ($72|0)==(65535);
  if ($73) {
   $74 = $6;
   $75 = $4;
   $76 = (($75) + ($74<<4)|0);
   $77 = ((($76)) + 10|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78&65535;
   $80 = ($79|0)==(65535);
   $82 = $80;
  } else {
   $82 = 0;
  }
  $81 = $82 ^ 1;
  $83 = $81&1;
  $84 = $6;
  $85 = $4;
  $86 = (($85) + ($84<<4)|0);
  $87 = ((($86)) + 12|0);
  HEAP32[$87>>2] = $83;
  $88 = $6;
  $89 = (($88) + 1)|0;
  $6 = $89;
 }
 STACKTOP = sp;return;
}
function _nk_tt_PackFontRangesGatherRects($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0.0;
 var $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = sp + 20|0;
 $16 = sp + 16|0;
 $17 = sp + 12|0;
 $18 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = 0;
 $10 = 0;
 while(1) {
  $21 = $10;
  $22 = $8;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $10;
  $25 = $7;
  $26 = (($25) + (($24*24)|0)|0);
  $27 = +HEAPF32[$26>>2];
  $13 = $27;
  $28 = $13;
  $29 = $28 > 0.0;
  $30 = $6;
  $31 = $13;
  if ($29) {
   $32 = (+_nk_tt_ScaleForPixelHeight($30,$31));
   $35 = $32;
  } else {
   $33 = -$31;
   $34 = (+_nk_tt_ScaleForMappingEmToPixels($30,$33));
   $35 = $34;
  }
  $14 = $35;
  $36 = $5;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38&255;
  $40 = $10;
  $41 = $7;
  $42 = (($41) + (($40*24)|0)|0);
  $43 = ((($42)) + 20|0);
  HEAP8[$43>>0] = $39;
  $44 = $5;
  $45 = ((($44)) + 24|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $46&255;
  $48 = $10;
  $49 = $7;
  $50 = (($49) + (($48*24)|0)|0);
  $51 = ((($50)) + 21|0);
  HEAP8[$51>>0] = $47;
  $11 = 0;
  while(1) {
   $52 = $11;
   $53 = $10;
   $54 = $7;
   $55 = (($54) + (($53*24)|0)|0);
   $56 = ((($55)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($52|0)<($57|0);
   $59 = $10;
   if (!($58)) {
    break;
   }
   $60 = $7;
   $61 = (($60) + (($59*24)|0)|0);
   $62 = ((($61)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0);
   if ($64) {
    $65 = $10;
    $66 = $7;
    $67 = (($66) + (($65*24)|0)|0);
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $11;
    $71 = (($69) + ($70))|0;
    $80 = $71;
   } else {
    $72 = $11;
    $73 = $10;
    $74 = $7;
    $75 = (($74) + (($73*24)|0)|0);
    $76 = ((($75)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + ($72<<2)|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79;
   }
   $19 = $80;
   $81 = $6;
   $82 = $19;
   $83 = (_nk_tt_FindGlyphIndex($81,$82)|0);
   $20 = $83;
   $84 = $6;
   $85 = $20;
   $86 = $14;
   $87 = $5;
   $88 = ((($87)) + 20|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (+($89>>>0));
   $91 = $86 * $90;
   $92 = $14;
   $93 = $5;
   $94 = ((($93)) + 24|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (+($95>>>0));
   $97 = $92 * $96;
   _nk_tt_GetGlyphBitmapBoxSubpixel($84,$85,$91,$97,0.0,0.0,$15,$16,$17,$18);
   $98 = HEAP32[$17>>2]|0;
   $99 = HEAP32[$15>>2]|0;
   $100 = (($98) - ($99))|0;
   $101 = $5;
   $102 = ((($101)) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($100) + ($103))|0;
   $105 = $5;
   $106 = ((($105)) + 20|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($104) + ($107))|0;
   $109 = (($108) - 1)|0;
   $110 = $109&65535;
   $111 = $12;
   $112 = $9;
   $113 = (($112) + ($111<<4)|0);
   $114 = ((($113)) + 4|0);
   HEAP16[$114>>1] = $110;
   $115 = HEAP32[$18>>2]|0;
   $116 = HEAP32[$16>>2]|0;
   $117 = (($115) - ($116))|0;
   $118 = $5;
   $119 = ((($118)) + 16|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($117) + ($120))|0;
   $122 = $5;
   $123 = ((($122)) + 24|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($121) + ($124))|0;
   $126 = (($125) - 1)|0;
   $127 = $126&65535;
   $128 = $12;
   $129 = $9;
   $130 = (($129) + ($128<<4)|0);
   $131 = ((($130)) + 6|0);
   HEAP16[$131>>1] = $127;
   $132 = $12;
   $133 = (($132) + 1)|0;
   $12 = $133;
   $134 = $11;
   $135 = (($134) + 1)|0;
   $11 = $135;
  }
  $136 = (($59) + 1)|0;
  $10 = $136;
 }
 $137 = $12;
 STACKTOP = sp;return ($137|0);
}
function _nk_tt__find_table($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = $5;
 $13 = (($11) + ($12)|0);
 $14 = ((($13)) + 4|0);
 $15 = (_nk_ttUSHORT($14)|0);
 $16 = $15&65535;
 $7 = $16;
 $17 = $5;
 $18 = (($17) + 12)|0;
 $8 = $18;
 $9 = 0;
 while(1) {
  $19 = $9;
  $20 = $7;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   label = 9;
   break;
  }
  $22 = $8;
  $23 = $9;
  $24 = $23<<4;
  $25 = (($22) + ($24))|0;
  $10 = $25;
  $26 = $4;
  $27 = $10;
  $28 = (($26) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $6;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = ($30|0)==($33|0);
  if ($34) {
   $35 = $4;
   $36 = $10;
   $37 = (($35) + ($36)|0);
   $38 = ((($37)) + 1|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $6;
   $42 = ((($41)) + 1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43 << 24 >> 24;
   $45 = ($40|0)==($44|0);
   if ($45) {
    $46 = $4;
    $47 = $10;
    $48 = (($46) + ($47)|0);
    $49 = ((($48)) + 2|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = $6;
    $53 = ((($52)) + 2|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 << 24 >> 24;
    $56 = ($51|0)==($55|0);
    if ($56) {
     $57 = $4;
     $58 = $10;
     $59 = (($57) + ($58)|0);
     $60 = ((($59)) + 3|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = $6;
     $64 = ((($63)) + 3|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($62|0)==($66|0);
     if ($67) {
      label = 7;
      break;
     }
    }
   }
  }
  $73 = $9;
  $74 = (($73) + 1)|0;
  $9 = $74;
 }
 if ((label|0) == 7) {
  $68 = $4;
  $69 = $10;
  $70 = (($68) + ($69)|0);
  $71 = ((($70)) + 8|0);
  $72 = (_nk_ttULONG($71)|0);
  $3 = $72;
  $75 = $3;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 9) {
  $3 = 0;
  $75 = $3;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _nk_ttUSHORT($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4<<8;
 $6 = $1;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($5) + ($9))|0;
 $11 = $10&65535;
 STACKTOP = sp;return ($11|0);
}
function _nk_ttULONG($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = $1;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 16;
 $11 = (($5) + ($10))|0;
 $12 = $1;
 $13 = ((($12)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = (($11) + ($16))|0;
 $18 = $1;
 $19 = ((($18)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = (($17) + ($21))|0;
 STACKTOP = sp;return ($22|0);
}
function _nk_rp_init_target($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $6;
 $12 = ($11|0)<=(65535);
 $13 = $7;
 $14 = ($13|0)<=(65535);
 $or$cond = $12 & $14;
 if (!($or$cond)) {
  ___assert_fail((22835|0),(1320|0),7900,(22871|0));
  // unreachable;
 }
 $10 = 0;
 while(1) {
  $15 = $10;
  $16 = $9;
  $17 = (($16) - 1)|0;
  $18 = ($15|0)<($17|0);
  $19 = $10;
  if (!($18)) {
   break;
  }
  $20 = (($19) + 1)|0;
  $21 = $8;
  $22 = (($21) + ($20<<3)|0);
  $23 = $10;
  $24 = $8;
  $25 = (($24) + ($23<<3)|0);
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $22;
  $27 = $10;
  $28 = (($27) + 1)|0;
  $10 = $28;
 }
 $29 = $8;
 $30 = (($29) + ($19<<3)|0);
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = $5;
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = 1;
 $34 = $5;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = 0;
 $36 = $8;
 $37 = $5;
 $38 = ((($37)) + 28|0);
 HEAP32[$38>>2] = $36;
 $39 = $5;
 $40 = ((($39)) + 32|0);
 $41 = $5;
 $42 = ((($41)) + 24|0);
 HEAP32[$42>>2] = $40;
 $43 = $6;
 $44 = $5;
 HEAP32[$44>>2] = $43;
 $45 = $7;
 $46 = $5;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = $45;
 $48 = $9;
 $49 = $5;
 $50 = ((($49)) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $5;
 _nk_rp_setup_allow_out_of_mem($51,0);
 $52 = $5;
 $53 = ((($52)) + 32|0);
 HEAP16[$53>>1] = 0;
 $54 = $5;
 $55 = ((($54)) + 32|0);
 $56 = ((($55)) + 2|0);
 HEAP16[$56>>1] = 0;
 $57 = $5;
 $58 = ((($57)) + 32|0);
 $59 = ((($58)) + 8|0);
 $60 = $5;
 $61 = ((($60)) + 32|0);
 $62 = ((($61)) + 4|0);
 HEAP32[$62>>2] = $59;
 $63 = $6;
 $64 = $63&65535;
 $65 = $5;
 $66 = ((($65)) + 32|0);
 $67 = ((($66)) + 8|0);
 HEAP16[$67>>1] = $64;
 $68 = $5;
 $69 = ((($68)) + 32|0);
 $70 = ((($69)) + 8|0);
 $71 = ((($70)) + 2|0);
 HEAP16[$71>>1] = -1;
 $72 = $5;
 $73 = ((($72)) + 32|0);
 $74 = ((($73)) + 8|0);
 $75 = ((($74)) + 4|0);
 HEAP32[$75>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_rp_setup_allow_out_of_mem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = ((($6)) + 8|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP32[$6>>2]|0;
  $9 = $2;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($8) + ($11))|0;
  $13 = (($12) - 1)|0;
  $14 = $2;
  $15 = ((($14)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13|0) / ($16|0))&-1;
  $18 = $2;
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = $17;
  STACKTOP = sp;return;
 }
}
function _nk_rp_qsort($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $8 = sp + 40|0;
 $11 = sp + 16|0;
 $12 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $9 = 0;
 $13 = $4;
 $14 = (($13>>>0) / 2)&-1;
 $15 = ($14*69069)|0;
 $16 = (($15) + 1)|0;
 $10 = $16;
 while(1) {
  while(1) {
   $17 = $7;
   $18 = (($17) + 1)|0;
   $19 = $4;
   $20 = ($18>>>0)<($19>>>0);
   $21 = $9;
   if (!($20)) {
    break;
   }
   $22 = ($21|0)==(64);
   if ($22) {
    $9 = 0;
    $23 = HEAP32[$8>>2]|0;
    $4 = $23;
   }
   $24 = $7;
   $25 = $10;
   $26 = $4;
   $27 = $7;
   $28 = (($26) - ($27))|0;
   $29 = (($25>>>0) % ($28>>>0))&-1;
   $30 = (($24) + ($29))|0;
   $31 = $3;
   $32 = (($31) + ($30<<4)|0);
   ;HEAP32[$11>>2]=HEAP32[$32>>2]|0;HEAP32[$11+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$32+12>>2]|0;
   $33 = $10;
   $34 = ($33*69069)|0;
   $35 = (($34) + 1)|0;
   $10 = $35;
   $36 = $4;
   $37 = $9;
   $38 = (($37) + 1)|0;
   $9 = $38;
   $39 = (($8) + ($37<<2)|0);
   HEAP32[$39>>2] = $36;
   $40 = $7;
   $41 = (($40) - 1)|0;
   $6 = $41;
   while(1) {
    while(1) {
     $42 = $5;
     $43 = $6;
     $44 = (($43) + 1)|0;
     $6 = $44;
     $45 = $3;
     $46 = (($45) + ($44<<4)|0);
     $47 = (FUNCTION_TABLE_iii[$42 & 31]($46,$11)|0);
     $48 = ($47|0)<(0);
     if (!($48)) {
      break;
     }
    }
    while(1) {
     $49 = $5;
     $50 = $4;
     $51 = (($50) + -1)|0;
     $4 = $51;
     $52 = $3;
     $53 = (($52) + ($51<<4)|0);
     $54 = (FUNCTION_TABLE_iii[$49 & 31]($11,$53)|0);
     $55 = ($54|0)<(0);
     if (!($55)) {
      break;
     }
    }
    $56 = $6;
    $57 = $4;
    $58 = ($56>>>0)>=($57>>>0);
    if ($58) {
     break;
    }
    $59 = $6;
    $60 = $3;
    $61 = (($60) + ($59<<4)|0);
    ;HEAP32[$12>>2]=HEAP32[$61>>2]|0;HEAP32[$12+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$61+12>>2]|0;
    $62 = $6;
    $63 = $3;
    $64 = (($63) + ($62<<4)|0);
    $65 = $4;
    $66 = $3;
    $67 = (($66) + ($65<<4)|0);
    ;HEAP32[$64>>2]=HEAP32[$67>>2]|0;HEAP32[$64+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$64+12>>2]=HEAP32[$67+12>>2]|0;
    $68 = $4;
    $69 = $3;
    $70 = (($69) + ($68<<4)|0);
    ;HEAP32[$70>>2]=HEAP32[$12>>2]|0;HEAP32[$70+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$70+12>>2]=HEAP32[$12+12>>2]|0;
   }
   $71 = $4;
   $72 = (($71) + 1)|0;
   $4 = $72;
  }
  $73 = ($21|0)==(0);
  if ($73) {
   break;
  }
  $74 = $4;
  $7 = $74;
  $75 = $9;
  $76 = (($75) + -1)|0;
  $9 = $76;
  $77 = (($8) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $4 = $78;
 }
 STACKTOP = sp;return;
}
function _nk_rect_height_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $5 = $7;
 $8 = $4;
 $6 = $8;
 $9 = $5;
 $10 = ((($9)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $6;
 $14 = ((($13)) + 6|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($12|0)>($16|0);
 if ($17) {
  $2 = -1;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $18 = $5;
 $19 = ((($18)) + 6|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = $6;
 $23 = ((($22)) + 6|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = ($21|0)<($25|0);
 if ($26) {
  $2 = 1;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $6;
 $32 = ((($31)) + 4|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($30|0)>($34|0);
 if ($35) {
  $46 = -1;
 } else {
  $36 = $5;
  $37 = ((($36)) + 4|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = $6;
  $41 = ((($40)) + 4|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42&65535;
  $44 = ($39|0)<($43|0);
  $45 = $44&1;
  $46 = $45;
 }
 $2 = $46;
 $47 = $2;
 STACKTOP = sp;return ($47|0);
}
function _nk_rp__skyline_pack_rectangle($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 16|0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 _nk_rp__skyline_find_best_pos($7,$12,$13,$14);
 $15 = ((($7)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $18 = ((($7)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $6;
  $21 = (($19) + ($20))|0;
  $22 = $4;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)>($24|0);
  if (!($25)) {
   $26 = $4;
   $27 = ((($26)) + 28|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    $31 = $4;
    $32 = ((($31)) + 28|0);
    $33 = HEAP32[$32>>2]|0;
    $8 = $33;
    $34 = HEAP32[$7>>2]|0;
    $35 = $34&65535;
    $36 = $8;
    HEAP16[$36>>1] = $35;
    $37 = ((($7)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $6;
    $40 = (($38) + ($39))|0;
    $41 = $40&65535;
    $42 = $8;
    $43 = ((($42)) + 2|0);
    HEAP16[$43>>1] = $41;
    $44 = $8;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $4;
    $48 = ((($47)) + 28|0);
    HEAP32[$48>>2] = $46;
    $49 = ((($7)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $9 = $51;
    $52 = $9;
    $53 = HEAP16[$52>>1]|0;
    $54 = $53&65535;
    $55 = HEAP32[$7>>2]|0;
    $56 = ($54|0)<($55|0);
    if ($56) {
     $57 = $9;
     $58 = ((($57)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $10 = $59;
     $60 = $8;
     $61 = $9;
     $62 = ((($61)) + 4|0);
     HEAP32[$62>>2] = $60;
     $63 = $10;
     $9 = $63;
    } else {
     $64 = $8;
     $65 = ((($7)) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     HEAP32[$66>>2] = $64;
    }
    while(1) {
     $67 = $9;
     $68 = ((($67)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)!=(0|0);
     if ($70) {
      $71 = $9;
      $72 = ((($71)) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = HEAP16[$73>>1]|0;
      $75 = $74&65535;
      $76 = HEAP32[$7>>2]|0;
      $77 = $5;
      $78 = (($76) + ($77))|0;
      $79 = ($75|0)<=($78|0);
      $106 = $79;
     } else {
      $106 = 0;
     }
     $80 = $9;
     if (!($106)) {
      break;
     }
     $81 = ((($80)) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $11 = $82;
     $83 = $4;
     $84 = ((($83)) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $9;
     $87 = ((($86)) + 4|0);
     HEAP32[$87>>2] = $85;
     $88 = $9;
     $89 = $4;
     $90 = ((($89)) + 28|0);
     HEAP32[$90>>2] = $88;
     $91 = $11;
     $9 = $91;
    }
    $92 = $8;
    $93 = ((($92)) + 4|0);
    HEAP32[$93>>2] = $80;
    $94 = $9;
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = HEAP32[$7>>2]|0;
    $98 = $5;
    $99 = (($97) + ($98))|0;
    $100 = ($96|0)<($99|0);
    if ($100) {
     $101 = HEAP32[$7>>2]|0;
     $102 = $5;
     $103 = (($101) + ($102))|0;
     $104 = $103&65535;
     $105 = $9;
     HEAP16[$105>>1] = $104;
    }
    ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $30 = ((($7)) + 8|0);
 HEAP32[$30>>2] = 0;
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;
 STACKTOP = sp;return;
}
function _nk_rect_original_order($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $4 = $6;
 $7 = $3;
 $5 = $7;
 $8 = $4;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)<($13|0);
 if ($14) {
  $23 = -1;
  STACKTOP = sp;return ($23|0);
 }
 $15 = $4;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)>($20|0);
 $22 = $21&1;
 $23 = $22;
 STACKTOP = sp;return ($23|0);
}
function _nk_rp__skyline_find_best_pos($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp + 36|0;
 $16 = sp + 12|0;
 $19 = sp;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = 1073741824;
 $9 = 1073741824;
 $14 = 0;
 $20 = $5;
 $21 = $4;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) + ($23))|0;
 $25 = (($24) - 1)|0;
 $5 = $25;
 $26 = $5;
 $27 = $4;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($26|0) % ($29|0))&-1;
 $31 = $5;
 $32 = (($31) - ($30))|0;
 $5 = $32;
 $33 = $5;
 $34 = $4;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($33|0) % ($36|0))&-1;
 $38 = ($37|0)==(0);
 if (!($38)) {
  ___assert_fail((22951|0),(1320|0),7979,(22973|0));
  // unreachable;
 }
 $39 = $4;
 $40 = ((($39)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $12 = $41;
 $42 = $4;
 $43 = ((($42)) + 24|0);
 $11 = $43;
 while(1) {
  $44 = $12;
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $47 = $5;
  $48 = (($46) + ($47))|0;
  $49 = $4;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)<=($50|0);
  if (!($51)) {
   break;
  }
  $52 = $4;
  $53 = $12;
  $54 = $12;
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = $5;
  $58 = (_nk_rp__skyline_find_min_y($52,$53,$56,$57,$16)|0);
  $15 = $58;
  $59 = $4;
  $60 = ((($59)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0);
  $63 = $15;
  do {
   if ($62) {
    $64 = $9;
    $65 = ($63|0)<($64|0);
    if ($65) {
     $66 = $15;
     $9 = $66;
     $67 = $11;
     $14 = $67;
    }
   } else {
    $68 = $6;
    $69 = (($63) + ($68))|0;
    $70 = $4;
    $71 = ((($70)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($69|0)<=($72|0);
    if ($73) {
     $74 = $15;
     $75 = $9;
     $76 = ($74|0)<($75|0);
     if (!($76)) {
      $77 = $15;
      $78 = $9;
      $79 = ($77|0)==($78|0);
      if (!($79)) {
       break;
      }
      $80 = HEAP32[$16>>2]|0;
      $81 = $7;
      $82 = ($80|0)<($81|0);
      if (!($82)) {
       break;
      }
     }
     $83 = $15;
     $9 = $83;
     $84 = HEAP32[$16>>2]|0;
     $7 = $84;
     $85 = $11;
     $14 = $85;
    }
   }
  } while(0);
  $86 = $12;
  $87 = ((($86)) + 4|0);
  $11 = $87;
  $88 = $12;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $12 = $90;
 }
 $91 = $14;
 $92 = ($91|0)==(0|0);
 if ($92) {
  $97 = 0;
 } else {
  $93 = $14;
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP16[$94>>1]|0;
  $96 = $95&65535;
  $97 = $96;
 }
 $8 = $97;
 $98 = $4;
 $99 = ((($98)) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)==(1);
 if (!($101)) {
  $186 = $14;
  $187 = ((($10)) + 8|0);
  HEAP32[$187>>2] = $186;
  $188 = $8;
  HEAP32[$10>>2] = $188;
  $189 = $9;
  $190 = ((($10)) + 4|0);
  HEAP32[$190>>2] = $189;
  ;HEAP32[$0>>2]=HEAP32[$10>>2]|0;HEAP32[$0+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$10+8>>2]|0;
  STACKTOP = sp;return;
 }
 $102 = $4;
 $103 = ((($102)) + 24|0);
 $104 = HEAP32[$103>>2]|0;
 $13 = $104;
 $105 = $4;
 $106 = ((($105)) + 24|0);
 $107 = HEAP32[$106>>2]|0;
 $12 = $107;
 $108 = $4;
 $109 = ((($108)) + 24|0);
 $11 = $109;
 while(1) {
  $110 = $13;
  $111 = HEAP16[$110>>1]|0;
  $112 = $111&65535;
  $113 = $5;
  $114 = ($112|0)<($113|0);
  if (!($114)) {
   break;
  }
  $115 = $13;
  $116 = ((($115)) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $13 = $117;
 }
 L27: while(1) {
  $118 = $13;
  $119 = ($118|0)!=(0|0);
  if (!($119)) {
   label = 39;
   break;
  }
  $120 = $13;
  $121 = HEAP16[$120>>1]|0;
  $122 = $121&65535;
  $123 = $5;
  $124 = (($122) - ($123))|0;
  $17 = $124;
  $125 = $17;
  $126 = ($125|0)>=(0);
  if (!($126)) {
   label = 22;
   break;
  }
  while(1) {
   $127 = $12;
   $128 = ((($127)) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = HEAP16[$129>>1]|0;
   $131 = $130&65535;
   $132 = $17;
   $133 = ($131|0)<=($132|0);
   $134 = $12;
   $135 = ((($134)) + 4|0);
   if (!($133)) {
    break;
   }
   $11 = $135;
   $136 = $12;
   $137 = ((($136)) + 4|0);
   $138 = HEAP32[$137>>2]|0;
   $12 = $138;
  }
  $139 = HEAP32[$135>>2]|0;
  $140 = HEAP16[$139>>1]|0;
  $141 = $140&65535;
  $142 = $17;
  $143 = ($141|0)>($142|0);
  if (!($143)) {
   label = 28;
   break;
  }
  $144 = $12;
  $145 = HEAP16[$144>>1]|0;
  $146 = $145&65535;
  $147 = $17;
  $148 = ($146|0)<=($147|0);
  if (!($148)) {
   label = 28;
   break;
  }
  $149 = $4;
  $150 = $12;
  $151 = $17;
  $152 = $5;
  $153 = (_nk_rp__skyline_find_min_y($149,$150,$151,$152,$19)|0);
  $18 = $153;
  $154 = $18;
  $155 = $6;
  $156 = (($154) + ($155))|0;
  $157 = $4;
  $158 = ((($157)) + 4|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($156|0)<($159|0);
  do {
   if ($160) {
    $161 = $18;
    $162 = $9;
    $163 = ($161|0)<=($162|0);
    if ($163) {
     $164 = $18;
     $165 = $9;
     $166 = ($164|0)<($165|0);
     if (!($166)) {
      $167 = HEAP32[$19>>2]|0;
      $168 = $7;
      $169 = ($167|0)<($168|0);
      if (!($169)) {
       $170 = HEAP32[$19>>2]|0;
       $171 = $7;
       $172 = ($170|0)==($171|0);
       if (!($172)) {
        break;
       }
       $173 = $17;
       $174 = $8;
       $175 = ($173|0)<($174|0);
       if (!($175)) {
        break;
       }
      }
     }
     $176 = $17;
     $8 = $176;
     $177 = $18;
     $178 = $9;
     $179 = ($177|0)<=($178|0);
     if (!($179)) {
      label = 36;
      break L27;
     }
     $180 = $18;
     $9 = $180;
     $181 = HEAP32[$19>>2]|0;
     $7 = $181;
     $182 = $11;
     $14 = $182;
    }
   }
  } while(0);
  $183 = $13;
  $184 = ((($183)) + 4|0);
  $185 = HEAP32[$184>>2]|0;
  $13 = $185;
 }
 if ((label|0) == 22) {
  ___assert_fail((23002|0),(1320|0),8037,(22973|0));
  // unreachable;
 }
 else if ((label|0) == 28) {
  ___assert_fail((23012|0),(1320|0),8043,(22973|0));
  // unreachable;
 }
 else if ((label|0) == 36) {
  ___assert_fail((23052|0),(1320|0),8049,(22973|0));
  // unreachable;
 }
 else if ((label|0) == 39) {
  $186 = $14;
  $187 = ((($10)) + 8|0);
  HEAP32[$187>>2] = $186;
  $188 = $8;
  HEAP32[$10>>2] = $188;
  $189 = $9;
  $190 = ((($10)) + 4|0);
  HEAP32[$190>>2] = $189;
  ;HEAP32[$0>>2]=HEAP32[$10>>2]|0;HEAP32[$0+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$10+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function _nk_rp__skyline_find_min_y($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $6;
 $10 = $16;
 $17 = $7;
 $18 = $8;
 $19 = (($17) + ($18))|0;
 $11 = $19;
 $20 = $6;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $7;
 $24 = ($22|0)<=($23|0);
 if (!($24)) {
  ___assert_fail((23064|0),(1320|0),7932,(23079|0));
  // unreachable;
 }
 $25 = $10;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = $7;
 $31 = ($29|0)>($30|0);
 if (!($31)) {
  ___assert_fail((23105|0),(1320|0),7935,(23079|0));
  // unreachable;
 }
 $32 = $10;
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = $7;
 $36 = ($34|0)<=($35|0);
 if (!($36)) {
  ___assert_fail((23124|0),(1320|0),7937,(23079|0));
  // unreachable;
 }
 $12 = 0;
 $14 = 0;
 $13 = 0;
 while(1) {
  $37 = $10;
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = $11;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $10;
  $43 = ((($42)) + 2|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = $12;
  $47 = ($45|0)>($46|0);
  do {
   if ($47) {
    $48 = $13;
    $49 = $10;
    $50 = ((($49)) + 2|0);
    $51 = HEAP16[$50>>1]|0;
    $52 = $51&65535;
    $53 = $12;
    $54 = (($52) - ($53))|0;
    $55 = Math_imul($48, $54)|0;
    $56 = $14;
    $57 = (($56) + ($55))|0;
    $14 = $57;
    $58 = $10;
    $59 = ((($58)) + 2|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $60&65535;
    $12 = $61;
    $62 = $10;
    $63 = HEAP16[$62>>1]|0;
    $64 = $63&65535;
    $65 = $7;
    $66 = ($64|0)<($65|0);
    $67 = $10;
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = HEAP16[$69>>1]|0;
    $71 = $70&65535;
    if ($66) {
     $72 = $7;
     $73 = (($71) - ($72))|0;
     $74 = $13;
     $75 = (($74) + ($73))|0;
     $13 = $75;
     break;
    } else {
     $76 = $10;
     $77 = HEAP16[$76>>1]|0;
     $78 = $77&65535;
     $79 = (($71) - ($78))|0;
     $80 = $13;
     $81 = (($80) + ($79))|0;
     $13 = $81;
     break;
    }
   } else {
    $82 = $10;
    $83 = ((($82)) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = HEAP16[$84>>1]|0;
    $86 = $85&65535;
    $87 = $10;
    $88 = HEAP16[$87>>1]|0;
    $89 = $88&65535;
    $90 = (($86) - ($89))|0;
    $15 = $90;
    $91 = $15;
    $92 = $13;
    $93 = (($91) + ($92))|0;
    $94 = $8;
    $95 = ($93|0)>($94|0);
    if ($95) {
     $96 = $8;
     $97 = $13;
     $98 = (($96) - ($97))|0;
     $15 = $98;
    }
    $99 = $15;
    $100 = $12;
    $101 = $10;
    $102 = ((($101)) + 2|0);
    $103 = HEAP16[$102>>1]|0;
    $104 = $103&65535;
    $105 = (($100) - ($104))|0;
    $106 = Math_imul($99, $105)|0;
    $107 = $14;
    $108 = (($107) + ($106))|0;
    $14 = $108;
    $109 = $15;
    $110 = $13;
    $111 = (($110) + ($109))|0;
    $13 = $111;
   }
  } while(0);
  $112 = $10;
  $113 = ((($112)) + 4|0);
  $114 = HEAP32[$113>>2]|0;
  $10 = $114;
 }
 $115 = $14;
 $116 = $9;
 HEAP32[$116>>2] = $115;
 $117 = $12;
 STACKTOP = sp;return ($117|0);
}
function _nk_tt_ScaleForPixelHeight($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $3 = 0.0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + ($9)|0);
 $11 = ((($10)) + 4|0);
 $12 = (_nk_ttSHORT($11)|0);
 $13 = $12 << 16 >> 16;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($15) + ($18)|0);
 $20 = ((($19)) + 6|0);
 $21 = (_nk_ttSHORT($20)|0);
 $22 = $21 << 16 >> 16;
 $23 = (($13) - ($22))|0;
 $4 = $23;
 $24 = $3;
 $25 = $4;
 $26 = (+($25|0));
 $27 = $24 / $26;
 STACKTOP = sp;return (+$27);
}
function _nk_tt_ScaleForMappingEmToPixels($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + ($9)|0);
 $11 = ((($10)) + 18|0);
 $12 = (_nk_ttUSHORT($11)|0);
 $13 = $12&65535;
 $4 = $13;
 $14 = $3;
 $15 = $4;
 $16 = (+($15|0));
 $17 = $14 / $16;
 STACKTOP = sp;return (+$17);
}
function _nk_tt_FindGlyphIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = $0;
 $4 = $1;
 $28 = $3;
 $29 = HEAP32[$28>>2]|0;
 $5 = $29;
 $30 = $3;
 $31 = ((($30)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $6 = $32;
 $33 = $5;
 $34 = $6;
 $35 = (($33) + ($34)|0);
 $36 = (_nk_ttUSHORT($35)|0);
 $7 = $36;
 $37 = $7;
 $38 = $37&65535;
 $39 = ($38|0)==(0);
 if ($39) {
  $40 = $5;
  $41 = $6;
  $42 = (($40) + ($41)|0);
  $43 = ((($42)) + 2|0);
  $44 = (_nk_ttUSHORT($43)|0);
  $45 = $44&65535;
  $8 = $45;
  $46 = $4;
  $47 = $8;
  $48 = (($47) - 6)|0;
  $49 = ($46|0)<($48|0);
  if ($49) {
   $50 = $5;
   $51 = $6;
   $52 = (($50) + ($51)|0);
   $53 = ((($52)) + 6|0);
   $54 = $4;
   $55 = (($53) + ($54)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $2 = $57;
   $335 = $2;
   STACKTOP = sp;return ($335|0);
  } else {
   $2 = 0;
   $335 = $2;
   STACKTOP = sp;return ($335|0);
  }
 }
 $58 = $7;
 $59 = $58&65535;
 $60 = ($59|0)==(6);
 if ($60) {
  $61 = $5;
  $62 = $6;
  $63 = (($61) + ($62)|0);
  $64 = ((($63)) + 6|0);
  $65 = (_nk_ttUSHORT($64)|0);
  $66 = $65&65535;
  $9 = $66;
  $67 = $5;
  $68 = $6;
  $69 = (($67) + ($68)|0);
  $70 = ((($69)) + 8|0);
  $71 = (_nk_ttUSHORT($70)|0);
  $72 = $71&65535;
  $10 = $72;
  $73 = $4;
  $74 = $9;
  $75 = ($73>>>0)>=($74>>>0);
  if ($75) {
   $76 = $4;
   $77 = $9;
   $78 = $10;
   $79 = (($77) + ($78))|0;
   $80 = ($76>>>0)<($79>>>0);
   if ($80) {
    $81 = $5;
    $82 = $6;
    $83 = (($81) + ($82)|0);
    $84 = ((($83)) + 10|0);
    $85 = $4;
    $86 = $9;
    $87 = (($85) - ($86))|0;
    $88 = $87<<1;
    $89 = (($84) + ($88)|0);
    $90 = (_nk_ttUSHORT($89)|0);
    $91 = $90&65535;
    $2 = $91;
    $335 = $2;
    STACKTOP = sp;return ($335|0);
   }
  }
  $2 = 0;
  $335 = $2;
  STACKTOP = sp;return ($335|0);
 }
 $92 = $7;
 $93 = $92&65535;
 $94 = ($93|0)==(2);
 if ($94) {
  ___assert_fail((22521|0),(1320|0),8467,(23138|0));
  // unreachable;
 }
 $95 = $7;
 $96 = $95&65535;
 $97 = ($96|0)==(4);
 if (!($97)) {
  $271 = $7;
  $272 = $271&65535;
  $273 = ($272|0)==(12);
  if (!($273)) {
   $274 = $7;
   $275 = $274&65535;
   $276 = ($275|0)==(13);
   if (!($276)) {
    ___assert_fail((22521|0),(1320|0),8538,(23138|0));
    // unreachable;
   }
  }
  $277 = $5;
  $278 = $6;
  $279 = (($277) + ($278)|0);
  $280 = ((($279)) + 12|0);
  $281 = (_nk_ttULONG($280)|0);
  $21 = $281;
  $22 = 0;
  $282 = $21;
  $23 = $282;
  while(1) {
   $283 = $22;
   $284 = $23;
   $285 = ($283|0)<($284|0);
   if (!($285)) {
    label = 40;
    break;
   }
   $286 = $22;
   $287 = $23;
   $288 = $22;
   $289 = (($287) - ($288))|0;
   $290 = $289 >> 1;
   $291 = (($286) + ($290))|0;
   $24 = $291;
   $292 = $5;
   $293 = $6;
   $294 = (($292) + ($293)|0);
   $295 = ((($294)) + 16|0);
   $296 = $24;
   $297 = ($296*12)|0;
   $298 = (($295) + ($297)|0);
   $299 = (_nk_ttULONG($298)|0);
   $25 = $299;
   $300 = $5;
   $301 = $6;
   $302 = (($300) + ($301)|0);
   $303 = ((($302)) + 16|0);
   $304 = $24;
   $305 = ($304*12)|0;
   $306 = (($303) + ($305)|0);
   $307 = ((($306)) + 4|0);
   $308 = (_nk_ttULONG($307)|0);
   $26 = $308;
   $309 = $4;
   $310 = $25;
   $311 = ($309>>>0)<($310>>>0);
   if ($311) {
    $312 = $24;
    $23 = $312;
    continue;
   }
   $313 = $4;
   $314 = $26;
   $315 = ($313>>>0)>($314>>>0);
   if (!($315)) {
    break;
   }
   $316 = $24;
   $317 = (($316) + 1)|0;
   $22 = $317;
  }
  if ((label|0) == 40) {
   $2 = 0;
   $335 = $2;
   STACKTOP = sp;return ($335|0);
  }
  $318 = $5;
  $319 = $6;
  $320 = (($318) + ($319)|0);
  $321 = ((($320)) + 16|0);
  $322 = $24;
  $323 = ($322*12)|0;
  $324 = (($321) + ($323)|0);
  $325 = ((($324)) + 8|0);
  $326 = (_nk_ttULONG($325)|0);
  $27 = $326;
  $327 = $7;
  $328 = $327&65535;
  $329 = ($328|0)==(12);
  $330 = $27;
  if ($329) {
   $331 = $4;
   $332 = (($330) + ($331))|0;
   $333 = $25;
   $334 = (($332) - ($333))|0;
   $2 = $334;
   $335 = $2;
   STACKTOP = sp;return ($335|0);
  } else {
   $2 = $330;
   $335 = $2;
   STACKTOP = sp;return ($335|0);
  }
 }
 $98 = $5;
 $99 = $6;
 $100 = (($98) + ($99)|0);
 $101 = ((($100)) + 6|0);
 $102 = (_nk_ttUSHORT($101)|0);
 $103 = $102&65535;
 $104 = $103 >> 1;
 $105 = $104&65535;
 $11 = $105;
 $106 = $5;
 $107 = $6;
 $108 = (($106) + ($107)|0);
 $109 = ((($108)) + 8|0);
 $110 = (_nk_ttUSHORT($109)|0);
 $111 = $110&65535;
 $112 = $111 >> 1;
 $113 = $112&65535;
 $12 = $113;
 $114 = $5;
 $115 = $6;
 $116 = (($114) + ($115)|0);
 $117 = ((($116)) + 10|0);
 $118 = (_nk_ttUSHORT($117)|0);
 $13 = $118;
 $119 = $5;
 $120 = $6;
 $121 = (($119) + ($120)|0);
 $122 = ((($121)) + 12|0);
 $123 = (_nk_ttUSHORT($122)|0);
 $124 = $123&65535;
 $125 = $124 >> 1;
 $126 = $125&65535;
 $14 = $126;
 $127 = $6;
 $128 = (($127) + 14)|0;
 $15 = $128;
 $129 = $15;
 $16 = $129;
 $130 = $4;
 $131 = ($130|0)>(65535);
 if ($131) {
  $2 = 0;
  $335 = $2;
  STACKTOP = sp;return ($335|0);
 }
 $132 = $4;
 $133 = $5;
 $134 = $16;
 $135 = (($133) + ($134)|0);
 $136 = $14;
 $137 = $136&65535;
 $138 = $137<<1;
 $139 = (($135) + ($138)|0);
 $140 = (_nk_ttUSHORT($139)|0);
 $141 = $140&65535;
 $142 = ($132|0)>=($141|0);
 if ($142) {
  $143 = $14;
  $144 = $143&65535;
  $145 = $144<<1;
  $146 = $16;
  $147 = (($146) + ($145))|0;
  $16 = $147;
 }
 $148 = $16;
 $149 = (($148) - 2)|0;
 $16 = $149;
 while(1) {
  $150 = $13;
  $151 = ($150<<16>>16)!=(0);
  if (!($151)) {
   break;
  }
  $152 = $12;
  $153 = $152&65535;
  $154 = $153 >> 1;
  $155 = $154&65535;
  $12 = $155;
  $156 = $5;
  $157 = $16;
  $158 = (($156) + ($157)|0);
  $159 = $12;
  $160 = $159&65535;
  $161 = $160<<1;
  $162 = (($158) + ($161)|0);
  $163 = (_nk_ttUSHORT($162)|0);
  $17 = $163;
  $164 = $4;
  $165 = $17;
  $166 = $165&65535;
  $167 = ($164|0)>($166|0);
  if ($167) {
   $168 = $12;
   $169 = $168&65535;
   $170 = $169<<1;
   $171 = $16;
   $172 = (($171) + ($170))|0;
   $16 = $172;
  }
  $173 = $13;
  $174 = (($173) + -1)<<16>>16;
  $13 = $174;
 }
 $175 = $16;
 $176 = (($175) + 2)|0;
 $16 = $176;
 $177 = $16;
 $178 = $15;
 $179 = (($177) - ($178))|0;
 $180 = $179 >>> 1;
 $181 = $180&65535;
 $20 = $181;
 $182 = $4;
 $183 = $5;
 $184 = $15;
 $185 = (($183) + ($184)|0);
 $186 = $20;
 $187 = $186&65535;
 $188 = $187<<1;
 $189 = (($185) + ($188)|0);
 $190 = (_nk_ttUSHORT($189)|0);
 $191 = $190&65535;
 $192 = ($182|0)<=($191|0);
 if (!($192)) {
  ___assert_fail((23159|0),(1320|0),8503,(23138|0));
  // unreachable;
 }
 $193 = $5;
 $194 = $6;
 $195 = (($193) + ($194)|0);
 $196 = ((($195)) + 14|0);
 $197 = $11;
 $198 = $197&65535;
 $199 = $198<<1;
 $200 = (($196) + ($199)|0);
 $201 = ((($200)) + 2|0);
 $202 = $20;
 $203 = $202&65535;
 $204 = $203<<1;
 $205 = (($201) + ($204)|0);
 $206 = (_nk_ttUSHORT($205)|0);
 $19 = $206;
 $207 = $4;
 $208 = $19;
 $209 = $208&65535;
 $210 = ($207|0)<($209|0);
 if ($210) {
  $2 = 0;
  $335 = $2;
  STACKTOP = sp;return ($335|0);
 }
 $211 = $5;
 $212 = $6;
 $213 = (($211) + ($212)|0);
 $214 = ((($213)) + 14|0);
 $215 = $11;
 $216 = $215&65535;
 $217 = ($216*6)|0;
 $218 = (($214) + ($217)|0);
 $219 = ((($218)) + 2|0);
 $220 = $20;
 $221 = $220&65535;
 $222 = $221<<1;
 $223 = (($219) + ($222)|0);
 $224 = (_nk_ttUSHORT($223)|0);
 $18 = $224;
 $225 = $18;
 $226 = $225&65535;
 $227 = ($226|0)==(0);
 if ($227) {
  $228 = $4;
  $229 = $5;
  $230 = $6;
  $231 = (($229) + ($230)|0);
  $232 = ((($231)) + 14|0);
  $233 = $11;
  $234 = $233&65535;
  $235 = $234<<2;
  $236 = (($232) + ($235)|0);
  $237 = ((($236)) + 2|0);
  $238 = $20;
  $239 = $238&65535;
  $240 = $239<<1;
  $241 = (($237) + ($240)|0);
  $242 = (_nk_ttSHORT($241)|0);
  $243 = $242 << 16 >> 16;
  $244 = (($228) + ($243))|0;
  $245 = $244&65535;
  $246 = $245&65535;
  $2 = $246;
  $335 = $2;
  STACKTOP = sp;return ($335|0);
 } else {
  $247 = $5;
  $248 = $18;
  $249 = $248&65535;
  $250 = (($247) + ($249)|0);
  $251 = $4;
  $252 = $19;
  $253 = $252&65535;
  $254 = (($251) - ($253))|0;
  $255 = $254<<1;
  $256 = (($250) + ($255)|0);
  $257 = $6;
  $258 = (($256) + ($257)|0);
  $259 = ((($258)) + 14|0);
  $260 = $11;
  $261 = $260&65535;
  $262 = ($261*6)|0;
  $263 = (($259) + ($262)|0);
  $264 = ((($263)) + 2|0);
  $265 = $20;
  $266 = $265&65535;
  $267 = $266<<1;
  $268 = (($264) + ($267)|0);
  $269 = (_nk_ttUSHORT($268)|0);
  $270 = $269&65535;
  $2 = $270;
  $335 = $2;
  STACKTOP = sp;return ($335|0);
 }
 return (0)|0;
}
function _nk_tt_GetGlyphBitmapBoxSubpixel($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $20 = sp + 12|0;
 $21 = sp + 8|0;
 $22 = sp + 4|0;
 $23 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $24 = $10;
 $25 = $11;
 $26 = (_nk_tt_GetGlyphBox($24,$25,$20,$21,$22,$23)|0);
 $27 = ($26|0)!=(0);
 $28 = $16;
 $29 = ($28|0)!=(0|0);
 if ($27) {
  if ($29) {
   $40 = HEAP32[$20>>2]|0;
   $41 = (+($40|0));
   $42 = $12;
   $43 = $41 * $42;
   $44 = $14;
   $45 = $43 + $44;
   $46 = (_nk_ifloorf($45)|0);
   $47 = $16;
   HEAP32[$47>>2] = $46;
  }
  $48 = $17;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = HEAP32[$23>>2]|0;
   $51 = (0 - ($50))|0;
   $52 = (+($51|0));
   $53 = $13;
   $54 = $52 * $53;
   $55 = $15;
   $56 = $54 + $55;
   $57 = (_nk_ifloorf($56)|0);
   $58 = $17;
   HEAP32[$58>>2] = $57;
  }
  $59 = $18;
  $60 = ($59|0)!=(0|0);
  if ($60) {
   $61 = HEAP32[$22>>2]|0;
   $62 = (+($61|0));
   $63 = $12;
   $64 = $62 * $63;
   $65 = $14;
   $66 = $64 + $65;
   $67 = (_nk_iceilf($66)|0);
   $68 = $18;
   HEAP32[$68>>2] = $67;
  }
  $69 = $19;
  $70 = ($69|0)!=(0|0);
  if (!($70)) {
   STACKTOP = sp;return;
  }
  $71 = HEAP32[$21>>2]|0;
  $72 = (0 - ($71))|0;
  $73 = (+($72|0));
  $74 = $13;
  $75 = $73 * $74;
  $76 = $15;
  $77 = $75 + $76;
  $78 = (_nk_iceilf($77)|0);
  $79 = $19;
  HEAP32[$79>>2] = $78;
  STACKTOP = sp;return;
 } else {
  if ($29) {
   $30 = $16;
   HEAP32[$30>>2] = 0;
  }
  $31 = $17;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = $17;
   HEAP32[$33>>2] = 0;
  }
  $34 = $18;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $18;
   HEAP32[$36>>2] = 0;
  }
  $37 = $19;
  $38 = ($37|0)!=(0|0);
  if (!($38)) {
   STACKTOP = sp;return;
  }
  $39 = $19;
  HEAP32[$39>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _nk_ttSHORT($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4<<8;
 $6 = $1;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($5) + ($9))|0;
 $11 = $10&65535;
 STACKTOP = sp;return ($11|0);
}
function _nk_tt_GetGlyphBox($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $7;
 $15 = $8;
 $16 = (_nk_tt__GetGlyfOffset($14,$15)|0);
 $13 = $16;
 $17 = $13;
 $18 = ($17|0)<(0);
 if ($18) {
  $6 = 0;
  $59 = $6;
  STACKTOP = sp;return ($59|0);
 }
 $19 = $9;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $7;
  $22 = HEAP32[$21>>2]|0;
  $23 = $13;
  $24 = (($22) + ($23)|0);
  $25 = ((($24)) + 2|0);
  $26 = (_nk_ttSHORT($25)|0);
  $27 = $26 << 16 >> 16;
  $28 = $9;
  HEAP32[$28>>2] = $27;
 }
 $29 = $10;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $7;
  $32 = HEAP32[$31>>2]|0;
  $33 = $13;
  $34 = (($32) + ($33)|0);
  $35 = ((($34)) + 4|0);
  $36 = (_nk_ttSHORT($35)|0);
  $37 = $36 << 16 >> 16;
  $38 = $10;
  HEAP32[$38>>2] = $37;
 }
 $39 = $11;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $7;
  $42 = HEAP32[$41>>2]|0;
  $43 = $13;
  $44 = (($42) + ($43)|0);
  $45 = ((($44)) + 6|0);
  $46 = (_nk_ttSHORT($45)|0);
  $47 = $46 << 16 >> 16;
  $48 = $11;
  HEAP32[$48>>2] = $47;
 }
 $49 = $12;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $7;
  $52 = HEAP32[$51>>2]|0;
  $53 = $13;
  $54 = (($52) + ($53)|0);
  $55 = ((($54)) + 8|0);
  $56 = (_nk_ttSHORT($55)|0);
  $57 = $56 << 16 >> 16;
  $58 = $12;
  HEAP32[$58>>2] = $57;
 }
 $6 = 1;
 $59 = $6;
 STACKTOP = sp;return ($59|0);
}
function _nk_ifloorf($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (~~(($2)));
 $4 = $1;
 $5 = $4 < 0.0;
 $6 = $5 ? 1 : 0;
 $7 = (($3) - ($6))|0;
 $8 = (+($7|0));
 $1 = $8;
 $9 = $1;
 $10 = (~~(($9)));
 STACKTOP = sp;return ($10|0);
}
function _nk_tt__GetGlyfOffset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)>=($10|0);
 if ($11) {
  $2 = -1;
  $77 = $2;
  STACKTOP = sp;return ($77|0);
 }
 $12 = $3;
 $13 = ((($12)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>=(2);
 if ($15) {
  $2 = -1;
  $77 = $2;
  STACKTOP = sp;return ($77|0);
 }
 $16 = $3;
 $17 = ((($16)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 $20 = $3;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($24) + ($27)|0);
 $29 = $4;
 if ($19) {
  $30 = $29<<1;
  $31 = (($28) + ($30)|0);
  $32 = (_nk_ttUSHORT($31)|0);
  $33 = $32&65535;
  $34 = $33<<1;
  $35 = (($22) + ($34))|0;
  $5 = $35;
  $36 = $3;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $3;
  $40 = HEAP32[$39>>2]|0;
  $41 = $3;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($40) + ($43)|0);
  $45 = $4;
  $46 = $45<<1;
  $47 = (($44) + ($46)|0);
  $48 = ((($47)) + 2|0);
  $49 = (_nk_ttUSHORT($48)|0);
  $50 = $49&65535;
  $51 = $50<<1;
  $52 = (($38) + ($51))|0;
  $6 = $52;
 } else {
  $53 = $29<<2;
  $54 = (($28) + ($53)|0);
  $55 = (_nk_ttULONG($54)|0);
  $56 = (($22) + ($55))|0;
  $5 = $56;
  $57 = $3;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $3;
  $61 = HEAP32[$60>>2]|0;
  $62 = $3;
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($61) + ($64)|0);
  $66 = $4;
  $67 = $66<<2;
  $68 = (($65) + ($67)|0);
  $69 = ((($68)) + 4|0);
  $70 = (_nk_ttULONG($69)|0);
  $71 = (($59) + ($70))|0;
  $6 = $71;
 }
 $72 = $5;
 $73 = $6;
 $74 = ($72|0)==($73|0);
 $75 = $5;
 $76 = $74 ? -1 : $75;
 $2 = $76;
 $77 = $2;
 STACKTOP = sp;return ($77|0);
}
function _nk_tt_PackFontRangesRenderIntoRects($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0;
 var $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $26 = sp + 28|0;
 $27 = sp + 24|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp + 12|0;
 $31 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = 1;
 $35 = $6;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $16 = $37;
 $38 = $6;
 $39 = ((($38)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $17 = $40;
 $14 = 0;
 $12 = 0;
 while(1) {
  $41 = $12;
  $42 = $9;
  $43 = ($41|0)<($42|0);
  if (!($43)) {
   break;
  }
  $44 = $12;
  $45 = $8;
  $46 = (($45) + (($44*24)|0)|0);
  $47 = +HEAPF32[$46>>2];
  $18 = $47;
  $48 = $18;
  $49 = $48 > 0.0;
  $50 = $7;
  $51 = $18;
  if ($49) {
   $52 = (+_nk_tt_ScaleForPixelHeight($50,$51));
   $55 = $52;
  } else {
   $53 = -$51;
   $54 = (+_nk_tt_ScaleForMappingEmToPixels($50,$53));
   $55 = $54;
  }
  $23 = $55;
  $56 = $12;
  $57 = $8;
  $58 = (($57) + (($56*24)|0)|0);
  $59 = ((($58)) + 20|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $6;
  $63 = ((($62)) + 20|0);
  HEAP32[$63>>2] = $61;
  $64 = $12;
  $65 = $8;
  $66 = (($65) + (($64*24)|0)|0);
  $67 = ((($66)) + 21|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $6;
  $71 = ((($70)) + 24|0);
  HEAP32[$71>>2] = $69;
  $72 = $6;
  $73 = ((($72)) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (+($74>>>0));
  $76 = 1.0 / $75;
  $19 = $76;
  $77 = $6;
  $78 = ((($77)) + 24|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (+($79>>>0));
  $81 = 1.0 / $80;
  $20 = $81;
  $82 = $6;
  $83 = ((($82)) + 20|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (+_nk_tt__oversample_shift($84));
  $21 = $85;
  $86 = $6;
  $87 = ((($86)) + 24|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (+_nk_tt__oversample_shift($88));
  $22 = $89;
  $13 = 0;
  while(1) {
   $90 = $13;
   $91 = $12;
   $92 = $8;
   $93 = (($92) + (($91*24)|0)|0);
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($90|0)<($95|0);
   if (!($96)) {
    break;
   }
   $97 = $14;
   $98 = $10;
   $99 = (($98) + ($97<<4)|0);
   $24 = $99;
   $100 = $24;
   $101 = ((($100)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = $13;
    $105 = $12;
    $106 = $8;
    $107 = (($106) + (($105*24)|0)|0);
    $108 = ((($107)) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + (($104*28)|0)|0);
    $25 = $110;
    $111 = $12;
    $112 = $8;
    $113 = (($112) + (($111*24)|0)|0);
    $114 = ((($113)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)!=(0);
    if ($116) {
     $117 = $12;
     $118 = $8;
     $119 = (($118) + (($117*24)|0)|0);
     $120 = ((($119)) + 4|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = $13;
     $123 = (($121) + ($122))|0;
     $132 = $123;
    } else {
     $124 = $13;
     $125 = $12;
     $126 = $8;
     $127 = (($126) + (($125*24)|0)|0);
     $128 = ((($127)) + 8|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + ($124<<2)|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $131;
    }
    $32 = $132;
    $133 = $7;
    $134 = $32;
    $135 = (_nk_tt_FindGlyphIndex($133,$134)|0);
    $33 = $135;
    $136 = $6;
    $137 = ((($136)) + 16|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $138&65535;
    $34 = $139;
    $140 = $24;
    $141 = ((($140)) + 8|0);
    $142 = HEAP16[$141>>1]|0;
    $143 = $142&65535;
    $144 = $34;
    $145 = $144&65535;
    $146 = (($143) + ($145))|0;
    $147 = $146&65535;
    $148 = $24;
    $149 = ((($148)) + 8|0);
    HEAP16[$149>>1] = $147;
    $150 = $24;
    $151 = ((($150)) + 10|0);
    $152 = HEAP16[$151>>1]|0;
    $153 = $152&65535;
    $154 = $34;
    $155 = $154&65535;
    $156 = (($153) + ($155))|0;
    $157 = $156&65535;
    $158 = $24;
    $159 = ((($158)) + 10|0);
    HEAP16[$159>>1] = $157;
    $160 = $24;
    $161 = ((($160)) + 4|0);
    $162 = HEAP16[$161>>1]|0;
    $163 = $162&65535;
    $164 = $34;
    $165 = $164&65535;
    $166 = (($163) - ($165))|0;
    $167 = $166&65535;
    $168 = $24;
    $169 = ((($168)) + 4|0);
    HEAP16[$169>>1] = $167;
    $170 = $24;
    $171 = ((($170)) + 6|0);
    $172 = HEAP16[$171>>1]|0;
    $173 = $172&65535;
    $174 = $34;
    $175 = $174&65535;
    $176 = (($173) - ($175))|0;
    $177 = $176&65535;
    $178 = $24;
    $179 = ((($178)) + 6|0);
    HEAP16[$179>>1] = $177;
    $180 = $7;
    $181 = $33;
    _nk_tt_GetGlyphHMetrics($180,$181,$26,$27);
    $182 = $7;
    $183 = $33;
    $184 = $23;
    $185 = $6;
    $186 = ((($185)) + 20|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (+($187>>>0));
    $189 = $184 * $188;
    $190 = $23;
    $191 = $6;
    $192 = ((($191)) + 24|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (+($193>>>0));
    $195 = $190 * $194;
    _nk_tt_GetGlyphBitmapBox($182,$183,$189,$195,$28,$29,$30,$31);
    $196 = $7;
    $197 = $6;
    $198 = ((($197)) + 28|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $24;
    $201 = ((($200)) + 8|0);
    $202 = HEAP16[$201>>1]|0;
    $203 = $202&65535;
    $204 = (($199) + ($203)|0);
    $205 = $24;
    $206 = ((($205)) + 10|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = $207&65535;
    $209 = $6;
    $210 = ((($209)) + 12|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = Math_imul($208, $211)|0;
    $213 = (($204) + ($212)|0);
    $214 = $24;
    $215 = ((($214)) + 4|0);
    $216 = HEAP16[$215>>1]|0;
    $217 = $216&65535;
    $218 = $6;
    $219 = ((($218)) + 20|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = (($217) - ($220))|0;
    $222 = (($221) + 1)|0;
    $223 = $24;
    $224 = ((($223)) + 6|0);
    $225 = HEAP16[$224>>1]|0;
    $226 = $225&65535;
    $227 = $6;
    $228 = ((($227)) + 24|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = (($226) - ($229))|0;
    $231 = (($230) + 1)|0;
    $232 = $6;
    $233 = ((($232)) + 12|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = $23;
    $236 = $6;
    $237 = ((($236)) + 20|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = (+($238>>>0));
    $240 = $235 * $239;
    $241 = $23;
    $242 = $6;
    $243 = ((($242)) + 24|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = (+($244>>>0));
    $246 = $241 * $245;
    $247 = $33;
    $248 = $11;
    _nk_tt_MakeGlyphBitmapSubpixel($196,$213,$222,$231,$234,$240,$246,0.0,0.0,$247,$248);
    $249 = $6;
    $250 = ((($249)) + 20|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($251>>>0)>(1);
    if ($252) {
     $253 = $6;
     $254 = ((($253)) + 28|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = $24;
     $257 = ((($256)) + 8|0);
     $258 = HEAP16[$257>>1]|0;
     $259 = $258&65535;
     $260 = (($255) + ($259)|0);
     $261 = $24;
     $262 = ((($261)) + 10|0);
     $263 = HEAP16[$262>>1]|0;
     $264 = $263&65535;
     $265 = $6;
     $266 = ((($265)) + 12|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = Math_imul($264, $267)|0;
     $269 = (($260) + ($268)|0);
     $270 = $24;
     $271 = ((($270)) + 4|0);
     $272 = HEAP16[$271>>1]|0;
     $273 = $272&65535;
     $274 = $24;
     $275 = ((($274)) + 6|0);
     $276 = HEAP16[$275>>1]|0;
     $277 = $276&65535;
     $278 = $6;
     $279 = ((($278)) + 12|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = $6;
     $282 = ((($281)) + 20|0);
     $283 = HEAP32[$282>>2]|0;
     _nk_tt__h_prefilter($269,$273,$277,$280,$283);
    }
    $284 = $6;
    $285 = ((($284)) + 24|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($286>>>0)>(1);
    if ($287) {
     $288 = $6;
     $289 = ((($288)) + 28|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = $24;
     $292 = ((($291)) + 8|0);
     $293 = HEAP16[$292>>1]|0;
     $294 = $293&65535;
     $295 = (($290) + ($294)|0);
     $296 = $24;
     $297 = ((($296)) + 10|0);
     $298 = HEAP16[$297>>1]|0;
     $299 = $298&65535;
     $300 = $6;
     $301 = ((($300)) + 12|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = Math_imul($299, $302)|0;
     $304 = (($295) + ($303)|0);
     $305 = $24;
     $306 = ((($305)) + 4|0);
     $307 = HEAP16[$306>>1]|0;
     $308 = $307&65535;
     $309 = $24;
     $310 = ((($309)) + 6|0);
     $311 = HEAP16[$310>>1]|0;
     $312 = $311&65535;
     $313 = $6;
     $314 = ((($313)) + 12|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = $6;
     $317 = ((($316)) + 24|0);
     $318 = HEAP32[$317>>2]|0;
     _nk_tt__v_prefilter($304,$308,$312,$315,$318);
    }
    $319 = $24;
    $320 = ((($319)) + 8|0);
    $321 = HEAP16[$320>>1]|0;
    $322 = $25;
    HEAP16[$322>>1] = $321;
    $323 = $24;
    $324 = ((($323)) + 10|0);
    $325 = HEAP16[$324>>1]|0;
    $326 = $25;
    $327 = ((($326)) + 2|0);
    HEAP16[$327>>1] = $325;
    $328 = $24;
    $329 = ((($328)) + 8|0);
    $330 = HEAP16[$329>>1]|0;
    $331 = $330&65535;
    $332 = $24;
    $333 = ((($332)) + 4|0);
    $334 = HEAP16[$333>>1]|0;
    $335 = $334&65535;
    $336 = (($331) + ($335))|0;
    $337 = $336&65535;
    $338 = $25;
    $339 = ((($338)) + 4|0);
    HEAP16[$339>>1] = $337;
    $340 = $24;
    $341 = ((($340)) + 10|0);
    $342 = HEAP16[$341>>1]|0;
    $343 = $342&65535;
    $344 = $24;
    $345 = ((($344)) + 6|0);
    $346 = HEAP16[$345>>1]|0;
    $347 = $346&65535;
    $348 = (($343) + ($347))|0;
    $349 = $348&65535;
    $350 = $25;
    $351 = ((($350)) + 6|0);
    HEAP16[$351>>1] = $349;
    $352 = $23;
    $353 = HEAP32[$26>>2]|0;
    $354 = (+($353|0));
    $355 = $352 * $354;
    $356 = $25;
    $357 = ((($356)) + 16|0);
    HEAPF32[$357>>2] = $355;
    $358 = HEAP32[$28>>2]|0;
    $359 = (+($358|0));
    $360 = $19;
    $361 = $359 * $360;
    $362 = $21;
    $363 = $361 + $362;
    $364 = $25;
    $365 = ((($364)) + 8|0);
    HEAPF32[$365>>2] = $363;
    $366 = HEAP32[$29>>2]|0;
    $367 = (+($366|0));
    $368 = $20;
    $369 = $367 * $368;
    $370 = $22;
    $371 = $369 + $370;
    $372 = $25;
    $373 = ((($372)) + 12|0);
    HEAPF32[$373>>2] = $371;
    $374 = HEAP32[$28>>2]|0;
    $375 = (+($374|0));
    $376 = $24;
    $377 = ((($376)) + 4|0);
    $378 = HEAP16[$377>>1]|0;
    $379 = $378&65535;
    $380 = (+($379|0));
    $381 = $375 + $380;
    $382 = $19;
    $383 = $381 * $382;
    $384 = $21;
    $385 = $383 + $384;
    $386 = $25;
    $387 = ((($386)) + 20|0);
    HEAPF32[$387>>2] = $385;
    $388 = HEAP32[$29>>2]|0;
    $389 = (+($388|0));
    $390 = $24;
    $391 = ((($390)) + 6|0);
    $392 = HEAP16[$391>>1]|0;
    $393 = $392&65535;
    $394 = (+($393|0));
    $395 = $389 + $394;
    $396 = $20;
    $397 = $395 * $396;
    $398 = $22;
    $399 = $397 + $398;
    $400 = $25;
    $401 = ((($400)) + 24|0);
    HEAPF32[$401>>2] = $399;
   } else {
    $15 = 0;
   }
   $402 = $14;
   $403 = (($402) + 1)|0;
   $14 = $403;
   $404 = $13;
   $405 = (($404) + 1)|0;
   $13 = $405;
  }
  $406 = $12;
  $407 = (($406) + 1)|0;
  $12 = $407;
 }
 $408 = $16;
 $409 = $6;
 $410 = ((($409)) + 20|0);
 HEAP32[$410>>2] = $408;
 $411 = $17;
 $412 = $6;
 $413 = ((($412)) + 24|0);
 HEAP32[$413>>2] = $411;
 $414 = $15;
 STACKTOP = sp;return ($414|0);
}
function _nk_tt_PackEnd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = $2;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$6 & 31]($$byval_copy,$10);
 $11 = $3;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vii[$13 & 31]($$byval_copy1,$16);
 STACKTOP = sp;return;
}
function _nk_tt_GetFontVMetrics($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = $4;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($11) + ($14)|0);
  $16 = ((($15)) + 4|0);
  $17 = (_nk_ttSHORT($16)|0);
  $18 = $17 << 16 >> 16;
  $19 = $5;
  HEAP32[$19>>2] = $18;
 }
 $20 = $6;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $4;
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($23) + ($26)|0);
  $28 = ((($27)) + 6|0);
  $29 = (_nk_ttSHORT($28)|0);
  $30 = $29 << 16 >> 16;
  $31 = $6;
  HEAP32[$31>>2] = $30;
 }
 $32 = $7;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $4;
 $35 = HEAP32[$34>>2]|0;
 $36 = $4;
 $37 = ((($36)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38)|0);
 $40 = ((($39)) + 8|0);
 $41 = (_nk_ttSHORT($40)|0);
 $42 = $41 << 16 >> 16;
 $43 = $7;
 HEAP32[$43>>2] = $42;
 STACKTOP = sp;return;
}
function _nk_tt_GetPackedQuad($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $23 = $9;
 $24 = (+($23|0));
 $25 = 1.0 / $24;
 $16 = $25;
 $26 = $10;
 $27 = (+($26|0));
 $28 = 1.0 / $27;
 $17 = $28;
 $29 = $8;
 $30 = $11;
 $31 = (($29) + (($30*28)|0)|0);
 $18 = $31;
 $32 = $15;
 $33 = ($32|0)!=(0);
 $34 = $12;
 $35 = +HEAPF32[$34>>2];
 $36 = $18;
 $37 = ((($36)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $35 + $38;
 if ($33) {
  $40 = $39 + 0.5;
  $41 = (_nk_ifloorf($40)|0);
  $19 = $41;
  $42 = $13;
  $43 = +HEAPF32[$42>>2];
  $44 = $18;
  $45 = ((($44)) + 12|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $43 + $46;
  $48 = $47 + 0.5;
  $49 = (_nk_ifloorf($48)|0);
  $20 = $49;
  $50 = $19;
  $51 = (+($50|0));
  $21 = $51;
  $52 = $20;
  $53 = (+($52|0));
  $22 = $53;
  $54 = $21;
  $55 = $14;
  HEAPF32[$55>>2] = $54;
  $56 = $22;
  $57 = $14;
  $58 = ((($57)) + 4|0);
  HEAPF32[$58>>2] = $56;
  $59 = $21;
  $60 = $18;
  $61 = ((($60)) + 20|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $59 + $62;
  $64 = $18;
  $65 = ((($64)) + 8|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $63 - $66;
  $68 = $14;
  $69 = ((($68)) + 16|0);
  HEAPF32[$69>>2] = $67;
  $70 = $22;
  $71 = $18;
  $72 = ((($71)) + 24|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $70 + $73;
  $75 = $18;
  $76 = ((($75)) + 12|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $74 - $77;
  $79 = $14;
  $80 = ((($79)) + 20|0);
  HEAPF32[$80>>2] = $78;
 } else {
  $81 = $14;
  HEAPF32[$81>>2] = $39;
  $82 = $13;
  $83 = +HEAPF32[$82>>2];
  $84 = $18;
  $85 = ((($84)) + 12|0);
  $86 = +HEAPF32[$85>>2];
  $87 = $83 + $86;
  $88 = $14;
  $89 = ((($88)) + 4|0);
  HEAPF32[$89>>2] = $87;
  $90 = $12;
  $91 = +HEAPF32[$90>>2];
  $92 = $18;
  $93 = ((($92)) + 20|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $91 + $94;
  $96 = $14;
  $97 = ((($96)) + 16|0);
  HEAPF32[$97>>2] = $95;
  $98 = $13;
  $99 = +HEAPF32[$98>>2];
  $100 = $18;
  $101 = ((($100)) + 24|0);
  $102 = +HEAPF32[$101>>2];
  $103 = $99 + $102;
  $104 = $14;
  $105 = ((($104)) + 20|0);
  HEAPF32[$105>>2] = $103;
 }
 $106 = $18;
 $107 = HEAP16[$106>>1]|0;
 $108 = $107&65535;
 $109 = (+($108|0));
 $110 = $16;
 $111 = $109 * $110;
 $112 = $14;
 $113 = ((($112)) + 8|0);
 HEAPF32[$113>>2] = $111;
 $114 = $18;
 $115 = ((($114)) + 2|0);
 $116 = HEAP16[$115>>1]|0;
 $117 = $116&65535;
 $118 = (+($117|0));
 $119 = $17;
 $120 = $118 * $119;
 $121 = $14;
 $122 = ((($121)) + 12|0);
 HEAPF32[$122>>2] = $120;
 $123 = $18;
 $124 = ((($123)) + 4|0);
 $125 = HEAP16[$124>>1]|0;
 $126 = $125&65535;
 $127 = (+($126|0));
 $128 = $16;
 $129 = $127 * $128;
 $130 = $14;
 $131 = ((($130)) + 24|0);
 HEAPF32[$131>>2] = $129;
 $132 = $18;
 $133 = ((($132)) + 6|0);
 $134 = HEAP16[$133>>1]|0;
 $135 = $134&65535;
 $136 = (+($135|0));
 $137 = $17;
 $138 = $136 * $137;
 $139 = $14;
 $140 = ((($139)) + 28|0);
 HEAPF32[$140>>2] = $138;
 $141 = $18;
 $142 = ((($141)) + 16|0);
 $143 = +HEAPF32[$142>>2];
 $144 = $12;
 $145 = +HEAPF32[$144>>2];
 $146 = $145 + $143;
 HEAPF32[$144>>2] = $146;
 STACKTOP = sp;return;
}
function _nk_tt__oversample_shift($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $2;
  $6 = (($5) - 1)|0;
  $7 = (0 - ($6))|0;
  $8 = (+($7|0));
  $9 = $2;
  $10 = (+($9|0));
  $11 = 2.0 * $10;
  $12 = $8 / $11;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 } else {
  $1 = 0.0;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 }
 return +(0.0);
}
function _nk_tt_GetGlyphHMetrics($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13)|0);
 $15 = ((($14)) + 34|0);
 $16 = (_nk_ttUSHORT($15)|0);
 $8 = $16;
 $17 = $5;
 $18 = $8;
 $19 = $18&65535;
 $20 = ($17|0)<($19|0);
 $21 = $6;
 $22 = ($21|0)!=(0|0);
 if ($20) {
  if ($22) {
   $23 = $4;
   $24 = HEAP32[$23>>2]|0;
   $25 = $4;
   $26 = ((($25)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($24) + ($27)|0);
   $29 = $5;
   $30 = $29<<2;
   $31 = (($28) + ($30)|0);
   $32 = (_nk_ttSHORT($31)|0);
   $33 = $32 << 16 >> 16;
   $34 = $6;
   HEAP32[$34>>2] = $33;
  }
  $35 = $7;
  $36 = ($35|0)!=(0|0);
  if (!($36)) {
   STACKTOP = sp;return;
  }
  $37 = $4;
  $38 = HEAP32[$37>>2]|0;
  $39 = $4;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($38) + ($41)|0);
  $43 = $5;
  $44 = $43<<2;
  $45 = (($42) + ($44)|0);
  $46 = ((($45)) + 2|0);
  $47 = (_nk_ttSHORT($46)|0);
  $48 = $47 << 16 >> 16;
  $49 = $7;
  HEAP32[$49>>2] = $48;
  STACKTOP = sp;return;
 } else {
  if ($22) {
   $50 = $4;
   $51 = HEAP32[$50>>2]|0;
   $52 = $4;
   $53 = ((($52)) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + ($54)|0);
   $56 = $8;
   $57 = $56&65535;
   $58 = (($57) - 1)|0;
   $59 = $58<<2;
   $60 = (($55) + ($59)|0);
   $61 = (_nk_ttSHORT($60)|0);
   $62 = $61 << 16 >> 16;
   $63 = $6;
   HEAP32[$63>>2] = $62;
  }
  $64 = $7;
  $65 = ($64|0)!=(0|0);
  if (!($65)) {
   STACKTOP = sp;return;
  }
  $66 = $4;
  $67 = HEAP32[$66>>2]|0;
  $68 = $4;
  $69 = ((($68)) + 28|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($67) + ($70)|0);
  $72 = $8;
  $73 = $72&65535;
  $74 = $73<<2;
  $75 = (($71) + ($74)|0);
  $76 = $5;
  $77 = $8;
  $78 = $77&65535;
  $79 = (($76) - ($78))|0;
  $80 = $79<<1;
  $81 = (($75) + ($80)|0);
  $82 = (_nk_ttSHORT($81)|0);
  $83 = $82 << 16 >> 16;
  $84 = $7;
  HEAP32[$84>>2] = $83;
  STACKTOP = sp;return;
 }
}
function _nk_tt_GetGlyphBitmapBox($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 _nk_tt_GetGlyphBitmapBoxSubpixel($16,$17,$18,$19,0.0,0.0,$20,$21,$22,$23);
 STACKTOP = sp;return;
}
function _nk_tt_MakeGlyphBitmapSubpixel($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = $9|0;
 $10 = $10|0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 76|0;
 $22 = sp + 28|0;
 $23 = sp + 24|0;
 $24 = sp + 20|0;
 $26 = sp;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $27 = $11;
 $28 = $21;
 $29 = $20;
 $30 = (_nk_tt_GetGlyphShape($27,$28,$29,$24)|0);
 $25 = $30;
 $31 = $11;
 $32 = $20;
 $33 = $16;
 $34 = $17;
 $35 = $18;
 $36 = $19;
 _nk_tt_GetGlyphBitmapBoxSubpixel($31,$32,$33,$34,$35,$36,$22,$23,0,0);
 $37 = $12;
 $38 = ((($26)) + 12|0);
 HEAP32[$38>>2] = $37;
 $39 = $13;
 HEAP32[$26>>2] = $39;
 $40 = $14;
 $41 = ((($26)) + 4|0);
 HEAP32[$41>>2] = $40;
 $42 = $15;
 $43 = ((($26)) + 8|0);
 HEAP32[$43>>2] = $42;
 $44 = HEAP32[$26>>2]|0;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = ((($26)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0);
  if ($48) {
   $49 = HEAP32[$24>>2]|0;
   $50 = $25;
   $51 = $16;
   $52 = $17;
   $53 = $18;
   $54 = $19;
   $55 = HEAP32[$22>>2]|0;
   $56 = HEAP32[$23>>2]|0;
   $57 = $21;
   _nk_tt_Rasterize($26,0.34999999403953552,$49,$50,$51,$52,$53,$54,$55,$56,1,$57);
  }
 }
 $58 = $21;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $21;
 $62 = HEAP32[$24>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$61>>2]|0;
 FUNCTION_TABLE_vii[$60 & 31]($$byval_copy,$62);
 STACKTOP = sp;return;
}
function _nk_tt__h_prefilter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 40|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $6;
 $16 = $9;
 $17 = (($15) - ($16))|0;
 $11 = $17;
 $12 = 0;
 L1: while(1) {
  $18 = $12;
  $19 = $7;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   label = 24;
   break;
  }
  $21 = $9;
  _nk_memset($10,0,$21);
  $14 = 0;
  $22 = $9;
  L4: do {
   switch ($22|0) {
   case 2:  {
    $13 = 0;
    while(1) {
     $23 = $13;
     $24 = $11;
     $25 = ($23|0)<=($24|0);
     if (!($25)) {
      break L4;
     }
     $26 = $13;
     $27 = $5;
     $28 = (($27) + ($26)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = $13;
     $32 = $31 & 7;
     $33 = (($10) + ($32)|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = (($30) - ($35))|0;
     $37 = $14;
     $38 = (($37) + ($36))|0;
     $14 = $38;
     $39 = $13;
     $40 = $5;
     $41 = (($40) + ($39)|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $13;
     $44 = $9;
     $45 = (($43) + ($44))|0;
     $46 = $45 & 7;
     $47 = (($10) + ($46)|0);
     HEAP8[$47>>0] = $42;
     $48 = $14;
     $49 = (($48>>>0) / 2)&-1;
     $50 = $49&255;
     $51 = $13;
     $52 = $5;
     $53 = (($52) + ($51)|0);
     HEAP8[$53>>0] = $50;
     $54 = $13;
     $55 = (($54) + 1)|0;
     $13 = $55;
    }
    break;
   }
   case 3:  {
    $13 = 0;
    while(1) {
     $56 = $13;
     $57 = $11;
     $58 = ($56|0)<=($57|0);
     if (!($58)) {
      break L4;
     }
     $59 = $13;
     $60 = $5;
     $61 = (($60) + ($59)|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62&255;
     $64 = $13;
     $65 = $64 & 7;
     $66 = (($10) + ($65)|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = (($63) - ($68))|0;
     $70 = $14;
     $71 = (($70) + ($69))|0;
     $14 = $71;
     $72 = $13;
     $73 = $5;
     $74 = (($73) + ($72)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $13;
     $77 = $9;
     $78 = (($76) + ($77))|0;
     $79 = $78 & 7;
     $80 = (($10) + ($79)|0);
     HEAP8[$80>>0] = $75;
     $81 = $14;
     $82 = (($81>>>0) / 3)&-1;
     $83 = $82&255;
     $84 = $13;
     $85 = $5;
     $86 = (($85) + ($84)|0);
     HEAP8[$86>>0] = $83;
     $87 = $13;
     $88 = (($87) + 1)|0;
     $13 = $88;
    }
    break;
   }
   case 4:  {
    $13 = 0;
    while(1) {
     $89 = $13;
     $90 = $11;
     $91 = ($89|0)<=($90|0);
     if (!($91)) {
      break L4;
     }
     $92 = $13;
     $93 = $5;
     $94 = (($93) + ($92)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95&255;
     $97 = $13;
     $98 = $97 & 7;
     $99 = (($10) + ($98)|0);
     $100 = HEAP8[$99>>0]|0;
     $101 = $100&255;
     $102 = (($96) - ($101))|0;
     $103 = $14;
     $104 = (($103) + ($102))|0;
     $14 = $104;
     $105 = $13;
     $106 = $5;
     $107 = (($106) + ($105)|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = $13;
     $110 = $9;
     $111 = (($109) + ($110))|0;
     $112 = $111 & 7;
     $113 = (($10) + ($112)|0);
     HEAP8[$113>>0] = $108;
     $114 = $14;
     $115 = (($114>>>0) / 4)&-1;
     $116 = $115&255;
     $117 = $13;
     $118 = $5;
     $119 = (($118) + ($117)|0);
     HEAP8[$119>>0] = $116;
     $120 = $13;
     $121 = (($120) + 1)|0;
     $13 = $121;
    }
    break;
   }
   case 5:  {
    $13 = 0;
    while(1) {
     $122 = $13;
     $123 = $11;
     $124 = ($122|0)<=($123|0);
     if (!($124)) {
      break L4;
     }
     $125 = $13;
     $126 = $5;
     $127 = (($126) + ($125)|0);
     $128 = HEAP8[$127>>0]|0;
     $129 = $128&255;
     $130 = $13;
     $131 = $130 & 7;
     $132 = (($10) + ($131)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = (($129) - ($134))|0;
     $136 = $14;
     $137 = (($136) + ($135))|0;
     $14 = $137;
     $138 = $13;
     $139 = $5;
     $140 = (($139) + ($138)|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = $13;
     $143 = $9;
     $144 = (($142) + ($143))|0;
     $145 = $144 & 7;
     $146 = (($10) + ($145)|0);
     HEAP8[$146>>0] = $141;
     $147 = $14;
     $148 = (($147>>>0) / 5)&-1;
     $149 = $148&255;
     $150 = $13;
     $151 = $5;
     $152 = (($151) + ($150)|0);
     HEAP8[$152>>0] = $149;
     $153 = $13;
     $154 = (($153) + 1)|0;
     $13 = $154;
    }
    break;
   }
   default: {
    $13 = 0;
    while(1) {
     $155 = $13;
     $156 = $11;
     $157 = ($155|0)<=($156|0);
     if (!($157)) {
      break L4;
     }
     $158 = $13;
     $159 = $5;
     $160 = (($159) + ($158)|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = $13;
     $164 = $163 & 7;
     $165 = (($10) + ($164)|0);
     $166 = HEAP8[$165>>0]|0;
     $167 = $166&255;
     $168 = (($162) - ($167))|0;
     $169 = $14;
     $170 = (($169) + ($168))|0;
     $14 = $170;
     $171 = $13;
     $172 = $5;
     $173 = (($172) + ($171)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $13;
     $176 = $9;
     $177 = (($175) + ($176))|0;
     $178 = $177 & 7;
     $179 = (($10) + ($178)|0);
     HEAP8[$179>>0] = $174;
     $180 = $14;
     $181 = $9;
     $182 = (($180>>>0) / ($181>>>0))&-1;
     $183 = $182&255;
     $184 = $13;
     $185 = $5;
     $186 = (($185) + ($184)|0);
     HEAP8[$186>>0] = $183;
     $187 = $13;
     $188 = (($187) + 1)|0;
     $13 = $188;
    }
   }
   }
  } while(0);
  while(1) {
   $189 = $13;
   $190 = $6;
   $191 = ($189|0)<($190|0);
   if (!($191)) {
    break;
   }
   $192 = $13;
   $193 = $5;
   $194 = (($193) + ($192)|0);
   $195 = HEAP8[$194>>0]|0;
   $196 = $195&255;
   $197 = ($196|0)==(0);
   if (!($197)) {
    label = 21;
    break L1;
   }
   $198 = $13;
   $199 = $198 & 7;
   $200 = (($10) + ($199)|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = $14;
   $204 = (($203) - ($202))|0;
   $14 = $204;
   $205 = $14;
   $206 = $9;
   $207 = (($205>>>0) / ($206>>>0))&-1;
   $208 = $207&255;
   $209 = $13;
   $210 = $5;
   $211 = (($210) + ($209)|0);
   HEAP8[$211>>0] = $208;
   $212 = $13;
   $213 = (($212) + 1)|0;
   $13 = $213;
  }
  $214 = $8;
  $215 = $5;
  $216 = (($215) + ($214)|0);
  $5 = $216;
  $217 = $12;
  $218 = (($217) + 1)|0;
  $12 = $218;
 }
 if ((label|0) == 21) {
  ___assert_fail((23610|0),(1320|0),9667,(23625|0));
  // unreachable;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function _nk_tt__v_prefilter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 40|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $7;
 $16 = $9;
 $17 = (($15) - ($16))|0;
 $11 = $17;
 $12 = 0;
 L1: while(1) {
  $18 = $12;
  $19 = $6;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   label = 24;
   break;
  }
  $21 = $9;
  _nk_memset($10,0,$21);
  $14 = 0;
  $22 = $9;
  L4: do {
   switch ($22|0) {
   case 2:  {
    $13 = 0;
    while(1) {
     $23 = $13;
     $24 = $11;
     $25 = ($23|0)<=($24|0);
     if (!($25)) {
      break L4;
     }
     $26 = $13;
     $27 = $8;
     $28 = Math_imul($26, $27)|0;
     $29 = $5;
     $30 = (($29) + ($28)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $13;
     $34 = $33 & 7;
     $35 = (($10) + ($34)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = (($32) - ($37))|0;
     $39 = $14;
     $40 = (($39) + ($38))|0;
     $14 = $40;
     $41 = $13;
     $42 = $8;
     $43 = Math_imul($41, $42)|0;
     $44 = $5;
     $45 = (($44) + ($43)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $13;
     $48 = $9;
     $49 = (($47) + ($48))|0;
     $50 = $49 & 7;
     $51 = (($10) + ($50)|0);
     HEAP8[$51>>0] = $46;
     $52 = $14;
     $53 = (($52>>>0) / 2)&-1;
     $54 = $53&255;
     $55 = $13;
     $56 = $8;
     $57 = Math_imul($55, $56)|0;
     $58 = $5;
     $59 = (($58) + ($57)|0);
     HEAP8[$59>>0] = $54;
     $60 = $13;
     $61 = (($60) + 1)|0;
     $13 = $61;
    }
    break;
   }
   case 3:  {
    $13 = 0;
    while(1) {
     $62 = $13;
     $63 = $11;
     $64 = ($62|0)<=($63|0);
     if (!($64)) {
      break L4;
     }
     $65 = $13;
     $66 = $8;
     $67 = Math_imul($65, $66)|0;
     $68 = $5;
     $69 = (($68) + ($67)|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70&255;
     $72 = $13;
     $73 = $72 & 7;
     $74 = (($10) + ($73)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = (($71) - ($76))|0;
     $78 = $14;
     $79 = (($78) + ($77))|0;
     $14 = $79;
     $80 = $13;
     $81 = $8;
     $82 = Math_imul($80, $81)|0;
     $83 = $5;
     $84 = (($83) + ($82)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $13;
     $87 = $9;
     $88 = (($86) + ($87))|0;
     $89 = $88 & 7;
     $90 = (($10) + ($89)|0);
     HEAP8[$90>>0] = $85;
     $91 = $14;
     $92 = (($91>>>0) / 3)&-1;
     $93 = $92&255;
     $94 = $13;
     $95 = $8;
     $96 = Math_imul($94, $95)|0;
     $97 = $5;
     $98 = (($97) + ($96)|0);
     HEAP8[$98>>0] = $93;
     $99 = $13;
     $100 = (($99) + 1)|0;
     $13 = $100;
    }
    break;
   }
   case 4:  {
    $13 = 0;
    while(1) {
     $101 = $13;
     $102 = $11;
     $103 = ($101|0)<=($102|0);
     if (!($103)) {
      break L4;
     }
     $104 = $13;
     $105 = $8;
     $106 = Math_imul($104, $105)|0;
     $107 = $5;
     $108 = (($107) + ($106)|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = $109&255;
     $111 = $13;
     $112 = $111 & 7;
     $113 = (($10) + ($112)|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = (($110) - ($115))|0;
     $117 = $14;
     $118 = (($117) + ($116))|0;
     $14 = $118;
     $119 = $13;
     $120 = $8;
     $121 = Math_imul($119, $120)|0;
     $122 = $5;
     $123 = (($122) + ($121)|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = $13;
     $126 = $9;
     $127 = (($125) + ($126))|0;
     $128 = $127 & 7;
     $129 = (($10) + ($128)|0);
     HEAP8[$129>>0] = $124;
     $130 = $14;
     $131 = (($130>>>0) / 4)&-1;
     $132 = $131&255;
     $133 = $13;
     $134 = $8;
     $135 = Math_imul($133, $134)|0;
     $136 = $5;
     $137 = (($136) + ($135)|0);
     HEAP8[$137>>0] = $132;
     $138 = $13;
     $139 = (($138) + 1)|0;
     $13 = $139;
    }
    break;
   }
   case 5:  {
    $13 = 0;
    while(1) {
     $140 = $13;
     $141 = $11;
     $142 = ($140|0)<=($141|0);
     if (!($142)) {
      break L4;
     }
     $143 = $13;
     $144 = $8;
     $145 = Math_imul($143, $144)|0;
     $146 = $5;
     $147 = (($146) + ($145)|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = $13;
     $151 = $150 & 7;
     $152 = (($10) + ($151)|0);
     $153 = HEAP8[$152>>0]|0;
     $154 = $153&255;
     $155 = (($149) - ($154))|0;
     $156 = $14;
     $157 = (($156) + ($155))|0;
     $14 = $157;
     $158 = $13;
     $159 = $8;
     $160 = Math_imul($158, $159)|0;
     $161 = $5;
     $162 = (($161) + ($160)|0);
     $163 = HEAP8[$162>>0]|0;
     $164 = $13;
     $165 = $9;
     $166 = (($164) + ($165))|0;
     $167 = $166 & 7;
     $168 = (($10) + ($167)|0);
     HEAP8[$168>>0] = $163;
     $169 = $14;
     $170 = (($169>>>0) / 5)&-1;
     $171 = $170&255;
     $172 = $13;
     $173 = $8;
     $174 = Math_imul($172, $173)|0;
     $175 = $5;
     $176 = (($175) + ($174)|0);
     HEAP8[$176>>0] = $171;
     $177 = $13;
     $178 = (($177) + 1)|0;
     $13 = $178;
    }
    break;
   }
   default: {
    $13 = 0;
    while(1) {
     $179 = $13;
     $180 = $11;
     $181 = ($179|0)<=($180|0);
     if (!($181)) {
      break L4;
     }
     $182 = $13;
     $183 = $8;
     $184 = Math_imul($182, $183)|0;
     $185 = $5;
     $186 = (($185) + ($184)|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = $13;
     $190 = $189 & 7;
     $191 = (($10) + ($190)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = (($188) - ($193))|0;
     $195 = $14;
     $196 = (($195) + ($194))|0;
     $14 = $196;
     $197 = $13;
     $198 = $8;
     $199 = Math_imul($197, $198)|0;
     $200 = $5;
     $201 = (($200) + ($199)|0);
     $202 = HEAP8[$201>>0]|0;
     $203 = $13;
     $204 = $9;
     $205 = (($203) + ($204))|0;
     $206 = $205 & 7;
     $207 = (($10) + ($206)|0);
     HEAP8[$207>>0] = $202;
     $208 = $14;
     $209 = $9;
     $210 = (($208>>>0) / ($209>>>0))&-1;
     $211 = $210&255;
     $212 = $13;
     $213 = $8;
     $214 = Math_imul($212, $213)|0;
     $215 = $5;
     $216 = (($215) + ($214)|0);
     HEAP8[$216>>0] = $211;
     $217 = $13;
     $218 = (($217) + 1)|0;
     $13 = $218;
    }
   }
   }
  } while(0);
  while(1) {
   $219 = $13;
   $220 = $7;
   $221 = ($219|0)<($220|0);
   if (!($221)) {
    break;
   }
   $222 = $13;
   $223 = $8;
   $224 = Math_imul($222, $223)|0;
   $225 = $5;
   $226 = (($225) + ($224)|0);
   $227 = HEAP8[$226>>0]|0;
   $228 = $227&255;
   $229 = ($228|0)==(0);
   if (!($229)) {
    label = 21;
    break L1;
   }
   $230 = $13;
   $231 = $230 & 7;
   $232 = (($10) + ($231)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = $14;
   $236 = (($235) - ($234))|0;
   $14 = $236;
   $237 = $14;
   $238 = $9;
   $239 = (($237>>>0) / ($238>>>0))&-1;
   $240 = $239&255;
   $241 = $13;
   $242 = $8;
   $243 = Math_imul($241, $242)|0;
   $244 = $5;
   $245 = (($244) + ($243)|0);
   HEAP8[$245>>0] = $240;
   $246 = $13;
   $247 = (($246) + 1)|0;
   $13 = $247;
  }
  $248 = $5;
  $249 = ((($248)) + 1|0);
  $5 = $249;
  $250 = $12;
  $251 = (($250) + 1)|0;
  $12 = $251;
 }
 if ((label|0) == 21) {
  ___assert_fail((23644|0),(1320|0),9731,(23675|0));
  // unreachable;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function _nk_tt_GetGlyphShape($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0.0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0.0;
 var $547 = 0.0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0.0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0, $582 = 0.0;
 var $583 = 0.0, $584 = 0, $585 = 0.0, $586 = 0, $587 = 0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0, $597 = 0.0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0.0, $603 = 0.0, $604 = 0, $605 = 0.0, $606 = 0, $607 = 0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0.0, $636 = 0.0;
 var $637 = 0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0, $654 = 0;
 var $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy5 = sp + 196|0;
 $$byval_copy4 = sp + 192|0;
 $$byval_copy3 = sp + 188|0;
 $$byval_copy2 = sp + 184|0;
 $$byval_copy1 = sp + 180|0;
 $$byval_copy = sp + 176|0;
 $43 = sp + 44|0;
 $45 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $51 = $5;
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $12 = 0;
 $13 = 0;
 $53 = $5;
 $54 = $7;
 $55 = (_nk_tt__GetGlyfOffset($53,$54)|0);
 $14 = $55;
 $56 = $8;
 HEAP32[$56>>2] = 0;
 $57 = $14;
 $58 = ($57|0)<(0);
 if ($58) {
  $4 = 0;
  $729 = $4;
  STACKTOP = sp;return ($729|0);
 }
 $59 = $11;
 $60 = $14;
 $61 = (($59) + ($60)|0);
 $62 = (_nk_ttSHORT($61)|0);
 $9 = $62;
 $63 = $9;
 $64 = $63 << 16 >> 16;
 $65 = ($64|0)>(0);
 L5: do {
  if ($65) {
   $15 = 0;
   $19 = 0;
   $23 = 0;
   $25 = 0;
   $66 = $11;
   $67 = $14;
   $68 = (($66) + ($67)|0);
   $69 = ((($68)) + 10|0);
   $10 = $69;
   $70 = $11;
   $71 = $14;
   $72 = (($70) + ($71)|0);
   $73 = ((($72)) + 10|0);
   $74 = $9;
   $75 = $74 << 16 >> 16;
   $76 = $75<<1;
   $77 = (($73) + ($76)|0);
   $78 = (_nk_ttUSHORT($77)|0);
   $79 = $78&65535;
   $17 = $79;
   $80 = $11;
   $81 = $14;
   $82 = (($80) + ($81)|0);
   $83 = ((($82)) + 10|0);
   $84 = $9;
   $85 = $84 << 16 >> 16;
   $86 = $85<<1;
   $87 = (($83) + ($86)|0);
   $88 = ((($87)) + 2|0);
   $89 = $17;
   $90 = (($88) + ($89)|0);
   $34 = $90;
   $91 = $10;
   $92 = $9;
   $93 = $92 << 16 >> 16;
   $94 = $93<<1;
   $95 = (($91) + ($94)|0);
   $96 = ((($95)) + -2|0);
   $97 = (_nk_ttUSHORT($96)|0);
   $98 = $97&65535;
   $99 = (1 + ($98))|0;
   $21 = $99;
   $100 = $21;
   $101 = $9;
   $102 = $101 << 16 >> 16;
   $103 = $102<<1;
   $104 = (($100) + ($103))|0;
   $20 = $104;
   $105 = $6;
   $106 = ((($105)) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $6;
   $109 = $20;
   $110 = ($109*10)|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$108>>2]|0;
   $111 = (FUNCTION_TABLE_iiii[$107 & 15]($$byval_copy,0,$110)|0);
   $12 = $111;
   $112 = $12;
   $113 = ($112|0)==(0|0);
   if ($113) {
    $4 = 0;
    $729 = $4;
    STACKTOP = sp;return ($729|0);
   }
   $22 = 0;
   $16 = 0;
   $114 = $20;
   $115 = $21;
   $116 = (($114) - ($115))|0;
   $24 = $116;
   $18 = 0;
   while(1) {
    $117 = $18;
    $118 = $21;
    $119 = ($117|0)<($118|0);
    if (!($119)) {
     break;
    }
    $120 = $16;
    $121 = $120&255;
    $122 = ($121|0)==(0);
    if ($122) {
     $123 = $34;
     $124 = ((($123)) + 1|0);
     $34 = $124;
     $125 = HEAP8[$123>>0]|0;
     $15 = $125;
     $126 = $15;
     $127 = $126&255;
     $128 = $127 & 8;
     $129 = ($128|0)!=(0);
     if ($129) {
      $130 = $34;
      $131 = ((($130)) + 1|0);
      $34 = $131;
      $132 = HEAP8[$130>>0]|0;
      $16 = $132;
     }
    } else {
     $133 = $16;
     $134 = (($133) + -1)<<24>>24;
     $16 = $134;
    }
    $135 = $15;
    $136 = $24;
    $137 = $18;
    $138 = (($136) + ($137))|0;
    $139 = $12;
    $140 = (($139) + (($138*10)|0)|0);
    $141 = ((($140)) + 8|0);
    HEAP8[$141>>0] = $135;
    $142 = $18;
    $143 = (($142) + 1)|0;
    $18 = $143;
   }
   $26 = 0;
   $18 = 0;
   while(1) {
    $144 = $18;
    $145 = $21;
    $146 = ($144|0)<($145|0);
    if (!($146)) {
     break;
    }
    $147 = $24;
    $148 = $18;
    $149 = (($147) + ($148))|0;
    $150 = $12;
    $151 = (($150) + (($149*10)|0)|0);
    $152 = ((($151)) + 8|0);
    $153 = HEAP8[$152>>0]|0;
    $15 = $153;
    $154 = $15;
    $155 = $154&255;
    $156 = $155 & 2;
    $157 = ($156|0)!=(0);
    if ($157) {
     $158 = $34;
     $159 = ((($158)) + 1|0);
     $34 = $159;
     $160 = HEAP8[$158>>0]|0;
     $161 = $160&255;
     $35 = $161;
     $162 = $15;
     $163 = $162&255;
     $164 = $163 & 16;
     $165 = ($164|0)!=(0);
     $166 = $35;
     $167 = $166 << 16 >> 16;
     $168 = (0 - ($167))|0;
     $169 = $165 ? $167 : $168;
     $170 = $26;
     $171 = (($170) + ($169))|0;
     $26 = $171;
    } else {
     $172 = $15;
     $173 = $172&255;
     $174 = $173 & 16;
     $175 = ($174|0)!=(0);
     if (!($175)) {
      $176 = $26;
      $177 = $34;
      $178 = HEAP8[$177>>0]|0;
      $179 = $178&255;
      $180 = $179<<8;
      $181 = $34;
      $182 = ((($181)) + 1|0);
      $183 = HEAP8[$182>>0]|0;
      $184 = $183&255;
      $185 = (($180) + ($184))|0;
      $186 = $185&65535;
      $187 = $186 << 16 >> 16;
      $188 = (($176) + ($187))|0;
      $26 = $188;
      $189 = $34;
      $190 = ((($189)) + 2|0);
      $34 = $190;
     }
    }
    $191 = $26;
    $192 = $191&65535;
    $193 = $24;
    $194 = $18;
    $195 = (($193) + ($194))|0;
    $196 = $12;
    $197 = (($196) + (($195*10)|0)|0);
    HEAP16[$197>>1] = $192;
    $198 = $18;
    $199 = (($198) + 1)|0;
    $18 = $199;
   }
   $27 = 0;
   $18 = 0;
   while(1) {
    $200 = $18;
    $201 = $21;
    $202 = ($200|0)<($201|0);
    if (!($202)) {
     break;
    }
    $203 = $24;
    $204 = $18;
    $205 = (($203) + ($204))|0;
    $206 = $12;
    $207 = (($206) + (($205*10)|0)|0);
    $208 = ((($207)) + 8|0);
    $209 = HEAP8[$208>>0]|0;
    $15 = $209;
    $210 = $15;
    $211 = $210&255;
    $212 = $211 & 4;
    $213 = ($212|0)!=(0);
    if ($213) {
     $214 = $34;
     $215 = ((($214)) + 1|0);
     $34 = $215;
     $216 = HEAP8[$214>>0]|0;
     $217 = $216&255;
     $36 = $217;
     $218 = $15;
     $219 = $218&255;
     $220 = $219 & 32;
     $221 = ($220|0)!=(0);
     $222 = $36;
     $223 = $222 << 16 >> 16;
     $224 = (0 - ($223))|0;
     $225 = $221 ? $223 : $224;
     $226 = $27;
     $227 = (($226) + ($225))|0;
     $27 = $227;
    } else {
     $228 = $15;
     $229 = $228&255;
     $230 = $229 & 32;
     $231 = ($230|0)!=(0);
     if (!($231)) {
      $232 = $27;
      $233 = $34;
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235<<8;
      $237 = $34;
      $238 = ((($237)) + 1|0);
      $239 = HEAP8[$238>>0]|0;
      $240 = $239&255;
      $241 = (($236) + ($240))|0;
      $242 = $241&65535;
      $243 = $242 << 16 >> 16;
      $244 = (($232) + ($243))|0;
      $27 = $244;
      $245 = $34;
      $246 = ((($245)) + 2|0);
      $34 = $246;
     }
    }
    $247 = $27;
    $248 = $247&65535;
    $249 = $24;
    $250 = $18;
    $251 = (($249) + ($250))|0;
    $252 = $12;
    $253 = (($252) + (($251*10)|0)|0);
    $254 = ((($253)) + 2|0);
    HEAP16[$254>>1] = $248;
    $255 = $18;
    $256 = (($255) + 1)|0;
    $18 = $256;
   }
   $13 = 0;
   $33 = 0;
   $32 = 0;
   $29 = 0;
   $28 = 0;
   $31 = 0;
   $30 = 0;
   $18 = 0;
   while(1) {
    $257 = $18;
    $258 = $21;
    $259 = ($257|0)<($258|0);
    if (!($259)) {
     break;
    }
    $260 = $24;
    $261 = $18;
    $262 = (($260) + ($261))|0;
    $263 = $12;
    $264 = (($263) + (($262*10)|0)|0);
    $265 = ((($264)) + 8|0);
    $266 = HEAP8[$265>>0]|0;
    $15 = $266;
    $267 = $24;
    $268 = $18;
    $269 = (($267) + ($268))|0;
    $270 = $12;
    $271 = (($270) + (($269*10)|0)|0);
    $272 = HEAP16[$271>>1]|0;
    $273 = $272 << 16 >> 16;
    $26 = $273;
    $274 = $24;
    $275 = $18;
    $276 = (($274) + ($275))|0;
    $277 = $12;
    $278 = (($277) + (($276*10)|0)|0);
    $279 = ((($278)) + 2|0);
    $280 = HEAP16[$279>>1]|0;
    $281 = $280 << 16 >> 16;
    $27 = $281;
    $282 = $22;
    $283 = $18;
    $284 = ($282|0)==($283|0);
    do {
     if ($284) {
      $285 = $18;
      $286 = ($285|0)!=(0);
      if ($286) {
       $287 = $12;
       $288 = $13;
       $289 = $23;
       $290 = $25;
       $291 = $30;
       $292 = $31;
       $293 = $32;
       $294 = $33;
       $295 = $28;
       $296 = $29;
       $297 = (_stbtt__close_shape($287,$288,$289,$290,$291,$292,$293,$294,$295,$296)|0);
       $13 = $297;
      }
      $298 = $15;
      $299 = $298&255;
      $300 = $299 & 1;
      $301 = ($300|0)!=(0);
      $302 = $301 ^ 1;
      $303 = $302&1;
      $25 = $303;
      $304 = $25;
      $305 = ($304|0)!=(0);
      $306 = $26;
      do {
       if ($305) {
        $32 = $306;
        $307 = $27;
        $33 = $307;
        $308 = $24;
        $309 = $18;
        $310 = (($308) + ($309))|0;
        $311 = (($310) + 1)|0;
        $312 = $12;
        $313 = (($312) + (($311*10)|0)|0);
        $314 = ((($313)) + 8|0);
        $315 = HEAP8[$314>>0]|0;
        $316 = $315&255;
        $317 = $316 & 1;
        $318 = ($317|0)!=(0);
        if ($318) {
         $342 = $24;
         $343 = $18;
         $344 = (($342) + ($343))|0;
         $345 = (($344) + 1)|0;
         $346 = $12;
         $347 = (($346) + (($345*10)|0)|0);
         $348 = HEAP16[$347>>1]|0;
         $349 = $348 << 16 >> 16;
         $30 = $349;
         $350 = $24;
         $351 = $18;
         $352 = (($350) + ($351))|0;
         $353 = (($352) + 1)|0;
         $354 = $12;
         $355 = (($354) + (($353*10)|0)|0);
         $356 = ((($355)) + 2|0);
         $357 = HEAP16[$356>>1]|0;
         $358 = $357 << 16 >> 16;
         $31 = $358;
         $359 = $18;
         $360 = (($359) + 1)|0;
         $18 = $360;
         break;
        } else {
         $319 = $26;
         $320 = $24;
         $321 = $18;
         $322 = (($320) + ($321))|0;
         $323 = (($322) + 1)|0;
         $324 = $12;
         $325 = (($324) + (($323*10)|0)|0);
         $326 = HEAP16[$325>>1]|0;
         $327 = $326 << 16 >> 16;
         $328 = (($319) + ($327))|0;
         $329 = $328 >> 1;
         $30 = $329;
         $330 = $27;
         $331 = $24;
         $332 = $18;
         $333 = (($331) + ($332))|0;
         $334 = (($333) + 1)|0;
         $335 = $12;
         $336 = (($335) + (($334*10)|0)|0);
         $337 = ((($336)) + 2|0);
         $338 = HEAP16[$337>>1]|0;
         $339 = $338 << 16 >> 16;
         $340 = (($330) + ($339))|0;
         $341 = $340 >> 1;
         $31 = $341;
         break;
        }
       } else {
        $30 = $306;
        $361 = $27;
        $31 = $361;
       }
      } while(0);
      $362 = $13;
      $363 = (($362) + 1)|0;
      $13 = $363;
      $364 = $12;
      $365 = (($364) + (($362*10)|0)|0);
      $366 = $30;
      $367 = $31;
      _nk_tt_setvertex($365,1,$366,$367,0,0);
      $23 = 0;
      $368 = $10;
      $369 = $19;
      $370 = $369<<1;
      $371 = (($368) + ($370)|0);
      $372 = (_nk_ttUSHORT($371)|0);
      $373 = $372&65535;
      $374 = (1 + ($373))|0;
      $22 = $374;
      $375 = $19;
      $376 = (($375) + 1)|0;
      $19 = $376;
     } else {
      $377 = $15;
      $378 = $377&255;
      $379 = $378 & 1;
      $380 = ($379|0)!=(0);
      $381 = $23;
      $382 = ($381|0)!=(0);
      if (!($380)) {
       if ($382) {
        $383 = $13;
        $384 = (($383) + 1)|0;
        $13 = $384;
        $385 = $12;
        $386 = (($385) + (($383*10)|0)|0);
        $387 = $28;
        $388 = $26;
        $389 = (($387) + ($388))|0;
        $390 = $389 >> 1;
        $391 = $29;
        $392 = $27;
        $393 = (($391) + ($392))|0;
        $394 = $393 >> 1;
        $395 = $28;
        $396 = $29;
        _nk_tt_setvertex($386,3,$390,$394,$395,$396);
       }
       $397 = $26;
       $28 = $397;
       $398 = $27;
       $29 = $398;
       $23 = 1;
       break;
      }
      $399 = $13;
      $400 = (($399) + 1)|0;
      $13 = $400;
      $401 = $12;
      $402 = (($401) + (($399*10)|0)|0);
      $403 = $26;
      $404 = $27;
      if ($382) {
       $405 = $28;
       $406 = $29;
       _nk_tt_setvertex($402,3,$403,$404,$405,$406);
      } else {
       _nk_tt_setvertex($402,2,$403,$404,0,0);
      }
      $23 = 0;
     }
    } while(0);
    $407 = $18;
    $408 = (($407) + 1)|0;
    $18 = $408;
   }
   $409 = $12;
   $410 = $13;
   $411 = $23;
   $412 = $25;
   $413 = $30;
   $414 = $31;
   $415 = $32;
   $416 = $33;
   $417 = $28;
   $418 = $29;
   $419 = (_stbtt__close_shape($409,$410,$411,$412,$413,$414,$415,$416,$417,$418)|0);
   $13 = $419;
  } else {
   $420 = $9;
   $421 = $420 << 16 >> 16;
   $422 = ($421|0)==(-1);
   if (!($422)) {
    $723 = $9;
    $724 = $723 << 16 >> 16;
    $725 = ($724|0)<(0);
    if (!($725)) {
     break;
    }
    ___assert_fail((22521|0),(1320|0),8816,(23261|0));
    // unreachable;
   }
   $37 = 1;
   $423 = $11;
   $424 = $14;
   $425 = (($423) + ($424)|0);
   $426 = ((($425)) + 10|0);
   $38 = $426;
   $13 = 0;
   $12 = 0;
   while(1) {
    $427 = $37;
    $428 = ($427|0)!=(0);
    if (!($428)) {
     break L5;
    }
    $41 = 0;
    HEAP32[$43>>2] = 0;
    $44 = 0;
    ;HEAP32[$45>>2]=HEAP32[348>>2]|0;HEAP32[$45+4>>2]=HEAP32[348+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[348+8>>2]|0;HEAP32[$45+12>>2]=HEAP32[348+12>>2]|0;HEAP32[$45+16>>2]=HEAP32[348+16>>2]|0;HEAP32[$45+20>>2]=HEAP32[348+20>>2]|0;
    $429 = $38;
    $430 = (_nk_ttSHORT($429)|0);
    $39 = $430;
    $431 = $38;
    $432 = ((($431)) + 2|0);
    $38 = $432;
    $433 = $38;
    $434 = (_nk_ttSHORT($433)|0);
    $40 = $434;
    $435 = $38;
    $436 = ((($435)) + 2|0);
    $38 = $436;
    $437 = $39;
    $438 = $437&65535;
    $439 = $438 & 2;
    $440 = ($439|0)!=(0);
    if (!($440)) {
     label = 55;
     break;
    }
    $441 = $39;
    $442 = $441&65535;
    $443 = $442 & 1;
    $444 = ($443|0)!=(0);
    $445 = $38;
    if ($444) {
     $446 = (_nk_ttSHORT($445)|0);
     $447 = (+($446<<16>>16));
     $448 = ((($45)) + 16|0);
     HEAPF32[$448>>2] = $447;
     $449 = $38;
     $450 = ((($449)) + 2|0);
     $38 = $450;
     $451 = $38;
     $452 = (_nk_ttSHORT($451)|0);
     $453 = (+($452<<16>>16));
     $454 = ((($45)) + 20|0);
     HEAPF32[$454>>2] = $453;
     $455 = $38;
     $456 = ((($455)) + 2|0);
     $38 = $456;
    } else {
     $457 = HEAP8[$445>>0]|0;
     $458 = (+($457<<24>>24));
     $459 = ((($45)) + 16|0);
     HEAPF32[$459>>2] = $458;
     $460 = $38;
     $461 = ((($460)) + 1|0);
     $38 = $461;
     $462 = $38;
     $463 = HEAP8[$462>>0]|0;
     $464 = (+($463<<24>>24));
     $465 = ((($45)) + 20|0);
     HEAPF32[$465>>2] = $464;
     $466 = $38;
     $467 = ((($466)) + 1|0);
     $38 = $467;
    }
    $468 = $39;
    $469 = $468&65535;
    $470 = $469 & 8;
    $471 = ($470|0)!=(0);
    do {
     if ($471) {
      $472 = $38;
      $473 = (_nk_ttSHORT($472)|0);
      $474 = $473 << 16 >> 16;
      $475 = (+($474|0));
      $476 = $475 / 16384.0;
      $477 = ((($45)) + 12|0);
      HEAPF32[$477>>2] = $476;
      HEAPF32[$45>>2] = $476;
      $478 = $38;
      $479 = ((($478)) + 2|0);
      $38 = $479;
      $480 = ((($45)) + 8|0);
      HEAPF32[$480>>2] = 0.0;
      $481 = ((($45)) + 4|0);
      HEAPF32[$481>>2] = 0.0;
     } else {
      $482 = $39;
      $483 = $482&65535;
      $484 = $483 & 64;
      $485 = ($484|0)!=(0);
      if ($485) {
       $486 = $38;
       $487 = (_nk_ttSHORT($486)|0);
       $488 = $487 << 16 >> 16;
       $489 = (+($488|0));
       $490 = $489 / 16384.0;
       HEAPF32[$45>>2] = $490;
       $491 = $38;
       $492 = ((($491)) + 2|0);
       $38 = $492;
       $493 = ((($45)) + 8|0);
       HEAPF32[$493>>2] = 0.0;
       $494 = ((($45)) + 4|0);
       HEAPF32[$494>>2] = 0.0;
       $495 = $38;
       $496 = (_nk_ttSHORT($495)|0);
       $497 = $496 << 16 >> 16;
       $498 = (+($497|0));
       $499 = $498 / 16384.0;
       $500 = ((($45)) + 12|0);
       HEAPF32[$500>>2] = $499;
       $501 = $38;
       $502 = ((($501)) + 2|0);
       $38 = $502;
       break;
      }
      $503 = $39;
      $504 = $503&65535;
      $505 = $504 & 128;
      $506 = ($505|0)!=(0);
      if ($506) {
       $507 = $38;
       $508 = (_nk_ttSHORT($507)|0);
       $509 = $508 << 16 >> 16;
       $510 = (+($509|0));
       $511 = $510 / 16384.0;
       HEAPF32[$45>>2] = $511;
       $512 = $38;
       $513 = ((($512)) + 2|0);
       $38 = $513;
       $514 = $38;
       $515 = (_nk_ttSHORT($514)|0);
       $516 = $515 << 16 >> 16;
       $517 = (+($516|0));
       $518 = $517 / 16384.0;
       $519 = ((($45)) + 4|0);
       HEAPF32[$519>>2] = $518;
       $520 = $38;
       $521 = ((($520)) + 2|0);
       $38 = $521;
       $522 = $38;
       $523 = (_nk_ttSHORT($522)|0);
       $524 = $523 << 16 >> 16;
       $525 = (+($524|0));
       $526 = $525 / 16384.0;
       $527 = ((($45)) + 8|0);
       HEAPF32[$527>>2] = $526;
       $528 = $38;
       $529 = ((($528)) + 2|0);
       $38 = $529;
       $530 = $38;
       $531 = (_nk_ttSHORT($530)|0);
       $532 = $531 << 16 >> 16;
       $533 = (+($532|0));
       $534 = $533 / 16384.0;
       $535 = ((($45)) + 12|0);
       HEAPF32[$535>>2] = $534;
       $536 = $38;
       $537 = ((($536)) + 2|0);
       $38 = $537;
      }
     }
    } while(0);
    $538 = +HEAPF32[$45>>2];
    $539 = +HEAPF32[$45>>2];
    $540 = $538 * $539;
    $541 = ((($45)) + 4|0);
    $542 = +HEAPF32[$541>>2];
    $543 = ((($45)) + 4|0);
    $544 = +HEAPF32[$543>>2];
    $545 = $542 * $544;
    $546 = $540 + $545;
    $547 = (+_nk_sqrt($546));
    $46 = $547;
    $548 = ((($45)) + 8|0);
    $549 = +HEAPF32[$548>>2];
    $550 = ((($45)) + 8|0);
    $551 = +HEAPF32[$550>>2];
    $552 = $549 * $551;
    $553 = ((($45)) + 12|0);
    $554 = +HEAPF32[$553>>2];
    $555 = ((($45)) + 12|0);
    $556 = +HEAPF32[$555>>2];
    $557 = $554 * $556;
    $558 = $552 + $557;
    $559 = (+_nk_sqrt($558));
    $47 = $559;
    $560 = $5;
    $561 = $6;
    $562 = $40;
    $563 = $562&65535;
    $564 = (_nk_tt_GetGlyphShape($560,$561,$563,$43)|0);
    $41 = $564;
    $565 = $41;
    $566 = ($565|0)>(0);
    if ($566) {
     $42 = 0;
     while(1) {
      $567 = $42;
      $568 = $41;
      $569 = ($567|0)<($568|0);
      if (!($569)) {
       break;
      }
      $570 = $42;
      $571 = HEAP32[$43>>2]|0;
      $572 = (($571) + (($570*10)|0)|0);
      $48 = $572;
      $573 = $48;
      $574 = HEAP16[$573>>1]|0;
      $49 = $574;
      $575 = $48;
      $576 = ((($575)) + 2|0);
      $577 = HEAP16[$576>>1]|0;
      $50 = $577;
      $578 = $46;
      $579 = +HEAPF32[$45>>2];
      $580 = $49;
      $581 = $580 << 16 >> 16;
      $582 = (+($581|0));
      $583 = $579 * $582;
      $584 = ((($45)) + 8|0);
      $585 = +HEAPF32[$584>>2];
      $586 = $50;
      $587 = $586 << 16 >> 16;
      $588 = (+($587|0));
      $589 = $585 * $588;
      $590 = $583 + $589;
      $591 = ((($45)) + 16|0);
      $592 = +HEAPF32[$591>>2];
      $593 = $590 + $592;
      $594 = $578 * $593;
      $595 = (~~(($594)));
      $596 = $48;
      HEAP16[$596>>1] = $595;
      $597 = $47;
      $598 = ((($45)) + 4|0);
      $599 = +HEAPF32[$598>>2];
      $600 = $49;
      $601 = $600 << 16 >> 16;
      $602 = (+($601|0));
      $603 = $599 * $602;
      $604 = ((($45)) + 12|0);
      $605 = +HEAPF32[$604>>2];
      $606 = $50;
      $607 = $606 << 16 >> 16;
      $608 = (+($607|0));
      $609 = $605 * $608;
      $610 = $603 + $609;
      $611 = ((($45)) + 20|0);
      $612 = +HEAPF32[$611>>2];
      $613 = $610 + $612;
      $614 = $597 * $613;
      $615 = (~~(($614)));
      $616 = $48;
      $617 = ((($616)) + 2|0);
      HEAP16[$617>>1] = $615;
      $618 = $48;
      $619 = ((($618)) + 4|0);
      $620 = HEAP16[$619>>1]|0;
      $49 = $620;
      $621 = $48;
      $622 = ((($621)) + 6|0);
      $623 = HEAP16[$622>>1]|0;
      $50 = $623;
      $624 = $46;
      $625 = +HEAPF32[$45>>2];
      $626 = $49;
      $627 = $626 << 16 >> 16;
      $628 = (+($627|0));
      $629 = $625 * $628;
      $630 = ((($45)) + 8|0);
      $631 = +HEAPF32[$630>>2];
      $632 = $50;
      $633 = $632 << 16 >> 16;
      $634 = (+($633|0));
      $635 = $631 * $634;
      $636 = $629 + $635;
      $637 = ((($45)) + 16|0);
      $638 = +HEAPF32[$637>>2];
      $639 = $636 + $638;
      $640 = $624 * $639;
      $641 = (~~(($640)));
      $642 = $48;
      $643 = ((($642)) + 4|0);
      HEAP16[$643>>1] = $641;
      $644 = $47;
      $645 = ((($45)) + 4|0);
      $646 = +HEAPF32[$645>>2];
      $647 = $49;
      $648 = $647 << 16 >> 16;
      $649 = (+($648|0));
      $650 = $646 * $649;
      $651 = ((($45)) + 12|0);
      $652 = +HEAPF32[$651>>2];
      $653 = $50;
      $654 = $653 << 16 >> 16;
      $655 = (+($654|0));
      $656 = $652 * $655;
      $657 = $650 + $656;
      $658 = ((($45)) + 20|0);
      $659 = +HEAPF32[$658>>2];
      $660 = $657 + $659;
      $661 = $644 * $660;
      $662 = (~~(($661)));
      $663 = $48;
      $664 = ((($663)) + 6|0);
      HEAP16[$664>>1] = $662;
      $665 = $42;
      $666 = (($665) + 1)|0;
      $42 = $666;
     }
     $667 = $6;
     $668 = ((($667)) + 4|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $6;
     $671 = $13;
     $672 = $41;
     $673 = (($671) + ($672))|0;
     $674 = ($673*10)|0;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$670>>2]|0;
     $675 = (FUNCTION_TABLE_iiii[$669 & 15]($$byval_copy1,0,$674)|0);
     $44 = $675;
     $676 = $44;
     $677 = ($676|0)!=(0|0);
     if (!($677)) {
      break;
     }
     $692 = $13;
     $693 = ($692|0)>(0);
     if ($693) {
      $694 = $44;
      $695 = $12;
      $696 = $13;
      $697 = ($696*10)|0;
      (_nk_memcopy($694,$695,$697)|0);
     }
     $698 = $44;
     $699 = $13;
     $700 = (($698) + (($699*10)|0)|0);
     $701 = HEAP32[$43>>2]|0;
     $702 = $41;
     $703 = ($702*10)|0;
     (_nk_memcopy($700,$701,$703)|0);
     $704 = $12;
     $705 = ($704|0)!=(0|0);
     if ($705) {
      $706 = $6;
      $707 = ((($706)) + 8|0);
      $708 = HEAP32[$707>>2]|0;
      $709 = $6;
      $710 = $12;
      ;HEAP32[$$byval_copy4>>2]=HEAP32[$709>>2]|0;
      FUNCTION_TABLE_vii[$708 & 31]($$byval_copy4,$710);
     }
     $711 = $44;
     $12 = $711;
     $712 = $6;
     $713 = ((($712)) + 8|0);
     $714 = HEAP32[$713>>2]|0;
     $715 = $6;
     $716 = HEAP32[$43>>2]|0;
     ;HEAP32[$$byval_copy5>>2]=HEAP32[$715>>2]|0;
     FUNCTION_TABLE_vii[$714 & 31]($$byval_copy5,$716);
     $717 = $41;
     $718 = $13;
     $719 = (($718) + ($717))|0;
     $13 = $719;
    }
    $720 = $39;
    $721 = $720&65535;
    $722 = $721 & 32;
    $37 = $722;
   }
   if ((label|0) == 55) {
    ___assert_fail((22521|0),(1320|0),8761,(23261|0));
    // unreachable;
   }
   $678 = $12;
   $679 = ($678|0)!=(0|0);
   if ($679) {
    $680 = $6;
    $681 = ((($680)) + 8|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = $6;
    $684 = $12;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$683>>2]|0;
    FUNCTION_TABLE_vii[$682 & 31]($$byval_copy2,$684);
   }
   $685 = HEAP32[$43>>2]|0;
   $686 = ($685|0)!=(0|0);
   if ($686) {
    $687 = $6;
    $688 = ((($687)) + 8|0);
    $689 = HEAP32[$688>>2]|0;
    $690 = $6;
    $691 = HEAP32[$43>>2]|0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$690>>2]|0;
    FUNCTION_TABLE_vii[$689 & 31]($$byval_copy3,$691);
   }
   $4 = 0;
   $729 = $4;
   STACKTOP = sp;return ($729|0);
  }
 } while(0);
 $726 = $12;
 $727 = $8;
 HEAP32[$727>>2] = $726;
 $728 = $13;
 $4 = $728;
 $729 = $4;
 STACKTOP = sp;return ($729|0);
}
function _nk_tt_Rasterize($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy1 = sp + 68|0;
 $$byval_copy = sp + 64|0;
 $25 = sp + 8|0;
 $26 = sp + 4|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $28 = $16;
 $29 = $17;
 $30 = $28 > $29;
 $31 = $17;
 $32 = $16;
 $33 = $30 ? $31 : $32;
 $24 = $33;
 $34 = $14;
 $35 = $15;
 $36 = $13;
 $37 = $24;
 $38 = $36 / $37;
 $39 = $23;
 $40 = (_nk_tt_FlattenCurves($34,$35,$38,$26,$25,$39)|0);
 $27 = $40;
 $41 = $23;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  ___assert_fail((3129|0),(1320|0),9525,(23281|0));
  // unreachable;
 }
 $43 = $27;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $12;
 $46 = $27;
 $47 = HEAP32[$26>>2]|0;
 $48 = HEAP32[$25>>2]|0;
 $49 = $16;
 $50 = $17;
 $51 = $18;
 $52 = $19;
 $53 = $20;
 $54 = $21;
 $55 = $22;
 $56 = $23;
 _nk_tt__rasterize($45,$46,$47,$48,$49,$50,$51,$52,$53,$54,$55,$56);
 $57 = $23;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $23;
 $61 = HEAP32[$26>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$60>>2]|0;
 FUNCTION_TABLE_vii[$59 & 31]($$byval_copy,$61);
 $62 = $23;
 $63 = ((($62)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $23;
 $66 = $27;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$65>>2]|0;
 FUNCTION_TABLE_vii[$64 & 31]($$byval_copy1,$66);
 STACKTOP = sp;return;
}
function _stbtt__close_shape($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $13;
 $21 = ($20|0)!=(0);
 $22 = $12;
 $23 = ($22|0)!=(0);
 if ($21) {
  if ($23) {
   $24 = $11;
   $25 = (($24) + 1)|0;
   $11 = $25;
   $26 = $10;
   $27 = (($26) + (($24*10)|0)|0);
   $28 = $18;
   $29 = $16;
   $30 = (($28) + ($29))|0;
   $31 = $30 >> 1;
   $32 = $19;
   $33 = $17;
   $34 = (($32) + ($33))|0;
   $35 = $34 >> 1;
   $36 = $18;
   $37 = $19;
   _nk_tt_setvertex($27,3,$31,$35,$36,$37);
  }
  $38 = $11;
  $39 = (($38) + 1)|0;
  $11 = $39;
  $40 = $10;
  $41 = (($40) + (($38*10)|0)|0);
  $42 = $14;
  $43 = $15;
  $44 = $16;
  $45 = $17;
  _nk_tt_setvertex($41,3,$42,$43,$44,$45);
  $54 = $11;
  STACKTOP = sp;return ($54|0);
 }
 $46 = $11;
 $47 = (($46) + 1)|0;
 $11 = $47;
 $48 = $10;
 $49 = (($48) + (($46*10)|0)|0);
 $50 = $14;
 $51 = $15;
 if ($23) {
  $52 = $18;
  $53 = $19;
  _nk_tt_setvertex($49,3,$50,$51,$52,$53);
  $54 = $11;
  STACKTOP = sp;return ($54|0);
 } else {
  _nk_tt_setvertex($49,2,$50,$51,0,0);
  $54 = $11;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _nk_tt_setvertex($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $7;
 $13 = $6;
 $14 = ((($13)) + 8|0);
 HEAP8[$14>>0] = $12;
 $15 = $8;
 $16 = $15&65535;
 $17 = $6;
 HEAP16[$17>>1] = $16;
 $18 = $9;
 $19 = $18&65535;
 $20 = $6;
 $21 = ((($20)) + 2|0);
 HEAP16[$21>>1] = $19;
 $22 = $10;
 $23 = $22&65535;
 $24 = $6;
 $25 = ((($24)) + 4|0);
 HEAP16[$25>>1] = $23;
 $26 = $11;
 $27 = $26&65535;
 $28 = $6;
 $29 = ((($28)) + 6|0);
 HEAP16[$29>>1] = $27;
 STACKTOP = sp;return;
}
function _nk_sqrt($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = (+_nk_inv_sqrt($3));
 $5 = $2 * $4;
 STACKTOP = sp;return (+$5);
}
function _nk_tt_FlattenCurves($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0;
 var $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $20 = 0.0;
 var $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy3 = sp + 76|0;
 $$byval_copy2 = sp + 72|0;
 $$byval_copy1 = sp + 68|0;
 $$byval_copy = sp + 64|0;
 $14 = sp + 28|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 HEAP32[$14>>2] = 0;
 $22 = $9;
 $23 = $9;
 $24 = $22 * $23;
 $15 = $24;
 $17 = 0;
 $18 = 0;
 $16 = 0;
 while(1) {
  $25 = $16;
  $26 = $8;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $16;
  $29 = $7;
  $30 = (($29) + (($28*10)|0)|0);
  $31 = ((($30)) + 8|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)==(1);
  if ($34) {
   $35 = $17;
   $36 = (($35) + 1)|0;
   $17 = $36;
  }
  $37 = $16;
  $38 = (($37) + 1)|0;
  $16 = $38;
 }
 $39 = $17;
 $40 = $11;
 HEAP32[$40>>2] = $39;
 $41 = $17;
 $42 = ($41|0)==(0);
 if ($42) {
  $6 = 0;
  $184 = $6;
  STACKTOP = sp;return ($184|0);
 }
 $43 = $12;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $12;
 $47 = $17;
 $48 = $47<<2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$46>>2]|0;
 $49 = (FUNCTION_TABLE_iiii[$45 & 15]($$byval_copy,0,$48)|0);
 $50 = $10;
 HEAP32[$50>>2] = $49;
 $51 = $10;
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if ($53) {
  $54 = $11;
  HEAP32[$54>>2] = 0;
  $6 = 0;
  $184 = $6;
  STACKTOP = sp;return ($184|0);
 }
 $19 = 0;
 while(1) {
  $55 = $19;
  $56 = ($55|0)<(2);
  if (!($56)) {
   label = 24;
   break;
  }
  $20 = 0.0;
  $21 = 0.0;
  $57 = $19;
  $58 = ($57|0)==(1);
  if ($58) {
   $59 = $12;
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $12;
   $63 = HEAP32[$14>>2]|0;
   $64 = $63<<3;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$62>>2]|0;
   $65 = (FUNCTION_TABLE_iiii[$61 & 15]($$byval_copy1,0,$64)|0);
   $13 = $65;
   $66 = $13;
   $67 = ($66|0)==(0|0);
   if ($67) {
    label = 25;
    break;
   }
  }
  HEAP32[$14>>2] = 0;
  $17 = -1;
  $16 = 0;
  while(1) {
   $68 = $16;
   $69 = $8;
   $70 = ($68|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = $16;
   $72 = $7;
   $73 = (($72) + (($71*10)|0)|0);
   $74 = ((($73)) + 8|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   switch ($76|0) {
   case 1:  {
    $77 = $17;
    $78 = ($77|0)>=(0);
    if ($78) {
     $79 = HEAP32[$14>>2]|0;
     $80 = $18;
     $81 = (($79) - ($80))|0;
     $82 = $17;
     $83 = $10;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + ($82<<2)|0);
     HEAP32[$85>>2] = $81;
    }
    $86 = $17;
    $87 = (($86) + 1)|0;
    $17 = $87;
    $88 = HEAP32[$14>>2]|0;
    $18 = $88;
    $89 = $16;
    $90 = $7;
    $91 = (($90) + (($89*10)|0)|0);
    $92 = HEAP16[$91>>1]|0;
    $93 = (+($92<<16>>16));
    $20 = $93;
    $94 = $16;
    $95 = $7;
    $96 = (($95) + (($94*10)|0)|0);
    $97 = ((($96)) + 2|0);
    $98 = HEAP16[$97>>1]|0;
    $99 = (+($98<<16>>16));
    $21 = $99;
    $100 = $13;
    $101 = HEAP32[$14>>2]|0;
    $102 = (($101) + 1)|0;
    HEAP32[$14>>2] = $102;
    $103 = $20;
    $104 = $21;
    _nk_tt__add_point($100,$101,$103,$104);
    break;
   }
   case 2:  {
    $105 = $16;
    $106 = $7;
    $107 = (($106) + (($105*10)|0)|0);
    $108 = HEAP16[$107>>1]|0;
    $109 = (+($108<<16>>16));
    $20 = $109;
    $110 = $16;
    $111 = $7;
    $112 = (($111) + (($110*10)|0)|0);
    $113 = ((($112)) + 2|0);
    $114 = HEAP16[$113>>1]|0;
    $115 = (+($114<<16>>16));
    $21 = $115;
    $116 = $13;
    $117 = HEAP32[$14>>2]|0;
    $118 = (($117) + 1)|0;
    HEAP32[$14>>2] = $118;
    $119 = $20;
    $120 = $21;
    _nk_tt__add_point($116,$117,$119,$120);
    break;
   }
   case 3:  {
    $121 = $13;
    $122 = $20;
    $123 = $21;
    $124 = $16;
    $125 = $7;
    $126 = (($125) + (($124*10)|0)|0);
    $127 = ((($126)) + 4|0);
    $128 = HEAP16[$127>>1]|0;
    $129 = (+($128<<16>>16));
    $130 = $16;
    $131 = $7;
    $132 = (($131) + (($130*10)|0)|0);
    $133 = ((($132)) + 6|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = (+($134<<16>>16));
    $136 = $16;
    $137 = $7;
    $138 = (($137) + (($136*10)|0)|0);
    $139 = HEAP16[$138>>1]|0;
    $140 = (+($139<<16>>16));
    $141 = $16;
    $142 = $7;
    $143 = (($142) + (($141*10)|0)|0);
    $144 = ((($143)) + 2|0);
    $145 = HEAP16[$144>>1]|0;
    $146 = (+($145<<16>>16));
    $147 = $15;
    (_nk_tt__tesselate_curve($121,$14,$122,$123,$129,$135,$140,$146,$147,0)|0);
    $148 = $16;
    $149 = $7;
    $150 = (($149) + (($148*10)|0)|0);
    $151 = HEAP16[$150>>1]|0;
    $152 = (+($151<<16>>16));
    $20 = $152;
    $153 = $16;
    $154 = $7;
    $155 = (($154) + (($153*10)|0)|0);
    $156 = ((($155)) + 2|0);
    $157 = HEAP16[$156>>1]|0;
    $158 = (+($157<<16>>16));
    $21 = $158;
    break;
   }
   default: {
   }
   }
   $159 = $16;
   $160 = (($159) + 1)|0;
   $16 = $160;
  }
  $161 = HEAP32[$14>>2]|0;
  $162 = $18;
  $163 = (($161) - ($162))|0;
  $164 = $17;
  $165 = $10;
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) + ($164<<2)|0);
  HEAP32[$167>>2] = $163;
  $168 = $19;
  $169 = (($168) + 1)|0;
  $19 = $169;
 }
 if ((label|0) == 24) {
  $170 = $13;
  $6 = $170;
  $184 = $6;
  STACKTOP = sp;return ($184|0);
 }
 else if ((label|0) == 25) {
  $171 = $12;
  $172 = ((($171)) + 8|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $12;
  $175 = $13;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$174>>2]|0;
  FUNCTION_TABLE_vii[$173 & 31]($$byval_copy2,$175);
  $176 = $12;
  $177 = ((($176)) + 8|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $12;
  $180 = $10;
  $181 = HEAP32[$180>>2]|0;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$179>>2]|0;
  FUNCTION_TABLE_vii[$178 & 31]($$byval_copy3,$181);
  $182 = $10;
  HEAP32[$182>>2] = 0;
  $183 = $11;
  HEAP32[$183>>2] = 0;
  $6 = 0;
  $184 = $6;
  STACKTOP = sp;return ($184|0);
 }
 return (0)|0;
}
function _nk_tt__rasterize($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy1 = sp + 96|0;
 $$byval_copy = sp + 92|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $35 = $22;
 $36 = ($35|0)!=(0);
 $37 = $17;
 $38 = -$37;
 $39 = $36 ? $38 : $37;
 $24 = $39;
 $31 = 1;
 $26 = 0;
 $27 = 0;
 while(1) {
  $40 = $27;
  $41 = $15;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $27;
  $44 = $14;
  $45 = (($44) + ($43<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $26;
  $48 = (($47) + ($46))|0;
  $26 = $48;
  $49 = $27;
  $50 = (($49) + 1)|0;
  $27 = $50;
 }
 $51 = $23;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $23;
 $55 = $26;
 $56 = (($55) + 1)|0;
 $57 = ($56*20)|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$54>>2]|0;
 $58 = (FUNCTION_TABLE_iiii[$53 & 15]($$byval_copy,0,$57)|0);
 $25 = $58;
 $59 = $25;
 $60 = ($59|0)==(0|0);
 if ($60) {
  STACKTOP = sp;return;
 }
 $26 = 0;
 $30 = 0;
 $27 = 0;
 while(1) {
  $61 = $27;
  $62 = $15;
  $63 = ($61|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = $13;
  $65 = $30;
  $66 = (($64) + ($65<<3)|0);
  $32 = $66;
  $67 = $27;
  $68 = $14;
  $69 = (($68) + ($67<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $30;
  $72 = (($71) + ($70))|0;
  $30 = $72;
  $73 = $27;
  $74 = $14;
  $75 = (($74) + ($73<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) - 1)|0;
  $28 = $77;
  $29 = 0;
  while(1) {
   $78 = $29;
   $79 = $27;
   $80 = $14;
   $81 = (($80) + ($79<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($78|0)<($82|0);
   if (!($83)) {
    break;
   }
   $84 = $29;
   $33 = $84;
   $85 = $28;
   $34 = $85;
   $86 = $28;
   $87 = $32;
   $88 = (($87) + ($86<<3)|0);
   $89 = ((($88)) + 4|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $29;
   $92 = $32;
   $93 = (($92) + ($91<<3)|0);
   $94 = ((($93)) + 4|0);
   $95 = +HEAPF32[$94>>2];
   $96 = $90 == $95;
   if (!($96)) {
    $97 = $26;
    $98 = $25;
    $99 = (($98) + (($97*20)|0)|0);
    $100 = ((($99)) + 16|0);
    HEAP32[$100>>2] = 0;
    $101 = $22;
    $102 = ($101|0)!=(0);
    $103 = $28;
    $104 = $32;
    $105 = (($104) + ($103<<3)|0);
    $106 = ((($105)) + 4|0);
    $107 = +HEAPF32[$106>>2];
    $108 = $29;
    $109 = $32;
    $110 = (($109) + ($108<<3)|0);
    $111 = ((($110)) + 4|0);
    $112 = +HEAPF32[$111>>2];
    if ($102) {
     $113 = $107 > $112;
     if ($113) {
      label = 13;
     }
    } else {
     $114 = $107 < $112;
     if ($114) {
      label = 13;
     }
    }
    if ((label|0) == 13) {
     label = 0;
     $115 = $26;
     $116 = $25;
     $117 = (($116) + (($115*20)|0)|0);
     $118 = ((($117)) + 16|0);
     HEAP32[$118>>2] = 1;
     $119 = $28;
     $33 = $119;
     $120 = $29;
     $34 = $120;
    }
    $121 = $33;
    $122 = $32;
    $123 = (($122) + ($121<<3)|0);
    $124 = +HEAPF32[$123>>2];
    $125 = $16;
    $126 = $124 * $125;
    $127 = $18;
    $128 = $126 + $127;
    $129 = $26;
    $130 = $25;
    $131 = (($130) + (($129*20)|0)|0);
    HEAPF32[$131>>2] = $128;
    $132 = $33;
    $133 = $32;
    $134 = (($133) + ($132<<3)|0);
    $135 = ((($134)) + 4|0);
    $136 = +HEAPF32[$135>>2];
    $137 = $24;
    $138 = $136 * $137;
    $139 = $19;
    $140 = $138 + $139;
    $141 = $31;
    $142 = (+($141|0));
    $143 = $140 * $142;
    $144 = $26;
    $145 = $25;
    $146 = (($145) + (($144*20)|0)|0);
    $147 = ((($146)) + 4|0);
    HEAPF32[$147>>2] = $143;
    $148 = $34;
    $149 = $32;
    $150 = (($149) + ($148<<3)|0);
    $151 = +HEAPF32[$150>>2];
    $152 = $16;
    $153 = $151 * $152;
    $154 = $18;
    $155 = $153 + $154;
    $156 = $26;
    $157 = $25;
    $158 = (($157) + (($156*20)|0)|0);
    $159 = ((($158)) + 8|0);
    HEAPF32[$159>>2] = $155;
    $160 = $34;
    $161 = $32;
    $162 = (($161) + ($160<<3)|0);
    $163 = ((($162)) + 4|0);
    $164 = +HEAPF32[$163>>2];
    $165 = $24;
    $166 = $164 * $165;
    $167 = $19;
    $168 = $166 + $167;
    $169 = $31;
    $170 = (+($169|0));
    $171 = $168 * $170;
    $172 = $26;
    $173 = $25;
    $174 = (($173) + (($172*20)|0)|0);
    $175 = ((($174)) + 12|0);
    HEAPF32[$175>>2] = $171;
    $176 = $26;
    $177 = (($176) + 1)|0;
    $26 = $177;
   }
   $178 = $29;
   $179 = (($178) + 1)|0;
   $29 = $179;
   $28 = $178;
  }
  $180 = $27;
  $181 = (($180) + 1)|0;
  $27 = $181;
 }
 $182 = $25;
 $183 = $26;
 _nk_tt__sort_edges($182,$183);
 $184 = $12;
 $185 = $25;
 $186 = $26;
 $187 = $31;
 $188 = $20;
 $189 = $21;
 $190 = $23;
 _nk_tt__rasterize_sorted_edges($184,$185,$186,$187,$188,$189,$190);
 $191 = $23;
 $192 = ((($191)) + 8|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = $23;
 $195 = $25;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$194>>2]|0;
 FUNCTION_TABLE_vii[$193 & 31]($$byval_copy1,$195);
 STACKTOP = sp;return;
}
function _nk_tt__add_point($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $6;
 $11 = $5;
 $12 = $4;
 $13 = (($12) + ($11<<3)|0);
 HEAPF32[$13>>2] = $10;
 $14 = $7;
 $15 = $5;
 $16 = $4;
 $17 = (($16) + ($15<<3)|0);
 $18 = ((($17)) + 4|0);
 HEAPF32[$18>>2] = $14;
 STACKTOP = sp;return;
}
function _nk_tt__tesselate_curve($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $25 = $13;
 $26 = $15;
 $27 = 2.0 * $26;
 $28 = $25 + $27;
 $29 = $17;
 $30 = $28 + $29;
 $31 = $30 / 4.0;
 $21 = $31;
 $32 = $14;
 $33 = $16;
 $34 = 2.0 * $33;
 $35 = $32 + $34;
 $36 = $18;
 $37 = $35 + $36;
 $38 = $37 / 4.0;
 $22 = $38;
 $39 = $13;
 $40 = $17;
 $41 = $39 + $40;
 $42 = $41 / 2.0;
 $43 = $21;
 $44 = $42 - $43;
 $23 = $44;
 $45 = $14;
 $46 = $18;
 $47 = $45 + $46;
 $48 = $47 / 2.0;
 $49 = $22;
 $50 = $48 - $49;
 $24 = $50;
 $51 = $20;
 $52 = ($51|0)>(16);
 if ($52) {
  $10 = 1;
  $103 = $10;
  STACKTOP = sp;return ($103|0);
 }
 $53 = $23;
 $54 = $23;
 $55 = $53 * $54;
 $56 = $24;
 $57 = $24;
 $58 = $56 * $57;
 $59 = $55 + $58;
 $60 = $19;
 $61 = $59 > $60;
 $62 = $11;
 $63 = $12;
 if ($61) {
  $64 = $13;
  $65 = $14;
  $66 = $13;
  $67 = $15;
  $68 = $66 + $67;
  $69 = $68 / 2.0;
  $70 = $14;
  $71 = $16;
  $72 = $70 + $71;
  $73 = $72 / 2.0;
  $74 = $21;
  $75 = $22;
  $76 = $19;
  $77 = $20;
  $78 = (($77) + 1)|0;
  (_nk_tt__tesselate_curve($62,$63,$64,$65,$69,$73,$74,$75,$76,$78)|0);
  $79 = $11;
  $80 = $12;
  $81 = $21;
  $82 = $22;
  $83 = $15;
  $84 = $17;
  $85 = $83 + $84;
  $86 = $85 / 2.0;
  $87 = $16;
  $88 = $18;
  $89 = $87 + $88;
  $90 = $89 / 2.0;
  $91 = $17;
  $92 = $18;
  $93 = $19;
  $94 = $20;
  $95 = (($94) + 1)|0;
  (_nk_tt__tesselate_curve($79,$80,$81,$82,$86,$90,$91,$92,$93,$95)|0);
 } else {
  $96 = HEAP32[$63>>2]|0;
  $97 = $17;
  $98 = $18;
  _nk_tt__add_point($62,$96,$97,$98);
  $99 = $12;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + 1)|0;
  $102 = $12;
  HEAP32[$102>>2] = $101;
 }
 $10 = 1;
 $103 = $10;
 STACKTOP = sp;return ($103|0);
}
function _nk_tt__sort_edges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _nk_tt__sort_edges_quicksort($4,$5);
 $6 = $2;
 $7 = $3;
 _nk_tt__sort_edges_ins_sort($6,$7);
 STACKTOP = sp;return;
}
function _nk_tt__rasterize_sorted_edges($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(640|0);
 $$byval_copy1 = sp + 632|0;
 $$byval_copy = sp + 628|0;
 $14 = sp + 576|0;
 $15 = sp + 572|0;
 $19 = sp + 44|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 HEAP32[$15>>2] = 0;
 $17 = 0;
 _nk_zero($14,24);
 $31 = $13;
 ;HEAP32[$14>>2]=HEAP32[$31>>2]|0;HEAP32[$14+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$31+8>>2]|0;
 $32 = $7;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)>(64);
 if ($34) {
  $35 = $13;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $13;
  $39 = $7;
  $40 = HEAP32[$39>>2]|0;
  $41 = $40<<1;
  $42 = (($41) + 1)|0;
  $43 = $42<<2;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$38>>2]|0;
  $44 = (FUNCTION_TABLE_iiii[$37 & 15]($$byval_copy,0,$43)|0);
  $20 = $44;
 } else {
  $20 = $19;
 }
 $45 = $20;
 $46 = $7;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + ($47<<2)|0);
 $21 = $48;
 $49 = $12;
 $16 = $49;
 $50 = $12;
 $51 = $7;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($50) + ($53))|0;
 $55 = (+($54|0));
 $56 = $55 + 1.0;
 $57 = $9;
 $58 = $8;
 $59 = (($58) + (($57*20)|0)|0);
 $60 = ((($59)) + 4|0);
 HEAPF32[$60>>2] = $56;
 L5: while(1) {
  $61 = $17;
  $62 = $7;
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61|0)<($64|0);
  if (!($65)) {
   label = 29;
   break;
  }
  $66 = $16;
  $67 = (+($66|0));
  $68 = $67 + 0.0;
  $22 = $68;
  $69 = $16;
  $70 = (+($69|0));
  $71 = $70 + 1.0;
  $23 = $71;
  $24 = $15;
  $72 = $20;
  $73 = $7;
  $74 = HEAP32[$73>>2]|0;
  $75 = $74<<2;
  _nk_memset($72,0,$75);
  $76 = $21;
  $77 = $7;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + 1)|0;
  $80 = $79<<2;
  _nk_memset($76,0,$80);
  while(1) {
   $81 = $24;
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   if (!($83)) {
    break;
   }
   $84 = $24;
   $85 = HEAP32[$84>>2]|0;
   $25 = $85;
   $86 = $25;
   $87 = ((($86)) + 24|0);
   $88 = +HEAPF32[$87>>2];
   $89 = $22;
   $90 = $88 <= $89;
   if (!($90)) {
    $101 = $24;
    $102 = HEAP32[$101>>2]|0;
    $24 = $102;
    continue;
   }
   $91 = $25;
   $92 = HEAP32[$91>>2]|0;
   $93 = $24;
   HEAP32[$93>>2] = $92;
   $94 = $25;
   $95 = ((($94)) + 16|0);
   $96 = +HEAPF32[$95>>2];
   $97 = $96 != 0.0;
   if (!($97)) {
    label = 10;
    break L5;
   }
   $98 = $25;
   $99 = ((($98)) + 16|0);
   HEAPF32[$99>>2] = 0.0;
   $100 = $25;
   _nk_tt__hheap_free($14,$100);
  }
  while(1) {
   $103 = $8;
   $104 = ((($103)) + 4|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $23;
   $107 = $105 <= $106;
   if (!($107)) {
    break;
   }
   $108 = $8;
   $109 = ((($108)) + 4|0);
   $110 = +HEAPF32[$109>>2];
   $111 = $8;
   $112 = ((($111)) + 12|0);
   $113 = +HEAPF32[$112>>2];
   $114 = $110 != $113;
   if ($114) {
    $115 = $8;
    $116 = $11;
    $117 = $22;
    $118 = (_nk_tt__new_active($14,$115,$116,$117)|0);
    $26 = $118;
    $119 = $26;
    $120 = ($119|0)!=(0|0);
    if ($120) {
     $121 = $26;
     $122 = ((($121)) + 24|0);
     $123 = +HEAPF32[$122>>2];
     $124 = $22;
     $125 = $123 >= $124;
     if (!($125)) {
      label = 17;
      break L5;
     }
     $126 = HEAP32[$15>>2]|0;
     $127 = $26;
     HEAP32[$127>>2] = $126;
     $128 = $26;
     HEAP32[$15>>2] = $128;
    }
   }
   $129 = $8;
   $130 = ((($129)) + 20|0);
   $8 = $130;
  }
  $131 = HEAP32[$15>>2]|0;
  $132 = ($131|0)!=(0|0);
  if ($132) {
   $133 = $20;
   $134 = $21;
   $135 = ((($134)) + 4|0);
   $136 = $7;
   $137 = HEAP32[$136>>2]|0;
   $138 = HEAP32[$15>>2]|0;
   $139 = $22;
   _nk_tt__fill_active_edges_new($133,$135,$137,$138,$139);
  }
  $27 = 0.0;
  $18 = 0;
  while(1) {
   $140 = $18;
   $141 = $7;
   $142 = HEAP32[$141>>2]|0;
   $143 = ($140|0)<($142|0);
   if (!($143)) {
    break;
   }
   $144 = $18;
   $145 = $21;
   $146 = (($145) + ($144<<2)|0);
   $147 = +HEAPF32[$146>>2];
   $148 = $27;
   $149 = $148 + $147;
   $27 = $149;
   $150 = $18;
   $151 = $20;
   $152 = (($151) + ($150<<2)|0);
   $153 = +HEAPF32[$152>>2];
   $154 = $27;
   $155 = $153 + $154;
   $28 = $155;
   $156 = $28;
   $157 = $156 < 0.0;
   $158 = $28;
   $159 = -$158;
   $160 = $157 ? $159 : $158;
   $161 = $160 * 255.0;
   $162 = $161 + 0.5;
   $28 = $162;
   $163 = $28;
   $164 = (~~(($163)));
   $29 = $164;
   $165 = $29;
   $166 = ($165|0)>(255);
   $$ = $166 ? 255 : $164;
   $29 = $$;
   $167 = $29;
   $168 = $167&255;
   $169 = $17;
   $170 = $7;
   $171 = ((($170)) + 8|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = Math_imul($169, $172)|0;
   $174 = $18;
   $175 = (($173) + ($174))|0;
   $176 = $7;
   $177 = ((($176)) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + ($175)|0);
   HEAP8[$179>>0] = $168;
   $180 = $18;
   $181 = (($180) + 1)|0;
   $18 = $181;
  }
  $24 = $15;
  while(1) {
   $182 = $24;
   $183 = HEAP32[$182>>2]|0;
   $184 = ($183|0)!=(0|0);
   if (!($184)) {
    break;
   }
   $185 = $24;
   $186 = HEAP32[$185>>2]|0;
   $30 = $186;
   $187 = $30;
   $188 = ((($187)) + 8|0);
   $189 = +HEAPF32[$188>>2];
   $190 = $30;
   $191 = ((($190)) + 4|0);
   $192 = +HEAPF32[$191>>2];
   $193 = $192 + $189;
   HEAPF32[$191>>2] = $193;
   $194 = $24;
   $195 = HEAP32[$194>>2]|0;
   $24 = $195;
  }
  $196 = $16;
  $197 = (($196) + 1)|0;
  $16 = $197;
  $198 = $17;
  $199 = (($198) + 1)|0;
  $17 = $199;
 }
 if ((label|0) == 10) {
  ___assert_fail((23297|0),(1320|0),9193,(23310|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  ___assert_fail((23340|0),(1320|0),9206,(23310|0));
  // unreachable;
 }
 else if ((label|0) == 29) {
  _nk_tt__hheap_cleanup($14);
  $200 = $20;
  $201 = ($200|0)!=($19|0);
  if (!($201)) {
   STACKTOP = sp;return;
  }
  $202 = $13;
  $203 = ((($202)) + 8|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $13;
  $206 = $20;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$205>>2]|0;
  FUNCTION_TABLE_vii[$204 & 31]($$byval_copy1,$206);
  STACKTOP = sp;return;
 }
}
function _nk_tt__sort_edges_quicksort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 28|0;
 $2 = $0;
 $3 = $1;
 while(1) {
  $12 = $3;
  $13 = ($12|0)>(12);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $14 >> 1;
  $8 = $15;
  $16 = $2;
  $17 = ((($16)) + 4|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $8;
  $20 = $2;
  $21 = (($20) + (($19*20)|0)|0);
  $22 = ((($21)) + 4|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $18 < $23;
  $25 = $24&1;
  $5 = $25;
  $26 = $8;
  $27 = $2;
  $28 = (($27) + (($26*20)|0)|0);
  $29 = ((($28)) + 4|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $3;
  $32 = (($31) - 1)|0;
  $33 = $2;
  $34 = (($33) + (($32*20)|0)|0);
  $35 = ((($34)) + 4|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $30 < $36;
  $38 = $37&1;
  $6 = $38;
  $39 = $5;
  $40 = $6;
  $41 = ($39|0)!=($40|0);
  if ($41) {
   $42 = $2;
   $43 = ((($42)) + 4|0);
   $44 = +HEAPF32[$43>>2];
   $45 = $3;
   $46 = (($45) - 1)|0;
   $47 = $2;
   $48 = (($47) + (($46*20)|0)|0);
   $49 = ((($48)) + 4|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $44 < $50;
   $52 = $51&1;
   $7 = $52;
   $53 = $7;
   $54 = $6;
   $55 = ($53|0)==($54|0);
   $56 = $3;
   $57 = (($56) - 1)|0;
   $58 = $55 ? 0 : $57;
   $11 = $58;
   $59 = $11;
   $60 = $2;
   $61 = (($60) + (($59*20)|0)|0);
   ;HEAP32[$4>>2]=HEAP32[$61>>2]|0;HEAP32[$4+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$61+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$61+16>>2]|0;
   $62 = $11;
   $63 = $2;
   $64 = (($63) + (($62*20)|0)|0);
   $65 = $8;
   $66 = $2;
   $67 = (($66) + (($65*20)|0)|0);
   ;HEAP32[$64>>2]=HEAP32[$67>>2]|0;HEAP32[$64+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$64+12>>2]=HEAP32[$67+12>>2]|0;HEAP32[$64+16>>2]=HEAP32[$67+16>>2]|0;
   $68 = $8;
   $69 = $2;
   $70 = (($69) + (($68*20)|0)|0);
   ;HEAP32[$70>>2]=HEAP32[$4>>2]|0;HEAP32[$70+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$70+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$70+16>>2]=HEAP32[$4+16>>2]|0;
  }
  $71 = $2;
  ;HEAP32[$4>>2]=HEAP32[$71>>2]|0;HEAP32[$4+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$71+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$71+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$71+16>>2]|0;
  $72 = $2;
  $73 = $8;
  $74 = $2;
  $75 = (($74) + (($73*20)|0)|0);
  ;HEAP32[$72>>2]=HEAP32[$75>>2]|0;HEAP32[$72+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$72+8>>2]=HEAP32[$75+8>>2]|0;HEAP32[$72+12>>2]=HEAP32[$75+12>>2]|0;HEAP32[$72+16>>2]=HEAP32[$75+16>>2]|0;
  $76 = $8;
  $77 = $2;
  $78 = (($77) + (($76*20)|0)|0);
  ;HEAP32[$78>>2]=HEAP32[$4>>2]|0;HEAP32[$78+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$78+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$78+16>>2]=HEAP32[$4+16>>2]|0;
  $9 = 1;
  $79 = $3;
  $80 = (($79) - 1)|0;
  $10 = $80;
  while(1) {
   while(1) {
    $81 = $9;
    $82 = $2;
    $83 = (($82) + (($81*20)|0)|0);
    $84 = ((($83)) + 4|0);
    $85 = +HEAPF32[$84>>2];
    $86 = $2;
    $87 = ((($86)) + 4|0);
    $88 = +HEAPF32[$87>>2];
    $89 = $85 < $88;
    if (!($89)) {
     break;
    }
    $90 = $9;
    $91 = (($90) + 1)|0;
    $9 = $91;
   }
   while(1) {
    $92 = $2;
    $93 = ((($92)) + 4|0);
    $94 = +HEAPF32[$93>>2];
    $95 = $10;
    $96 = $2;
    $97 = (($96) + (($95*20)|0)|0);
    $98 = ((($97)) + 4|0);
    $99 = +HEAPF32[$98>>2];
    $100 = $94 < $99;
    if (!($100)) {
     break;
    }
    $101 = $10;
    $102 = (($101) + -1)|0;
    $10 = $102;
   }
   $103 = $9;
   $104 = $10;
   $105 = ($103|0)>=($104|0);
   if ($105) {
    break;
   }
   $106 = $9;
   $107 = $2;
   $108 = (($107) + (($106*20)|0)|0);
   ;HEAP32[$4>>2]=HEAP32[$108>>2]|0;HEAP32[$4+4>>2]=HEAP32[$108+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$108+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$108+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$108+16>>2]|0;
   $109 = $9;
   $110 = $2;
   $111 = (($110) + (($109*20)|0)|0);
   $112 = $10;
   $113 = $2;
   $114 = (($113) + (($112*20)|0)|0);
   ;HEAP32[$111>>2]=HEAP32[$114>>2]|0;HEAP32[$111+4>>2]=HEAP32[$114+4>>2]|0;HEAP32[$111+8>>2]=HEAP32[$114+8>>2]|0;HEAP32[$111+12>>2]=HEAP32[$114+12>>2]|0;HEAP32[$111+16>>2]=HEAP32[$114+16>>2]|0;
   $115 = $10;
   $116 = $2;
   $117 = (($116) + (($115*20)|0)|0);
   ;HEAP32[$117>>2]=HEAP32[$4>>2]|0;HEAP32[$117+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$117+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$117+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$117+16>>2]=HEAP32[$4+16>>2]|0;
   $118 = $9;
   $119 = (($118) + 1)|0;
   $9 = $119;
   $120 = $10;
   $121 = (($120) + -1)|0;
   $10 = $121;
  }
  $122 = $10;
  $123 = $3;
  $124 = $9;
  $125 = (($123) - ($124))|0;
  $126 = ($122|0)<($125|0);
  $127 = $2;
  if ($126) {
   $128 = $10;
   _nk_tt__sort_edges_quicksort($127,$128);
   $129 = $2;
   $130 = $9;
   $131 = (($129) + (($130*20)|0)|0);
   $2 = $131;
   $132 = $3;
   $133 = $9;
   $134 = (($132) - ($133))|0;
   $3 = $134;
   continue;
  } else {
   $135 = $9;
   $136 = (($127) + (($135*20)|0)|0);
   $137 = $3;
   $138 = $9;
   $139 = (($137) - ($138))|0;
   _nk_tt__sort_edges_quicksort($136,$139);
   $140 = $10;
   $3 = $140;
   continue;
  }
 }
 STACKTOP = sp;return;
}
function _nk_tt__sort_edges_ins_sort($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 12|0;
 $2 = $0;
 $3 = $1;
 $4 = 1;
 while(1) {
  $10 = $4;
  $11 = $3;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $2;
  $15 = (($14) + (($13*20)|0)|0);
  ;HEAP32[$6>>2]=HEAP32[$15>>2]|0;HEAP32[$6+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$15+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$15+16>>2]|0;
  $7 = $6;
  $16 = $4;
  $5 = $16;
  while(1) {
   $17 = $5;
   $18 = ($17|0)>(0);
   if (!($18)) {
    break;
   }
   $19 = $5;
   $20 = (($19) - 1)|0;
   $21 = $2;
   $22 = (($21) + (($20*20)|0)|0);
   $8 = $22;
   $23 = $7;
   $24 = ((($23)) + 4|0);
   $25 = +HEAPF32[$24>>2];
   $26 = $8;
   $27 = ((($26)) + 4|0);
   $28 = +HEAPF32[$27>>2];
   $29 = $25 < $28;
   $30 = $29&1;
   $9 = $30;
   $31 = $9;
   $32 = ($31|0)!=(0);
   if (!($32)) {
    break;
   }
   $33 = $5;
   $34 = $2;
   $35 = (($34) + (($33*20)|0)|0);
   $36 = $5;
   $37 = (($36) - 1)|0;
   $38 = $2;
   $39 = (($38) + (($37*20)|0)|0);
   ;HEAP32[$35>>2]=HEAP32[$39>>2]|0;HEAP32[$35+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$39+12>>2]|0;HEAP32[$35+16>>2]=HEAP32[$39+16>>2]|0;
   $40 = $5;
   $41 = (($40) + -1)|0;
   $5 = $41;
  }
  $42 = $4;
  $43 = $5;
  $44 = ($42|0)!=($43|0);
  if ($44) {
   $45 = $5;
   $46 = $2;
   $47 = (($46) + (($45*20)|0)|0);
   ;HEAP32[$47>>2]=HEAP32[$6>>2]|0;HEAP32[$47+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$47+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$47+16>>2]=HEAP32[$6+16>>2]|0;
  }
  $48 = $4;
  $49 = (($48) + 1)|0;
  $4 = $49;
 }
 STACKTOP = sp;return;
}
function _nk_tt__hheap_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 HEAP32[$7>>2] = $6;
 $8 = $3;
 $9 = $2;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _nk_tt__new_active($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = (_nk_tt__hheap_alloc($11,28)|0);
 $9 = $12;
 $13 = $6;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $6;
 $17 = +HEAPF32[$16>>2];
 $18 = $15 - $17;
 $19 = $6;
 $20 = ((($19)) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $21 - $24;
 $26 = $18 / $25;
 $10 = $26;
 $27 = $9;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $29 = $9;
  $4 = $29;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 $30 = $10;
 $31 = $9;
 $32 = ((($31)) + 8|0);
 HEAPF32[$32>>2] = $30;
 $33 = $10;
 $34 = $33 != 0.0;
 if ($34) {
  $35 = $10;
  $36 = 1.0 / $35;
  $39 = $36;
 } else {
  $39 = 0.0;
 }
 $37 = $9;
 $38 = ((($37)) + 12|0);
 HEAPF32[$38>>2] = $39;
 $40 = $6;
 $41 = +HEAPF32[$40>>2];
 $42 = $10;
 $43 = $8;
 $44 = $6;
 $45 = ((($44)) + 4|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $43 - $46;
 $48 = $42 * $47;
 $49 = $41 + $48;
 $50 = $9;
 $51 = ((($50)) + 4|0);
 HEAPF32[$51>>2] = $49;
 $52 = $7;
 $53 = (+($52|0));
 $54 = $9;
 $55 = ((($54)) + 4|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $56 - $53;
 HEAPF32[$55>>2] = $57;
 $58 = $6;
 $59 = ((($58)) + 16|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0);
 $62 = $61 ? 1.0 : -1.0;
 $63 = $9;
 $64 = ((($63)) + 16|0);
 HEAPF32[$64>>2] = $62;
 $65 = $6;
 $66 = ((($65)) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $9;
 $69 = ((($68)) + 20|0);
 HEAPF32[$69>>2] = $67;
 $70 = $6;
 $71 = ((($70)) + 12|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $9;
 $74 = ((($73)) + 24|0);
 HEAPF32[$74>>2] = $72;
 $75 = $9;
 HEAP32[$75>>2] = 0;
 $76 = $9;
 $4 = $76;
 $77 = $4;
 STACKTOP = sp;return ($77|0);
}
function _nk_tt__fill_active_edges_new($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0;
 var $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0;
 var $336 = 0, $337 = 0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0.0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0;
 var $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0;
 var $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $38 = $9;
 $39 = $38 + 1.0;
 $10 = $39;
 L1: while(1) {
  $40 = $8;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   label = 56;
   break;
  }
  $42 = $8;
  $43 = ((($42)) + 24|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $9;
  $46 = $44 >= $45;
  if (!($46)) {
   label = 4;
   break;
  }
  $47 = $8;
  $48 = ((($47)) + 8|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49 == 0.0;
  $51 = $8;
  $52 = ((($51)) + 4|0);
  $53 = +HEAPF32[$52>>2];
  L5: do {
   if ($50) {
    $11 = $53;
    $54 = $11;
    $55 = $7;
    $56 = (+($55|0));
    $57 = $54 < $56;
    if ($57) {
     $58 = $11;
     $59 = $58 >= 0.0;
     if ($59) {
      $60 = $5;
      $61 = $11;
      $62 = (~~(($61)));
      $63 = $8;
      $64 = $11;
      $65 = $9;
      $66 = $11;
      $67 = $10;
      _nk_tt__handle_clipped_edge($60,$62,$63,$64,$65,$66,$67);
      $68 = $6;
      $69 = ((($68)) + -4|0);
      $70 = $11;
      $71 = (~~(($70)));
      $72 = (($71) + 1)|0;
      $73 = $8;
      $74 = $11;
      $75 = $9;
      $76 = $11;
      $77 = $10;
      _nk_tt__handle_clipped_edge($69,$72,$73,$74,$75,$76,$77);
      break;
     } else {
      $78 = $6;
      $79 = ((($78)) + -4|0);
      $80 = $8;
      $81 = $11;
      $82 = $9;
      $83 = $11;
      $84 = $10;
      _nk_tt__handle_clipped_edge($79,0,$80,$81,$82,$83,$84);
      break;
     }
    }
   } else {
    $12 = $53;
    $85 = $8;
    $86 = ((($85)) + 8|0);
    $87 = +HEAPF32[$86>>2];
    $13 = $87;
    $88 = $12;
    $89 = $13;
    $90 = $88 + $89;
    $14 = $90;
    $91 = $8;
    $92 = ((($91)) + 12|0);
    $93 = +HEAPF32[$92>>2];
    $19 = $93;
    $94 = $8;
    $95 = ((($94)) + 20|0);
    $96 = +HEAPF32[$95>>2];
    $97 = $10;
    $98 = $96 <= $97;
    if (!($98)) {
     label = 12;
     break L1;
    }
    $99 = $8;
    $100 = ((($99)) + 24|0);
    $101 = +HEAPF32[$100>>2];
    $102 = $9;
    $103 = $101 >= $102;
    if (!($103)) {
     label = 12;
     break L1;
    }
    $104 = $8;
    $105 = ((($104)) + 20|0);
    $106 = +HEAPF32[$105>>2];
    $107 = $9;
    $108 = $106 > $107;
    $109 = $12;
    if ($108) {
     $110 = $13;
     $111 = $8;
     $112 = ((($111)) + 20|0);
     $113 = +HEAPF32[$112>>2];
     $114 = $9;
     $115 = $113 - $114;
     $116 = $110 * $115;
     $117 = $109 + $116;
     $15 = $117;
     $118 = $8;
     $119 = ((($118)) + 20|0);
     $120 = +HEAPF32[$119>>2];
     $17 = $120;
    } else {
     $15 = $109;
     $121 = $9;
     $17 = $121;
    }
    $122 = $8;
    $123 = ((($122)) + 24|0);
    $124 = +HEAPF32[$123>>2];
    $125 = $10;
    $126 = $124 < $125;
    if ($126) {
     $127 = $12;
     $128 = $13;
     $129 = $8;
     $130 = ((($129)) + 24|0);
     $131 = +HEAPF32[$130>>2];
     $132 = $9;
     $133 = $131 - $132;
     $134 = $128 * $133;
     $135 = $127 + $134;
     $16 = $135;
     $136 = $8;
     $137 = ((($136)) + 24|0);
     $138 = +HEAPF32[$137>>2];
     $18 = $138;
    } else {
     $139 = $14;
     $16 = $139;
     $140 = $10;
     $18 = $140;
    }
    $141 = $15;
    $142 = $141 >= 0.0;
    $143 = $16;
    $144 = $143 >= 0.0;
    $or$cond = $142 & $144;
    if ($or$cond) {
     $145 = $15;
     $146 = $7;
     $147 = (+($146|0));
     $148 = $145 < $147;
     if ($148) {
      $149 = $16;
      $150 = $7;
      $151 = (+($150|0));
      $152 = $149 < $151;
      if ($152) {
       $153 = $15;
       $154 = (~~(($153)));
       $155 = $16;
       $156 = (~~(($155)));
       $157 = ($154|0)==($156|0);
       $158 = $15;
       if ($157) {
        $159 = (~~(($158)));
        $21 = $159;
        $160 = $18;
        $161 = $17;
        $162 = $160 - $161;
        $20 = $162;
        $163 = $21;
        $164 = ($163|0)>=(0);
        if (!($164)) {
         label = 25;
         break L1;
        }
        $165 = $21;
        $166 = $7;
        $167 = ($165|0)<($166|0);
        if (!($167)) {
         label = 25;
         break L1;
        }
        $168 = $8;
        $169 = ((($168)) + 16|0);
        $170 = +HEAPF32[$169>>2];
        $171 = $15;
        $172 = $21;
        $173 = (+($172|0));
        $174 = $171 - $173;
        $175 = $16;
        $176 = $21;
        $177 = (+($176|0));
        $178 = $175 - $177;
        $179 = $174 + $178;
        $180 = $179 / 2.0;
        $181 = 1.0 - $180;
        $182 = $170 * $181;
        $183 = $20;
        $184 = $182 * $183;
        $185 = $21;
        $186 = $5;
        $187 = (($186) + ($185<<2)|0);
        $188 = +HEAPF32[$187>>2];
        $189 = $188 + $184;
        HEAPF32[$187>>2] = $189;
        $190 = $8;
        $191 = ((($190)) + 16|0);
        $192 = +HEAPF32[$191>>2];
        $193 = $20;
        $194 = $192 * $193;
        $195 = $21;
        $196 = $6;
        $197 = (($196) + ($195<<2)|0);
        $198 = +HEAPF32[$197>>2];
        $199 = $198 + $194;
        HEAPF32[$197>>2] = $199;
        break;
       }
       $200 = $16;
       $201 = $158 > $200;
       if ($201) {
        $202 = $10;
        $203 = $17;
        $204 = $9;
        $205 = $203 - $204;
        $206 = $202 - $205;
        $17 = $206;
        $207 = $10;
        $208 = $18;
        $209 = $9;
        $210 = $208 - $209;
        $211 = $207 - $210;
        $18 = $211;
        $212 = $17;
        $29 = $212;
        $213 = $18;
        $17 = $213;
        $214 = $29;
        $18 = $214;
        $215 = $16;
        $29 = $215;
        $216 = $15;
        $16 = $216;
        $217 = $29;
        $15 = $217;
        $218 = $13;
        $219 = -$218;
        $13 = $219;
        $220 = $19;
        $221 = -$220;
        $19 = $221;
        $222 = $12;
        $29 = $222;
        $223 = $14;
        $12 = $223;
        $224 = $29;
        $14 = $224;
       }
       $225 = $15;
       $226 = (~~(($225)));
       $23 = $226;
       $227 = $16;
       $228 = (~~(($227)));
       $24 = $228;
       $229 = $23;
       $230 = (+($229|0));
       $231 = $230 + 1.0;
       $232 = $12;
       $233 = $231 - $232;
       $234 = $19;
       $235 = $233 * $234;
       $236 = $9;
       $237 = $235 + $236;
       $25 = $237;
       $238 = $8;
       $239 = ((($238)) + 16|0);
       $240 = +HEAPF32[$239>>2];
       $27 = $240;
       $241 = $27;
       $242 = $25;
       $243 = $17;
       $244 = $242 - $243;
       $245 = $241 * $244;
       $28 = $245;
       $246 = $28;
       $247 = $15;
       $248 = $23;
       $249 = (+($248|0));
       $250 = $247 - $249;
       $251 = $23;
       $252 = (($251) + 1)|0;
       $253 = $23;
       $254 = (($252) - ($253))|0;
       $255 = (+($254|0));
       $256 = $250 + $255;
       $257 = $256 / 2.0;
       $258 = 1.0 - $257;
       $259 = $246 * $258;
       $260 = $23;
       $261 = $5;
       $262 = (($261) + ($260<<2)|0);
       $263 = +HEAPF32[$262>>2];
       $264 = $263 + $259;
       HEAPF32[$262>>2] = $264;
       $265 = $27;
       $266 = $19;
       $267 = $265 * $266;
       $26 = $267;
       $268 = $23;
       $269 = (($268) + 1)|0;
       $22 = $269;
       while(1) {
        $270 = $22;
        $271 = $24;
        $272 = ($270|0)<($271|0);
        if (!($272)) {
         break;
        }
        $273 = $28;
        $274 = $26;
        $275 = $274 / 2.0;
        $276 = $273 + $275;
        $277 = $22;
        $278 = $5;
        $279 = (($278) + ($277<<2)|0);
        $280 = +HEAPF32[$279>>2];
        $281 = $280 + $276;
        HEAPF32[$279>>2] = $281;
        $282 = $26;
        $283 = $28;
        $284 = $283 + $282;
        $28 = $284;
        $285 = $22;
        $286 = (($285) + 1)|0;
        $22 = $286;
       }
       $287 = $19;
       $288 = $24;
       $289 = $23;
       $290 = (($289) + 1)|0;
       $291 = (($288) - ($290))|0;
       $292 = (+($291|0));
       $293 = $287 * $292;
       $294 = $25;
       $295 = $294 + $293;
       $25 = $295;
       $296 = $28;
       $297 = $27;
       $298 = $24;
       $299 = $24;
       $300 = (($298) - ($299))|0;
       $301 = (+($300|0));
       $302 = $16;
       $303 = $24;
       $304 = (+($303|0));
       $305 = $302 - $304;
       $306 = $301 + $305;
       $307 = $306 / 2.0;
       $308 = 1.0 - $307;
       $309 = $297 * $308;
       $310 = $18;
       $311 = $25;
       $312 = $310 - $311;
       $313 = $309 * $312;
       $314 = $296 + $313;
       $315 = $24;
       $316 = $5;
       $317 = (($316) + ($315<<2)|0);
       $318 = +HEAPF32[$317>>2];
       $319 = $318 + $314;
       HEAPF32[$317>>2] = $319;
       $320 = $27;
       $321 = $18;
       $322 = $17;
       $323 = $321 - $322;
       $324 = $320 * $323;
       $325 = $24;
       $326 = $6;
       $327 = (($326) + ($325<<2)|0);
       $328 = +HEAPF32[$327>>2];
       $329 = $328 + $324;
       HEAPF32[$327>>2] = $329;
       break;
      }
     }
    }
    $30 = 0;
    while(1) {
     $330 = $30;
     $331 = $7;
     $332 = ($330|0)<($331|0);
     if (!($332)) {
      break L5;
     }
     $333 = $9;
     $31 = $333;
     $334 = $30;
     $335 = (+($334|0));
     $32 = $335;
     $336 = $30;
     $337 = (($336) + 1)|0;
     $338 = (+($337|0));
     $33 = $338;
     $339 = $14;
     $34 = $339;
     $340 = $10;
     $35 = $340;
     $341 = $30;
     $342 = (+($341|0));
     $343 = $12;
     $344 = $342 - $343;
     $345 = $13;
     $346 = $344 / $345;
     $347 = $9;
     $348 = $346 + $347;
     $36 = $348;
     $349 = $30;
     $350 = (+($349|0));
     $351 = $350 + 1.0;
     $352 = $12;
     $353 = $351 - $352;
     $354 = $13;
     $355 = $353 / $354;
     $356 = $9;
     $357 = $355 + $356;
     $37 = $357;
     $358 = $12;
     $359 = $32;
     $360 = $358 < $359;
     if ($360) {
      $361 = $34;
      $362 = $33;
      $363 = $361 > $362;
      if ($363) {
       $364 = $5;
       $365 = $30;
       $366 = $8;
       $367 = $12;
       $368 = $31;
       $369 = $32;
       $370 = $36;
       _nk_tt__handle_clipped_edge($364,$365,$366,$367,$368,$369,$370);
       $371 = $5;
       $372 = $30;
       $373 = $8;
       $374 = $32;
       $375 = $36;
       $376 = $33;
       $377 = $37;
       _nk_tt__handle_clipped_edge($371,$372,$373,$374,$375,$376,$377);
       $378 = $5;
       $379 = $30;
       $380 = $8;
       $381 = $33;
       $382 = $37;
       $383 = $34;
       $384 = $35;
       _nk_tt__handle_clipped_edge($378,$379,$380,$381,$382,$383,$384);
      } else {
       label = 38;
      }
     } else {
      label = 38;
     }
     L45: do {
      if ((label|0) == 38) {
       label = 0;
       $385 = $34;
       $386 = $32;
       $387 = $385 < $386;
       if ($387) {
        $388 = $12;
        $389 = $33;
        $390 = $388 > $389;
        if ($390) {
         $391 = $5;
         $392 = $30;
         $393 = $8;
         $394 = $12;
         $395 = $31;
         $396 = $33;
         $397 = $37;
         _nk_tt__handle_clipped_edge($391,$392,$393,$394,$395,$396,$397);
         $398 = $5;
         $399 = $30;
         $400 = $8;
         $401 = $33;
         $402 = $37;
         $403 = $32;
         $404 = $36;
         _nk_tt__handle_clipped_edge($398,$399,$400,$401,$402,$403,$404);
         $405 = $5;
         $406 = $30;
         $407 = $8;
         $408 = $32;
         $409 = $36;
         $410 = $34;
         $411 = $35;
         _nk_tt__handle_clipped_edge($405,$406,$407,$408,$409,$410,$411);
         break;
        }
       }
       $412 = $12;
       $413 = $32;
       $414 = $412 < $413;
       if ($414) {
        $415 = $34;
        $416 = $32;
        $417 = $415 > $416;
        if ($417) {
         $418 = $5;
         $419 = $30;
         $420 = $8;
         $421 = $12;
         $422 = $31;
         $423 = $32;
         $424 = $36;
         _nk_tt__handle_clipped_edge($418,$419,$420,$421,$422,$423,$424);
         $425 = $5;
         $426 = $30;
         $427 = $8;
         $428 = $32;
         $429 = $36;
         $430 = $34;
         $431 = $35;
         _nk_tt__handle_clipped_edge($425,$426,$427,$428,$429,$430,$431);
         break;
        }
       }
       $432 = $34;
       $433 = $32;
       $434 = $432 < $433;
       if ($434) {
        $435 = $12;
        $436 = $32;
        $437 = $435 > $436;
        if ($437) {
         $438 = $5;
         $439 = $30;
         $440 = $8;
         $441 = $12;
         $442 = $31;
         $443 = $32;
         $444 = $36;
         _nk_tt__handle_clipped_edge($438,$439,$440,$441,$442,$443,$444);
         $445 = $5;
         $446 = $30;
         $447 = $8;
         $448 = $32;
         $449 = $36;
         $450 = $34;
         $451 = $35;
         _nk_tt__handle_clipped_edge($445,$446,$447,$448,$449,$450,$451);
         break;
        }
       }
       $452 = $12;
       $453 = $33;
       $454 = $452 < $453;
       if ($454) {
        $455 = $34;
        $456 = $33;
        $457 = $455 > $456;
        if ($457) {
         $458 = $5;
         $459 = $30;
         $460 = $8;
         $461 = $12;
         $462 = $31;
         $463 = $33;
         $464 = $37;
         _nk_tt__handle_clipped_edge($458,$459,$460,$461,$462,$463,$464);
         $465 = $5;
         $466 = $30;
         $467 = $8;
         $468 = $33;
         $469 = $37;
         $470 = $34;
         $471 = $35;
         _nk_tt__handle_clipped_edge($465,$466,$467,$468,$469,$470,$471);
         break;
        }
       }
       $472 = $34;
       $473 = $33;
       $474 = $472 < $473;
       do {
        if ($474) {
         $475 = $12;
         $476 = $33;
         $477 = $475 > $476;
         if (!($477)) {
          break;
         }
         $478 = $5;
         $479 = $30;
         $480 = $8;
         $481 = $12;
         $482 = $31;
         $483 = $33;
         $484 = $37;
         _nk_tt__handle_clipped_edge($478,$479,$480,$481,$482,$483,$484);
         $485 = $5;
         $486 = $30;
         $487 = $8;
         $488 = $33;
         $489 = $37;
         $490 = $34;
         $491 = $35;
         _nk_tt__handle_clipped_edge($485,$486,$487,$488,$489,$490,$491);
         break L45;
        }
       } while(0);
       $492 = $5;
       $493 = $30;
       $494 = $8;
       $495 = $12;
       $496 = $31;
       $497 = $34;
       $498 = $35;
       _nk_tt__handle_clipped_edge($492,$493,$494,$495,$496,$497,$498);
      }
     } while(0);
     $499 = $30;
     $500 = (($499) + 1)|0;
     $30 = $500;
    }
   }
  } while(0);
  $501 = $8;
  $502 = HEAP32[$501>>2]|0;
  $8 = $502;
 }
 if ((label|0) == 4) {
  ___assert_fail((23360|0),(1320|0),9003,(23375|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  ___assert_fail((23404|0),(1320|0),9021,(23375|0));
  // unreachable;
 }
 else if ((label|0) == 25) {
  ___assert_fail((23440|0),(1320|0),9050,(23375|0));
  // unreachable;
 }
 else if ((label|0) == 56) {
  STACKTOP = sp;return;
 }
}
function _nk_tt__hheap_cleanup($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  $11 = $1;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = $2;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vii[$13 & 31]($$byval_copy,$15);
  $16 = $3;
  $2 = $16;
 }
 STACKTOP = sp;return;
}
function _nk_tt__hheap_alloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $3;
 if ($11) {
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $5 = $14;
  $15 = $5;
  $16 = HEAP32[$15>>2]|0;
  $17 = $3;
  $18 = ((($17)) + 16|0);
  HEAP32[$18>>2] = $16;
  $19 = $5;
  $2 = $19;
  $63 = $2;
  STACKTOP = sp;return ($63|0);
 }
 $20 = ((($12)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 do {
  if ($22) {
   $23 = $4;
   $24 = ($23>>>0)<(32);
   if ($24) {
    $28 = 2000;
   } else {
    $25 = $4;
    $26 = ($25>>>0)<(128);
    $27 = $26 ? 800 : 100;
    $28 = $27;
   }
   $6 = $28;
   $29 = $3;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $3;
   $33 = $4;
   $34 = $6;
   $35 = Math_imul($33, $34)|0;
   $36 = (4 + ($35))|0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$32>>2]|0;
   $37 = (FUNCTION_TABLE_iiii[$31 & 15]($$byval_copy,0,$36)|0);
   $7 = $37;
   $38 = $7;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $40 = $3;
    $41 = ((($40)) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $7;
    HEAP32[$43>>2] = $42;
    $44 = $7;
    $45 = $3;
    $46 = ((($45)) + 12|0);
    HEAP32[$46>>2] = $44;
    $47 = $6;
    $48 = $3;
    $49 = ((($48)) + 20|0);
    HEAP32[$49>>2] = $47;
    break;
   }
   $2 = 0;
   $63 = $2;
   STACKTOP = sp;return ($63|0);
  }
 } while(0);
 $50 = $3;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + -1)|0;
 HEAP32[$51>>2] = $53;
 $54 = $3;
 $55 = ((($54)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $4;
 $58 = $3;
 $59 = ((($58)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = Math_imul($57, $60)|0;
 $62 = (($56) + ($61)|0);
 $2 = $62;
 $63 = $2;
 STACKTOP = sp;return ($63|0);
}
function _nk_tt__handle_clipped_edge($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0;
 var $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $11;
 $15 = $13;
 $16 = $14 == $15;
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $11;
 $18 = $13;
 $19 = $17 < $18;
 if (!($19)) {
  ___assert_fail((23458|0),(1320|0),8965,(23466|0));
  // unreachable;
 }
 $20 = $9;
 $21 = ((($20)) + 20|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $9;
 $24 = ((($23)) + 24|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $22 <= $25;
 if (!($26)) {
  ___assert_fail((23493|0),(1320|0),8966,(23466|0));
  // unreachable;
 }
 $27 = $11;
 $28 = $9;
 $29 = ((($28)) + 24|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 > $30;
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = $13;
 $33 = $9;
 $34 = ((($33)) + 20|0);
 $35 = +HEAPF32[$34>>2];
 $36 = $32 < $35;
 if ($36) {
  STACKTOP = sp;return;
 }
 $37 = $11;
 $38 = $9;
 $39 = ((($38)) + 20|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $37 < $40;
 if ($41) {
  $42 = $12;
  $43 = $10;
  $44 = $42 - $43;
  $45 = $9;
  $46 = ((($45)) + 20|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $11;
  $49 = $47 - $48;
  $50 = $44 * $49;
  $51 = $13;
  $52 = $11;
  $53 = $51 - $52;
  $54 = $50 / $53;
  $55 = $10;
  $56 = $55 + $54;
  $10 = $56;
  $57 = $9;
  $58 = ((($57)) + 20|0);
  $59 = +HEAPF32[$58>>2];
  $11 = $59;
 }
 $60 = $13;
 $61 = $9;
 $62 = ((($61)) + 24|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $60 > $63;
 if ($64) {
  $65 = $12;
  $66 = $10;
  $67 = $65 - $66;
  $68 = $9;
  $69 = ((($68)) + 24|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $13;
  $72 = $70 - $71;
  $73 = $67 * $72;
  $74 = $13;
  $75 = $11;
  $76 = $74 - $75;
  $77 = $73 / $76;
  $78 = $12;
  $79 = $78 + $77;
  $12 = $79;
  $80 = $9;
  $81 = ((($80)) + 24|0);
  $82 = +HEAPF32[$81>>2];
  $13 = $82;
 }
 $83 = $10;
 $84 = $8;
 $85 = (+($84|0));
 $86 = $83 == $85;
 do {
  if ($86) {
   $87 = $12;
   $88 = $8;
   $89 = (($88) + 1)|0;
   $90 = (+($89|0));
   $91 = $87 <= $90;
   if ($91) {
    break;
   } else {
    ___assert_fail((23508|0),(1320|0),8978,(23466|0));
    // unreachable;
   }
  } else {
   $92 = $10;
   $93 = $8;
   $94 = (($93) + 1)|0;
   $95 = (+($94|0));
   $96 = $92 == $95;
   if ($96) {
    $97 = $12;
    $98 = $8;
    $99 = (+($98|0));
    $100 = $97 >= $99;
    if ($100) {
     break;
    } else {
     ___assert_fail((23518|0),(1320|0),8979,(23466|0));
     // unreachable;
    }
   }
   $101 = $10;
   $102 = $8;
   $103 = (+($102|0));
   $104 = $101 <= $103;
   if ($104) {
    $105 = $12;
    $106 = $8;
    $107 = (+($106|0));
    $108 = $105 <= $107;
    if ($108) {
     break;
    } else {
     ___assert_fail((23526|0),(1320|0),8980,(23466|0));
     // unreachable;
    }
   }
   $109 = $10;
   $110 = $8;
   $111 = (($110) + 1)|0;
   $112 = (+($111|0));
   $113 = $109 >= $112;
   $114 = $12;
   $115 = $8;
   if ($113) {
    $116 = (($115) + 1)|0;
    $117 = (+($116|0));
    $118 = $114 >= $117;
    if ($118) {
     break;
    } else {
     ___assert_fail((23534|0),(1320|0),8981,(23466|0));
     // unreachable;
    }
   }
   $119 = (+($115|0));
   $120 = $114 >= $119;
   if (!($120)) {
    ___assert_fail((23544|0),(1320|0),8982,(23466|0));
    // unreachable;
   }
   $121 = $12;
   $122 = $8;
   $123 = (($122) + 1)|0;
   $124 = (+($123|0));
   $125 = $121 <= $124;
   if ($125) {
    break;
   } else {
    ___assert_fail((23544|0),(1320|0),8982,(23466|0));
    // unreachable;
   }
  }
 } while(0);
 $126 = $10;
 $127 = $8;
 $128 = (+($127|0));
 $129 = $126 <= $128;
 if ($129) {
  $130 = $12;
  $131 = $8;
  $132 = (+($131|0));
  $133 = $130 <= $132;
  if ($133) {
   $134 = $9;
   $135 = ((($134)) + 16|0);
   $136 = +HEAPF32[$135>>2];
   $137 = $13;
   $138 = $11;
   $139 = $137 - $138;
   $140 = $136 * $139;
   $141 = $8;
   $142 = $7;
   $143 = (($142) + ($141<<2)|0);
   $144 = +HEAPF32[$143>>2];
   $145 = $144 + $140;
   HEAPF32[$143>>2] = $145;
   STACKTOP = sp;return;
  }
 }
 $146 = $10;
 $147 = $8;
 $148 = (($147) + 1)|0;
 $149 = (+($148|0));
 $150 = $146 >= $149;
 if ($150) {
  $151 = $12;
  $152 = $8;
  $153 = (($152) + 1)|0;
  $154 = (+($153|0));
  $155 = $151 >= $154;
  if ($155) {
   STACKTOP = sp;return;
  }
 }
 $156 = $10;
 $157 = $8;
 $158 = (+($157|0));
 $159 = $156 >= $158;
 if (!($159)) {
  ___assert_fail((23565|0),(1320|0),8988,(23466|0));
  // unreachable;
 }
 $160 = $10;
 $161 = $8;
 $162 = (($161) + 1)|0;
 $163 = (+($162|0));
 $164 = $160 <= $163;
 if (!($164)) {
  ___assert_fail((23565|0),(1320|0),8988,(23466|0));
  // unreachable;
 }
 $165 = $12;
 $166 = $8;
 $167 = (+($166|0));
 $168 = $165 >= $167;
 if (!($168)) {
  ___assert_fail((23565|0),(1320|0),8988,(23466|0));
  // unreachable;
 }
 $169 = $12;
 $170 = $8;
 $171 = (($170) + 1)|0;
 $172 = (+($171|0));
 $173 = $169 <= $172;
 if (!($173)) {
  ___assert_fail((23565|0),(1320|0),8988,(23466|0));
  // unreachable;
 }
 $174 = $9;
 $175 = ((($174)) + 16|0);
 $176 = +HEAPF32[$175>>2];
 $177 = $13;
 $178 = $11;
 $179 = $177 - $178;
 $180 = $176 * $179;
 $181 = $10;
 $182 = $8;
 $183 = (+($182|0));
 $184 = $181 - $183;
 $185 = $12;
 $186 = $8;
 $187 = (+($186|0));
 $188 = $185 - $187;
 $189 = $184 + $188;
 $190 = $189 / 2.0;
 $191 = 1.0 - $190;
 $192 = $180 * $191;
 $193 = $8;
 $194 = $7;
 $195 = (($194) + ($193<<2)|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $196 + $192;
 HEAPF32[$195>>2] = $197;
 STACKTOP = sp;return;
}
function _nk_font_text_width($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$not = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 24|0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 $10 = 0.0;
 $11 = 0;
 $12 = 0.0;
 $15 = HEAP32[$0>>2]|0;
 $13 = $15;
 $16 = $13;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((2240|0),(1320|0),10334,(23842|0));
  // unreachable;
 }
 $18 = $13;
 $19 = ((($18)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((3065|0),(1320|0),10335,(23842|0));
  // unreachable;
 }
 $22 = $13;
 $23 = ($22|0)!=(0|0);
 $24 = $6;
 $25 = ($24|0)!=(0|0);
 $or$cond = $23 & $25;
 $26 = $7;
 $27 = ($26|0)!=(0);
 $or$cond3 = $or$cond & $27;
 if (!($or$cond3)) {
  $4 = 0.0;
  $67 = $4;
  STACKTOP = sp;return (+$67);
 }
 $28 = $5;
 $29 = $13;
 $30 = ((($29)) + 24|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $28 / $31;
 $12 = $32;
 $33 = $6;
 $34 = $7;
 $35 = (_nk_utf_decode($33,$8,$34)|0);
 $9 = $35;
 $11 = $35;
 $36 = $11;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $4 = 0.0;
  $67 = $4;
  STACKTOP = sp;return (+$67);
 }
 while(1) {
  $38 = $9;
  $39 = $7;
  $40 = ($38|0)<=($39|0);
  $41 = $11;
  $42 = ($41|0)!=(0);
  $43 = $40 ? $42 : 0;
  $$not = $43 ^ 1;
  $44 = HEAP32[$8>>2]|0;
  $45 = ($44|0)==(65533);
  $or$cond5 = $$not | $45;
  if ($or$cond5) {
   break;
  }
  $46 = $13;
  $47 = HEAP32[$8>>2]|0;
  $48 = (_nk_font_find_glyph($46,$47)|0);
  $14 = $48;
  $49 = $14;
  $50 = ((($49)) + 4|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $12;
  $53 = $51 * $52;
  $54 = $10;
  $55 = $54 + $53;
  $10 = $55;
  $56 = $6;
  $57 = $9;
  $58 = (($56) + ($57)|0);
  $59 = $7;
  $60 = $9;
  $61 = (($59) - ($60))|0;
  $62 = (_nk_utf_decode($58,$8,$61)|0);
  $11 = $62;
  $63 = $11;
  $64 = $9;
  $65 = (($64) + ($63))|0;
  $9 = $65;
 }
 $66 = $10;
 $4 = $66;
 $67 = $4;
 STACKTOP = sp;return (+$67);
}
function _nk_font_query_font_glyph($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = sp + 16|0;
 $13 = sp + 8|0;
 $14 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((23861|0),(1320|0),10366,(23867|0));
  // unreachable;
 }
 $17 = HEAP32[$0>>2]|0;
 $11 = $17;
 $18 = $11;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((2240|0),(1320|0),10370,(23867|0));
  // unreachable;
 }
 $20 = $11;
 $21 = ((($20)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((3065|0),(1320|0),10371,(23867|0));
  // unreachable;
 }
 $24 = $11;
 $25 = ($24|0)!=(0|0);
 $26 = $6;
 $27 = ($26|0)!=(0|0);
 $or$cond = $25 & $27;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $28 = $5;
 $29 = $11;
 $30 = ((($29)) + 24|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $28 / $31;
 $9 = $32;
 $33 = $11;
 $34 = $7;
 $35 = (_nk_font_find_glyph($33,$34)|0);
 $10 = $35;
 $36 = $10;
 $37 = ((($36)) + 16|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $10;
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $38 - $41;
 $43 = $9;
 $44 = $42 * $43;
 $45 = $6;
 $46 = ((($45)) + 24|0);
 HEAPF32[$46>>2] = $44;
 $47 = $10;
 $48 = ((($47)) + 20|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $10;
 $51 = ((($50)) + 12|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $49 - $52;
 $54 = $9;
 $55 = $53 * $54;
 $56 = $6;
 $57 = ((($56)) + 28|0);
 HEAPF32[$57>>2] = $55;
 $58 = $6;
 $59 = ((($58)) + 16|0);
 $60 = $10;
 $61 = ((($60)) + 8|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $9;
 $64 = $62 * $63;
 $65 = $10;
 $66 = ((($65)) + 12|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $9;
 $69 = $67 * $68;
 _nk_vec2($12,$64,$69);
 ;HEAP32[$59>>2]=HEAP32[$12>>2]|0;HEAP32[$59+4>>2]=HEAP32[$12+4>>2]|0;
 $70 = $10;
 $71 = ((($70)) + 4|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $9;
 $74 = $72 * $73;
 $75 = $6;
 $76 = ((($75)) + 32|0);
 HEAPF32[$76>>2] = $74;
 $77 = $6;
 $78 = $10;
 $79 = ((($78)) + 32|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $10;
 $82 = ((($81)) + 36|0);
 $83 = +HEAPF32[$82>>2];
 _nk_vec2($13,$80,$83);
 ;HEAP32[$77>>2]=HEAP32[$13>>2]|0;HEAP32[$77+4>>2]=HEAP32[$13+4>>2]|0;
 $84 = $6;
 $85 = ((($84)) + 8|0);
 $86 = $10;
 $87 = ((($86)) + 40|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $10;
 $90 = ((($89)) + 44|0);
 $91 = +HEAPF32[$90>>2];
 _nk_vec2($14,$88,$91);
 ;HEAP32[$85>>2]=HEAP32[$14>>2]|0;HEAP32[$85+4>>2]=HEAP32[$14+4>>2]|0;
 STACKTOP = sp;return;
}
function _nk_textedit_createundo($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = $7;
 $12 = (_nk_textedit_create_undo_record($10,$11)|0);
 $9 = $12;
 $13 = $9;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $4 = 0;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $15 = $6;
 $16 = $9;
 HEAP32[$16>>2] = $15;
 $17 = $7;
 $18 = $17&65535;
 $19 = $9;
 $20 = ((($19)) + 4|0);
 HEAP16[$20>>1] = $18;
 $21 = $8;
 $22 = $21&65535;
 $23 = $9;
 $24 = ((($23)) + 6|0);
 HEAP16[$24>>1] = $22;
 $25 = $7;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = $9;
  $28 = ((($27)) + 8|0);
  HEAP16[$28>>1] = -1;
  $4 = 0;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 } else {
  $29 = $5;
  $30 = ((($29)) + 5188|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $9;
  $33 = ((($32)) + 8|0);
  HEAP16[$33>>1] = $31;
  $34 = $5;
  $35 = ((($34)) + 5188|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = $7;
  $39 = (($37) + ($38))|0;
  $40 = $39&65535;
  $41 = $5;
  $42 = ((($41)) + 5188|0);
  HEAP16[$42>>1] = $40;
  $43 = $9;
  $44 = ((($43)) + 8|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = $5;
  $48 = ((($47)) + 1188|0);
  $49 = (($48) + ($46<<2)|0);
  $4 = $49;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _nk_textedit_create_undo_record($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 _nk_textedit_flush_redo($5);
 $6 = $3;
 $7 = ((($6)) + 5184|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)==(99);
 if ($10) {
  $11 = $3;
  _nk_textedit_discard_undo($11);
 }
 $12 = $4;
 $13 = ($12|0)>(999);
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 5184|0);
  HEAP16[$15>>1] = 0;
  $16 = $3;
  $17 = ((($16)) + 5188|0);
  HEAP16[$17>>1] = 0;
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 while(1) {
  $18 = $3;
  $19 = ((($18)) + 5188|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = $4;
  $23 = (($21) + ($22))|0;
  $24 = ($23|0)>(999);
  $25 = $3;
  if (!($24)) {
   break;
  }
  _nk_textedit_discard_undo($25);
 }
 $26 = ((($25)) + 5184|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = (($27) + 1)<<16>>16;
 HEAP16[$26>>1] = $28;
 $29 = $27 << 16 >> 16;
 $30 = $3;
 $31 = (($30) + (($29*12)|0)|0);
 $2 = $31;
 $32 = $2;
 STACKTOP = sp;return ($32|0);
}
function _nk_textedit_flush_redo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 5186|0);
 HEAP16[$3>>1] = 99;
 $4 = $1;
 $5 = ((($4)) + 5190|0);
 HEAP16[$5>>1] = 999;
 STACKTOP = sp;return;
}
function _nk_textedit_discard_undo($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 5184|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($7|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = ($12|0)>=(0);
 L4: do {
  if ($13) {
   $14 = $1;
   $15 = ((($14)) + 4|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 << 16 >> 16;
   $2 = $17;
   $18 = $1;
   $19 = ((($18)) + 5188|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20 << 16 >> 16;
   $22 = $2;
   $23 = (($21) - ($22))|0;
   $24 = $23&65535;
   $25 = $1;
   $26 = ((($25)) + 5188|0);
   HEAP16[$26>>1] = $24;
   $27 = $1;
   $28 = ((($27)) + 1188|0);
   $29 = $1;
   $30 = ((($29)) + 1188|0);
   $31 = $2;
   $32 = (($30) + ($31<<2)|0);
   $33 = $1;
   $34 = ((($33)) + 5188|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = $36<<2;
   (_nk_memcopy($28,$32,$37)|0);
   $3 = 0;
   while(1) {
    $38 = $3;
    $39 = $1;
    $40 = ((($39)) + 5184|0);
    $41 = HEAP16[$40>>1]|0;
    $42 = $41 << 16 >> 16;
    $43 = ($38|0)<($42|0);
    if (!($43)) {
     break L4;
    }
    $44 = $3;
    $45 = $1;
    $46 = (($45) + (($44*12)|0)|0);
    $47 = ((($46)) + 8|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = $48 << 16 >> 16;
    $50 = ($49|0)>=(0);
    if ($50) {
     $51 = $3;
     $52 = $1;
     $53 = (($52) + (($51*12)|0)|0);
     $54 = ((($53)) + 8|0);
     $55 = HEAP16[$54>>1]|0;
     $56 = $55 << 16 >> 16;
     $57 = $2;
     $58 = (($56) - ($57))|0;
     $59 = $58&65535;
     $60 = $3;
     $61 = $1;
     $62 = (($61) + (($60*12)|0)|0);
     $63 = ((($62)) + 8|0);
     HEAP16[$63>>1] = $59;
    }
    $64 = $3;
    $65 = (($64) + 1)|0;
    $3 = $65;
   }
  }
 } while(0);
 $66 = $1;
 $67 = ((($66)) + 5184|0);
 $68 = HEAP16[$67>>1]|0;
 $69 = (($68) + -1)<<16>>16;
 HEAP16[$67>>1] = $69;
 $70 = $1;
 $71 = $1;
 $72 = ((($71)) + 12|0);
 $73 = $1;
 $74 = ((($73)) + 5184|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = $75 << 16 >> 16;
 $77 = ($76*12)|0;
 (_nk_memcopy($70,$72,$77)|0);
 STACKTOP = sp;return;
}
function _nk_start_buffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),16111,(23901|0));
  // unreachable;
 }
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((1473|0),(1320|0),16112,(23901|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 & $11;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = ((($12)) + 5724|0);
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = ((($16)) + 28|0);
 HEAP32[$17>>2] = $15;
 $18 = $3;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = ((($21)) + 32|0);
 HEAP32[$22>>2] = $20;
 $23 = $3;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $3;
 $27 = ((($26)) + 36|0);
 HEAP32[$27>>2] = $25;
 $28 = $3;
 $29 = ((($28)) + 4|0);
 ;HEAP32[$29>>2]=HEAP32[8>>2]|0;HEAP32[$29+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$29+12>>2]=HEAP32[8+12>>2]|0;
 STACKTOP = sp;return;
}
function _nk_finish_buffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2989|0),(1320|0),16173,(23917|0));
  // unreachable;
 }
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((1473|0),(1320|0),16174,(23917|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 $or$cond = $9 & $11;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = ((($12)) + 5724|0);
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = ((($16)) + 32|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _nk_free_page_element($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 12852|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $2;
  $11 = $3;
  _nk_link_page_element_into_freelist($10,$11);
  STACKTOP = sp;return;
 }
 $12 = $3;
 $13 = ((($12)) + 380|0);
 $4 = $13;
 $14 = $2;
 $15 = ((($14)) + 5724|0);
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 5724|0);
 $20 = ((($19)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($17) + ($21)|0);
 $5 = $22;
 $23 = $4;
 $24 = $5;
 $25 = ($23|0)==($24|0);
 $26 = $2;
 if ($25) {
  $27 = ((($26)) + 5724|0);
  $28 = ((($27)) + 56|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) - 380)|0;
  HEAP32[$28>>2] = $30;
  STACKTOP = sp;return;
 } else {
  $31 = $3;
  _nk_link_page_element_into_freelist($26,$31);
  STACKTOP = sp;return;
 }
}
function _nk_link_page_element_into_freelist($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 12912|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $11 = $2;
  $12 = ((($11)) + 12912|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $3;
  $15 = ((($14)) + 372|0);
  HEAP32[$15>>2] = $13;
  $16 = $3;
  $17 = $2;
  $18 = ((($17)) + 12912|0);
  HEAP32[$18>>2] = $16;
  STACKTOP = sp;return;
 } else {
  $8 = $3;
  $9 = $2;
  $10 = ((($9)) + 12912|0);
  HEAP32[$10>>2] = $8;
  STACKTOP = sp;return;
 }
}
function _nk_create_page_element($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 12912|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = $2;
 do {
  if ($7) {
   $9 = ((($8)) + 12912|0);
   $10 = HEAP32[$9>>2]|0;
   $3 = $10;
   $11 = $3;
   $12 = ((($11)) + 372|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $2;
   $15 = ((($14)) + 12912|0);
   HEAP32[$15>>2] = $13;
  } else {
   $16 = ((($8)) + 12852|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   $19 = $2;
   if ($18) {
    $20 = ((($19)) + 12856|0);
    $21 = (_nk_pool_alloc($20)|0);
    $3 = $21;
    $22 = $3;
    $23 = ($22|0)!=(0|0);
    if (!($23)) {
     ___assert_fail((23968|0),(1320|0),16901,(23973|0));
     // unreachable;
    }
    $24 = $3;
    $25 = ($24|0)!=(0|0);
    if ($25) {
     break;
    }
    $1 = 0;
    $38 = $1;
    STACKTOP = sp;return ($38|0);
   } else {
    $26 = ((($19)) + 5724|0);
    $27 = (_nk_buffer_alloc($26,1,380,4)|0);
    $3 = $27;
    $28 = $3;
    $29 = ($28|0)!=(0|0);
    if (!($29)) {
     ___assert_fail((23968|0),(1320|0),16908,(23973|0));
     // unreachable;
    }
    $30 = $3;
    $31 = ($30|0)!=(0|0);
    if ($31) {
     break;
    }
    $1 = 0;
    $38 = $1;
    STACKTOP = sp;return ($38|0);
   }
  }
 } while(0);
 $32 = $3;
 _nk_zero($32,380);
 $33 = $3;
 $34 = ((($33)) + 372|0);
 HEAP32[$34>>2] = 0;
 $35 = $3;
 $36 = ((($35)) + 376|0);
 HEAP32[$36>>2] = 0;
 $37 = $3;
 $1 = $37;
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _nk_pool_alloc($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12>>>0)>=($15>>>0);
  if ($16) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $17 = $2;
   $18 = ((($17)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   if (!($20)) {
    $4 = 388;
    $34 = $4;
    $35 = (($34) + 5952)|0;
    $4 = $35;
    $36 = $2;
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $2;
    $40 = $4;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_iiii[$38 & 15]($$byval_copy,0,$40)|0);
    $3 = $41;
    $42 = $2;
    $43 = ((($42)) + 20|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $3;
    $46 = ((($45)) + 4|0);
    HEAP32[$46>>2] = $44;
    $47 = $3;
    $48 = $2;
    $49 = ((($48)) + 20|0);
    HEAP32[$49>>2] = $47;
    $50 = $3;
    HEAP32[$50>>2] = 0;
    break;
   }
   $21 = $2;
   $22 = ((($21)) + 20|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0|0);
   $25 = $2;
   $26 = ((($25)) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   if ($24) {
    $29 = HEAP32[$27>>2]|0;
    $30 = $2;
    $31 = ((($30)) + 28|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($29>>>0)<($32>>>0);
    if (!($33)) {
     ___assert_fail((24022|0),(1320|0),15907,(24008|0));
     // unreachable;
    }
    $1 = 0;
    $61 = $1;
    STACKTOP = sp;return ($61|0);
   } else {
    $28 = ($27|0)!=(0|0);
    if (!($28)) {
     ___assert_fail((23996|0),(1320|0),15904,(24008|0));
     // unreachable;
    }
    $1 = 0;
    $61 = $1;
    STACKTOP = sp;return ($61|0);
   }
  }
 } while(0);
 $51 = $2;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[$53>>2] = $55;
 $56 = $2;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 8|0);
 $60 = (($59) + (($54*380)|0)|0);
 $1 = $60;
 $61 = $1;
 STACKTOP = sp;return ($61|0);
}
function _nk_panel_has_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $2;
 $6 = $5 & 24;
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $13 = 1;
 } else {
  $9 = $2;
  $10 = $9 & 64;
  $11 = ($10|0)!=(0);
  $13 = $11;
 }
 $12 = $13&1;
 $4 = $12;
 $14 = $4;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $2;
  $17 = $16 & 4096;
  $18 = ($17|0)!=(0);
  if ($18) {
   $22 = 0;
  } else {
   $19 = $3;
   $20 = ($19|0)!=(0|0);
   $22 = $20;
  }
 } else {
  $22 = 0;
 }
 $21 = $22&1;
 $4 = $21;
 $23 = $4;
 STACKTOP = sp;return ($23|0);
}
function _nk_panel_get_border($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = $7 & 1;
 $9 = ($8|0)!=(0);
 L1: do {
  if ($9) {
   $10 = $6;
   switch ($10|0) {
   case 128:  {
    $35 = $4;
    $36 = ((($35)) + 4832|0);
    $37 = ((($36)) + 452|0);
    $38 = +HEAPF32[$37>>2];
    $3 = $38;
    break L1;
    break;
   }
   case 2:  {
    $15 = $4;
    $16 = ((($15)) + 4832|0);
    $17 = ((($16)) + 456|0);
    $18 = +HEAPF32[$17>>2];
    $3 = $18;
    break L1;
    break;
   }
   case 4:  {
    $19 = $4;
    $20 = ((($19)) + 4832|0);
    $21 = ((($20)) + 464|0);
    $22 = +HEAPF32[$21>>2];
    $3 = $22;
    break L1;
    break;
   }
   case 16:  {
    $23 = $4;
    $24 = ((($23)) + 4832|0);
    $25 = ((($24)) + 448|0);
    $26 = +HEAPF32[$25>>2];
    $3 = $26;
    break L1;
    break;
   }
   case 32:  {
    $27 = $4;
    $28 = ((($27)) + 4832|0);
    $29 = ((($28)) + 444|0);
    $30 = +HEAPF32[$29>>2];
    $3 = $30;
    break L1;
    break;
   }
   case 64:  {
    $31 = $4;
    $32 = ((($31)) + 4832|0);
    $33 = ((($32)) + 452|0);
    $34 = +HEAPF32[$33>>2];
    $3 = $34;
    break L1;
    break;
   }
   default: {
    $11 = $4;
    $12 = ((($11)) + 4832|0);
    $13 = ((($12)) + 440|0);
    $14 = +HEAPF32[$13>>2];
    $3 = $14;
    break L1;
   }
   }
  } else {
   $3 = 0.0;
  }
 } while(0);
 $39 = $3;
 STACKTOP = sp;return (+$39);
}
function _nk_panel_is_nonblock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 & 240;
 $4 = ($3|0)!=(0);
 $5 = $4 ? 1 : 0;
 STACKTOP = sp;return ($5|0);
}
function _nk_panel_is_sub($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 & 246;
 $4 = ($3|0)!=(0);
 $5 = $4 ? 1 : 0;
 STACKTOP = sp;return ($5|0);
}
function _nk_do_scrollbarv($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0;
 var $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0;
 var $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0;
 var $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0;
 var $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0.0;
 var $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0.0, $317 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0;
 var $49 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy4 = sp + 172|0;
 $$byval_copy3 = sp + 168|0;
 $$byval_copy2 = sp + 152|0;
 $$byval_copy = sp + 136|0;
 $22 = sp + 72|0;
 $23 = sp + 56|0;
 $24 = sp + 40|0;
 $29 = sp + 20|0;
 $31 = sp;
 $12 = $0;
 $13 = $1;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $32 = $13;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  ___assert_fail((24177|0),(1320|0),13817,(24181|0));
  // unreachable;
 }
 $34 = $19;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  ___assert_fail((19774|0),(1320|0),13818,(24181|0));
  // unreachable;
 }
 $36 = $12;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  ___assert_fail((18268|0),(1320|0),13819,(24181|0));
  // unreachable;
 }
 $38 = $13;
 $39 = ($38|0)!=(0|0);
 $40 = $19;
 $41 = ($40|0)!=(0|0);
 $or$cond = $39 & $41;
 if (!($or$cond)) {
  $11 = 0.0;
  $317 = $11;
  STACKTOP = sp;return (+$317);
 }
 $42 = ((($2)) + 8|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $43 < 1.0;
 if ($44) {
  $48 = 1.0;
 } else {
  $45 = ((($2)) + 8|0);
  $46 = +HEAPF32[$45>>2];
  $48 = $46;
 }
 $47 = ((($2)) + 8|0);
 HEAPF32[$47>>2] = $48;
 $49 = ((($2)) + 12|0);
 $50 = +HEAPF32[$49>>2];
 $51 = ((($2)) + 8|0);
 $52 = +HEAPF32[$51>>2];
 $53 = 2.0 * $52;
 $54 = $50 < $53;
 if ($54) {
  $55 = ((($2)) + 8|0);
  $56 = +HEAPF32[$55>>2];
  $57 = 2.0 * $56;
  $61 = $57;
 } else {
  $58 = ((($2)) + 12|0);
  $59 = +HEAPF32[$58>>2];
  $61 = $59;
 }
 $60 = ((($2)) + 12|0);
 HEAPF32[$60>>2] = $61;
 $62 = $16;
 $63 = ((($2)) + 12|0);
 $64 = +HEAPF32[$63>>2];
 $65 = $62 <= $64;
 if ($65) {
  $11 = 0.0;
  $317 = $11;
  STACKTOP = sp;return (+$317);
 }
 $66 = $19;
 $67 = ((($66)) + 152|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = +HEAPF32[$2>>2];
  HEAPF32[$31>>2] = $70;
  $71 = ((($2)) + 8|0);
  $72 = +HEAPF32[$71>>2];
  $73 = ((($31)) + 8|0);
  HEAPF32[$73>>2] = $72;
  $74 = ((($2)) + 8|0);
  $75 = +HEAPF32[$74>>2];
  $76 = ((($31)) + 12|0);
  HEAPF32[$76>>2] = $75;
  $77 = ((($2)) + 12|0);
  $78 = +HEAPF32[$77>>2];
  $79 = ((($31)) + 12|0);
  $80 = +HEAPF32[$79>>2];
  $81 = 2.0 * $80;
  $82 = $78 - $81;
  $30 = $82;
  $83 = $17;
  $84 = $18;
  $85 = $83 < $84;
  $86 = $17;
  $87 = $18;
  $88 = $85 ? $86 : $87;
  $25 = $88;
  $89 = ((($2)) + 4|0);
  $90 = +HEAPF32[$89>>2];
  $91 = ((($31)) + 4|0);
  HEAPF32[$91>>2] = $90;
  $92 = $13;
  $93 = $19;
  $94 = ((($93)) + 416|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $19;
  $97 = ((($96)) + 284|0);
  $98 = $20;
  $99 = $21;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$31+12>>2]|0;
  $100 = (_nk_do_button_symbol($29,$92,$$byval_copy,$95,1,$97,$98,$99)|0);
  $101 = ($100|0)!=(0);
  if ($101) {
   $102 = $15;
   $103 = $25;
   $104 = $102 - $103;
   $15 = $104;
  }
  $105 = ((($2)) + 4|0);
  $106 = +HEAPF32[$105>>2];
  $107 = ((($2)) + 12|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $106 + $108;
  $110 = ((($31)) + 12|0);
  $111 = +HEAPF32[$110>>2];
  $112 = $109 - $111;
  $113 = ((($31)) + 4|0);
  HEAPF32[$113>>2] = $112;
  $114 = $13;
  $115 = $19;
  $116 = ((($115)) + 412|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $19;
  $119 = ((($118)) + 156|0);
  $120 = $20;
  $121 = $21;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$31+12>>2]|0;
  $122 = (_nk_do_button_symbol($29,$114,$$byval_copy2,$117,1,$119,$120,$121)|0);
  $123 = ($122|0)!=(0);
  if ($123) {
   $124 = $15;
   $125 = $25;
   $126 = $124 + $125;
   $15 = $126;
  }
  $127 = ((($2)) + 4|0);
  $128 = +HEAPF32[$127>>2];
  $129 = ((($31)) + 12|0);
  $130 = +HEAPF32[$129>>2];
  $131 = $128 + $130;
  $132 = ((($2)) + 4|0);
  HEAPF32[$132>>2] = $131;
  $133 = $30;
  $134 = ((($2)) + 12|0);
  HEAPF32[$134>>2] = $133;
 }
 $135 = $17;
 $136 = ((($2)) + 12|0);
 $137 = +HEAPF32[$136>>2];
 $138 = $135 < $137;
 if ($138) {
  $139 = $17;
  $142 = $139;
 } else {
  $140 = ((($2)) + 12|0);
  $141 = +HEAPF32[$140>>2];
  $142 = $141;
 }
 $25 = $142;
 $143 = $15;
 $144 = $16;
 $145 = ((($2)) + 12|0);
 $146 = +HEAPF32[$145>>2];
 $147 = $144 - $146;
 $148 = $143 < $147;
 if ($148) {
  $149 = $15;
  $155 = $149;
 } else {
  $150 = $16;
  $151 = ((($2)) + 12|0);
  $152 = +HEAPF32[$151>>2];
  $153 = $150 - $152;
  $155 = $153;
 }
 $154 = $155 < 0.0;
 do {
  if ($154) {
   $167 = 0.0;
  } else {
   $156 = $15;
   $157 = $16;
   $158 = ((($2)) + 12|0);
   $159 = +HEAPF32[$158>>2];
   $160 = $157 - $159;
   $161 = $156 < $160;
   if ($161) {
    $162 = $15;
    $167 = $162;
    break;
   } else {
    $163 = $16;
    $164 = ((($2)) + 12|0);
    $165 = +HEAPF32[$164>>2];
    $166 = $163 - $165;
    $167 = $166;
    break;
   }
  }
 } while(0);
 $26 = $167;
 $168 = ((($2)) + 12|0);
 $169 = +HEAPF32[$168>>2];
 $170 = $16;
 $171 = $169 / $170;
 $28 = $171;
 $172 = $26;
 $173 = $16;
 $174 = $172 / $173;
 $27 = $174;
 $175 = $28;
 $176 = ((($2)) + 12|0);
 $177 = +HEAPF32[$176>>2];
 $178 = $175 * $177;
 $179 = $19;
 $180 = ((($179)) + 128|0);
 $181 = +HEAPF32[$180>>2];
 $182 = 2.0 * $181;
 $183 = $19;
 $184 = ((($183)) + 144|0);
 $185 = ((($184)) + 4|0);
 $186 = +HEAPF32[$185>>2];
 $187 = 2.0 * $186;
 $188 = $182 + $187;
 $189 = $178 - $188;
 $190 = ((($24)) + 12|0);
 HEAPF32[$190>>2] = $189;
 $191 = ((($2)) + 4|0);
 $192 = +HEAPF32[$191>>2];
 $193 = $27;
 $194 = ((($2)) + 12|0);
 $195 = +HEAPF32[$194>>2];
 $196 = $193 * $195;
 $197 = $192 + $196;
 $198 = $19;
 $199 = ((($198)) + 128|0);
 $200 = +HEAPF32[$199>>2];
 $201 = $197 + $200;
 $202 = $19;
 $203 = ((($202)) + 144|0);
 $204 = ((($203)) + 4|0);
 $205 = +HEAPF32[$204>>2];
 $206 = $201 + $205;
 $207 = ((($24)) + 4|0);
 HEAPF32[$207>>2] = $206;
 $208 = ((($2)) + 8|0);
 $209 = +HEAPF32[$208>>2];
 $210 = $19;
 $211 = ((($210)) + 128|0);
 $212 = +HEAPF32[$211>>2];
 $213 = 2.0 * $212;
 $214 = $19;
 $215 = ((($214)) + 144|0);
 $216 = +HEAPF32[$215>>2];
 $217 = 2.0 * $216;
 $218 = $213 + $217;
 $219 = $209 - $218;
 $220 = ((($24)) + 8|0);
 HEAPF32[$220>>2] = $219;
 $221 = +HEAPF32[$2>>2];
 $222 = $19;
 $223 = ((($222)) + 128|0);
 $224 = +HEAPF32[$223>>2];
 $225 = $221 + $224;
 $226 = $19;
 $227 = ((($226)) + 144|0);
 $228 = +HEAPF32[$227>>2];
 $229 = $225 + $228;
 HEAPF32[$24>>2] = $229;
 $230 = +HEAPF32[$2>>2];
 HEAPF32[$22>>2] = $230;
 $231 = ((($2)) + 4|0);
 $232 = +HEAPF32[$231>>2];
 $233 = ((($22)) + 4|0);
 HEAPF32[$233>>2] = $232;
 $234 = ((($2)) + 8|0);
 $235 = +HEAPF32[$234>>2];
 $236 = ((($22)) + 8|0);
 HEAPF32[$236>>2] = $235;
 $237 = ((($24)) + 4|0);
 $238 = +HEAPF32[$237>>2];
 $239 = ((($2)) + 4|0);
 $240 = +HEAPF32[$239>>2];
 $241 = $238 - $240;
 $242 = ((($22)) + 12|0);
 HEAPF32[$242>>2] = $241;
 $243 = +HEAPF32[$2>>2];
 HEAPF32[$23>>2] = $243;
 $244 = ((($24)) + 4|0);
 $245 = +HEAPF32[$244>>2];
 $246 = ((($24)) + 12|0);
 $247 = +HEAPF32[$246>>2];
 $248 = $245 + $247;
 $249 = ((($23)) + 4|0);
 HEAPF32[$249>>2] = $248;
 $250 = ((($2)) + 8|0);
 $251 = +HEAPF32[$250>>2];
 $252 = ((($23)) + 8|0);
 HEAPF32[$252>>2] = $251;
 $253 = ((($2)) + 4|0);
 $254 = +HEAPF32[$253>>2];
 $255 = ((($2)) + 12|0);
 $256 = +HEAPF32[$255>>2];
 $257 = $254 + $256;
 $258 = ((($24)) + 4|0);
 $259 = +HEAPF32[$258>>2];
 $260 = ((($24)) + 12|0);
 $261 = +HEAPF32[$260>>2];
 $262 = $259 + $261;
 $263 = $257 - $262;
 $264 = ((($23)) + 12|0);
 HEAPF32[$264>>2] = $263;
 $265 = $12;
 $266 = $20;
 $267 = $14;
 $268 = $26;
 $269 = $16;
 $270 = $25;
 $271 = (+_nk_scrollbar_behavior($265,$266,$267,$2,$24,$22,$23,$268,$269,$270,0));
 $26 = $271;
 $272 = $26;
 $273 = $16;
 $274 = $272 / $273;
 $27 = $274;
 $275 = ((($2)) + 4|0);
 $276 = +HEAPF32[$275>>2];
 $277 = $27;
 $278 = ((($2)) + 12|0);
 $279 = +HEAPF32[$278>>2];
 $280 = $277 * $279;
 $281 = $276 + $280;
 $282 = $19;
 $283 = ((($282)) + 136|0);
 $284 = +HEAPF32[$283>>2];
 $285 = $281 + $284;
 $286 = $19;
 $287 = ((($286)) + 144|0);
 $288 = ((($287)) + 4|0);
 $289 = +HEAPF32[$288>>2];
 $290 = $285 + $289;
 $291 = ((($24)) + 4|0);
 HEAPF32[$291>>2] = $290;
 $292 = $19;
 $293 = ((($292)) + 424|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = ($294|0)!=(0|0);
 if ($295) {
  $296 = $19;
  $297 = ((($296)) + 424|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $13;
  $300 = $19;
  $301 = ((($300)) + 420|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$301>>2]|0;
  FUNCTION_TABLE_vii[$298 & 31]($299,$$byval_copy3);
 }
 $302 = $13;
 $303 = $12;
 $304 = HEAP32[$303>>2]|0;
 $305 = $19;
 _nk_draw_scrollbar($302,$304,$305,$2,$24);
 $306 = $19;
 $307 = ((($306)) + 428|0);
 $308 = HEAP32[$307>>2]|0;
 $309 = ($308|0)!=(0|0);
 if ($309) {
  $310 = $19;
  $311 = ((($310)) + 428|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = $13;
  $314 = $19;
  $315 = ((($314)) + 420|0);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$315>>2]|0;
  FUNCTION_TABLE_vii[$312 & 31]($313,$$byval_copy4);
 }
 $316 = $26;
 $11 = $316;
 $317 = $11;
 STACKTOP = sp;return (+$317);
}
function _nk_do_scrollbarh($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0;
 var $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0;
 var $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0;
 var $17 = 0.0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0;
 var $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0.0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy4 = sp + 172|0;
 $$byval_copy3 = sp + 168|0;
 $$byval_copy2 = sp + 152|0;
 $$byval_copy = sp + 136|0;
 $22 = sp + 72|0;
 $23 = sp + 56|0;
 $24 = sp + 40|0;
 $29 = sp + 20|0;
 $31 = sp;
 $12 = $0;
 $13 = $1;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $32 = $13;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  ___assert_fail((24177|0),(1320|0),13907,(24198|0));
  // unreachable;
 }
 $34 = $19;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  ___assert_fail((19774|0),(1320|0),13908,(24198|0));
  // unreachable;
 }
 $36 = $13;
 $37 = ($36|0)!=(0|0);
 $38 = $19;
 $39 = ($38|0)!=(0|0);
 $or$cond = $37 & $39;
 if (!($or$cond)) {
  $11 = 0.0;
  $296 = $11;
  STACKTOP = sp;return (+$296);
 }
 $40 = ((($2)) + 12|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $41 < 1.0;
 if ($42) {
  $46 = 1.0;
 } else {
  $43 = ((($2)) + 12|0);
  $44 = +HEAPF32[$43>>2];
  $46 = $44;
 }
 $45 = ((($2)) + 12|0);
 HEAPF32[$45>>2] = $46;
 $47 = ((($2)) + 8|0);
 $48 = +HEAPF32[$47>>2];
 $49 = ((($2)) + 12|0);
 $50 = +HEAPF32[$49>>2];
 $51 = 2.0 * $50;
 $52 = $48 < $51;
 if ($52) {
  $53 = ((($2)) + 12|0);
  $54 = +HEAPF32[$53>>2];
  $55 = 2.0 * $54;
  $59 = $55;
 } else {
  $56 = ((($2)) + 8|0);
  $57 = +HEAPF32[$56>>2];
  $59 = $57;
 }
 $58 = ((($2)) + 8|0);
 HEAPF32[$58>>2] = $59;
 $60 = $16;
 $61 = ((($2)) + 8|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $60 <= $62;
 if ($63) {
  $11 = 0.0;
  $296 = $11;
  STACKTOP = sp;return (+$296);
 }
 $64 = $19;
 $65 = ((($64)) + 152|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = ((($2)) + 4|0);
  $69 = +HEAPF32[$68>>2];
  $70 = ((($31)) + 4|0);
  HEAPF32[$70>>2] = $69;
  $71 = ((($2)) + 12|0);
  $72 = +HEAPF32[$71>>2];
  $73 = ((($31)) + 8|0);
  HEAPF32[$73>>2] = $72;
  $74 = ((($2)) + 12|0);
  $75 = +HEAPF32[$74>>2];
  $76 = ((($31)) + 12|0);
  HEAPF32[$76>>2] = $75;
  $77 = ((($2)) + 8|0);
  $78 = +HEAPF32[$77>>2];
  $79 = ((($31)) + 8|0);
  $80 = +HEAPF32[$79>>2];
  $81 = 2.0 * $80;
  $82 = $78 - $81;
  $30 = $82;
  $83 = $17;
  $84 = $18;
  $85 = $83 < $84;
  $86 = $17;
  $87 = $18;
  $88 = $85 ? $86 : $87;
  $25 = $88;
  $89 = +HEAPF32[$2>>2];
  HEAPF32[$31>>2] = $89;
  $90 = $13;
  $91 = $19;
  $92 = ((($91)) + 416|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $19;
  $95 = ((($94)) + 284|0);
  $96 = $20;
  $97 = $21;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$31+12>>2]|0;
  $98 = (_nk_do_button_symbol($29,$90,$$byval_copy,$93,1,$95,$96,$97)|0);
  $99 = ($98|0)!=(0);
  if ($99) {
   $100 = $15;
   $101 = $25;
   $102 = $100 - $101;
   $15 = $102;
  }
  $103 = +HEAPF32[$2>>2];
  $104 = ((($2)) + 8|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $103 + $105;
  $107 = ((($31)) + 8|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $106 - $108;
  HEAPF32[$31>>2] = $109;
  $110 = $13;
  $111 = $19;
  $112 = ((($111)) + 412|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $19;
  $115 = ((($114)) + 156|0);
  $116 = $20;
  $117 = $21;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$31>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$31+12>>2]|0;
  $118 = (_nk_do_button_symbol($29,$110,$$byval_copy2,$113,1,$115,$116,$117)|0);
  $119 = ($118|0)!=(0);
  if ($119) {
   $120 = $15;
   $121 = $25;
   $122 = $120 + $121;
   $15 = $122;
  }
  $123 = +HEAPF32[$2>>2];
  $124 = ((($31)) + 8|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $123 + $125;
  HEAPF32[$2>>2] = $126;
  $127 = $30;
  $128 = ((($2)) + 8|0);
  HEAPF32[$128>>2] = $127;
 }
 $129 = $17;
 $130 = ((($2)) + 8|0);
 $131 = +HEAPF32[$130>>2];
 $132 = $129 < $131;
 if ($132) {
  $133 = $17;
  $136 = $133;
 } else {
  $134 = ((($2)) + 8|0);
  $135 = +HEAPF32[$134>>2];
  $136 = $135;
 }
 $25 = $136;
 $137 = $15;
 $138 = $16;
 $139 = ((($2)) + 8|0);
 $140 = +HEAPF32[$139>>2];
 $141 = $138 - $140;
 $142 = $137 < $141;
 if ($142) {
  $143 = $15;
  $149 = $143;
 } else {
  $144 = $16;
  $145 = ((($2)) + 8|0);
  $146 = +HEAPF32[$145>>2];
  $147 = $144 - $146;
  $149 = $147;
 }
 $148 = $149 < 0.0;
 do {
  if ($148) {
   $161 = 0.0;
  } else {
   $150 = $15;
   $151 = $16;
   $152 = ((($2)) + 8|0);
   $153 = +HEAPF32[$152>>2];
   $154 = $151 - $153;
   $155 = $150 < $154;
   if ($155) {
    $156 = $15;
    $161 = $156;
    break;
   } else {
    $157 = $16;
    $158 = ((($2)) + 8|0);
    $159 = +HEAPF32[$158>>2];
    $160 = $157 - $159;
    $161 = $160;
    break;
   }
  }
 } while(0);
 $26 = $161;
 $162 = ((($2)) + 8|0);
 $163 = +HEAPF32[$162>>2];
 $164 = $16;
 $165 = $163 / $164;
 $28 = $165;
 $166 = $26;
 $167 = $16;
 $168 = $166 / $167;
 $27 = $168;
 $169 = $28;
 $170 = ((($2)) + 8|0);
 $171 = +HEAPF32[$170>>2];
 $172 = $169 * $171;
 $173 = $19;
 $174 = ((($173)) + 128|0);
 $175 = +HEAPF32[$174>>2];
 $176 = 2.0 * $175;
 $177 = $19;
 $178 = ((($177)) + 144|0);
 $179 = +HEAPF32[$178>>2];
 $180 = 2.0 * $179;
 $181 = $176 + $180;
 $182 = $172 - $181;
 $183 = ((($22)) + 8|0);
 HEAPF32[$183>>2] = $182;
 $184 = +HEAPF32[$2>>2];
 $185 = $27;
 $186 = ((($2)) + 8|0);
 $187 = +HEAPF32[$186>>2];
 $188 = $185 * $187;
 $189 = $184 + $188;
 $190 = $19;
 $191 = ((($190)) + 128|0);
 $192 = +HEAPF32[$191>>2];
 $193 = $189 + $192;
 $194 = $19;
 $195 = ((($194)) + 144|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $193 + $196;
 HEAPF32[$22>>2] = $197;
 $198 = ((($2)) + 12|0);
 $199 = +HEAPF32[$198>>2];
 $200 = $19;
 $201 = ((($200)) + 128|0);
 $202 = +HEAPF32[$201>>2];
 $203 = 2.0 * $202;
 $204 = $19;
 $205 = ((($204)) + 144|0);
 $206 = ((($205)) + 4|0);
 $207 = +HEAPF32[$206>>2];
 $208 = 2.0 * $207;
 $209 = $203 + $208;
 $210 = $199 - $209;
 $211 = ((($22)) + 12|0);
 HEAPF32[$211>>2] = $210;
 $212 = ((($2)) + 4|0);
 $213 = +HEAPF32[$212>>2];
 $214 = $19;
 $215 = ((($214)) + 128|0);
 $216 = +HEAPF32[$215>>2];
 $217 = $213 + $216;
 $218 = $19;
 $219 = ((($218)) + 144|0);
 $220 = ((($219)) + 4|0);
 $221 = +HEAPF32[$220>>2];
 $222 = $217 + $221;
 $223 = ((($22)) + 4|0);
 HEAPF32[$223>>2] = $222;
 $224 = +HEAPF32[$2>>2];
 HEAPF32[$23>>2] = $224;
 $225 = ((($2)) + 4|0);
 $226 = +HEAPF32[$225>>2];
 $227 = ((($23)) + 4|0);
 HEAPF32[$227>>2] = $226;
 $228 = +HEAPF32[$22>>2];
 $229 = +HEAPF32[$2>>2];
 $230 = $228 - $229;
 $231 = ((($23)) + 8|0);
 HEAPF32[$231>>2] = $230;
 $232 = ((($2)) + 12|0);
 $233 = +HEAPF32[$232>>2];
 $234 = ((($23)) + 12|0);
 HEAPF32[$234>>2] = $233;
 $235 = +HEAPF32[$22>>2];
 $236 = ((($22)) + 8|0);
 $237 = +HEAPF32[$236>>2];
 $238 = $235 + $237;
 HEAPF32[$24>>2] = $238;
 $239 = ((($2)) + 4|0);
 $240 = +HEAPF32[$239>>2];
 $241 = ((($24)) + 4|0);
 HEAPF32[$241>>2] = $240;
 $242 = +HEAPF32[$2>>2];
 $243 = ((($2)) + 8|0);
 $244 = +HEAPF32[$243>>2];
 $245 = $242 + $244;
 $246 = +HEAPF32[$22>>2];
 $247 = ((($22)) + 8|0);
 $248 = +HEAPF32[$247>>2];
 $249 = $246 + $248;
 $250 = $245 - $249;
 $251 = ((($24)) + 8|0);
 HEAPF32[$251>>2] = $250;
 $252 = ((($2)) + 12|0);
 $253 = +HEAPF32[$252>>2];
 $254 = ((($24)) + 12|0);
 HEAPF32[$254>>2] = $253;
 $255 = $12;
 $256 = $20;
 $257 = $14;
 $258 = $26;
 $259 = $16;
 $260 = $25;
 $261 = (+_nk_scrollbar_behavior($255,$256,$257,$2,$22,$23,$24,$258,$259,$260,1));
 $26 = $261;
 $262 = $26;
 $263 = $16;
 $264 = $262 / $263;
 $27 = $264;
 $265 = +HEAPF32[$2>>2];
 $266 = $27;
 $267 = ((($2)) + 8|0);
 $268 = +HEAPF32[$267>>2];
 $269 = $266 * $268;
 $270 = $265 + $269;
 HEAPF32[$22>>2] = $270;
 $271 = $19;
 $272 = ((($271)) + 424|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = ($273|0)!=(0|0);
 if ($274) {
  $275 = $19;
  $276 = ((($275)) + 424|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $13;
  $279 = $19;
  $280 = ((($279)) + 420|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$280>>2]|0;
  FUNCTION_TABLE_vii[$277 & 31]($278,$$byval_copy3);
 }
 $281 = $13;
 $282 = $12;
 $283 = HEAP32[$282>>2]|0;
 $284 = $19;
 _nk_draw_scrollbar($281,$283,$284,$2,$22);
 $285 = $19;
 $286 = ((($285)) + 428|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = ($287|0)!=(0|0);
 if ($288) {
  $289 = $19;
  $290 = ((($289)) + 428|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = $13;
  $293 = $19;
  $294 = ((($293)) + 420|0);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$294>>2]|0;
  FUNCTION_TABLE_vii[$291 & 31]($292,$$byval_copy4);
 }
 $295 = $26;
 $11 = $295;
 $296 = $11;
 STACKTOP = sp;return (+$296);
}
function _nk_panel_get_border_color($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = $4;
 switch ($5|0) {
 case 128:  {
  $24 = $3;
  $25 = ((($24)) + 4832|0);
  $26 = ((($25)) + 408|0);
  ;HEAP8[$0>>0]=HEAP8[$26>>0]|0;HEAP8[$0+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$26+3>>0]|0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $9 = $3;
  $10 = ((($9)) + 4832|0);
  $11 = ((($10)) + 412|0);
  ;HEAP8[$0>>0]=HEAP8[$11>>0]|0;HEAP8[$0+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$11+3>>0]|0;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $12 = $3;
  $13 = ((($12)) + 4832|0);
  $14 = ((($13)) + 396|0);
  ;HEAP8[$0>>0]=HEAP8[$14>>0]|0;HEAP8[$0+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$14+3>>0]|0;
  STACKTOP = sp;return;
  break;
 }
 case 16:  {
  $15 = $3;
  $16 = ((($15)) + 4832|0);
  $17 = ((($16)) + 404|0);
  ;HEAP8[$0>>0]=HEAP8[$17>>0]|0;HEAP8[$0+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$17+3>>0]|0;
  STACKTOP = sp;return;
  break;
 }
 case 32:  {
  $18 = $3;
  $19 = ((($18)) + 4832|0);
  $20 = ((($19)) + 400|0);
  ;HEAP8[$0>>0]=HEAP8[$20>>0]|0;HEAP8[$0+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$20+3>>0]|0;
  STACKTOP = sp;return;
  break;
 }
 case 64:  {
  $21 = $3;
  $22 = ((($21)) + 4832|0);
  $23 = ((($22)) + 408|0);
  ;HEAP8[$0>>0]=HEAP8[$23>>0]|0;HEAP8[$0+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$23+3>>0]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $6 = $3;
  $7 = ((($6)) + 4832|0);
  $8 = ((($7)) + 392|0);
  ;HEAP8[$0>>0]=HEAP8[$8>>0]|0;HEAP8[$0+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$8+3>>0]|0;
  STACKTOP = sp;return;
 }
 }
}
function _nk_command_buffer_reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1473|0),(1320|0),6056,(24215|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 32|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 36|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 4|0);
 ;HEAP32[$13>>2]=HEAP32[8>>2]|0;HEAP32[$13+4>>2]=HEAP32[8+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[8+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[8+12>>2]|0;
 STACKTOP = sp;return;
}
function _nk_finish($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((2989|0),(1320|0),16188,(24239|0));
  // unreachable;
 }
 $11 = $3;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((18871|0),(1320|0),16189,(24239|0));
  // unreachable;
 }
 $13 = $2;
 $14 = ($13|0)!=(0|0);
 $15 = $3;
 $16 = ($15|0)!=(0|0);
 $or$cond = $14 & $16;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $17 = $2;
 $18 = $3;
 $19 = ((($18)) + 100|0);
 _nk_finish_buffer($17,$19);
 $20 = $3;
 $21 = ((($20)) + 140|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 336|0);
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $3;
 $28 = ((($27)) + 140|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 336|0);
 $4 = $30;
 $31 = $2;
 $32 = ((($31)) + 5724|0);
 $33 = ((($32)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $8 = $34;
 $35 = $8;
 $36 = $4;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38)|0);
 $5 = $39;
 $40 = $8;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($40) + ($43)|0);
 $6 = $44;
 $45 = $8;
 $46 = $3;
 $47 = ((($46)) + 100|0);
 $48 = ((($47)) + 36|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($45) + ($49)|0);
 $7 = $50;
 $51 = $4;
 $52 = ((($51)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $5;
 $55 = ((($54)) + 4|0);
 HEAP32[$55>>2] = $53;
 $56 = $7;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $6;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = $4;
 $62 = HEAP32[$61>>2]|0;
 $63 = $7;
 $64 = ((($63)) + 4|0);
 HEAP32[$64>>2] = $62;
 $65 = $4;
 $66 = ((($65)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $3;
 $69 = ((($68)) + 100|0);
 $70 = ((($69)) + 36|0);
 HEAP32[$70>>2] = $67;
 $71 = $4;
 $72 = ((($71)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $3;
 $75 = ((($74)) + 100|0);
 $76 = ((($75)) + 32|0);
 HEAP32[$76>>2] = $73;
 $77 = $4;
 $78 = ((($77)) + 16|0);
 HEAP32[$78>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_scrollbar_behavior($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = $10|0;
 var $$byval_copy = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0;
 var $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0;
 var $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0;
 var $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0;
 var $259 = 0.0, $26 = 0.0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0;
 var $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0;
 var $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0;
 var $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0.0;
 var $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0.0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy16 = sp + 160|0;
 $$byval_copy15 = sp + 144|0;
 $$byval_copy14 = sp + 128|0;
 $$byval_copy13 = sp + 112|0;
 $$byval_copy12 = sp + 96|0;
 $$byval_copy = sp + 80|0;
 $23 = sp + 24|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $30 = $12;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 2;
 $33 = ($32|0)!=(0);
 $34 = $12;
 if ($33) {
  HEAP32[$34>>2] = 6;
 } else {
  HEAP32[$34>>2] = 4;
 }
 $35 = $13;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  $37 = $19;
  $11 = $37;
  $392 = $11;
  STACKTOP = sp;return (+$392);
 }
 $38 = $13;
 $39 = ((($38)) + 260|0);
 $40 = HEAP32[$39>>2]|0;
 $24 = $40;
 $41 = $13;
 $42 = $16;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$42+12>>2]|0;
 $43 = (_nk_input_has_mouse_click_down_in_rect($41,0,$$byval_copy,1)|0);
 $25 = $43;
 $44 = $13;
 $45 = $15;
 ;HEAP32[$$byval_copy12>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$$byval_copy12+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$$byval_copy12+12>>2]=HEAP32[$45+12>>2]|0;
 $46 = (_nk_input_is_mouse_hovering_rect($44,$$byval_copy12)|0);
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $12;
  HEAP32[$48>>2] = 18;
 }
 $49 = $24;
 $50 = ($49|0)!=(0);
 $51 = $25;
 $52 = ($51|0)!=(0);
 $or$cond = $50 & $52;
 do {
  if ($or$cond) {
   $53 = $12;
   HEAP32[$53>>2] = 34;
   $54 = $22;
   $55 = ($54|0)==(0);
   $56 = $13;
   $57 = ((($56)) + 260|0);
   $58 = ((($57)) + 64|0);
   if ($55) {
    $59 = ((($58)) + 4|0);
    $60 = +HEAPF32[$59>>2];
    $26 = $60;
    $61 = $26;
    $62 = $15;
    $63 = ((($62)) + 12|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $61 / $64;
    $66 = $20;
    $67 = $65 * $66;
    $27 = $67;
    $68 = $19;
    $69 = $27;
    $70 = $68 + $69;
    $71 = $20;
    $72 = $15;
    $73 = ((($72)) + 12|0);
    $74 = +HEAPF32[$73>>2];
    $75 = $71 - $74;
    $76 = $70 < $75;
    if ($76) {
     $77 = $19;
     $78 = $27;
     $79 = $77 + $78;
     $86 = $79;
    } else {
     $80 = $20;
     $81 = $15;
     $82 = ((($81)) + 12|0);
     $83 = +HEAPF32[$82>>2];
     $84 = $80 - $83;
     $86 = $84;
    }
    $85 = $86 < 0.0;
    do {
     if ($85) {
      $104 = 0.0;
     } else {
      $87 = $19;
      $88 = $27;
      $89 = $87 + $88;
      $90 = $20;
      $91 = $15;
      $92 = ((($91)) + 12|0);
      $93 = +HEAPF32[$92>>2];
      $94 = $90 - $93;
      $95 = $89 < $94;
      if ($95) {
       $96 = $19;
       $97 = $27;
       $98 = $96 + $97;
       $104 = $98;
       break;
      } else {
       $99 = $20;
       $100 = $15;
       $101 = ((($100)) + 12|0);
       $102 = +HEAPF32[$101>>2];
       $103 = $99 - $102;
       $104 = $103;
       break;
      }
     }
    } while(0);
    $19 = $104;
    $105 = $15;
    $106 = ((($105)) + 4|0);
    $107 = +HEAPF32[$106>>2];
    $108 = $19;
    $109 = $20;
    $110 = $108 / $109;
    $111 = $15;
    $112 = ((($111)) + 12|0);
    $113 = +HEAPF32[$112>>2];
    $114 = $110 * $113;
    $115 = $107 + $114;
    $28 = $115;
    $116 = $28;
    $117 = $16;
    $118 = ((($117)) + 12|0);
    $119 = +HEAPF32[$118>>2];
    $120 = $119 / 2.0;
    $121 = $116 + $120;
    $122 = $13;
    $123 = ((($122)) + 260|0);
    $124 = ((($123)) + 8|0);
    $125 = ((($124)) + 4|0);
    HEAPF32[$125>>2] = $121;
    break;
   } else {
    $126 = +HEAPF32[$58>>2];
    $26 = $126;
    $127 = $26;
    $128 = $15;
    $129 = ((($128)) + 8|0);
    $130 = +HEAPF32[$129>>2];
    $131 = $127 / $130;
    $132 = $20;
    $133 = $131 * $132;
    $27 = $133;
    $134 = $19;
    $135 = $27;
    $136 = $134 + $135;
    $137 = $20;
    $138 = $15;
    $139 = ((($138)) + 8|0);
    $140 = +HEAPF32[$139>>2];
    $141 = $137 - $140;
    $142 = $136 < $141;
    if ($142) {
     $143 = $19;
     $144 = $27;
     $145 = $143 + $144;
     $152 = $145;
    } else {
     $146 = $20;
     $147 = $15;
     $148 = ((($147)) + 8|0);
     $149 = +HEAPF32[$148>>2];
     $150 = $146 - $149;
     $152 = $150;
    }
    $151 = $152 < 0.0;
    do {
     if ($151) {
      $170 = 0.0;
     } else {
      $153 = $19;
      $154 = $27;
      $155 = $153 + $154;
      $156 = $20;
      $157 = $15;
      $158 = ((($157)) + 8|0);
      $159 = +HEAPF32[$158>>2];
      $160 = $156 - $159;
      $161 = $155 < $160;
      if ($161) {
       $162 = $19;
       $163 = $27;
       $164 = $162 + $163;
       $170 = $164;
       break;
      } else {
       $165 = $20;
       $166 = $15;
       $167 = ((($166)) + 8|0);
       $168 = +HEAPF32[$167>>2];
       $169 = $165 - $168;
       $170 = $169;
       break;
      }
     }
    } while(0);
    $19 = $170;
    $171 = $15;
    $172 = +HEAPF32[$171>>2];
    $173 = $19;
    $174 = $20;
    $175 = $173 / $174;
    $176 = $15;
    $177 = ((($176)) + 8|0);
    $178 = +HEAPF32[$177>>2];
    $179 = $175 * $178;
    $180 = $172 + $179;
    $29 = $180;
    $181 = $29;
    $182 = $16;
    $183 = ((($182)) + 8|0);
    $184 = +HEAPF32[$183>>2];
    $185 = $184 / 2.0;
    $186 = $181 + $185;
    $187 = $13;
    $188 = ((($187)) + 260|0);
    $189 = ((($188)) + 8|0);
    HEAPF32[$189>>2] = $186;
    break;
   }
  } else {
   $190 = $13;
   $191 = (_nk_input_is_key_pressed($190,29)|0);
   $192 = ($191|0)!=(0);
   $193 = $22;
   $194 = ($193|0)==(0);
   $or$cond3 = $192 & $194;
   $195 = $14;
   $196 = ($195|0)!=(0);
   $or$cond5 = $or$cond3 & $196;
   if (!($or$cond5)) {
    $197 = $17;
    $198 = $13;
    ;HEAP32[$$byval_copy13>>2]=HEAP32[$197>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$197+4>>2]|0;HEAP32[$$byval_copy13+8>>2]=HEAP32[$197+8>>2]|0;HEAP32[$$byval_copy13+12>>2]=HEAP32[$197+12>>2]|0;
    $199 = (_nk_button_behavior($23,$$byval_copy13,$198,0)|0);
    $200 = ($199|0)!=(0);
    if (!($200)) {
     $225 = $13;
     $226 = (_nk_input_is_key_pressed($225,28)|0);
     $227 = ($226|0)!=(0);
     $228 = $22;
     $229 = ($228|0)==(0);
     $or$cond7 = $227 & $229;
     $230 = $14;
     $231 = ($230|0)!=(0);
     $or$cond9 = $or$cond7 & $231;
     if (!($or$cond9)) {
      $232 = $18;
      $233 = $13;
      ;HEAP32[$$byval_copy14>>2]=HEAP32[$232>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$232+4>>2]|0;HEAP32[$$byval_copy14+8>>2]=HEAP32[$232+8>>2]|0;HEAP32[$$byval_copy14+12>>2]=HEAP32[$232+12>>2]|0;
      $234 = (_nk_button_behavior($23,$$byval_copy14,$233,0)|0);
      $235 = ($234|0)!=(0);
      if (!($235)) {
       $280 = $14;
       $281 = ($280|0)!=(0);
       if (!($281)) {
        break;
       }
       $282 = $13;
       $283 = ((($282)) + 260|0);
       $284 = ((($283)) + 72|0);
       $285 = +HEAPF32[$284>>2];
       $286 = $285 < 0.0;
       if (!($286)) {
        $287 = $13;
        $288 = ((($287)) + 260|0);
        $289 = ((($288)) + 72|0);
        $290 = +HEAPF32[$289>>2];
        $291 = $290 > 0.0;
        if (!($291)) {
         $358 = $13;
         $359 = (_nk_input_is_key_pressed($358,26)|0);
         $360 = ($359|0)!=(0);
         if ($360) {
          $361 = $22;
          $362 = ($361|0)==(0);
          if (!($362)) {
           break;
          }
          $19 = 0.0;
          break;
         } else {
          $363 = $13;
          $364 = (_nk_input_is_key_pressed($363,27)|0);
          $365 = ($364|0)!=(0);
          $366 = $22;
          $367 = ($366|0)==(0);
          $or$cond11 = $365 & $367;
          if (!($or$cond11)) {
           break;
          }
          $368 = $20;
          $369 = $15;
          $370 = ((($369)) + 12|0);
          $371 = +HEAPF32[$370>>2];
          $372 = $368 - $371;
          $19 = $372;
          break;
         }
        }
       }
       $292 = $19;
       $293 = $21;
       $294 = $13;
       $295 = ((($294)) + 260|0);
       $296 = ((($295)) + 72|0);
       $297 = +HEAPF32[$296>>2];
       $298 = -$297;
       $299 = $293 * $298;
       $300 = $292 + $299;
       $19 = $300;
       $301 = $22;
       $302 = ($301|0)==(0);
       $303 = $19;
       $304 = $20;
       $305 = $15;
       if ($302) {
        $306 = ((($305)) + 12|0);
        $307 = +HEAPF32[$306>>2];
        $308 = $304 - $307;
        $309 = $303 < $308;
        if ($309) {
         $310 = $19;
         $317 = $310;
        } else {
         $311 = $20;
         $312 = $15;
         $313 = ((($312)) + 12|0);
         $314 = +HEAPF32[$313>>2];
         $315 = $311 - $314;
         $317 = $315;
        }
        $316 = $317 < 0.0;
        do {
         if ($316) {
          $331 = 0.0;
         } else {
          $318 = $19;
          $319 = $20;
          $320 = $15;
          $321 = ((($320)) + 12|0);
          $322 = +HEAPF32[$321>>2];
          $323 = $319 - $322;
          $324 = $318 < $323;
          if ($324) {
           $325 = $19;
           $331 = $325;
           break;
          } else {
           $326 = $20;
           $327 = $15;
           $328 = ((($327)) + 12|0);
           $329 = +HEAPF32[$328>>2];
           $330 = $326 - $329;
           $331 = $330;
           break;
          }
         }
        } while(0);
        $19 = $331;
        break;
       } else {
        $332 = ((($305)) + 8|0);
        $333 = +HEAPF32[$332>>2];
        $334 = $304 - $333;
        $335 = $303 < $334;
        if ($335) {
         $336 = $19;
         $343 = $336;
        } else {
         $337 = $20;
         $338 = $15;
         $339 = ((($338)) + 8|0);
         $340 = +HEAPF32[$339>>2];
         $341 = $337 - $340;
         $343 = $341;
        }
        $342 = $343 < 0.0;
        do {
         if ($342) {
          $357 = 0.0;
         } else {
          $344 = $19;
          $345 = $20;
          $346 = $15;
          $347 = ((($346)) + 8|0);
          $348 = +HEAPF32[$347>>2];
          $349 = $345 - $348;
          $350 = $344 < $349;
          if ($350) {
           $351 = $19;
           $357 = $351;
           break;
          } else {
           $352 = $20;
           $353 = $15;
           $354 = ((($353)) + 8|0);
           $355 = +HEAPF32[$354>>2];
           $356 = $352 - $355;
           $357 = $356;
           break;
          }
         }
        } while(0);
        $19 = $357;
        break;
       }
      }
     }
     $236 = $22;
     $237 = ($236|0)==(0);
     $238 = $19;
     $239 = $15;
     if ($237) {
      $240 = ((($239)) + 12|0);
      $241 = +HEAPF32[$240>>2];
      $242 = $238 + $241;
      $243 = $20;
      $244 = $15;
      $245 = ((($244)) + 12|0);
      $246 = +HEAPF32[$245>>2];
      $247 = $243 - $246;
      $248 = $242 < $247;
      if ($248) {
       $249 = $19;
       $250 = $15;
       $251 = ((($250)) + 12|0);
       $252 = +HEAPF32[$251>>2];
       $253 = $249 + $252;
       $259 = $253;
      } else {
       $254 = $20;
       $255 = $15;
       $256 = ((($255)) + 12|0);
       $257 = +HEAPF32[$256>>2];
       $258 = $254 - $257;
       $259 = $258;
      }
      $19 = $259;
      break;
     } else {
      $260 = ((($239)) + 8|0);
      $261 = +HEAPF32[$260>>2];
      $262 = $238 + $261;
      $263 = $20;
      $264 = $15;
      $265 = ((($264)) + 8|0);
      $266 = +HEAPF32[$265>>2];
      $267 = $263 - $266;
      $268 = $262 < $267;
      if ($268) {
       $269 = $19;
       $270 = $15;
       $271 = ((($270)) + 8|0);
       $272 = +HEAPF32[$271>>2];
       $273 = $269 + $272;
       $279 = $273;
      } else {
       $274 = $20;
       $275 = $15;
       $276 = ((($275)) + 8|0);
       $277 = +HEAPF32[$276>>2];
       $278 = $274 - $277;
       $279 = $278;
      }
      $19 = $279;
      break;
     }
    }
   }
   $201 = $22;
   $202 = ($201|0)==(0);
   $203 = $19;
   $204 = $15;
   if ($202) {
    $205 = ((($204)) + 12|0);
    $206 = +HEAPF32[$205>>2];
    $207 = $203 - $206;
    $208 = 0.0 < $207;
    if ($208) {
     $209 = $19;
     $210 = $15;
     $211 = ((($210)) + 12|0);
     $212 = +HEAPF32[$211>>2];
     $213 = $209 - $212;
     $214 = $213;
    } else {
     $214 = 0.0;
    }
    $19 = $214;
    break;
   } else {
    $215 = ((($204)) + 8|0);
    $216 = +HEAPF32[$215>>2];
    $217 = $203 - $216;
    $218 = 0.0 < $217;
    if ($218) {
     $219 = $19;
     $220 = $15;
     $221 = ((($220)) + 8|0);
     $222 = +HEAPF32[$221>>2];
     $223 = $219 - $222;
     $224 = $223;
    } else {
     $224 = 0.0;
    }
    $19 = $224;
    break;
   }
  }
 } while(0);
 $373 = $12;
 $374 = HEAP32[$373>>2]|0;
 $375 = $374 & 16;
 $376 = ($375|0)!=(0);
 if ($376) {
  $377 = $13;
  $378 = $15;
  ;HEAP32[$$byval_copy15>>2]=HEAP32[$378>>2]|0;HEAP32[$$byval_copy15+4>>2]=HEAP32[$378+4>>2]|0;HEAP32[$$byval_copy15+8>>2]=HEAP32[$378+8>>2]|0;HEAP32[$$byval_copy15+12>>2]=HEAP32[$378+12>>2]|0;
  $379 = (_nk_input_is_mouse_prev_hovering_rect($377,$$byval_copy15)|0);
  $380 = ($379|0)!=(0);
  if ($380) {
   label = 74;
  } else {
   $381 = $12;
   $382 = HEAP32[$381>>2]|0;
   $383 = $382 | 8;
   HEAP32[$381>>2] = $383;
  }
 } else {
  label = 74;
 }
 if ((label|0) == 74) {
  $384 = $13;
  $385 = $15;
  ;HEAP32[$$byval_copy16>>2]=HEAP32[$385>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$385+4>>2]|0;HEAP32[$$byval_copy16+8>>2]=HEAP32[$385+8>>2]|0;HEAP32[$$byval_copy16+12>>2]=HEAP32[$385+12>>2]|0;
  $386 = (_nk_input_is_mouse_prev_hovering_rect($384,$$byval_copy16)|0);
  $387 = ($386|0)!=(0);
  if ($387) {
   $388 = $12;
   $389 = HEAP32[$388>>2]|0;
   $390 = $389 | 64;
   HEAP32[$388>>2] = $390;
  }
 }
 $391 = $19;
 $11 = $391;
 $392 = $11;
 STACKTOP = sp;return (+$392);
}
function _nk_draw_scrollbar($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $nk_white$byval_copy = 0, $nk_white$byval_copy10 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $nk_white$byval_copy10 = sp + 148|0;
 $$byval_copy9 = sp + 112|0;
 $$byval_copy8 = sp + 144|0;
 $$byval_copy7 = sp + 96|0;
 $$byval_copy6 = sp + 140|0;
 $$byval_copy5 = sp + 80|0;
 $nk_white$byval_copy = sp + 136|0;
 $$byval_copy4 = sp + 64|0;
 $$byval_copy3 = sp + 132|0;
 $$byval_copy2 = sp + 48|0;
 $$byval_copy1 = sp + 128|0;
 $$byval_copy = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $6;
 $13 = $12 & 32;
 $14 = ($13|0)!=(0);
 do {
  if ($14) {
   $15 = $7;
   $16 = ((($15)) + 40|0);
   $10 = $16;
   $17 = $7;
   $18 = ((($17)) + 104|0);
   $11 = $18;
  } else {
   $19 = $6;
   $20 = $19 & 16;
   $21 = ($20|0)!=(0);
   $22 = $7;
   if ($21) {
    $23 = ((($22)) + 20|0);
    $10 = $23;
    $24 = $7;
    $25 = ((($24)) + 84|0);
    $11 = $25;
    break;
   } else {
    $10 = $22;
    $26 = $7;
    $27 = ((($26)) + 64|0);
    $11 = $27;
    break;
   }
  }
 } while(0);
 $28 = $10;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 $31 = $5;
 $32 = $8;
 if ($30) {
  $33 = $7;
  $34 = ((($33)) + 132|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $10;
  $37 = ((($36)) + 4|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$32+12>>2]|0;
  ;HEAP8[$$byval_copy1>>0]=HEAP8[$37>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$37+3>>0]|0;
  _nk_fill_rect($31,$$byval_copy,$35,$$byval_copy1);
  $38 = $5;
  $39 = $8;
  $40 = $7;
  $41 = ((($40)) + 132|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $7;
  $44 = ((($43)) + 128|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $7;
  $47 = ((($46)) + 60|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$39>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$39+12>>2]|0;
  ;HEAP8[$$byval_copy3>>0]=HEAP8[$47>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$47+3>>0]|0;
  _nk_stroke_rect($38,$$byval_copy2,$42,$45,$$byval_copy3);
 } else {
  $48 = $10;
  $49 = ((($48)) + 4|0);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$32+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($31,$$byval_copy4,$49,$nk_white$byval_copy);
 }
 $50 = $10;
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0);
 $53 = $5;
 $54 = $9;
 if ($52) {
  $55 = $7;
  $56 = ((($55)) + 140|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $11;
  $59 = ((($58)) + 4|0);
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$54>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$54+12>>2]|0;
  ;HEAP8[$$byval_copy6>>0]=HEAP8[$59>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$59+3>>0]|0;
  _nk_fill_rect($53,$$byval_copy5,$57,$$byval_copy6);
  $60 = $5;
  $61 = $9;
  $62 = $7;
  $63 = ((($62)) + 140|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $7;
  $66 = ((($65)) + 136|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $7;
  $69 = ((($68)) + 124|0);
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$61>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$61+12>>2]|0;
  ;HEAP8[$$byval_copy8>>0]=HEAP8[$69>>0]|0;HEAP8[$$byval_copy8+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$$byval_copy8+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$$byval_copy8+3>>0]=HEAP8[$69+3>>0]|0;
  _nk_stroke_rect($60,$$byval_copy7,$64,$67,$$byval_copy8);
  STACKTOP = sp;return;
 } else {
  $70 = $11;
  $71 = ((($70)) + 4|0);
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$54>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$54+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$54+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$54+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy10>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy10+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy10+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy10+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($53,$$byval_copy9,$71,$nk_white$byval_copy10);
  STACKTOP = sp;return;
 }
}
function _nk_layout_widget_space($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0;
 var $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0;
 var $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0;
 var $462 = 0, $463 = 0.0, $464 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $16 = sp + 24|0;
 $17 = sp + 16|0;
 $18 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = 0.0;
 $11 = 0.0;
 $12 = 0.0;
 $20 = $5;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((2989|0),(1320|0),18187,(24313|0));
  // unreachable;
 }
 $22 = $5;
 $23 = ((($22)) + 12908|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((19010|0),(1320|0),18188,(24313|0));
  // unreachable;
 }
 $26 = $5;
 $27 = ((($26)) + 12908|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 140|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  ___assert_fail((18968|0),(1320|0),18189,(24313|0));
  // unreachable;
 }
 $32 = $5;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $5;
 $35 = ((($34)) + 12908|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $5;
 $39 = ((($38)) + 12908|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 140|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0|0);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $44 = $5;
 $45 = ((($44)) + 12908|0);
 $46 = HEAP32[$45>>2]|0;
 $6 = $46;
 $47 = $5;
 $48 = ((($47)) + 340|0);
 $9 = $48;
 $49 = $6;
 $50 = ((($49)) + 140|0);
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 $52 = $4;
 $53 = ($52|0)!=(0|0);
 if (!($53)) {
  ___assert_fail((24336|0),(1320|0),18196,(24313|0));
  // unreachable;
 }
 $54 = $5;
 $55 = ((($54)) + 340|0);
 $56 = ((($55)) + 4832|0);
 $57 = ((($56)) + 472|0);
 ;HEAP32[$16>>2]=HEAP32[$57>>2]|0;HEAP32[$16+4>>2]=HEAP32[$57+4>>2]|0;
 $58 = $9;
 $59 = $8;
 $60 = HEAP32[$59>>2]|0;
 _nk_panel_get_padding($18,$58,$60);
 ;HEAP32[$17>>2]=HEAP32[$18>>2]|0;HEAP32[$17+4>>2]=HEAP32[$18+4>>2]|0;
 $61 = +HEAPF32[$17>>2];
 $62 = 2.0 * $61;
 $13 = $62;
 $63 = $8;
 $64 = ((($63)) + 100|0);
 $65 = ((($64)) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) - 1)|0;
 $68 = (+($67|0));
 $69 = +HEAPF32[$16>>2];
 $70 = $68 * $69;
 $14 = $70;
 $71 = $8;
 $72 = ((($71)) + 8|0);
 $73 = ((($72)) + 8|0);
 $74 = +HEAPF32[$73>>2];
 $75 = $13;
 $76 = $74 - $75;
 $77 = $14;
 $78 = $76 - $77;
 $15 = $78;
 $79 = $8;
 $80 = ((($79)) + 100|0);
 $81 = HEAP32[$80>>2]|0;
 switch ($81|0) {
 case 0:  {
  $82 = $15;
  $83 = $8;
  $84 = ((($83)) + 100|0);
  $85 = ((($84)) + 12|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (+($86|0));
  $88 = $82 / $87;
  $11 = $88;
  $89 = $8;
  $90 = ((($89)) + 100|0);
  $91 = ((($90)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (+($92|0));
  $94 = $11;
  $95 = $93 * $94;
  $10 = $95;
  $96 = $8;
  $97 = ((($96)) + 100|0);
  $98 = ((($97)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (+($99|0));
  $101 = +HEAPF32[$16>>2];
  $102 = $100 * $101;
  $12 = $102;
  break;
 }
 case 1:  {
  $103 = $8;
  $104 = ((($103)) + 100|0);
  $105 = ((($104)) + 20|0);
  $106 = +HEAPF32[$105>>2];
  $107 = $15;
  $108 = $106 * $107;
  $11 = $108;
  $109 = $8;
  $110 = ((($109)) + 100|0);
  $111 = ((($110)) + 28|0);
  $112 = +HEAPF32[$111>>2];
  $10 = $112;
  $12 = 0.0;
  $113 = $7;
  $114 = ($113|0)!=(0);
  if ($114) {
   $115 = $11;
   $116 = +HEAPF32[$16>>2];
   $117 = $115 + $116;
   $118 = $8;
   $119 = ((($118)) + 100|0);
   $120 = ((($119)) + 28|0);
   $121 = +HEAPF32[$120>>2];
   $122 = $121 + $117;
   HEAPF32[$120>>2] = $122;
   $123 = $8;
   $124 = ((($123)) + 100|0);
   $125 = ((($124)) + 20|0);
   $126 = +HEAPF32[$125>>2];
   $127 = $8;
   $128 = ((($127)) + 100|0);
   $129 = ((($128)) + 32|0);
   $130 = +HEAPF32[$129>>2];
   $131 = $130 + $126;
   HEAPF32[$129>>2] = $131;
   $132 = $8;
   $133 = ((($132)) + 100|0);
   $134 = ((($133)) + 4|0);
   HEAP32[$134>>2] = 0;
  }
  break;
 }
 case 2:  {
  $135 = $8;
  $136 = ((($135)) + 32|0);
  $137 = +HEAPF32[$136>>2];
  $138 = $8;
  $139 = ((($138)) + 8|0);
  $140 = ((($139)) + 8|0);
  $141 = +HEAPF32[$140>>2];
  $142 = $8;
  $143 = ((($142)) + 100|0);
  $144 = ((($143)) + 36|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $141 * $145;
  $147 = $137 + $146;
  $148 = $4;
  HEAPF32[$148>>2] = $147;
  $149 = $8;
  $150 = ((($149)) + 24|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = HEAP32[$151>>2]|0;
  $153 = (+($152>>>0));
  $154 = $4;
  $155 = +HEAPF32[$154>>2];
  $156 = $155 - $153;
  HEAPF32[$154>>2] = $156;
  $157 = $8;
  $158 = ((($157)) + 36|0);
  $159 = +HEAPF32[$158>>2];
  $160 = $8;
  $161 = ((($160)) + 100|0);
  $162 = ((($161)) + 8|0);
  $163 = +HEAPF32[$162>>2];
  $164 = $8;
  $165 = ((($164)) + 100|0);
  $166 = ((($165)) + 36|0);
  $167 = ((($166)) + 4|0);
  $168 = +HEAPF32[$167>>2];
  $169 = $163 * $168;
  $170 = $159 + $169;
  $171 = $4;
  $172 = ((($171)) + 4|0);
  HEAPF32[$172>>2] = $170;
  $173 = $8;
  $174 = ((($173)) + 28|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = HEAP32[$175>>2]|0;
  $177 = (+($176>>>0));
  $178 = $4;
  $179 = ((($178)) + 4|0);
  $180 = +HEAPF32[$179>>2];
  $181 = $180 - $177;
  HEAPF32[$179>>2] = $181;
  $182 = $8;
  $183 = ((($182)) + 8|0);
  $184 = ((($183)) + 8|0);
  $185 = +HEAPF32[$184>>2];
  $186 = $8;
  $187 = ((($186)) + 100|0);
  $188 = ((($187)) + 36|0);
  $189 = ((($188)) + 8|0);
  $190 = +HEAPF32[$189>>2];
  $191 = $185 * $190;
  $192 = $4;
  $193 = ((($192)) + 8|0);
  HEAPF32[$193>>2] = $191;
  $194 = $8;
  $195 = ((($194)) + 100|0);
  $196 = ((($195)) + 8|0);
  $197 = +HEAPF32[$196>>2];
  $198 = $8;
  $199 = ((($198)) + 100|0);
  $200 = ((($199)) + 36|0);
  $201 = ((($200)) + 12|0);
  $202 = +HEAPF32[$201>>2];
  $203 = $197 * $202;
  $204 = $4;
  $205 = ((($204)) + 12|0);
  HEAPF32[$205>>2] = $203;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $206 = $8;
  $207 = ((($206)) + 100|0);
  $208 = ((($207)) + 16|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($209|0)!=(0|0);
  if (!($210)) {
   ___assert_fail((24343|0),(1320|0),18240,(24313|0));
   // unreachable;
  }
  $211 = $8;
  $212 = ((($211)) + 100|0);
  $213 = ((($212)) + 4|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $8;
  $216 = ((($215)) + 100|0);
  $217 = ((($216)) + 16|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($218) + ($214<<2)|0);
  $220 = +HEAPF32[$219>>2];
  $221 = $220 < 0.0;
  $222 = $8;
  $223 = ((($222)) + 100|0);
  if ($221) {
   $224 = ((($223)) + 20|0);
   $225 = +HEAPF32[$224>>2];
   $234 = $225;
  } else {
   $226 = ((($223)) + 4|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = $8;
   $229 = ((($228)) + 100|0);
   $230 = ((($229)) + 16|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (($231) + ($227<<2)|0);
   $233 = +HEAPF32[$232>>2];
   $234 = $233;
  }
  $19 = $234;
  $235 = $8;
  $236 = ((($235)) + 100|0);
  $237 = ((($236)) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (+($238|0));
  $240 = +HEAPF32[$16>>2];
  $241 = $239 * $240;
  $12 = $241;
  $242 = $19;
  $243 = $15;
  $244 = $242 * $243;
  $11 = $244;
  $245 = $8;
  $246 = ((($245)) + 100|0);
  $247 = ((($246)) + 28|0);
  $248 = +HEAPF32[$247>>2];
  $10 = $248;
  $249 = $7;
  $250 = ($249|0)!=(0);
  if ($250) {
   $251 = $11;
   $252 = $8;
   $253 = ((($252)) + 100|0);
   $254 = ((($253)) + 28|0);
   $255 = +HEAPF32[$254>>2];
   $256 = $255 + $251;
   HEAPF32[$254>>2] = $256;
   $257 = $19;
   $258 = $8;
   $259 = ((($258)) + 100|0);
   $260 = ((($259)) + 32|0);
   $261 = +HEAPF32[$260>>2];
   $262 = $261 + $257;
   HEAPF32[$260>>2] = $262;
  }
  break;
 }
 case 4:  {
  $263 = $8;
  $264 = ((($263)) + 100|0);
  $265 = ((($264)) + 20|0);
  $266 = +HEAPF32[$265>>2];
  $11 = $266;
  $267 = $8;
  $268 = ((($267)) + 100|0);
  $269 = ((($268)) + 4|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = (+($270|0));
  $272 = $11;
  $273 = $271 * $272;
  $10 = $273;
  $274 = $8;
  $275 = ((($274)) + 100|0);
  $276 = ((($275)) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = (+($277|0));
  $279 = +HEAPF32[$16>>2];
  $280 = $278 * $279;
  $12 = $280;
  break;
 }
 case 5:  {
  $281 = $8;
  $282 = ((($281)) + 100|0);
  $283 = ((($282)) + 20|0);
  $284 = +HEAPF32[$283>>2];
  $11 = $284;
  $285 = $8;
  $286 = ((($285)) + 100|0);
  $287 = ((($286)) + 28|0);
  $288 = +HEAPF32[$287>>2];
  $10 = $288;
  $289 = $8;
  $290 = ((($289)) + 100|0);
  $291 = ((($290)) + 4|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = (+($292|0));
  $294 = +HEAPF32[$16>>2];
  $295 = $293 * $294;
  $12 = $295;
  $296 = $7;
  $297 = ($296|0)!=(0);
  if ($297) {
   $298 = $11;
   $299 = $8;
   $300 = ((($299)) + 100|0);
   $301 = ((($300)) + 28|0);
   $302 = +HEAPF32[$301>>2];
   $303 = $302 + $298;
   HEAPF32[$301>>2] = $303;
  }
  break;
 }
 case 6:  {
  $304 = $8;
  $305 = ((($304)) + 32|0);
  $306 = +HEAPF32[$305>>2];
  $307 = $8;
  $308 = ((($307)) + 100|0);
  $309 = ((($308)) + 36|0);
  $310 = +HEAPF32[$309>>2];
  $311 = $306 + $310;
  $312 = $4;
  HEAPF32[$312>>2] = $311;
  $313 = $8;
  $314 = ((($313)) + 100|0);
  $315 = ((($314)) + 36|0);
  $316 = ((($315)) + 8|0);
  $317 = +HEAPF32[$316>>2];
  $318 = $4;
  $319 = ((($318)) + 8|0);
  HEAPF32[$319>>2] = $317;
  $320 = $4;
  $321 = +HEAPF32[$320>>2];
  $322 = $4;
  $323 = ((($322)) + 8|0);
  $324 = +HEAPF32[$323>>2];
  $325 = $321 + $324;
  $326 = $8;
  $327 = ((($326)) + 40|0);
  $328 = +HEAPF32[$327>>2];
  $329 = $325 > $328;
  $330 = $7;
  $331 = ($330|0)!=(0);
  $or$cond = $329 & $331;
  if ($or$cond) {
   $332 = $4;
   $333 = +HEAPF32[$332>>2];
   $334 = $4;
   $335 = ((($334)) + 8|0);
   $336 = +HEAPF32[$335>>2];
   $337 = $333 + $336;
   $338 = $8;
   $339 = ((($338)) + 40|0);
   HEAPF32[$339>>2] = $337;
  }
  $340 = $8;
  $341 = ((($340)) + 24|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = HEAP32[$342>>2]|0;
  $344 = (+($343>>>0));
  $345 = $4;
  $346 = +HEAPF32[$345>>2];
  $347 = $346 - $344;
  HEAPF32[$345>>2] = $347;
  $348 = $8;
  $349 = ((($348)) + 36|0);
  $350 = +HEAPF32[$349>>2];
  $351 = $8;
  $352 = ((($351)) + 100|0);
  $353 = ((($352)) + 36|0);
  $354 = ((($353)) + 4|0);
  $355 = +HEAPF32[$354>>2];
  $356 = $350 + $355;
  $357 = $4;
  $358 = ((($357)) + 4|0);
  HEAPF32[$358>>2] = $356;
  $359 = $8;
  $360 = ((($359)) + 28|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = HEAP32[$361>>2]|0;
  $363 = (+($362>>>0));
  $364 = $4;
  $365 = ((($364)) + 4|0);
  $366 = +HEAPF32[$365>>2];
  $367 = $366 - $363;
  HEAPF32[$365>>2] = $367;
  $368 = $8;
  $369 = ((($368)) + 100|0);
  $370 = ((($369)) + 36|0);
  $371 = ((($370)) + 12|0);
  $372 = +HEAPF32[$371>>2];
  $373 = $4;
  $374 = ((($373)) + 12|0);
  HEAPF32[$374>>2] = $372;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $375 = $8;
  $376 = ((($375)) + 100|0);
  $377 = ((($376)) + 4|0);
  $378 = HEAP32[$377>>2]|0;
  $379 = (+($378|0));
  $380 = +HEAPF32[$16>>2];
  $381 = $379 * $380;
  $12 = $381;
  $382 = $8;
  $383 = ((($382)) + 100|0);
  $384 = ((($383)) + 4|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = $8;
  $387 = ((($386)) + 100|0);
  $388 = ((($387)) + 16|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = (($389) + ($385<<2)|0);
  $391 = +HEAPF32[$390>>2];
  $11 = $391;
  $392 = $8;
  $393 = ((($392)) + 100|0);
  $394 = ((($393)) + 28|0);
  $395 = +HEAPF32[$394>>2];
  $10 = $395;
  $396 = $7;
  $397 = ($396|0)!=(0);
  if ($397) {
   $398 = $11;
   $399 = $8;
   $400 = ((($399)) + 100|0);
   $401 = ((($400)) + 28|0);
   $402 = +HEAPF32[$401>>2];
   $403 = $402 + $398;
   HEAPF32[$401>>2] = $403;
  }
  break;
 }
 default: {
  ___assert_fail((22521|0),(1320|0),18285,(24313|0));
  // unreachable;
 }
 }
 $404 = $11;
 $405 = $4;
 $406 = ((($405)) + 8|0);
 HEAPF32[$406>>2] = $404;
 $407 = $8;
 $408 = ((($407)) + 100|0);
 $409 = ((($408)) + 8|0);
 $410 = +HEAPF32[$409>>2];
 $411 = ((($16)) + 4|0);
 $412 = +HEAPF32[$411>>2];
 $413 = $410 - $412;
 $414 = $4;
 $415 = ((($414)) + 12|0);
 HEAPF32[$415>>2] = $413;
 $416 = $8;
 $417 = ((($416)) + 36|0);
 $418 = +HEAPF32[$417>>2];
 $419 = $8;
 $420 = ((($419)) + 28|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = HEAP32[$421>>2]|0;
 $423 = (+($422>>>0));
 $424 = $418 - $423;
 $425 = $4;
 $426 = ((($425)) + 4|0);
 HEAPF32[$426>>2] = $424;
 $427 = $8;
 $428 = ((($427)) + 32|0);
 $429 = +HEAPF32[$428>>2];
 $430 = $10;
 $431 = $429 + $430;
 $432 = $12;
 $433 = $431 + $432;
 $434 = +HEAPF32[$17>>2];
 $435 = $433 + $434;
 $436 = $4;
 HEAPF32[$436>>2] = $435;
 $437 = $4;
 $438 = +HEAPF32[$437>>2];
 $439 = $4;
 $440 = ((($439)) + 8|0);
 $441 = +HEAPF32[$440>>2];
 $442 = $438 + $441;
 $443 = $8;
 $444 = ((($443)) + 40|0);
 $445 = +HEAPF32[$444>>2];
 $446 = $442 > $445;
 $447 = $7;
 $448 = ($447|0)!=(0);
 $or$cond3 = $446 & $448;
 if ($or$cond3) {
  $449 = $4;
  $450 = +HEAPF32[$449>>2];
  $451 = $4;
  $452 = ((($451)) + 8|0);
  $453 = +HEAPF32[$452>>2];
  $454 = $450 + $453;
  $455 = $8;
  $456 = ((($455)) + 40|0);
  HEAPF32[$456>>2] = $454;
 }
 $457 = $8;
 $458 = ((($457)) + 24|0);
 $459 = HEAP32[$458>>2]|0;
 $460 = HEAP32[$459>>2]|0;
 $461 = (+($460>>>0));
 $462 = $4;
 $463 = +HEAPF32[$462>>2];
 $464 = $463 - $461;
 HEAPF32[$462>>2] = $464;
 STACKTOP = sp;return;
}
function _nk_draw_button_text($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 72|0;
 $18 = sp + 16|0;
 $20 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $12;
 $24 = $13;
 $25 = (_nk_draw_button($21,$22,$23,$24)|0);
 $19 = $25;
 $26 = $19;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 $29 = ((($18)) + 8|0);
 if ($28) {
  $30 = $19;
  $31 = ((($30)) + 4|0);
  ;HEAP32[$29>>2]=HEAP32[$31>>2]|0;
 } else {
  $32 = $13;
  $33 = ((($32)) + 64|0);
  ;HEAP32[$29>>2]=HEAP32[$33>>2]|0;
 }
 $34 = $12;
 $35 = $34 & 16;
 $36 = ($35|0)!=(0);
 do {
  if ($36) {
   $37 = ((($18)) + 12|0);
   $38 = $13;
   $39 = ((($38)) + 72|0);
   ;HEAP32[$37>>2]=HEAP32[$39>>2]|0;
  } else {
   $40 = $12;
   $41 = $40 & 32;
   $42 = ($41|0)!=(0);
   $43 = ((($18)) + 12|0);
   $44 = $13;
   if ($42) {
    $45 = ((($44)) + 76|0);
    ;HEAP32[$43>>2]=HEAP32[$45>>2]|0;
    break;
   } else {
    $46 = ((($44)) + 68|0);
    ;HEAP32[$43>>2]=HEAP32[$46>>2]|0;
    break;
   }
  }
 } while(0);
 _nk_vec2($20,0.0,0.0);
 ;HEAP32[$18>>2]=HEAP32[$20>>2]|0;HEAP32[$18+4>>2]=HEAP32[$20+4>>2]|0;
 $47 = $9;
 $48 = $11;
 $49 = $14;
 $50 = $15;
 $51 = $16;
 $52 = $17;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$48>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$48+12>>2]|0;
 _nk_widget_text($47,$$byval_copy,$49,$50,$18,$51,$52);
 STACKTOP = sp;return;
}
function _nk_draw_button_text_symbol($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy3 = sp + 88|0;
 $$byval_copy2 = sp + 112|0;
 $$byval_copy1 = sp + 108|0;
 $$byval_copy = sp + 72|0;
 $20 = sp + 104|0;
 $21 = sp + 16|0;
 $23 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $14;
 $27 = $15;
 $28 = (_nk_draw_button($24,$25,$26,$27)|0);
 $22 = $28;
 $29 = $22;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 $32 = ((($21)) + 8|0);
 if ($31) {
  $33 = $22;
  $34 = ((($33)) + 4|0);
  ;HEAP32[$32>>2]=HEAP32[$34>>2]|0;
 } else {
  $35 = $15;
  $36 = ((($35)) + 64|0);
  ;HEAP32[$32>>2]=HEAP32[$36>>2]|0;
 }
 $37 = $14;
 $38 = $37 & 16;
 $39 = ($38|0)!=(0);
 do {
  if ($39) {
   $40 = $15;
   $41 = ((($40)) + 72|0);
   ;HEAP8[$20>>0]=HEAP8[$41>>0]|0;HEAP8[$20+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$41+3>>0]|0;
   $42 = ((($21)) + 12|0);
   $43 = $15;
   $44 = ((($43)) + 72|0);
   ;HEAP32[$42>>2]=HEAP32[$44>>2]|0;
  } else {
   $45 = $14;
   $46 = $45 & 32;
   $47 = ($46|0)!=(0);
   $48 = $15;
   if ($47) {
    $49 = ((($48)) + 76|0);
    ;HEAP8[$20>>0]=HEAP8[$49>>0]|0;HEAP8[$20+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$49+3>>0]|0;
    $50 = ((($21)) + 12|0);
    $51 = $15;
    $52 = ((($51)) + 76|0);
    ;HEAP32[$50>>2]=HEAP32[$52>>2]|0;
    break;
   } else {
    $53 = ((($48)) + 68|0);
    ;HEAP8[$20>>0]=HEAP8[$53>>0]|0;HEAP8[$20+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$53+3>>0]|0;
    $54 = ((($21)) + 12|0);
    $55 = $15;
    $56 = ((($55)) + 68|0);
    ;HEAP32[$54>>2]=HEAP32[$56>>2]|0;
    break;
   }
  }
 } while(0);
 _nk_vec2($23,0.0,0.0);
 ;HEAP32[$21>>2]=HEAP32[$23>>2]|0;HEAP32[$21+4>>2]=HEAP32[$23+4>>2]|0;
 $57 = $10;
 $58 = $18;
 $59 = $13;
 $60 = $15;
 $61 = ((($60)) + 64|0);
 $62 = $19;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$59>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$59+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$59+12>>2]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$61>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$61+3>>0]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$20+3>>0]|0;
 _nk_draw_symbol($57,$58,$$byval_copy,$$byval_copy1,$$byval_copy2,0.0,$62);
 $63 = $10;
 $64 = $12;
 $65 = $16;
 $66 = $17;
 $67 = $19;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$64>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$64+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$64+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$64+12>>2]|0;
 _nk_widget_text($63,$$byval_copy3,$65,$66,$21,18,$67);
 STACKTOP = sp;return;
}
function _nk_draw_selectable($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy6 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $nk_white$byval_copy = 0, $nk_white$byval_copy5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy6 = sp + 112|0;
 $nk_white$byval_copy5 = sp + 140|0;
 $$byval_copy4 = sp + 96|0;
 $$byval_copy3 = sp + 136|0;
 $$byval_copy2 = sp + 80|0;
 $nk_white$byval_copy = sp + 132|0;
 $$byval_copy = sp + 64|0;
 $23 = sp;
 $24 = sp + 128|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $25 = $13;
 $26 = ((($25)) + 156|0);
 ;HEAP32[$23>>2]=HEAP32[$26>>2]|0;HEAP32[$23+4>>2]=HEAP32[$26+4>>2]|0;
 $27 = $14;
 $28 = ($27|0)!=(0);
 $29 = $12;
 $30 = $29 & 32;
 $31 = ($30|0)!=(0);
 do {
  if ($28) {
   if ($31) {
    $48 = $13;
    $49 = ((($48)) + 100|0);
    $22 = $49;
    $50 = ((($23)) + 12|0);
    $51 = $13;
    $52 = ((($51)) + 140|0);
    ;HEAP32[$50>>2]=HEAP32[$52>>2]|0;
    break;
   }
   $53 = $12;
   $54 = $53 & 16;
   $55 = ($54|0)!=(0);
   $56 = $13;
   if ($55) {
    $57 = ((($56)) + 80|0);
    $22 = $57;
    $58 = ((($23)) + 12|0);
    $59 = $13;
    $60 = ((($59)) + 136|0);
    ;HEAP32[$58>>2]=HEAP32[$60>>2]|0;
    break;
   } else {
    $61 = ((($56)) + 60|0);
    $22 = $61;
    $62 = ((($23)) + 12|0);
    $63 = $13;
    $64 = ((($63)) + 132|0);
    ;HEAP32[$62>>2]=HEAP32[$64>>2]|0;
    break;
   }
  } else {
   if ($31) {
    $32 = $13;
    $33 = ((($32)) + 40|0);
    $22 = $33;
    $34 = ((($23)) + 12|0);
    $35 = $13;
    $36 = ((($35)) + 128|0);
    ;HEAP32[$34>>2]=HEAP32[$36>>2]|0;
    break;
   }
   $37 = $12;
   $38 = $37 & 16;
   $39 = ($38|0)!=(0);
   $40 = $13;
   if ($39) {
    $41 = ((($40)) + 20|0);
    $22 = $41;
    $42 = ((($23)) + 12|0);
    $43 = $13;
    $44 = ((($43)) + 124|0);
    ;HEAP32[$42>>2]=HEAP32[$44>>2]|0;
    break;
   } else {
    $22 = $40;
    $45 = ((($23)) + 12|0);
    $46 = $13;
    $47 = ((($46)) + 120|0);
    ;HEAP32[$45>>2]=HEAP32[$47>>2]|0;
    break;
   }
  }
 } while(0);
 $65 = $22;
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(1);
 $68 = $11;
 $69 = $15;
 if ($67) {
  $70 = $22;
  $71 = ((($70)) + 4|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$69>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$69+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$69+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$69+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($68,$$byval_copy,$71,$nk_white$byval_copy);
  $72 = ((($23)) + 8|0);
  _nk_rgba($24,0,0,0,0);
  ;HEAP8[$72>>0]=HEAP8[$24>>0]|0;HEAP8[$72+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$72+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$72+3>>0]=HEAP8[$24+3>>0]|0;
 } else {
  $73 = $13;
  $74 = ((($73)) + 152|0);
  $75 = +HEAPF32[$74>>2];
  $76 = $22;
  $77 = ((($76)) + 4|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$69>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$69+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$69+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$69+12>>2]|0;
  ;HEAP8[$$byval_copy3>>0]=HEAP8[$77>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$77+3>>0]|0;
  _nk_fill_rect($68,$$byval_copy2,$75,$$byval_copy3);
  $78 = ((($23)) + 8|0);
  $79 = $22;
  $80 = ((($79)) + 4|0);
  ;HEAP32[$78>>2]=HEAP32[$80>>2]|0;
 }
 $81 = $17;
 $82 = ($81|0)!=(0|0);
 $83 = $16;
 $84 = ($83|0)!=(0|0);
 $or$cond = $82 & $84;
 if (!($or$cond)) {
  $88 = $11;
  $89 = $15;
  $90 = $18;
  $91 = $19;
  $92 = $20;
  $93 = $21;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$89>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$89+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$89+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$89+12>>2]|0;
  _nk_widget_text($88,$$byval_copy6,$90,$91,$23,$92,$93);
  STACKTOP = sp;return;
 }
 $85 = $11;
 $86 = $16;
 $87 = $17;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$86>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$86+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$86+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$86+12>>2]|0;
 ;HEAP8[$nk_white$byval_copy5>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy5+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy5+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy5+3>>0]=HEAP8[19725+3>>0]|0;
 _nk_draw_image($85,$$byval_copy4,$87,$nk_white$byval_copy5);
 $88 = $11;
 $89 = $15;
 $90 = $18;
 $91 = $19;
 $92 = $20;
 $93 = $21;
 ;HEAP32[$$byval_copy6>>2]=HEAP32[$89>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$89+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$89+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$89+12>>2]|0;
 _nk_widget_text($88,$$byval_copy6,$90,$91,$23,$92,$93);
 STACKTOP = sp;return;
}
function _nk_toggle_behavior($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 48|0;
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $2;
 $6 = $3;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2;
 $10 = ($9|0)!=(0);
 $11 = $5;
 if ($10) {
  HEAP32[$11>>2] = 6;
 } else {
  HEAP32[$11>>2] = 4;
 }
 $12 = $5;
 $13 = $4;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 $14 = (_nk_button_behavior($12,$$byval_copy,$13,0)|0);
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $5;
  HEAP32[$16>>2] = 34;
  $17 = $6;
  $18 = ($17|0)!=(0);
  $19 = $18 ^ 1;
  $20 = $19&1;
  $6 = $20;
 }
 $21 = $5;
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 16;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $4;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$1+12>>2]|0;
  $26 = (_nk_input_is_mouse_prev_hovering_rect($25,$$byval_copy1)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   $28 = $5;
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 | 8;
   HEAP32[$28>>2] = $30;
   $37 = $6;
   STACKTOP = sp;return ($37|0);
  }
 }
 $31 = $4;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$1+12>>2]|0;
 $32 = (_nk_input_is_mouse_prev_hovering_rect($31,$$byval_copy2)|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $37 = $6;
  STACKTOP = sp;return ($37|0);
 }
 $34 = $5;
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 | 64;
 HEAP32[$34>>2] = $36;
 $37 = $6;
 STACKTOP = sp;return ($37|0);
}
function _nk_draw_checkbox($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $nk_white$byval_copy = 0, $nk_white$byval_copy7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy10 = sp + 176|0;
 $$byval_copy9 = sp + 208|0;
 $$byval_copy8 = sp + 160|0;
 $nk_white$byval_copy7 = sp + 204|0;
 $$byval_copy6 = sp + 144|0;
 $nk_white$byval_copy = sp + 200|0;
 $$byval_copy5 = sp + 128|0;
 $$byval_copy4 = sp + 196|0;
 $$byval_copy3 = sp + 112|0;
 $$byval_copy2 = sp + 96|0;
 $$byval_copy1 = sp + 192|0;
 $$byval_copy = sp + 80|0;
 $22 = sp + 16|0;
 $23 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $24 = $11;
 $25 = $24 & 16;
 $26 = ($25|0)!=(0);
 do {
  if ($26) {
   $27 = $12;
   $28 = ((($27)) + 20|0);
   $20 = $28;
   $29 = $12;
   $30 = ((($29)) + 84|0);
   $21 = $30;
   $31 = ((($22)) + 12|0);
   $32 = $12;
   $33 = ((($32)) + 108|0);
   ;HEAP32[$31>>2]=HEAP32[$33>>2]|0;
  } else {
   $34 = $11;
   $35 = $34 & 32;
   $36 = ($35|0)!=(0);
   $37 = $12;
   if ($36) {
    $38 = ((($37)) + 20|0);
    $20 = $38;
    $39 = $12;
    $40 = ((($39)) + 84|0);
    $21 = $40;
    $41 = ((($22)) + 12|0);
    $42 = $12;
    $43 = ((($42)) + 112|0);
    ;HEAP32[$41>>2]=HEAP32[$43>>2]|0;
    break;
   } else {
    $20 = $37;
    $44 = $12;
    $45 = ((($44)) + 64|0);
    $21 = $45;
    $46 = ((($22)) + 12|0);
    $47 = $12;
    $48 = ((($47)) + 104|0);
    ;HEAP32[$46>>2]=HEAP32[$48>>2]|0;
    break;
   }
  }
 } while(0);
 $49 = $20;
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0);
 $52 = $10;
 $53 = $15;
 if ($51) {
  $54 = $12;
  $55 = ((($54)) + 60|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$53+12>>2]|0;
  ;HEAP8[$$byval_copy1>>0]=HEAP8[$55>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$55+3>>0]|0;
  _nk_fill_rect($52,$$byval_copy,0.0,$$byval_copy1);
  $56 = $10;
  $57 = $15;
  $58 = $12;
  $59 = ((($58)) + 144|0);
  $60 = +HEAPF32[$59>>2];
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$57>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$57+12>>2]|0;
  _nk_shrink_rect($23,$$byval_copy2,$60);
  $61 = $20;
  $62 = ((($61)) + 4|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$23+12>>2]|0;
  ;HEAP8[$$byval_copy4>>0]=HEAP8[$62>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$62+3>>0]|0;
  _nk_fill_rect($56,$$byval_copy3,0.0,$$byval_copy4);
 } else {
  $63 = $20;
  $64 = ((($63)) + 4|0);
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$53+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($52,$$byval_copy5,$64,$nk_white$byval_copy);
 }
 $65 = $13;
 $66 = ($65|0)!=(0);
 do {
  if ($66) {
   $67 = $21;
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(1);
   $70 = $10;
   $71 = $16;
   $72 = $21;
   $73 = ((($72)) + 4|0);
   if ($69) {
    ;HEAP32[$$byval_copy6>>2]=HEAP32[$71>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$71+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$71+12>>2]|0;
    ;HEAP8[$nk_white$byval_copy7>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy7+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy7+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy7+3>>0]=HEAP8[19725+3>>0]|0;
    _nk_draw_image($70,$$byval_copy6,$73,$nk_white$byval_copy7);
    break;
   } else {
    ;HEAP32[$$byval_copy8>>2]=HEAP32[$71>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$71+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$71+12>>2]|0;
    ;HEAP8[$$byval_copy9>>0]=HEAP8[$73>>0]|0;HEAP8[$$byval_copy9+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$$byval_copy9+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$$byval_copy9+3>>0]=HEAP8[$73+3>>0]|0;
    _nk_fill_rect($70,$$byval_copy8,0.0,$$byval_copy9);
    break;
   }
  }
 } while(0);
 HEAPF32[$22>>2] = 0.0;
 $74 = ((($22)) + 4|0);
 HEAPF32[$74>>2] = 0.0;
 $75 = ((($22)) + 8|0);
 $76 = $12;
 $77 = ((($76)) + 116|0);
 ;HEAP32[$75>>2]=HEAP32[$77>>2]|0;
 $78 = $10;
 $79 = $14;
 $80 = $17;
 $81 = $18;
 $82 = $19;
 ;HEAP32[$$byval_copy10>>2]=HEAP32[$79>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$79+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$79+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$79+12>>2]|0;
 _nk_widget_text($78,$$byval_copy10,$80,$81,$22,17,$82);
 STACKTOP = sp;return;
}
function _nk_draw_option($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $nk_white$byval_copy = 0, $nk_white$byval_copy7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy10 = sp + 176|0;
 $$byval_copy9 = sp + 208|0;
 $$byval_copy8 = sp + 160|0;
 $nk_white$byval_copy7 = sp + 204|0;
 $$byval_copy6 = sp + 144|0;
 $nk_white$byval_copy = sp + 200|0;
 $$byval_copy5 = sp + 128|0;
 $$byval_copy4 = sp + 196|0;
 $$byval_copy3 = sp + 112|0;
 $$byval_copy2 = sp + 96|0;
 $$byval_copy1 = sp + 192|0;
 $$byval_copy = sp + 80|0;
 $22 = sp + 16|0;
 $23 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $24 = $11;
 $25 = $24 & 16;
 $26 = ($25|0)!=(0);
 do {
  if ($26) {
   $27 = $12;
   $28 = ((($27)) + 20|0);
   $20 = $28;
   $29 = $12;
   $30 = ((($29)) + 84|0);
   $21 = $30;
   $31 = ((($22)) + 12|0);
   $32 = $12;
   $33 = ((($32)) + 108|0);
   ;HEAP32[$31>>2]=HEAP32[$33>>2]|0;
  } else {
   $34 = $11;
   $35 = $34 & 32;
   $36 = ($35|0)!=(0);
   $37 = $12;
   if ($36) {
    $38 = ((($37)) + 20|0);
    $20 = $38;
    $39 = $12;
    $40 = ((($39)) + 84|0);
    $21 = $40;
    $41 = ((($22)) + 12|0);
    $42 = $12;
    $43 = ((($42)) + 112|0);
    ;HEAP32[$41>>2]=HEAP32[$43>>2]|0;
    break;
   } else {
    $20 = $37;
    $44 = $12;
    $45 = ((($44)) + 64|0);
    $21 = $45;
    $46 = ((($22)) + 12|0);
    $47 = $12;
    $48 = ((($47)) + 104|0);
    ;HEAP32[$46>>2]=HEAP32[$48>>2]|0;
    break;
   }
  }
 } while(0);
 $49 = $20;
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0);
 $52 = $10;
 $53 = $15;
 if ($51) {
  $54 = $12;
  $55 = ((($54)) + 60|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$53+12>>2]|0;
  ;HEAP8[$$byval_copy1>>0]=HEAP8[$55>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$55+3>>0]|0;
  _nk_fill_circle($52,$$byval_copy,$$byval_copy1);
  $56 = $10;
  $57 = $15;
  $58 = $12;
  $59 = ((($58)) + 144|0);
  $60 = +HEAPF32[$59>>2];
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$57>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$57+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$57+12>>2]|0;
  _nk_shrink_rect($23,$$byval_copy2,$60);
  $61 = $20;
  $62 = ((($61)) + 4|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$23>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$23+12>>2]|0;
  ;HEAP8[$$byval_copy4>>0]=HEAP8[$62>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$62+3>>0]|0;
  _nk_fill_circle($56,$$byval_copy3,$$byval_copy4);
 } else {
  $63 = $20;
  $64 = ((($63)) + 4|0);
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$53>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$53+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($52,$$byval_copy5,$64,$nk_white$byval_copy);
 }
 $65 = $13;
 $66 = ($65|0)!=(0);
 do {
  if ($66) {
   $67 = $21;
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(1);
   $70 = $10;
   $71 = $16;
   $72 = $21;
   $73 = ((($72)) + 4|0);
   if ($69) {
    ;HEAP32[$$byval_copy6>>2]=HEAP32[$71>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$71+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$71+12>>2]|0;
    ;HEAP8[$nk_white$byval_copy7>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy7+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy7+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy7+3>>0]=HEAP8[19725+3>>0]|0;
    _nk_draw_image($70,$$byval_copy6,$73,$nk_white$byval_copy7);
    break;
   } else {
    ;HEAP32[$$byval_copy8>>2]=HEAP32[$71>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$71+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$71+12>>2]|0;
    ;HEAP8[$$byval_copy9>>0]=HEAP8[$73>>0]|0;HEAP8[$$byval_copy9+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$$byval_copy9+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$$byval_copy9+3>>0]=HEAP8[$73+3>>0]|0;
    _nk_fill_circle($70,$$byval_copy8,$$byval_copy9);
    break;
   }
  }
 } while(0);
 HEAPF32[$22>>2] = 0.0;
 $74 = ((($22)) + 4|0);
 HEAPF32[$74>>2] = 0.0;
 $75 = ((($22)) + 8|0);
 $76 = $12;
 $77 = ((($76)) + 116|0);
 ;HEAP32[$75>>2]=HEAP32[$77>>2]|0;
 $78 = $10;
 $79 = $14;
 $80 = $17;
 $81 = $18;
 $82 = $19;
 ;HEAP32[$$byval_copy10>>2]=HEAP32[$79>>2]|0;HEAP32[$$byval_copy10+4>>2]=HEAP32[$79+4>>2]|0;HEAP32[$$byval_copy10+8>>2]=HEAP32[$79+8>>2]|0;HEAP32[$$byval_copy10+12>>2]=HEAP32[$79+12>>2]|0;
 _nk_widget_text($78,$$byval_copy10,$80,$81,$22,17,$82);
 STACKTOP = sp;return;
}
function _nk_slider_behavior($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = +$9;
 $10 = +$10;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0;
 var $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0, $89 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy4 = sp + 112|0;
 $$byval_copy3 = sp + 96|0;
 $$byval_copy2 = sp + 80|0;
 $$byval_copy = sp + 64|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $10;
 $27 = $11;
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 2;
 $30 = ($29|0)!=(0);
 $31 = $11;
 if ($30) {
  HEAP32[$31>>2] = 6;
 } else {
  HEAP32[$31>>2] = 4;
 }
 $32 = $14;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $14;
  $35 = ((($34)) + 260|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(0);
  $39 = $37;
 } else {
  $39 = 0;
 }
 $38 = $39&1;
 $21 = $38;
 $40 = $14;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $14;
  $43 = $13;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$43+12>>2]|0;
  $44 = (_nk_input_has_mouse_click_down_in_rect($42,0,$$byval_copy,1)|0);
  $45 = ($44|0)!=(0);
  $47 = $45;
 } else {
  $47 = 0;
 }
 $46 = $47&1;
 $22 = $46;
 $48 = $21;
 $49 = ($48|0)!=(0);
 $50 = $22;
 $51 = ($50|0)!=(0);
 $or$cond = $49 & $51;
 if ($or$cond) {
  $23 = 0.0;
  $52 = $14;
  $53 = ((($52)) + 260|0);
  $54 = ((($53)) + 48|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $13;
  $57 = +HEAPF32[$56>>2];
  $58 = $13;
  $59 = ((($58)) + 8|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $60 / 2.0;
  $62 = $57 + $61;
  $63 = $55 - $62;
  $24 = $63;
  $64 = ((($5)) + 8|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $15;
  $67 = ((($66)) + 152|0);
  $68 = +HEAPF32[$67>>2];
  $69 = 2.0 * $68;
  $70 = $65 - $69;
  $71 = $20;
  $72 = $70 / $71;
  $25 = $72;
  $73 = $11;
  HEAP32[$73>>2] = 34;
  $74 = $24;
  $75 = $74 < 0.0;
  $76 = $24;
  $77 = -$76;
  $78 = $75 ? $77 : $76;
  $79 = $25;
  $80 = $78 >= $79;
  if ($80) {
   $81 = $24;
   $82 = $81 < 0.0;
   $83 = $24;
   $84 = -$83;
   $85 = $82 ? $84 : $83;
   $86 = $25;
   $87 = $85 / $86;
   $88 = (~~(($87)));
   $89 = (+($88|0));
   $26 = $89;
   $90 = $24;
   $91 = $90 > 0.0;
   $92 = $19;
   $93 = $26;
   $94 = $92 * $93;
   $95 = -$94;
   $96 = $91 ? $94 : $95;
   $97 = $18;
   $98 = $97 + $96;
   $18 = $98;
   $99 = $18;
   $100 = $17;
   $101 = $99 < $100;
   $102 = $18;
   $103 = $17;
   $104 = $101 ? $102 : $103;
   $105 = $16;
   $106 = $104 < $105;
   if ($106) {
    $107 = $16;
    $114 = $107;
   } else {
    $108 = $18;
    $109 = $17;
    $110 = $108 < $109;
    $111 = $18;
    $112 = $17;
    $113 = $110 ? $111 : $112;
    $114 = $113;
   }
   $18 = $114;
   $115 = $18;
   $116 = $16;
   $117 = $115 - $116;
   $118 = $19;
   $119 = $117 / $118;
   $23 = $119;
   $120 = +HEAPF32[$5>>2];
   $121 = $12;
   $122 = ((($121)) + 8|0);
   $123 = +HEAPF32[$122>>2];
   $124 = $23;
   $125 = $123 * $124;
   $126 = $120 + $125;
   $127 = $12;
   HEAPF32[$127>>2] = $126;
   $128 = $12;
   $129 = +HEAPF32[$128>>2];
   $130 = $12;
   $131 = ((($130)) + 8|0);
   $132 = +HEAPF32[$131>>2];
   $133 = $132 / 2.0;
   $134 = $129 + $133;
   $135 = $14;
   $136 = ((($135)) + 260|0);
   $137 = ((($136)) + 8|0);
   HEAPF32[$137>>2] = $134;
  }
 }
 $138 = $14;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$5+12>>2]|0;
 $139 = (_nk_input_is_mouse_hovering_rect($138,$$byval_copy2)|0);
 $140 = ($139|0)!=(0);
 if ($140) {
  $141 = $11;
  HEAP32[$141>>2] = 18;
 }
 $142 = $11;
 $143 = HEAP32[$142>>2]|0;
 $144 = $143 & 16;
 $145 = ($144|0)!=(0);
 if ($145) {
  $146 = $14;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$5+12>>2]|0;
  $147 = (_nk_input_is_mouse_prev_hovering_rect($146,$$byval_copy3)|0);
  $148 = ($147|0)!=(0);
  if (!($148)) {
   $149 = $11;
   $150 = HEAP32[$149>>2]|0;
   $151 = $150 | 8;
   HEAP32[$149>>2] = $151;
   $158 = $18;
   STACKTOP = sp;return (+$158);
  }
 }
 $152 = $14;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$5+12>>2]|0;
 $153 = (_nk_input_is_mouse_prev_hovering_rect($152,$$byval_copy4)|0);
 $154 = ($153|0)!=(0);
 if (!($154)) {
  $158 = $18;
  STACKTOP = sp;return (+$158);
 }
 $155 = $11;
 $156 = HEAP32[$155>>2]|0;
 $157 = $156 | 64;
 HEAP32[$155>>2] = $157;
 $158 = $18;
 STACKTOP = sp;return (+$158);
}
function _nk_draw_slider($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0.0;
 var $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0;
 var $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $nk_white$byval_copy = 0, $nk_white$byval_copy10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy12 = sp + 212|0;
 $$byval_copy11 = sp + 168|0;
 $nk_white$byval_copy10 = sp + 208|0;
 $$byval_copy9 = sp + 152|0;
 $$byval_copy8 = sp + 204|0;
 $$byval_copy7 = sp + 136|0;
 $$byval_copy6 = sp + 200|0;
 $$byval_copy5 = sp + 120|0;
 $$byval_copy4 = sp + 196|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 192|0;
 $$byval_copy1 = sp + 88|0;
 $nk_white$byval_copy = sp + 188|0;
 $$byval_copy = sp + 72|0;
 $16 = sp + 24|0;
 $17 = sp + 8|0;
 $19 = sp + 184|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $21 = $9;
 $22 = $21 & 32;
 $23 = ($22|0)!=(0);
 do {
  if ($23) {
   $24 = $10;
   $25 = ((($24)) + 40|0);
   $18 = $25;
   $26 = $10;
   $27 = ((($26)) + 72|0);
   ;HEAP8[$19>>0]=HEAP8[$27>>0]|0;HEAP8[$19+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$27+3>>0]|0;
   $28 = $10;
   $29 = ((($28)) + 120|0);
   $20 = $29;
  } else {
   $30 = $9;
   $31 = $30 & 16;
   $32 = ($31|0)!=(0);
   $33 = $10;
   if ($32) {
    $34 = ((($33)) + 20|0);
    $18 = $34;
    $35 = $10;
    $36 = ((($35)) + 68|0);
    ;HEAP8[$19>>0]=HEAP8[$36>>0]|0;HEAP8[$19+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$36+3>>0]|0;
    $37 = $10;
    $38 = ((($37)) + 100|0);
    $20 = $38;
    break;
   } else {
    $18 = $33;
    $39 = $10;
    $40 = ((($39)) + 64|0);
    ;HEAP8[$19>>0]=HEAP8[$40>>0]|0;HEAP8[$19+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$40+3>>0]|0;
    $41 = $10;
    $42 = ((($41)) + 80|0);
    $20 = $42;
    break;
   }
  }
 } while(0);
 $43 = $11;
 $44 = +HEAPF32[$43>>2];
 HEAPF32[$17>>2] = $44;
 $45 = $12;
 $46 = ((($45)) + 4|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $12;
 $49 = ((($48)) + 12|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $50 / 2.0;
 $52 = $47 + $51;
 $53 = $11;
 $54 = ((($53)) + 12|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $55 / 12.0;
 $57 = $52 - $56;
 $58 = ((($17)) + 4|0);
 HEAPF32[$58>>2] = $57;
 $59 = $11;
 $60 = ((($59)) + 8|0);
 $61 = +HEAPF32[$60>>2];
 $62 = ((($17)) + 8|0);
 HEAPF32[$62>>2] = $61;
 $63 = $11;
 $64 = ((($63)) + 12|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $65 / 6.0;
 $67 = ((($17)) + 12|0);
 HEAPF32[$67>>2] = $66;
 $68 = $12;
 $69 = +HEAPF32[$68>>2];
 $70 = $12;
 $71 = ((($70)) + 8|0);
 $72 = +HEAPF32[$71>>2];
 $73 = $72 / 2.0;
 $74 = $69 + $73;
 $75 = +HEAPF32[$17>>2];
 $76 = $74 - $75;
 $77 = ((($16)) + 8|0);
 HEAPF32[$77>>2] = $76;
 $78 = +HEAPF32[$17>>2];
 HEAPF32[$16>>2] = $78;
 $79 = ((($17)) + 4|0);
 $80 = +HEAPF32[$79>>2];
 $81 = ((($16)) + 4|0);
 HEAPF32[$81>>2] = $80;
 $82 = ((($17)) + 12|0);
 $83 = +HEAPF32[$82>>2];
 $84 = ((($16)) + 12|0);
 HEAPF32[$84>>2] = $83;
 $85 = $18;
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)==(1);
 $88 = $8;
 $89 = $11;
 if ($87) {
  $90 = $18;
  $91 = ((($90)) + 4|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$89>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$89+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$89+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$89+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($88,$$byval_copy,$91,$nk_white$byval_copy);
 } else {
  $92 = $10;
  $93 = ((($92)) + 144|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $18;
  $96 = ((($95)) + 4|0);
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$89>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$89+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$89+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$89+12>>2]|0;
  ;HEAP8[$$byval_copy2>>0]=HEAP8[$96>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$96+3>>0]|0;
  _nk_fill_rect($88,$$byval_copy1,$94,$$byval_copy2);
  $97 = $8;
  $98 = $11;
  $99 = $10;
  $100 = ((($99)) + 144|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $10;
  $103 = ((($102)) + 140|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $10;
  $106 = ((($105)) + 60|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$98>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$98+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$98+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$98+12>>2]|0;
  ;HEAP8[$$byval_copy4>>0]=HEAP8[$106>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$106+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$106+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$106+3>>0]|0;
  _nk_stroke_rect($97,$$byval_copy3,$101,$104,$$byval_copy4);
 }
 $107 = $8;
 $108 = $10;
 $109 = ((($108)) + 144|0);
 $110 = +HEAPF32[$109>>2];
 ;HEAP32[$$byval_copy5>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$17+12>>2]|0;
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$19+3>>0]|0;
 _nk_fill_rect($107,$$byval_copy5,$110,$$byval_copy6);
 $111 = $8;
 $112 = $10;
 $113 = ((($112)) + 144|0);
 $114 = +HEAPF32[$113>>2];
 $115 = $10;
 $116 = ((($115)) + 76|0);
 ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$16+12>>2]|0;
 ;HEAP8[$$byval_copy8>>0]=HEAP8[$116>>0]|0;HEAP8[$$byval_copy8+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$$byval_copy8+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$$byval_copy8+3>>0]=HEAP8[$116+3>>0]|0;
 _nk_fill_rect($111,$$byval_copy7,$114,$$byval_copy8);
 $117 = $20;
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(1);
 $120 = $8;
 $121 = $12;
 $122 = $20;
 $123 = ((($122)) + 4|0);
 if ($119) {
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$121>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$121+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$121+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy10>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy10+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy10+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy10+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($120,$$byval_copy9,$123,$nk_white$byval_copy10);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$$byval_copy11>>2]=HEAP32[$121>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$121+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$121+12>>2]|0;
  ;HEAP8[$$byval_copy12>>0]=HEAP8[$123>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$123+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$123+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$123+3>>0]|0;
  _nk_fill_circle($120,$$byval_copy11,$$byval_copy12);
  STACKTOP = sp;return;
 }
}
function _nk_pad_rect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = 2.0 * $5;
 $7 = $4 < $6;
 if ($7) {
  $8 = +HEAPF32[$2>>2];
  $9 = 2.0 * $8;
  $13 = $9;
 } else {
  $10 = ((($1)) + 8|0);
  $11 = +HEAPF32[$10>>2];
  $13 = $11;
 }
 $12 = ((($1)) + 8|0);
 HEAPF32[$12>>2] = $13;
 $14 = ((($1)) + 12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($2)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = 2.0 * $17;
 $19 = $15 < $18;
 if ($19) {
  $20 = ((($2)) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $22 = 2.0 * $21;
  $26 = $22;
 } else {
  $23 = ((($1)) + 12|0);
  $24 = +HEAPF32[$23>>2];
  $26 = $24;
 }
 $25 = ((($1)) + 12|0);
 HEAPF32[$25>>2] = $26;
 $27 = +HEAPF32[$2>>2];
 $28 = +HEAPF32[$1>>2];
 $29 = $28 + $27;
 HEAPF32[$1>>2] = $29;
 $30 = ((($2)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($1)) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $33 + $31;
 HEAPF32[$32>>2] = $34;
 $35 = +HEAPF32[$2>>2];
 $36 = 2.0 * $35;
 $37 = ((($1)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $38 - $36;
 HEAPF32[$37>>2] = $39;
 $40 = ((($2)) + 4|0);
 $41 = +HEAPF32[$40>>2];
 $42 = 2.0 * $41;
 $43 = ((($1)) + 12|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $44 - $42;
 HEAPF32[$43>>2] = $45;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;
 return;
}
function _nk_progress_behavior($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy6 = sp + 88|0;
 $$byval_copy5 = sp + 72|0;
 $$byval_copy4 = sp + 56|0;
 $$byval_copy = sp + 40|0;
 $7 = $0;
 $8 = $1;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 2;
 $18 = ($17|0)!=(0);
 $19 = $7;
 if ($18) {
  HEAP32[$19>>2] = 6;
 } else {
  HEAP32[$19>>2] = 4;
 }
 $20 = $8;
 $21 = ($20|0)!=(0|0);
 $22 = $11;
 $23 = ($22|0)!=(0);
 $or$cond = $21 & $23;
 do {
  if ($or$cond) {
   $24 = $8;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
   $25 = (_nk_input_is_mouse_hovering_rect($24,$$byval_copy)|0);
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $8;
    $28 = ((($27)) + 260|0);
    $29 = HEAP32[$28>>2]|0;
    $12 = $29;
    $30 = $8;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$2+12>>2]|0;
    $31 = (_nk_input_has_mouse_click_down_in_rect($30,0,$$byval_copy4,1)|0);
    $13 = $31;
    $32 = $12;
    $33 = ($32|0)!=(0);
    $34 = $13;
    $35 = ($34|0)!=(0);
    $or$cond3 = $33 & $35;
    if (!($or$cond3)) {
     $65 = $7;
     HEAP32[$65>>2] = 18;
     break;
    }
    $36 = $8;
    $37 = ((($36)) + 260|0);
    $38 = ((($37)) + 48|0);
    $39 = +HEAPF32[$38>>2];
    $40 = +HEAPF32[$2>>2];
    $41 = $39 - $40;
    $42 = 0.0 < $41;
    if ($42) {
     $43 = $8;
     $44 = ((($43)) + 260|0);
     $45 = ((($44)) + 48|0);
     $46 = +HEAPF32[$45>>2];
     $47 = +HEAPF32[$2>>2];
     $48 = $46 - $47;
     $52 = $48;
    } else {
     $52 = 0.0;
    }
    $49 = ((($2)) + 8|0);
    $50 = +HEAPF32[$49>>2];
    $51 = $52 / $50;
    $14 = $51;
    $53 = $9;
    $54 = (+($53>>>0));
    $55 = $14;
    $56 = $54 * $55;
    $57 = 0.0 < $56;
    if ($57) {
     $58 = $9;
     $59 = (+($58>>>0));
     $60 = $14;
     $61 = $59 * $60;
     $63 = $61;
    } else {
     $63 = 0.0;
    }
    $62 = (~~(($63))>>>0);
    $10 = $62;
    $64 = $7;
    HEAP32[$64>>2] = 34;
   }
  }
 } while(0);
 $66 = $7;
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 & 16;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $8;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$2+12>>2]|0;
  $71 = (_nk_input_is_mouse_prev_hovering_rect($70,$$byval_copy5)|0);
  $72 = ($71|0)!=(0);
  if ($72) {
   label = 16;
  } else {
   $73 = $7;
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 | 8;
   HEAP32[$73>>2] = $75;
  }
 } else {
  label = 16;
 }
 if ((label|0) == 16) {
  $76 = $8;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$2+12>>2]|0;
  $77 = (_nk_input_is_mouse_prev_hovering_rect($76,$$byval_copy6)|0);
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $7;
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 | 64;
   HEAP32[$79>>2] = $81;
  }
 }
 $82 = $9;
 $83 = ($82|0)!=(0);
 $84 = $10;
 if ($83) {
  $85 = $9;
  $86 = ($84>>>0)<($85>>>0);
  $87 = $10;
  $88 = $9;
  $89 = $86 ? $87 : $88;
  $10 = $89;
  $90 = $10;
  $6 = $90;
  $91 = $6;
  STACKTOP = sp;return ($91|0);
 } else {
  $6 = $84;
  $91 = $6;
  STACKTOP = sp;return ($91|0);
 }
 return (0)|0;
}
function _nk_draw_progress($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $nk_white$byval_copy = 0;
 var $nk_white$byval_copy10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $nk_white$byval_copy10 = sp + 156|0;
 $$byval_copy9 = sp + 120|0;
 $$byval_copy8 = sp + 152|0;
 $$byval_copy7 = sp + 104|0;
 $$byval_copy6 = sp + 148|0;
 $$byval_copy5 = sp + 88|0;
 $nk_white$byval_copy = sp + 144|0;
 $$byval_copy4 = sp + 72|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 136|0;
 $$byval_copy = sp + 40|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = $8;
 $17 = $16 & 32;
 $18 = ($17|0)!=(0);
 do {
  if ($18) {
   $19 = $9;
   $20 = ((($19)) + 40|0);
   $14 = $20;
   $21 = $9;
   $22 = ((($21)) + 104|0);
   $15 = $22;
  } else {
   $23 = $8;
   $24 = $23 & 16;
   $25 = ($24|0)!=(0);
   $26 = $9;
   if ($25) {
    $27 = ((($26)) + 20|0);
    $14 = $27;
    $28 = $9;
    $29 = ((($28)) + 84|0);
    $15 = $29;
    break;
   } else {
    $14 = $26;
    $30 = $9;
    $31 = ((($30)) + 64|0);
    $15 = $31;
    break;
   }
  }
 } while(0);
 $32 = $14;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 $35 = $7;
 $36 = $10;
 if ($34) {
  $37 = $9;
  $38 = ((($37)) + 128|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $14;
  $41 = ((($40)) + 4|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$36+12>>2]|0;
  ;HEAP8[$$byval_copy1>>0]=HEAP8[$41>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$41+3>>0]|0;
  _nk_fill_rect($35,$$byval_copy,$39,$$byval_copy1);
  $42 = $7;
  $43 = $10;
  $44 = $9;
  $45 = ((($44)) + 128|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $9;
  $48 = ((($47)) + 132|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $9;
  $51 = ((($50)) + 60|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$43+12>>2]|0;
  ;HEAP8[$$byval_copy3>>0]=HEAP8[$51>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$51+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$51+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$51+3>>0]|0;
  _nk_stroke_rect($42,$$byval_copy2,$46,$49,$$byval_copy3);
 } else {
  $52 = $14;
  $53 = ((($52)) + 4|0);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$36+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($35,$$byval_copy4,$53,$nk_white$byval_copy);
 }
 $54 = $14;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0);
 $57 = $7;
 $58 = $11;
 if ($56) {
  $59 = $9;
  $60 = ((($59)) + 128|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $15;
  $63 = ((($62)) + 4|0);
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$58>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$58+12>>2]|0;
  ;HEAP8[$$byval_copy6>>0]=HEAP8[$63>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$63+3>>0]|0;
  _nk_fill_rect($57,$$byval_copy5,$61,$$byval_copy6);
  $64 = $7;
  $65 = $11;
  $66 = $9;
  $67 = ((($66)) + 128|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $9;
  $70 = ((($69)) + 132|0);
  $71 = +HEAPF32[$70>>2];
  $72 = $9;
  $73 = ((($72)) + 60|0);
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$65>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$65+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$65+12>>2]|0;
  ;HEAP8[$$byval_copy8>>0]=HEAP8[$73>>0]|0;HEAP8[$$byval_copy8+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$$byval_copy8+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$$byval_copy8+3>>0]=HEAP8[$73+3>>0]|0;
  _nk_stroke_rect($64,$$byval_copy7,$68,$71,$$byval_copy8);
  STACKTOP = sp;return;
 } else {
  $74 = $15;
  $75 = ((($74)) + 4|0);
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$58>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$58+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy10>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy10+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy10+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy10+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($57,$$byval_copy9,$75,$nk_white$byval_copy10);
  STACKTOP = sp;return;
 }
}
function _nk_textedit_click($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 $15 = (_nk_textedit_locate_coord($10,$11,$12,$13,$14)|0);
 $16 = $5;
 $17 = ((($16)) + 88|0);
 HEAP32[$17>>2] = $15;
 $18 = $5;
 $19 = ((($18)) + 88|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = ((($21)) + 92|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 88|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = ((($26)) + 96|0);
 HEAP32[$27>>2] = $25;
 $28 = $5;
 $29 = ((($28)) + 103|0);
 HEAP8[$29>>0] = 0;
 STACKTOP = sp;return;
}
function _nk_textedit_drag($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 $15 = $9;
 $16 = (_nk_textedit_locate_coord($11,$12,$13,$14,$15)|0);
 $10 = $16;
 $17 = $5;
 $18 = ((($17)) + 92|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $5;
 $21 = ((($20)) + 96|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)==($22|0);
 if ($23) {
  $24 = $5;
  $25 = ((($24)) + 88|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $5;
  $28 = ((($27)) + 92|0);
  HEAP32[$28>>2] = $26;
 }
 $29 = $10;
 $30 = $5;
 $31 = ((($30)) + 96|0);
 HEAP32[$31>>2] = $29;
 $32 = $5;
 $33 = ((($32)) + 88|0);
 HEAP32[$33>>2] = $29;
 STACKTOP = sp;return;
}
function _nk_textedit_key($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0.0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $10 = sp + 216|0;
 $11 = sp + 192|0;
 $18 = sp + 144|0;
 $19 = sp + 120|0;
 $26 = sp + 72|0;
 $27 = sp + 48|0;
 $28 = sp + 24|0;
 $29 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 L1: while(1) {
  $30 = $6;
  switch ($30|0) {
  case 18:  {
   label = 103;
   break L1;
   break;
  }
  case 17:  {
   label = 94;
   break L1;
   break;
  }
  case 20:  {
   label = 91;
   break L1;
   break;
  }
  case 19:  {
   label = 88;
   break L1;
   break;
  }
  case 6:  {
   label = 82;
   break L1;
   break;
  }
  case 3:  {
   label = 76;
   break L1;
   break;
  }
  case 25:  {
   label = 35;
   break L1;
   break;
  }
  case 21:  {
   label = 3;
   break L1;
   break;
  }
  case 22:  {
   label = 4;
   break L1;
   break;
  }
  case 23:  {
   label = 5;
   break L1;
   break;
  }
  case 14:  {
   label = 6;
   break L1;
   break;
  }
  case 15:  {
   label = 8;
   break L1;
   break;
  }
  case 16:  {
   label = 10;
   break L1;
   break;
  }
  case 12:  {
   label = 13;
   break L1;
   break;
  }
  case 13:  {
   label = 22;
   break L1;
   break;
  }
  case 24:  {
   label = 28;
   break L1;
   break;
  }
  case 10:  {
   $271 = $7;
   $21 = $271;
   $272 = $5;
   $273 = ((($272)) + 104|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = ($274<<24>>24)!=(0);
   if (!($275)) {
    label = 61;
    break L1;
   }
   $6 = 12;
   continue L1;
   break;
  }
  case 11:  {
   $179 = $7;
   $13 = $179;
   $180 = $5;
   $181 = ((($180)) + 104|0);
   $182 = HEAP8[$181>>0]|0;
   $183 = ($182<<24>>24)!=(0);
   if (!($183)) {
    label = 44;
    break L1;
   }
   $6 = 13;
   continue L1;
   break;
  }
  default: {
   label = 111;
   break L1;
  }
  }
 }
 switch (label|0) {
  case 3: {
   $31 = $5;
   _nk_textedit_undo($31);
   $32 = $5;
   $33 = ((($32)) + 103|0);
   HEAP8[$33>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 4: {
   $34 = $5;
   _nk_textedit_redo($34);
   $35 = $5;
   $36 = ((($35)) + 103|0);
   HEAP8[$36>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 5: {
   $37 = $5;
   _nk_textedit_select_all($37);
   $38 = $5;
   $39 = ((($38)) + 103|0);
   HEAP8[$39>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 6: {
   $40 = $5;
   $41 = ((($40)) + 100|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = ($43|0)==(0);
   if (!($44)) {
    STACKTOP = sp;return;
   }
   $45 = $5;
   $46 = ((($45)) + 100|0);
   HEAP8[$46>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 8: {
   $47 = $5;
   $48 = ((($47)) + 100|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)==(0);
   if (!($51)) {
    STACKTOP = sp;return;
   }
   $52 = $5;
   $53 = ((($52)) + 100|0);
   HEAP8[$53>>0] = 2;
   STACKTOP = sp;return;
   break;
  }
  case 10: {
   $54 = $5;
   $55 = ((($54)) + 100|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = ($57|0)==(1);
   if (!($58)) {
    $59 = $5;
    $60 = ((($59)) + 100|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = ($62|0)==(2);
    if (!($63)) {
     STACKTOP = sp;return;
    }
   }
   $64 = $5;
   $65 = ((($64)) + 100|0);
   HEAP8[$65>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 13: {
   $66 = $7;
   $67 = ($66|0)!=(0);
   $68 = $5;
   if ($67) {
    _nk_textedit_clamp($68);
    $69 = $5;
    _nk_textedit_prep_selection_at_cursor($69);
    $70 = $5;
    $71 = ((($70)) + 96|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)>(0);
    if ($73) {
     $74 = $5;
     $75 = ((($74)) + 96|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + -1)|0;
     HEAP32[$75>>2] = $77;
    }
    $78 = $5;
    $79 = ((($78)) + 96|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $5;
    $82 = ((($81)) + 88|0);
    HEAP32[$82>>2] = $80;
    $83 = $5;
    $84 = ((($83)) + 103|0);
    HEAP8[$84>>0] = 0;
    STACKTOP = sp;return;
   }
   $85 = ((($68)) + 92|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $5;
   $88 = ((($87)) + 96|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($86|0)!=($89|0);
   $91 = $5;
   if ($90) {
    _nk_textedit_move_to_first($91);
   } else {
    $92 = ((($91)) + 88|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)>(0);
    if ($94) {
     $95 = $5;
     $96 = ((($95)) + 88|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + -1)|0;
     HEAP32[$96>>2] = $98;
    }
   }
   $99 = $5;
   $100 = ((($99)) + 103|0);
   HEAP8[$100>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 22: {
   $101 = $7;
   $102 = ($101|0)!=(0);
   $103 = $5;
   if ($102) {
    _nk_textedit_prep_selection_at_cursor($103);
    $104 = $5;
    $105 = ((($104)) + 96|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + 1)|0;
    HEAP32[$105>>2] = $107;
    $108 = $5;
    _nk_textedit_clamp($108);
    $109 = $5;
    $110 = ((($109)) + 96|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $5;
    $113 = ((($112)) + 88|0);
    HEAP32[$113>>2] = $111;
    $114 = $5;
    $115 = ((($114)) + 103|0);
    HEAP8[$115>>0] = 0;
    STACKTOP = sp;return;
   }
   $116 = ((($103)) + 92|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $5;
   $119 = ((($118)) + 96|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($117|0)!=($120|0);
   $122 = $5;
   if ($121) {
    _nk_textedit_move_to_last($122);
   } else {
    $123 = ((($122)) + 88|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) + 1)|0;
    HEAP32[$123>>2] = $125;
   }
   $126 = $5;
   _nk_textedit_clamp($126);
   $127 = $5;
   $128 = ((($127)) + 103|0);
   HEAP8[$128>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 28: {
   $129 = $7;
   $130 = ($129|0)!=(0);
   $131 = $5;
   $132 = ((($131)) + 92|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $5;
   $135 = ((($134)) + 96|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($133|0)!=($136|0);
   if ($130) {
    if (!($137)) {
     $138 = $5;
     _nk_textedit_prep_selection_at_cursor($138);
    }
    $139 = $5;
    $140 = (_nk_textedit_move_to_word_previous($139)|0);
    $141 = $5;
    $142 = ((($141)) + 88|0);
    HEAP32[$142>>2] = $140;
    $143 = $5;
    $144 = ((($143)) + 88|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $5;
    $147 = ((($146)) + 96|0);
    HEAP32[$147>>2] = $145;
    $148 = $5;
    _nk_textedit_clamp($148);
    STACKTOP = sp;return;
   }
   $149 = $5;
   if ($137) {
    _nk_textedit_move_to_first($149);
    STACKTOP = sp;return;
   } else {
    $150 = (_nk_textedit_move_to_word_previous($149)|0);
    $151 = $5;
    $152 = ((($151)) + 88|0);
    HEAP32[$152>>2] = $150;
    $153 = $5;
    _nk_textedit_clamp($153);
    STACKTOP = sp;return;
   }
   break;
  }
  case 35: {
   $154 = $7;
   $155 = ($154|0)!=(0);
   $156 = $5;
   $157 = ((($156)) + 92|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $5;
   $160 = ((($159)) + 96|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ($158|0)!=($161|0);
   if ($155) {
    if (!($162)) {
     $163 = $5;
     _nk_textedit_prep_selection_at_cursor($163);
    }
    $164 = $5;
    $165 = (_nk_textedit_move_to_word_next($164)|0);
    $166 = $5;
    $167 = ((($166)) + 88|0);
    HEAP32[$167>>2] = $165;
    $168 = $5;
    $169 = ((($168)) + 88|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $5;
    $172 = ((($171)) + 96|0);
    HEAP32[$172>>2] = $170;
    $173 = $5;
    _nk_textedit_clamp($173);
    STACKTOP = sp;return;
   }
   $174 = $5;
   if ($162) {
    _nk_textedit_move_to_last($174);
    STACKTOP = sp;return;
   } else {
    $175 = (_nk_textedit_move_to_word_next($174)|0);
    $176 = $5;
    $177 = ((($176)) + 88|0);
    HEAP32[$177>>2] = $175;
    $178 = $5;
    _nk_textedit_clamp($178);
    STACKTOP = sp;return;
   }
   break;
  }
  case 44: {
   $184 = $13;
   $185 = ($184|0)!=(0);
   $186 = $5;
   if ($185) {
    _nk_textedit_prep_selection_at_cursor($186);
   } else {
    $187 = ((($186)) + 92|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = $5;
    $190 = ((($189)) + 96|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($188|0)!=($191|0);
    if ($192) {
     $193 = $5;
     _nk_textedit_move_to_last($193);
    }
   }
   $194 = $5;
   _nk_textedit_clamp($194);
   $195 = $5;
   $196 = $5;
   $197 = ((($196)) + 88|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $5;
   $200 = ((($199)) + 104|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = $8;
   $204 = $9;
   _nk_textedit_find_charpos($10,$195,$198,$202,$203,$204);
   $205 = ((($10)) + 16|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($206|0)!=(0);
   if (!($207)) {
    STACKTOP = sp;return;
   }
   $208 = $5;
   $209 = ((($208)) + 103|0);
   $210 = HEAP8[$209>>0]|0;
   $211 = $210&255;
   $212 = ($211|0)!=(0);
   if ($212) {
    $213 = $5;
    $214 = ((($213)) + 108|0);
    $215 = +HEAPF32[$214>>2];
    $217 = $215;
   } else {
    $216 = +HEAPF32[$10>>2];
    $217 = $216;
   }
   $15 = $217;
   $218 = ((($10)) + 12|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = ((($10)) + 16|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = (($219) + ($221))|0;
   $16 = $222;
   $223 = $16;
   $224 = $5;
   $225 = ((($224)) + 88|0);
   HEAP32[$225>>2] = $223;
   $226 = $5;
   $227 = $5;
   $228 = ((($227)) + 88|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $9;
   $231 = $8;
   _nk_textedit_layout_row($11,$226,$229,$230,$231);
   $232 = +HEAPF32[$11>>2];
   $14 = $232;
   $12 = 0;
   while(1) {
    $233 = $12;
    $234 = ((($11)) + 20|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = ($233|0)<($235|0);
    if (!($236)) {
     break;
    }
    $237 = $14;
    $238 = ((($11)) + 4|0);
    $239 = +HEAPF32[$238>>2];
    $240 = $237 < $239;
    if (!($240)) {
     break;
    }
    $241 = $5;
    $242 = $16;
    $243 = $12;
    $244 = $8;
    $245 = (+_nk_textedit_get_width($241,$242,$243,$244));
    $17 = $245;
    $246 = $17;
    $247 = $14;
    $248 = $247 + $246;
    $14 = $248;
    $249 = $14;
    $250 = $15;
    $251 = $249 > $250;
    if ($251) {
     break;
    }
    $252 = $5;
    $253 = ((($252)) + 88|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = (($254) + 1)|0;
    HEAP32[$253>>2] = $255;
    $256 = $12;
    $257 = (($256) + 1)|0;
    $12 = $257;
   }
   $258 = $5;
   _nk_textedit_clamp($258);
   $259 = $5;
   $260 = ((($259)) + 103|0);
   HEAP8[$260>>0] = 1;
   $261 = $15;
   $262 = $5;
   $263 = ((($262)) + 108|0);
   HEAPF32[$263>>2] = $261;
   $264 = $13;
   $265 = ($264|0)!=(0);
   if (!($265)) {
    STACKTOP = sp;return;
   }
   $266 = $5;
   $267 = ((($266)) + 88|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = $5;
   $270 = ((($269)) + 96|0);
   HEAP32[$270>>2] = $268;
   STACKTOP = sp;return;
   break;
  }
  case 61: {
   $276 = $21;
   $277 = ($276|0)!=(0);
   $278 = $5;
   if ($277) {
    _nk_textedit_prep_selection_at_cursor($278);
   } else {
    $279 = ((($278)) + 92|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $5;
    $282 = ((($281)) + 96|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ($280|0)!=($283|0);
    if ($284) {
     $285 = $5;
     _nk_textedit_move_to_first($285);
    }
   }
   $286 = $5;
   _nk_textedit_clamp($286);
   $287 = $5;
   $288 = $5;
   $289 = ((($288)) + 88|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $5;
   $292 = ((($291)) + 104|0);
   $293 = HEAP8[$292>>0]|0;
   $294 = $293&255;
   $295 = $8;
   $296 = $9;
   _nk_textedit_find_charpos($18,$287,$290,$294,$295,$296);
   $297 = ((($18)) + 20|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = ((($18)) + 12|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = ($298|0)!=($300|0);
   if (!($301)) {
    STACKTOP = sp;return;
   }
   $302 = $5;
   $303 = ((($302)) + 103|0);
   $304 = HEAP8[$303>>0]|0;
   $305 = $304&255;
   $306 = ($305|0)!=(0);
   if ($306) {
    $307 = $5;
    $308 = ((($307)) + 108|0);
    $309 = +HEAPF32[$308>>2];
    $311 = $309;
   } else {
    $310 = +HEAPF32[$18>>2];
    $311 = $310;
   }
   $23 = $311;
   $312 = ((($18)) + 20|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = $5;
   $315 = ((($314)) + 88|0);
   HEAP32[$315>>2] = $313;
   $316 = $5;
   $317 = $5;
   $318 = ((($317)) + 88|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = $9;
   $321 = $8;
   _nk_textedit_layout_row($19,$316,$319,$320,$321);
   $322 = +HEAPF32[$19>>2];
   $22 = $322;
   $20 = 0;
   while(1) {
    $323 = $20;
    $324 = ((($19)) + 20|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($323|0)<($325|0);
    if (!($326)) {
     break;
    }
    $327 = $22;
    $328 = ((($19)) + 4|0);
    $329 = +HEAPF32[$328>>2];
    $330 = $327 < $329;
    if (!($330)) {
     break;
    }
    $331 = $5;
    $332 = ((($18)) + 20|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = $20;
    $335 = $8;
    $336 = (+_nk_textedit_get_width($331,$333,$334,$335));
    $24 = $336;
    $337 = $24;
    $338 = $22;
    $339 = $338 + $337;
    $22 = $339;
    $340 = $22;
    $341 = $23;
    $342 = $340 > $341;
    if ($342) {
     break;
    }
    $343 = $5;
    $344 = ((($343)) + 88|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = (($345) + 1)|0;
    HEAP32[$344>>2] = $346;
    $347 = $20;
    $348 = (($347) + 1)|0;
    $20 = $348;
   }
   $349 = $5;
   _nk_textedit_clamp($349);
   $350 = $5;
   $351 = ((($350)) + 103|0);
   HEAP8[$351>>0] = 1;
   $352 = $23;
   $353 = $5;
   $354 = ((($353)) + 108|0);
   HEAPF32[$354>>2] = $352;
   $355 = $21;
   $356 = ($355|0)!=(0);
   if (!($356)) {
    STACKTOP = sp;return;
   }
   $357 = $5;
   $358 = ((($357)) + 88|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = $5;
   $361 = ((($360)) + 96|0);
   HEAP32[$361>>2] = $359;
   STACKTOP = sp;return;
   break;
  }
  case 76: {
   $362 = $5;
   $363 = ((($362)) + 100|0);
   $364 = HEAP8[$363>>0]|0;
   $365 = $364&255;
   $366 = ($365|0)==(0);
   if ($366) {
    STACKTOP = sp;return;
   }
   $367 = $5;
   $368 = ((($367)) + 92|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $5;
   $371 = ((($370)) + 96|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = ($369|0)!=($372|0);
   $374 = $5;
   if ($373) {
    _nk_textedit_delete_selection($374);
   } else {
    $375 = ((($374)) + 12|0);
    $376 = ((($375)) + 60|0);
    $377 = HEAP32[$376>>2]|0;
    $25 = $377;
    $378 = $5;
    $379 = ((($378)) + 88|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = $25;
    $382 = ($380|0)<($381|0);
    if ($382) {
     $383 = $5;
     $384 = $5;
     $385 = ((($384)) + 88|0);
     $386 = HEAP32[$385>>2]|0;
     _nk_textedit_delete($383,$386,1);
    }
   }
   $387 = $5;
   $388 = ((($387)) + 103|0);
   HEAP8[$388>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 82: {
   $389 = $5;
   $390 = ((($389)) + 100|0);
   $391 = HEAP8[$390>>0]|0;
   $392 = $391&255;
   $393 = ($392|0)==(0);
   if ($393) {
    STACKTOP = sp;return;
   }
   $394 = $5;
   $395 = ((($394)) + 92|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = $5;
   $398 = ((($397)) + 96|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = ($396|0)!=($399|0);
   $401 = $5;
   if ($400) {
    _nk_textedit_delete_selection($401);
   } else {
    _nk_textedit_clamp($401);
    $402 = $5;
    $403 = ((($402)) + 88|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = ($404|0)>(0);
    if ($405) {
     $406 = $5;
     $407 = $5;
     $408 = ((($407)) + 88|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = (($409) - 1)|0;
     _nk_textedit_delete($406,$410,1);
     $411 = $5;
     $412 = ((($411)) + 88|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = (($413) + -1)|0;
     HEAP32[$412>>2] = $414;
    }
   }
   $415 = $5;
   $416 = ((($415)) + 103|0);
   HEAP8[$416>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 88: {
   $417 = $7;
   $418 = ($417|0)!=(0);
   $419 = $5;
   if ($418) {
    _nk_textedit_prep_selection_at_cursor($419);
    $420 = $5;
    $421 = ((($420)) + 96|0);
    HEAP32[$421>>2] = 0;
    $422 = $5;
    $423 = ((($422)) + 88|0);
    HEAP32[$423>>2] = 0;
    $424 = $5;
    $425 = ((($424)) + 103|0);
    HEAP8[$425>>0] = 0;
    STACKTOP = sp;return;
   } else {
    $426 = ((($419)) + 96|0);
    HEAP32[$426>>2] = 0;
    $427 = $5;
    $428 = ((($427)) + 92|0);
    HEAP32[$428>>2] = 0;
    $429 = $5;
    $430 = ((($429)) + 88|0);
    HEAP32[$430>>2] = 0;
    $431 = $5;
    $432 = ((($431)) + 103|0);
    HEAP8[$432>>0] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 91: {
   $433 = $7;
   $434 = ($433|0)!=(0);
   $435 = $5;
   if ($434) {
    _nk_textedit_prep_selection_at_cursor($435);
    $436 = $5;
    $437 = ((($436)) + 12|0);
    $438 = ((($437)) + 60|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $5;
    $441 = ((($440)) + 96|0);
    HEAP32[$441>>2] = $439;
    $442 = $5;
    $443 = ((($442)) + 88|0);
    HEAP32[$443>>2] = $439;
    $444 = $5;
    $445 = ((($444)) + 103|0);
    HEAP8[$445>>0] = 0;
    STACKTOP = sp;return;
   } else {
    $446 = ((($435)) + 12|0);
    $447 = ((($446)) + 60|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = $5;
    $450 = ((($449)) + 88|0);
    HEAP32[$450>>2] = $448;
    $451 = $5;
    $452 = ((($451)) + 96|0);
    HEAP32[$452>>2] = 0;
    $453 = $5;
    $454 = ((($453)) + 92|0);
    HEAP32[$454>>2] = 0;
    $455 = $5;
    $456 = ((($455)) + 103|0);
    HEAP8[$456>>0] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 94: {
   $457 = $7;
   $458 = ($457|0)!=(0);
   $459 = $5;
   if ($458) {
    _nk_textedit_clamp($459);
    $460 = $5;
    _nk_textedit_prep_selection_at_cursor($460);
    $461 = $5;
    $462 = ((($461)) + 12|0);
    $463 = ((($462)) + 60|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = ($464|0)!=(0);
    if ($465) {
     $466 = $5;
     $467 = ((($466)) + 88|0);
     $468 = HEAP32[$467>>2]|0;
     $469 = $5;
     $470 = ((($469)) + 12|0);
     $471 = ((($470)) + 60|0);
     $472 = HEAP32[$471>>2]|0;
     $473 = ($468|0)==($472|0);
     if ($473) {
      $474 = $5;
      $475 = ((($474)) + 88|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = (($476) + -1)|0;
      HEAP32[$475>>2] = $477;
     }
    }
    $478 = $5;
    $479 = $5;
    $480 = ((($479)) + 88|0);
    $481 = HEAP32[$480>>2]|0;
    $482 = $5;
    $483 = ((($482)) + 104|0);
    $484 = HEAP8[$483>>0]|0;
    $485 = $484&255;
    $486 = $8;
    $487 = $9;
    _nk_textedit_find_charpos($26,$478,$481,$485,$486,$487);
    $488 = ((($26)) + 12|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = $5;
    $491 = ((($490)) + 96|0);
    HEAP32[$491>>2] = $489;
    $492 = $5;
    $493 = ((($492)) + 88|0);
    HEAP32[$493>>2] = $489;
    $494 = $5;
    $495 = ((($494)) + 103|0);
    HEAP8[$495>>0] = 0;
    STACKTOP = sp;return;
   } else {
    $496 = ((($459)) + 12|0);
    $497 = ((($496)) + 60|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = ($498|0)!=(0);
    if ($499) {
     $500 = $5;
     $501 = ((($500)) + 88|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = $5;
     $504 = ((($503)) + 12|0);
     $505 = ((($504)) + 60|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($502|0)==($506|0);
     if ($507) {
      $508 = $5;
      $509 = ((($508)) + 88|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = (($510) + -1)|0;
      HEAP32[$509>>2] = $511;
     }
    }
    $512 = $5;
    _nk_textedit_clamp($512);
    $513 = $5;
    _nk_textedit_move_to_first($513);
    $514 = $5;
    $515 = $5;
    $516 = ((($515)) + 88|0);
    $517 = HEAP32[$516>>2]|0;
    $518 = $5;
    $519 = ((($518)) + 104|0);
    $520 = HEAP8[$519>>0]|0;
    $521 = $520&255;
    $522 = $8;
    $523 = $9;
    _nk_textedit_find_charpos($27,$514,$517,$521,$522,$523);
    $524 = ((($27)) + 12|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = $5;
    $527 = ((($526)) + 88|0);
    HEAP32[$527>>2] = $525;
    $528 = $5;
    $529 = ((($528)) + 103|0);
    HEAP8[$529>>0] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 103: {
   $530 = $7;
   $531 = ($530|0)!=(0);
   $532 = $5;
   _nk_textedit_clamp($532);
   $533 = $5;
   if ($531) {
    _nk_textedit_prep_selection_at_cursor($533);
    $534 = $5;
    $535 = $5;
    $536 = ((($535)) + 88|0);
    $537 = HEAP32[$536>>2]|0;
    $538 = $5;
    $539 = ((($538)) + 104|0);
    $540 = HEAP8[$539>>0]|0;
    $541 = $540&255;
    $542 = $8;
    $543 = $9;
    _nk_textedit_find_charpos($28,$534,$537,$541,$542,$543);
    $544 = $5;
    $545 = ((($544)) + 103|0);
    HEAP8[$545>>0] = 0;
    $546 = ((($28)) + 12|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = ((($28)) + 16|0);
    $549 = HEAP32[$548>>2]|0;
    $550 = (($547) + ($549))|0;
    $551 = $5;
    $552 = ((($551)) + 88|0);
    HEAP32[$552>>2] = $550;
    $553 = ((($28)) + 16|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = ($554|0)>(0);
    if ($555) {
     $556 = $5;
     $557 = ((($556)) + 12|0);
     $558 = $5;
     $559 = ((($558)) + 88|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = (($560) - 1)|0;
     $562 = (_nk_str_rune_at($557,$561)|0);
     $563 = ($562|0)==(10);
     if ($563) {
      $564 = $5;
      $565 = ((($564)) + 88|0);
      $566 = HEAP32[$565>>2]|0;
      $567 = (($566) + -1)|0;
      HEAP32[$565>>2] = $567;
     }
    }
    $568 = $5;
    $569 = ((($568)) + 88|0);
    $570 = HEAP32[$569>>2]|0;
    $571 = $5;
    $572 = ((($571)) + 96|0);
    HEAP32[$572>>2] = $570;
    STACKTOP = sp;return;
   }
   _nk_textedit_move_to_first($533);
   $573 = $5;
   $574 = $5;
   $575 = ((($574)) + 88|0);
   $576 = HEAP32[$575>>2]|0;
   $577 = $5;
   $578 = ((($577)) + 104|0);
   $579 = HEAP8[$578>>0]|0;
   $580 = $579&255;
   $581 = $8;
   $582 = $9;
   _nk_textedit_find_charpos($29,$573,$576,$580,$581,$582);
   $583 = $5;
   $584 = ((($583)) + 103|0);
   HEAP8[$584>>0] = 0;
   $585 = ((($29)) + 12|0);
   $586 = HEAP32[$585>>2]|0;
   $587 = ((($29)) + 16|0);
   $588 = HEAP32[$587>>2]|0;
   $589 = (($586) + ($588))|0;
   $590 = $5;
   $591 = ((($590)) + 88|0);
   HEAP32[$591>>2] = $589;
   $592 = ((($29)) + 16|0);
   $593 = HEAP32[$592>>2]|0;
   $594 = ($593|0)>(0);
   if (!($594)) {
    STACKTOP = sp;return;
   }
   $595 = $5;
   $596 = ((($595)) + 12|0);
   $597 = $5;
   $598 = ((($597)) + 88|0);
   $599 = HEAP32[$598>>2]|0;
   $600 = (($599) - 1)|0;
   $601 = (_nk_str_rune_at($596,$600)|0);
   $602 = ($601|0)==(10);
   if (!($602)) {
    STACKTOP = sp;return;
   }
   $603 = $5;
   $604 = ((($603)) + 88|0);
   $605 = HEAP32[$604>>2]|0;
   $606 = (($605) + -1)|0;
   HEAP32[$604>>2] = $606;
   STACKTOP = sp;return;
   break;
  }
  case 111: {
   STACKTOP = sp;return;
   break;
  }
 }
}
function _nk_text_calculate_text_bounds($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy4 = sp + 80|0;
 $$byval_copy = sp + 76|0;
 $18 = sp + 32|0;
 $22 = sp + 12|0;
 $24 = sp;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $25 = $12;
 $17 = $25;
 _nk_vec2($18,0.0,0.0);
 $19 = 0.0;
 $21 = 0;
 HEAP32[$22>>2] = 0;
 $23 = 0;
 $26 = $10;
 $27 = ($26|0)==(0|0);
 $28 = $11;
 $29 = ($28|0)<=(0);
 $or$cond = $27 | $29;
 $or$cond$not = $or$cond ^ 1;
 $30 = $9;
 $31 = ($30|0)!=(0|0);
 $or$cond3 = $or$cond$not & $31;
 if (!($or$cond3)) {
  $32 = $12;
  _nk_vec2($0,0.0,$32);
  STACKTOP = sp;return;
 }
 $33 = $10;
 $34 = $11;
 $35 = (_nk_utf_decode($33,$22,$34)|0);
 $21 = $35;
 $36 = $21;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  ;HEAP32[$0>>2]=HEAP32[$18>>2]|0;HEAP32[$0+4>>2]=HEAP32[$18+4>>2]|0;
  STACKTOP = sp;return;
 }
 $38 = $9;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $9;
 $42 = $9;
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $10;
 $46 = $21;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$41>>2]|0;
 $47 = (+FUNCTION_TABLE_didii[$40 & 15]($$byval_copy,$44,$45,$46));
 $20 = $47;
 $48 = $15;
 HEAP32[$48>>2] = 0;
 while(1) {
  $49 = $23;
  $50 = $11;
  $51 = ($49|0)<($50|0);
  $52 = $21;
  $53 = ($52|0)!=(0);
  $54 = $51 ? $53 : 0;
  if (!($54)) {
   break;
  }
  $55 = HEAP32[$22>>2]|0;
  $56 = ($55|0)==(10);
  if ($56) {
   $57 = +HEAPF32[$18>>2];
   $58 = $19;
   $59 = $57 < $58;
   $60 = $19;
   $61 = +HEAPF32[$18>>2];
   $62 = $59 ? $60 : $61;
   HEAPF32[$18>>2] = $62;
   $63 = $17;
   $64 = ((($18)) + 4|0);
   $65 = +HEAPF32[$64>>2];
   $66 = $65 + $63;
   HEAPF32[$64>>2] = $66;
   $19 = 0.0;
   $67 = $15;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + 1)|0;
   HEAP32[$67>>2] = $69;
   $70 = $16;
   $71 = ($70|0)==(1);
   if ($71) {
    break;
   }
   $72 = $23;
   $73 = (($72) + 1)|0;
   $23 = $73;
   $74 = $10;
   $75 = $23;
   $76 = (($74) + ($75)|0);
   $77 = $11;
   $78 = $23;
   $79 = (($77) - ($78))|0;
   $80 = (_nk_utf_decode($76,$22,$79)|0);
   $21 = $80;
   continue;
  }
  $81 = HEAP32[$22>>2]|0;
  $82 = ($81|0)==(13);
  if ($82) {
   $83 = $23;
   $84 = (($83) + 1)|0;
   $23 = $84;
   $85 = $15;
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + 1)|0;
   HEAP32[$85>>2] = $87;
   $88 = $10;
   $89 = $23;
   $90 = (($88) + ($89)|0);
   $91 = $11;
   $92 = $23;
   $93 = (($91) - ($92))|0;
   $94 = (_nk_utf_decode($90,$22,$93)|0);
   $21 = $94;
   continue;
  } else {
   $95 = $15;
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + 1)|0;
   $98 = $15;
   HEAP32[$98>>2] = $97;
   $99 = $21;
   $100 = $23;
   $101 = (($100) + ($99))|0;
   $23 = $101;
   $102 = $20;
   $103 = $19;
   $104 = $103 + $102;
   $19 = $104;
   $105 = $10;
   $106 = $23;
   $107 = (($105) + ($106)|0);
   $108 = $11;
   $109 = $23;
   $110 = (($108) - ($109))|0;
   $111 = (_nk_utf_decode($107,$22,$110)|0);
   $21 = $111;
   $112 = $9;
   $113 = ((($112)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $9;
   $116 = $9;
   $117 = ((($116)) + 4|0);
   $118 = +HEAPF32[$117>>2];
   $119 = $10;
   $120 = $23;
   $121 = (($119) + ($120)|0);
   $122 = $21;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$115>>2]|0;
   $123 = (+FUNCTION_TABLE_didii[$114 & 15]($$byval_copy4,$118,$121,$122));
   $20 = $123;
   continue;
  }
 }
 $124 = +HEAPF32[$18>>2];
 $125 = $19;
 $126 = $124 < $125;
 if ($126) {
  $127 = $19;
  HEAPF32[$18>>2] = $127;
 }
 $128 = $14;
 $129 = ($128|0)!=(0|0);
 if ($129) {
  $130 = $14;
  $131 = $19;
  $132 = ((($18)) + 4|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $17;
  $135 = $133 + $134;
  _nk_vec2($24,$131,$135);
  ;HEAP32[$130>>2]=HEAP32[$24>>2]|0;HEAP32[$130+4>>2]=HEAP32[$24+4>>2]|0;
 }
 $136 = $19;
 $137 = $136 > 0.0;
 if ($137) {
  label = 19;
 } else {
  $138 = ((($18)) + 4|0);
  $139 = +HEAPF32[$138>>2];
  $140 = $139 == 0.0;
  if ($140) {
   label = 19;
  }
 }
 if ((label|0) == 19) {
  $141 = $17;
  $142 = ((($18)) + 4|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $143 + $141;
  HEAPF32[$142>>2] = $144;
 }
 $145 = $13;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = $10;
  $148 = $23;
  $149 = (($147) + ($148)|0);
  $150 = $13;
  HEAP32[$150>>2] = $149;
 }
 ;HEAP32[$0>>2]=HEAP32[$18>>2]|0;HEAP32[$0+4>>2]=HEAP32[$18+4>>2]|0;
 STACKTOP = sp;return;
}
function _nk_edit_draw_text($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0;
 var $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy11 = sp + 184|0;
 $$byval_copy10 = sp + 204|0;
 $$byval_copy9 = sp + 168|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 144|0;
 $$byval_copy6 = sp + 200|0;
 $$byval_copy = sp + 128|0;
 $23 = sp + 80|0;
 $30 = sp + 40|0;
 $31 = sp + 32|0;
 $32 = sp + 16|0;
 $33 = sp;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $11;
 $34 = $12;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  ___assert_fail((24177|0),(1320|0),14055,(24642|0));
  // unreachable;
 }
 $36 = $20;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  ___assert_fail((2240|0),(1320|0),14056,(24642|0));
  // unreachable;
 }
 $38 = $13;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  ___assert_fail((19774|0),(1320|0),14057,(24642|0));
  // unreachable;
 }
 $40 = $17;
 $41 = ($40|0)!=(0|0);
 $42 = $18;
 $43 = ($42|0)!=(0);
 $or$cond = $41 & $43;
 $44 = $12;
 $45 = ($44|0)!=(0|0);
 $or$cond3 = $or$cond & $45;
 $46 = $13;
 $47 = ($46|0)!=(0|0);
 $or$cond5 = $or$cond3 & $47;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $22 = 0;
 HEAP32[$23>>2] = 0;
 $24 = 0;
 $25 = 0.0;
 $48 = $17;
 $27 = $48;
 $28 = 0.0;
 $29 = 0;
 _nk_vec2($31,0.0,0.0);
 ;HEAP32[$30>>2]=HEAP32[$31>>2]|0;HEAP32[$30+4>>2]=HEAP32[$31+4>>2]|0;
 $49 = ((($30)) + 8|0);
 ;HEAP8[$49>>0]=HEAP8[$9>>0]|0;HEAP8[$49+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$9+3>>0]|0;
 $50 = ((($30)) + 12|0);
 ;HEAP8[$50>>0]=HEAP8[$10>>0]|0;HEAP8[$50+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$10+3>>0]|0;
 $51 = $17;
 $52 = $24;
 $53 = (($51) + ($52)|0);
 $54 = $18;
 $55 = $24;
 $56 = (($54) - ($55))|0;
 $57 = (_nk_utf_decode($53,$23,$56)|0);
 $22 = $57;
 $58 = $22;
 $59 = ($58|0)!=(0);
 if (!($59)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $60 = $24;
  $61 = $18;
  $62 = ($60|0)<($61|0);
  $63 = $22;
  $64 = ($63|0)!=(0);
  $65 = $62 ? $64 : 0;
  if (!($65)) {
   break;
  }
  $66 = HEAP32[$23>>2]|0;
  $67 = ($66|0)==(10);
  if (!($67)) {
   $112 = HEAP32[$23>>2]|0;
   $113 = ($112|0)==(13);
   if ($113) {
    $114 = $24;
    $115 = (($114) + 1)|0;
    $24 = $115;
    $116 = $17;
    $117 = $24;
    $118 = (($116) + ($117)|0);
    $119 = $18;
    $120 = $24;
    $121 = (($119) - ($120))|0;
    $122 = (_nk_utf_decode($118,$23,$121)|0);
    $22 = $122;
    continue;
   } else {
    $123 = $20;
    $124 = ((($123)) + 8|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $20;
    $127 = $20;
    $128 = ((($127)) + 4|0);
    $129 = +HEAPF32[$128>>2];
    $130 = $17;
    $131 = $24;
    $132 = (($130) + ($131)|0);
    $133 = $22;
    ;HEAP32[$$byval_copy8>>2]=HEAP32[$126>>2]|0;
    $134 = (+FUNCTION_TABLE_didii[$125 & 15]($$byval_copy8,$129,$132,$133));
    $26 = $134;
    $135 = $26;
    $136 = $25;
    $137 = $136 + $135;
    $25 = $137;
    $138 = $22;
    $139 = $24;
    $140 = (($139) + ($138))|0;
    $24 = $140;
    $141 = $17;
    $142 = $24;
    $143 = (($141) + ($142)|0);
    $144 = $18;
    $145 = $24;
    $146 = (($144) - ($145))|0;
    $147 = (_nk_utf_decode($143,$23,$146)|0);
    $22 = $147;
    continue;
   }
  }
  $68 = $15;
  $69 = $28;
  $70 = $68 + $69;
  $71 = ((($32)) + 4|0);
  HEAPF32[$71>>2] = $70;
  $72 = $19;
  $73 = ((($32)) + 12|0);
  HEAPF32[$73>>2] = $72;
  $74 = $25;
  $75 = ((($32)) + 8|0);
  HEAPF32[$75>>2] = $74;
  $76 = $14;
  HEAPF32[$32>>2] = $76;
  $77 = $29;
  $78 = ($77|0)!=(0);
  if (!($78)) {
   $79 = $16;
   $80 = +HEAPF32[$32>>2];
   $81 = $80 + $79;
   HEAPF32[$32>>2] = $81;
  }
  $82 = $21;
  $83 = ($82|0)!=(0);
  if ($83) {
   $84 = $12;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$32+12>>2]|0;
   ;HEAP8[$$byval_copy6>>0]=HEAP8[$9>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$9+3>>0]|0;
   _nk_fill_rect($84,$$byval_copy,0.0,$$byval_copy6);
  }
  $85 = $12;
  $86 = $27;
  $87 = $17;
  $88 = $24;
  $89 = (($87) + ($88)|0);
  $90 = $27;
  $91 = $89;
  $92 = $90;
  $93 = (($91) - ($92))|0;
  $94 = $20;
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$32+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$32+12>>2]|0;
  _nk_widget_text($85,$$byval_copy7,$86,$93,$30,18,$94);
  $95 = $24;
  $96 = (($95) + 1)|0;
  $24 = $96;
  $97 = $29;
  $98 = (($97) + 1)|0;
  $29 = $98;
  $25 = 0.0;
  $99 = $17;
  $100 = $24;
  $101 = (($99) + ($100)|0);
  $27 = $101;
  $102 = $19;
  $103 = $28;
  $104 = $103 + $102;
  $28 = $104;
  $105 = $17;
  $106 = $24;
  $107 = (($105) + ($106)|0);
  $108 = $18;
  $109 = $24;
  $110 = (($108) - ($109))|0;
  $111 = (_nk_utf_decode($107,$23,$110)|0);
  $22 = $111;
 }
 $148 = $25;
 $149 = $148 > 0.0;
 if (!($149)) {
  STACKTOP = sp;return;
 }
 $150 = $15;
 $151 = $28;
 $152 = $150 + $151;
 $153 = ((($33)) + 4|0);
 HEAPF32[$153>>2] = $152;
 $154 = $19;
 $155 = ((($33)) + 12|0);
 HEAPF32[$155>>2] = $154;
 $156 = $25;
 $157 = ((($33)) + 8|0);
 HEAPF32[$157>>2] = $156;
 $158 = $14;
 HEAPF32[$33>>2] = $158;
 $159 = $29;
 $160 = ($159|0)!=(0);
 if (!($160)) {
  $161 = $16;
  $162 = +HEAPF32[$33>>2];
  $163 = $162 + $161;
  HEAPF32[$33>>2] = $163;
 }
 $164 = $21;
 $165 = ($164|0)!=(0);
 if ($165) {
  $166 = $12;
  ;HEAP32[$$byval_copy9>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$33+12>>2]|0;
  ;HEAP8[$$byval_copy10>>0]=HEAP8[$9>>0]|0;HEAP8[$$byval_copy10+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy10+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy10+3>>0]=HEAP8[$9+3>>0]|0;
  _nk_fill_rect($166,$$byval_copy9,0.0,$$byval_copy10);
 }
 $167 = $12;
 $168 = $27;
 $169 = $17;
 $170 = $24;
 $171 = (($169) + ($170)|0);
 $172 = $27;
 $173 = $171;
 $174 = $172;
 $175 = (($173) - ($174))|0;
 $176 = $20;
 ;HEAP32[$$byval_copy11>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$33+12>>2]|0;
 _nk_widget_text($167,$$byval_copy11,$168,$175,$30,17,$176);
 STACKTOP = sp;return;
}
function _nk_textedit_locate_coord($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp + 24|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = $6;
 $19 = ((($18)) + 12|0);
 $20 = ((($19)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $12 = $21;
 $13 = 0.0;
 $15 = 0;
 $22 = ((($11)) + 4|0);
 HEAPF32[$22>>2] = 0.0;
 HEAPF32[$11>>2] = 0.0;
 $23 = ((($11)) + 16|0);
 HEAPF32[$23>>2] = 0.0;
 $24 = ((($11)) + 12|0);
 HEAPF32[$24>>2] = 0.0;
 $25 = ((($11)) + 20|0);
 HEAP32[$25>>2] = 0;
 while(1) {
  $26 = $15;
  $27 = $12;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   label = 10;
   break;
  }
  $29 = $6;
  $30 = $15;
  $31 = $10;
  $32 = $9;
  _nk_textedit_layout_row($11,$29,$30,$31,$32);
  $33 = ((($11)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)<=(0);
  if ($35) {
   label = 4;
   break;
  }
  $37 = $15;
  $38 = ($37|0)==(0);
  if ($38) {
   $39 = $8;
   $40 = $13;
   $41 = ((($11)) + 12|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $40 + $42;
   $44 = $39 < $43;
   if ($44) {
    label = 7;
    break;
   }
  }
  $45 = $8;
  $46 = $13;
  $47 = ((($11)) + 16|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $46 + $48;
  $50 = $45 < $49;
  if ($50) {
   label = 10;
   break;
  }
  $51 = ((($11)) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $15;
  $54 = (($53) + ($52))|0;
  $15 = $54;
  $55 = ((($11)) + 8|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $13;
  $58 = $57 + $56;
  $13 = $58;
 }
 if ((label|0) == 4) {
  $36 = $12;
  $5 = $36;
  $116 = $5;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 7) {
  $5 = 0;
  $116 = $5;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 10) {
  $59 = $15;
  $60 = $12;
  $61 = ($59|0)>=($60|0);
  if ($61) {
   $62 = $12;
   $5 = $62;
   $116 = $5;
   STACKTOP = sp;return ($116|0);
  }
  $63 = $7;
  $64 = +HEAPF32[$11>>2];
  $65 = $63 < $64;
  if ($65) {
   $66 = $15;
   $5 = $66;
   $116 = $5;
   STACKTOP = sp;return ($116|0);
  }
  $67 = $7;
  $68 = ((($11)) + 4|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $67 < $69;
  L19: do {
   if ($70) {
    $71 = $15;
    $16 = $71;
    $72 = +HEAPF32[$11>>2];
    $14 = $72;
    $15 = 0;
    while(1) {
     $73 = $15;
     $74 = ((($11)) + 20|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($73|0)<($75|0);
     if (!($76)) {
      break L19;
     }
     $77 = $6;
     $78 = $16;
     $79 = $15;
     $80 = $9;
     $81 = (+_nk_textedit_get_width($77,$78,$79,$80));
     $17 = $81;
     $82 = $7;
     $83 = $14;
     $84 = $17;
     $85 = $83 + $84;
     $86 = $82 < $85;
     if ($86) {
      break;
     }
     $97 = $17;
     $98 = $14;
     $99 = $98 + $97;
     $14 = $99;
     $100 = $15;
     $101 = (($100) + 1)|0;
     $15 = $101;
    }
    $87 = $7;
    $88 = $14;
    $89 = $17;
    $90 = $89 / 2.0;
    $91 = $88 + $90;
    $92 = $87 < $91;
    $93 = $16;
    $94 = $15;
    $95 = (($93) + ($94))|0;
    if ($92) {
     $5 = $95;
     $116 = $5;
     STACKTOP = sp;return ($116|0);
    } else {
     $96 = (($95) + 1)|0;
     $5 = $96;
     $116 = $5;
     STACKTOP = sp;return ($116|0);
    }
   }
  } while(0);
  $102 = $6;
  $103 = ((($102)) + 12|0);
  $104 = $15;
  $105 = ((($11)) + 20|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($104) + ($106))|0;
  $108 = (($107) - 1)|0;
  $109 = (_nk_str_rune_at($103,$108)|0);
  $110 = ($109|0)==(10);
  $111 = $15;
  $112 = ((($11)) + 20|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + ($113))|0;
  if ($110) {
   $115 = (($114) - 1)|0;
   $5 = $115;
   $116 = $5;
   STACKTOP = sp;return ($116|0);
  } else {
   $5 = $114;
   $116 = $5;
   STACKTOP = sp;return ($116|0);
  }
 }
 return (0)|0;
}
function _nk_textedit_layout_row($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 32|0;
 $11 = sp + 28|0;
 $12 = sp + 24|0;
 $13 = sp + 20|0;
 $17 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 HEAP32[$11>>2] = 0;
 $18 = $6;
 $19 = ((($18)) + 12|0);
 $20 = (_nk_str_len_char($19)|0);
 $14 = $20;
 $21 = $6;
 $22 = ((($21)) + 12|0);
 $23 = (_nk_str_get_const($22)|0);
 $24 = $14;
 $25 = (($23) + ($24)|0);
 $15 = $25;
 $26 = $6;
 $27 = ((($26)) + 12|0);
 $28 = $7;
 $29 = (_nk_str_at_const($27,$28,$12,$10)|0);
 $16 = $29;
 $30 = $9;
 $31 = $16;
 $32 = $15;
 $33 = $16;
 $34 = $32;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $37 = $8;
 _nk_text_calculate_text_bounds($17,$30,$31,$36,$37,$13,0,$11,1);
 $38 = $5;
 HEAPF32[$38>>2] = 0.0;
 $39 = +HEAPF32[$17>>2];
 $40 = $5;
 $41 = ((($40)) + 4|0);
 HEAPF32[$41>>2] = $39;
 $42 = ((($17)) + 4|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $5;
 $45 = ((($44)) + 8|0);
 HEAPF32[$45>>2] = $43;
 $46 = $5;
 $47 = ((($46)) + 12|0);
 HEAPF32[$47>>2] = 0.0;
 $48 = ((($17)) + 4|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $5;
 $51 = ((($50)) + 16|0);
 HEAPF32[$51>>2] = $49;
 $52 = HEAP32[$11>>2]|0;
 $53 = $5;
 $54 = ((($53)) + 20|0);
 HEAP32[$54>>2] = $52;
 STACKTOP = sp;return;
}
function _nk_textedit_get_width($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 28|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 HEAP32[$8>>2] = 0;
 HEAP32[$9>>2] = 0;
 $11 = $4;
 $12 = ((($11)) + 12|0);
 $13 = $5;
 $14 = $6;
 $15 = (($13) + ($14))|0;
 $16 = (_nk_str_at_const($12,$15,$9,$8)|0);
 $10 = $16;
 $17 = $7;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $7;
 $21 = $7;
 $22 = ((($21)) + 4|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $10;
 $25 = HEAP32[$8>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
 $26 = (+FUNCTION_TABLE_didii[$19 & 15]($$byval_copy,$23,$24,$25));
 STACKTOP = sp;return (+$26);
}
function _nk_textedit_prep_selection_at_cursor($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)!=($7|0);
 $9 = $1;
 if ($8) {
  $16 = ((($9)) + 96|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = ((($18)) + 88|0);
  HEAP32[$19>>2] = $17;
  STACKTOP = sp;return;
 } else {
  $10 = ((($9)) + 88|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 96|0);
  HEAP32[$13>>2] = $11;
  $14 = $1;
  $15 = ((($14)) + 92|0);
  HEAP32[$15>>2] = $11;
  STACKTOP = sp;return;
 }
}
function _nk_textedit_move_to_first($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)!=($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 _nk_textedit_sortselection($9);
 $10 = $1;
 $11 = ((($10)) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 88|0);
 HEAP32[$14>>2] = $12;
 $15 = $1;
 $16 = ((($15)) + 92|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = ((($18)) + 96|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = ((($20)) + 103|0);
 HEAP8[$21>>0] = 0;
 STACKTOP = sp;return;
}
function _nk_textedit_move_to_last($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)!=($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 _nk_textedit_sortselection($9);
 $10 = $1;
 _nk_textedit_clamp($10);
 $11 = $1;
 $12 = ((($11)) + 96|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 88|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = ((($16)) + 96|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = ((($19)) + 92|0);
 HEAP32[$20>>2] = $18;
 $21 = $1;
 $22 = ((($21)) + 103|0);
 HEAP8[$22>>0] = 0;
 STACKTOP = sp;return;
}
function _nk_textedit_move_to_word_previous($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - 1)|0;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = ($7|0)>=(0);
  if ($8) {
   $9 = $1;
   $10 = $2;
   $11 = (_nk_is_word_boundary($9,$10)|0);
   $12 = ($11|0)!=(0);
   $13 = $12 ^ 1;
   $18 = $13;
  } else {
   $18 = 0;
  }
  $14 = $2;
  if (!($18)) {
   break;
  }
  $15 = (($14) + -1)|0;
  $2 = $15;
 }
 $16 = ($14|0)<(0);
 if (!($16)) {
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 $2 = 0;
 $17 = $2;
 STACKTOP = sp;return ($17|0);
}
function _nk_textedit_move_to_word_next($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $1;
 $9 = ((($8)) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 $3 = $11;
 while(1) {
  $12 = $3;
  $13 = $2;
  $14 = ($12|0)<($13|0);
  if ($14) {
   $15 = $1;
   $16 = $3;
   $17 = (_nk_is_word_boundary($15,$16)|0);
   $18 = ($17|0)!=(0);
   $19 = $18 ^ 1;
   $26 = $19;
  } else {
   $26 = 0;
  }
  $20 = $3;
  if (!($26)) {
   break;
  }
  $21 = (($20) + 1)|0;
  $3 = $21;
 }
 $22 = $2;
 $23 = ($20|0)>($22|0);
 if (!($23)) {
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 $24 = $2;
 $3 = $24;
 $25 = $3;
 STACKTOP = sp;return ($25|0);
}
function _nk_textedit_find_charpos($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = 0;
 $17 = $7;
 $18 = ((($17)) + 12|0);
 $19 = ((($18)) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $14 = $20;
 $15 = 0;
 _nk_zero($12,24);
 $21 = $8;
 $22 = $14;
 $23 = ($21|0)==($22|0);
 if ($23) {
  $24 = $7;
  $25 = $11;
  $26 = $10;
  _nk_textedit_layout_row($12,$24,0,$25,$26);
  $27 = $9;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $6;
   $30 = ((($29)) + 12|0);
   HEAP32[$30>>2] = 0;
   $31 = $14;
   $32 = $6;
   $33 = ((($32)) + 16|0);
   HEAP32[$33>>2] = $31;
  } else {
   while(1) {
    $34 = $15;
    $35 = $14;
    $36 = ($34|0)<($35|0);
    $37 = $15;
    if (!($36)) {
     break;
    }
    $13 = $37;
    $38 = ((($12)) + 20|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $15;
    $41 = (($40) + ($39))|0;
    $15 = $41;
    $42 = $7;
    $43 = $15;
    $44 = $11;
    $45 = $10;
    _nk_textedit_layout_row($12,$42,$43,$44,$45);
   }
   $46 = $6;
   $47 = ((($46)) + 12|0);
   HEAP32[$47>>2] = $37;
   $48 = ((($12)) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $6;
   $51 = ((($50)) + 16|0);
   HEAP32[$51>>2] = $49;
  }
  $52 = ((($12)) + 4|0);
  $53 = +HEAPF32[$52>>2];
  $54 = $6;
  HEAPF32[$54>>2] = $53;
  $55 = ((($12)) + 12|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $6;
  $58 = ((($57)) + 4|0);
  HEAPF32[$58>>2] = $56;
  $59 = ((($12)) + 16|0);
  $60 = +HEAPF32[$59>>2];
  $61 = ((($12)) + 12|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $60 - $62;
  $64 = $6;
  $65 = ((($64)) + 8|0);
  HEAPF32[$65>>2] = $63;
  $66 = $13;
  $67 = $6;
  $68 = ((($67)) + 20|0);
  HEAP32[$68>>2] = $66;
  STACKTOP = sp;return;
 } else {
  $69 = $6;
  $70 = ((($69)) + 4|0);
  HEAPF32[$70>>2] = 0.0;
  while(1) {
   $71 = $7;
   $72 = $15;
   $73 = $11;
   $74 = $10;
   _nk_textedit_layout_row($12,$71,$72,$73,$74);
   $75 = $8;
   $76 = $15;
   $77 = ((($12)) + 20|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($76) + ($78))|0;
   $80 = ($75|0)<($79|0);
   $81 = $15;
   if ($80) {
    break;
   }
   $13 = $81;
   $82 = ((($12)) + 20|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $15;
   $85 = (($84) + ($83))|0;
   $15 = $85;
   $86 = ((($12)) + 8|0);
   $87 = +HEAPF32[$86>>2];
   $88 = $6;
   $89 = ((($88)) + 4|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $90 + $87;
   HEAPF32[$89>>2] = $91;
  }
  $16 = $81;
  $92 = $6;
  $93 = ((($92)) + 12|0);
  HEAP32[$93>>2] = $81;
  $94 = ((($12)) + 20|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $6;
  $97 = ((($96)) + 16|0);
  HEAP32[$97>>2] = $95;
  $98 = ((($12)) + 16|0);
  $99 = +HEAPF32[$98>>2];
  $100 = ((($12)) + 12|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $99 - $101;
  $103 = $6;
  $104 = ((($103)) + 8|0);
  HEAPF32[$104>>2] = $102;
  $105 = $13;
  $106 = $6;
  $107 = ((($106)) + 20|0);
  HEAP32[$107>>2] = $105;
  $108 = +HEAPF32[$12>>2];
  $109 = $6;
  HEAPF32[$109>>2] = $108;
  $15 = 0;
  while(1) {
   $110 = $16;
   $111 = $15;
   $112 = (($110) + ($111))|0;
   $113 = $8;
   $114 = ($112|0)<($113|0);
   if (!($114)) {
    break;
   }
   $115 = $7;
   $116 = $16;
   $117 = $15;
   $118 = $10;
   $119 = (+_nk_textedit_get_width($115,$116,$117,$118));
   $120 = $6;
   $121 = +HEAPF32[$120>>2];
   $122 = $121 + $119;
   HEAPF32[$120>>2] = $122;
   $123 = $15;
   $124 = (($123) + 1)|0;
   $15 = $124;
  }
  STACKTOP = sp;return;
 }
}
function _nk_textedit_sortselection($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 92|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)<($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ((($10)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 $2 = $12;
 $13 = $1;
 $14 = ((($13)) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 96|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = $1;
 $20 = ((($19)) + 92|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _nk_is_word_boundary($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7|0)<=(0);
 if ($8) {
  $2 = 1;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 }
 $9 = $3;
 $10 = ((($9)) + 12|0);
 $11 = $4;
 $12 = (_nk_str_at_rune($10,$11,$6,$5)|0);
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $2 = 1;
  $40 = $2;
  STACKTOP = sp;return ($40|0);
 }
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)==(32);
 $16 = HEAP32[$6>>2]|0;
 $17 = ($16|0)==(9);
 $or$cond = $15 | $17;
 $18 = HEAP32[$6>>2]|0;
 $19 = ($18|0)==(12288);
 $or$cond3 = $or$cond | $19;
 $20 = HEAP32[$6>>2]|0;
 $21 = ($20|0)==(44);
 $or$cond5 = $or$cond3 | $21;
 $22 = HEAP32[$6>>2]|0;
 $23 = ($22|0)==(59);
 $or$cond7 = $or$cond5 | $23;
 $24 = HEAP32[$6>>2]|0;
 $25 = ($24|0)==(40);
 $or$cond9 = $or$cond7 | $25;
 $26 = HEAP32[$6>>2]|0;
 $27 = ($26|0)==(41);
 $or$cond11 = $or$cond9 | $27;
 $28 = HEAP32[$6>>2]|0;
 $29 = ($28|0)==(123);
 $or$cond13 = $or$cond11 | $29;
 $30 = HEAP32[$6>>2]|0;
 $31 = ($30|0)==(125);
 $or$cond15 = $or$cond13 | $31;
 $32 = HEAP32[$6>>2]|0;
 $33 = ($32|0)==(91);
 $or$cond17 = $or$cond15 | $33;
 $34 = HEAP32[$6>>2]|0;
 $35 = ($34|0)==(93);
 $or$cond19 = $or$cond17 | $35;
 if ($or$cond19) {
  $39 = 1;
 } else {
  $36 = HEAP32[$6>>2]|0;
  $37 = ($36|0)==(124);
  $39 = $37;
 }
 $38 = $39&1;
 $2 = $38;
 $40 = $2;
 STACKTOP = sp;return ($40|0);
}
function _nk_do_property($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0;
 var $108 = 0, $109 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0.0, $129 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0;
 var $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0;
 var $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0;
 var $220 = 0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0;
 var $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0;
 var $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0;
 var $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0;
 var $384 = 0, $385 = 0.0, $386 = 0, $387 = 0.0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $40 = 0, $400 = 0, $401 = 0.0;
 var $402 = 0.0, $403 = 0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0.0, $438 = 0;
 var $439 = 0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0;
 var $457 = 0.0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0;
 var $53 = 0.0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0.0, $538 = 0.0, $539 = 0, $54 = 0.0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0;
 var $548 = 0.0, $549 = 0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0.0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0, $563 = 0, $564 = 0.0, $565 = 0.0;
 var $566 = 0, $567 = 0.0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0.0, $580 = 0.0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0.0, $585 = 0, $586 = 0, $587 = 0.0, $588 = 0.0, $589 = 0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0, $595 = 0.0, $596 = 0, $597 = 0, $598 = 0.0, $599 = 0, $60 = 0.0, $600 = 0.0, $601 = 0;
 var $602 = 0, $603 = 0.0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0.0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0.0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0.0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0.0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0.0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0.0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0.0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0.0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0.0, $79 = 0, $790 = 0, $791 = 0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0, $796 = 0.0, $797 = 0, $798 = 0.0, $799 = 0, $80 = 0, $800 = 0, $801 = 0.0;
 var $802 = 0, $803 = 0.0, $804 = 0, $805 = 0, $806 = 0.0, $807 = 0, $808 = 0.0, $809 = 0, $81 = 0, $810 = 0, $811 = 0.0, $812 = 0, $813 = 0, $814 = 0, $815 = 0.0, $816 = 0, $817 = 0.0, $818 = 0, $819 = 0, $82 = 0.0;
 var $820 = 0.0, $821 = 0, $822 = 0, $823 = 0.0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0.0, $829 = 0, $83 = 0, $830 = 0, $831 = 0.0, $832 = 0, $833 = 0, $834 = 0, $835 = 0.0, $836 = 0, $837 = 0.0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0.0, $841 = 0, $842 = 0.0, $843 = 0, $844 = 0, $845 = 0.0, $846 = 0, $847 = 0.0, $848 = 0, $849 = 0, $85 = 0.0, $850 = 0.0, $851 = 0, $852 = 0, $853 = 0, $854 = 0.0, $855 = 0, $856 = 0.0;
 var $857 = 0, $858 = 0, $859 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $$byval_copy14 = sp + 280|0;
 $$byval_copy13 = sp + 264|0;
 $$byval_copy12 = sp + 248|0;
 $$byval_copy11 = sp + 244|0;
 $$byval_copy10 = sp + 240|0;
 $$byval_copy9 = sp + 224|0;
 $$byval_copy8 = sp + 208|0;
 $$byval_copy7 = sp + 192|0;
 $$byval_copy6 = sp + 176|0;
 $$byval_copy5 = sp + 172|0;
 $$byval_copy4 = sp + 168|0;
 $$byval_copy = sp + 164|0;
 $31 = sp + 96|0;
 $33 = sp + 296|0;
 $37 = sp + 64|0;
 $38 = sp + 48|0;
 $39 = sp + 32|0;
 $40 = sp + 16|0;
 $41 = sp;
 $15 = $0;
 $16 = $1;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $28 = $14;
 $35 = 0;
 $42 = $27;
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $44 / 2.0;
 $46 = ((($37)) + 12|0);
 HEAPF32[$46>>2] = $45;
 $47 = ((($37)) + 12|0);
 $48 = +HEAPF32[$47>>2];
 $49 = ((($37)) + 8|0);
 HEAPF32[$49>>2] = $48;
 $50 = +HEAPF32[$2>>2];
 $51 = $24;
 $52 = ((($51)) + 84|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $50 + $53;
 $55 = $24;
 $56 = ((($55)) + 92|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $54 + $57;
 HEAPF32[$37>>2] = $58;
 $59 = ((($2)) + 4|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $24;
 $62 = ((($61)) + 84|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $60 + $63;
 $65 = ((($2)) + 12|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $66 / 2.0;
 $68 = $64 + $67;
 $69 = ((($37)) + 12|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $70 / 2.0;
 $72 = $68 - $71;
 $73 = ((($37)) + 4|0);
 HEAPF32[$73>>2] = $72;
 $74 = $17;
 $75 = (_nk_strlen($74)|0);
 $32 = $75;
 $76 = $27;
 $77 = ((($76)) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $27;
 $80 = $27;
 $81 = ((($80)) + 4|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $17;
 $84 = $32;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$79>>2]|0;
 $85 = (+FUNCTION_TABLE_didii[$78 & 15]($$byval_copy,$82,$83,$84));
 $34 = $85;
 $86 = +HEAPF32[$37>>2];
 $87 = ((($37)) + 8|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $86 + $88;
 $90 = $24;
 $91 = ((($90)) + 92|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $89 + $92;
 HEAPF32[$39>>2] = $93;
 $94 = $34;
 $95 = $24;
 $96 = ((($95)) + 92|0);
 $97 = +HEAPF32[$96>>2];
 $98 = 2.0 * $97;
 $99 = $94 + $98;
 $100 = ((($39)) + 8|0);
 HEAPF32[$100>>2] = $99;
 $101 = ((($2)) + 4|0);
 $102 = +HEAPF32[$101>>2];
 $103 = $24;
 $104 = ((($103)) + 84|0);
 $105 = +HEAPF32[$104>>2];
 $106 = $102 + $105;
 $107 = $24;
 $108 = ((($107)) + 92|0);
 $109 = ((($108)) + 4|0);
 $110 = +HEAPF32[$109>>2];
 $111 = $106 + $110;
 $112 = ((($39)) + 4|0);
 HEAPF32[$112>>2] = $111;
 $113 = ((($2)) + 12|0);
 $114 = +HEAPF32[$113>>2];
 $115 = $24;
 $116 = ((($115)) + 84|0);
 $117 = +HEAPF32[$116>>2];
 $118 = 2.0 * $117;
 $119 = $24;
 $120 = ((($119)) + 92|0);
 $121 = ((($120)) + 4|0);
 $122 = +HEAPF32[$121>>2];
 $123 = 2.0 * $122;
 $124 = $118 + $123;
 $125 = $114 - $124;
 $126 = ((($39)) + 12|0);
 HEAPF32[$126>>2] = $125;
 $127 = ((($37)) + 4|0);
 $128 = +HEAPF32[$127>>2];
 $129 = ((($38)) + 4|0);
 HEAPF32[$129>>2] = $128;
 $130 = ((($37)) + 8|0);
 $131 = +HEAPF32[$130>>2];
 $132 = ((($38)) + 8|0);
 HEAPF32[$132>>2] = $131;
 $133 = ((($37)) + 12|0);
 $134 = +HEAPF32[$133>>2];
 $135 = ((($38)) + 12|0);
 HEAPF32[$135>>2] = $134;
 $136 = +HEAPF32[$2>>2];
 $137 = ((($2)) + 8|0);
 $138 = +HEAPF32[$137>>2];
 $139 = $136 + $138;
 $140 = ((($38)) + 8|0);
 $141 = +HEAPF32[$140>>2];
 $142 = $24;
 $143 = ((($142)) + 92|0);
 $144 = +HEAPF32[$143>>2];
 $145 = $141 + $144;
 $146 = $139 - $145;
 HEAPF32[$38>>2] = $146;
 $147 = $22;
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)==(1);
 if ($149) {
  $150 = $27;
  $151 = ((($150)) + 8|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $27;
  $154 = $27;
  $155 = ((($154)) + 4|0);
  $156 = +HEAPF32[$155>>2];
  $157 = $20;
  $158 = $21;
  $159 = HEAP32[$158>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$153>>2]|0;
  $160 = (+FUNCTION_TABLE_didii[$152 & 15]($$byval_copy4,$156,$157,$159));
  $34 = $160;
  $161 = $24;
  $162 = ((($161)) + 100|0);
  $163 = ((($162)) + 548|0);
  $164 = +HEAPF32[$163>>2];
  $165 = $34;
  $166 = $165 + $164;
  $34 = $166;
  $167 = $21;
  $36 = $167;
  $168 = $20;
  $35 = $168;
 } else {
  $169 = $18;
  $170 = HEAP32[$169>>2]|0;
  switch ($170|0) {
  case 0:  {
   $171 = $18;
   $172 = ((($171)) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   (_nk_itoa($33,$173)|0);
   $174 = (_nk_strlen($33)|0);
   HEAP32[$31>>2] = $174;
   break;
  }
  case 1:  {
   $175 = $18;
   $176 = ((($175)) + 8|0);
   $177 = +HEAPF32[$176>>2];
   $178 = $177;
   (_nk_dtoa($33,$178)|0);
   $179 = (_nk_string_float_limit($33,2)|0);
   HEAP32[$31>>2] = $179;
   break;
  }
  case 2:  {
   $180 = $18;
   $181 = ((($180)) + 8|0);
   $182 = +HEAPF64[$181>>3];
   (_nk_dtoa($33,$182)|0);
   $183 = (_nk_string_float_limit($33,2)|0);
   HEAP32[$31>>2] = $183;
   break;
  }
  default: {
  }
  }
  $184 = $27;
  $185 = ((($184)) + 8|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $27;
  $188 = $27;
  $189 = ((($188)) + 4|0);
  $190 = +HEAPF32[$189>>2];
  $191 = HEAP32[$31>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$187>>2]|0;
  $192 = (+FUNCTION_TABLE_didii[$186 & 15]($$byval_copy5,$190,$33,$191));
  $34 = $192;
  $35 = $33;
  $36 = $31;
 }
 $193 = $34;
 $194 = $24;
 $195 = ((($194)) + 92|0);
 $196 = +HEAPF32[$195>>2];
 $197 = 2.0 * $196;
 $198 = $193 + $197;
 $199 = ((($40)) + 8|0);
 HEAPF32[$199>>2] = $198;
 $200 = ((($40)) + 8|0);
 $201 = +HEAPF32[$200>>2];
 $202 = +HEAPF32[$38>>2];
 $203 = +HEAPF32[$39>>2];
 $204 = ((($39)) + 8|0);
 $205 = +HEAPF32[$204>>2];
 $206 = $203 + $205;
 $207 = $202 - $206;
 $208 = $201 < $207;
 if ($208) {
  $209 = ((($40)) + 8|0);
  $210 = +HEAPF32[$209>>2];
  $218 = $210;
 } else {
  $211 = +HEAPF32[$38>>2];
  $212 = +HEAPF32[$39>>2];
  $213 = ((($39)) + 8|0);
  $214 = +HEAPF32[$213>>2];
  $215 = $212 + $214;
  $216 = $211 - $215;
  $218 = $216;
 }
 $217 = ((($40)) + 8|0);
 HEAPF32[$217>>2] = $218;
 $219 = +HEAPF32[$38>>2];
 $220 = ((($40)) + 8|0);
 $221 = +HEAPF32[$220>>2];
 $222 = $24;
 $223 = ((($222)) + 92|0);
 $224 = +HEAPF32[$223>>2];
 $225 = $221 + $224;
 $226 = $219 - $225;
 HEAPF32[$40>>2] = $226;
 $227 = ((($2)) + 4|0);
 $228 = +HEAPF32[$227>>2];
 $229 = $24;
 $230 = ((($229)) + 84|0);
 $231 = +HEAPF32[$230>>2];
 $232 = $228 + $231;
 $233 = ((($40)) + 4|0);
 HEAPF32[$233>>2] = $232;
 $234 = ((($2)) + 12|0);
 $235 = +HEAPF32[$234>>2];
 $236 = $24;
 $237 = ((($236)) + 84|0);
 $238 = +HEAPF32[$237>>2];
 $239 = 2.0 * $238;
 $240 = $235 - $239;
 $241 = ((($40)) + 12|0);
 HEAPF32[$241>>2] = $240;
 $242 = +HEAPF32[$40>>2];
 $243 = +HEAPF32[$39>>2];
 $244 = ((($39)) + 8|0);
 $245 = +HEAPF32[$244>>2];
 $246 = $243 + $245;
 $247 = $242 - $246;
 $248 = ((($41)) + 8|0);
 HEAPF32[$248>>2] = $247;
 $249 = +HEAPF32[$39>>2];
 $250 = ((($39)) + 8|0);
 $251 = +HEAPF32[$250>>2];
 $252 = $249 + $251;
 HEAPF32[$41>>2] = $252;
 $253 = ((($2)) + 4|0);
 $254 = +HEAPF32[$253>>2];
 $255 = ((($41)) + 4|0);
 HEAPF32[$255>>2] = $254;
 $256 = ((($2)) + 12|0);
 $257 = +HEAPF32[$256>>2];
 $258 = ((($41)) + 12|0);
 HEAPF32[$258>>2] = $257;
 $259 = $22;
 $260 = HEAP32[$259>>2]|0;
 $261 = ($260|0)==(1);
 $262 = $261&1;
 $30 = $262;
 $263 = $15;
 $264 = $26;
 $265 = $22;
 $266 = $18;
 $267 = $19;
 ;HEAP32[$$byval_copy6>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$2+12>>2]|0;
 ;HEAP32[$$byval_copy7>>2]=HEAP32[$39>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$39+12>>2]|0;
 ;HEAP32[$$byval_copy8>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$$byval_copy8+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$$byval_copy8+12>>2]=HEAP32[$40+12>>2]|0;
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$41>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$41+12>>2]|0;
 _nk_property_behavior($263,$264,$$byval_copy6,$$byval_copy7,$$byval_copy8,$$byval_copy9,$265,$266,$267);
 $268 = $24;
 $269 = ((($268)) + 932|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = ($270|0)!=(0|0);
 if ($271) {
  $272 = $24;
  $273 = ((($272)) + 932|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = $16;
  $276 = $24;
  $277 = ((($276)) + 928|0);
  ;HEAP32[$$byval_copy10>>2]=HEAP32[$277>>2]|0;
  FUNCTION_TABLE_vii[$274 & 31]($275,$$byval_copy10);
 }
 $278 = $16;
 $279 = $24;
 $280 = $15;
 $281 = HEAP32[$280>>2]|0;
 $282 = $17;
 $283 = $32;
 $284 = $27;
 _nk_draw_property($278,$279,$2,$39,$281,$282,$283,$284);
 $285 = $24;
 $286 = ((($285)) + 936|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = ($287|0)!=(0|0);
 if ($288) {
  $289 = $24;
  $290 = ((($289)) + 936|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = $16;
  $293 = $24;
  $294 = ((($293)) + 928|0);
  ;HEAP32[$$byval_copy11>>2]=HEAP32[$294>>2]|0;
  FUNCTION_TABLE_vii[$291 & 31]($292,$$byval_copy11);
 }
 $295 = $15;
 $296 = $16;
 $297 = $24;
 $298 = ((($297)) + 76|0);
 $299 = HEAP32[$298>>2]|0;
 $300 = $24;
 $301 = ((($300)) + 800|0);
 $302 = $26;
 $303 = $27;
 ;HEAP32[$$byval_copy12>>2]=HEAP32[$37>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$$byval_copy12+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$$byval_copy12+12>>2]=HEAP32[$37+12>>2]|0;
 $304 = (_nk_do_button_symbol($295,$296,$$byval_copy12,$299,0,$301,$302,$303)|0);
 $305 = ($304|0)!=(0);
 L20: do {
  if ($305) {
   $306 = $18;
   $307 = HEAP32[$306>>2]|0;
   switch ($307|0) {
   case 0:  {
    $308 = $18;
    $309 = ((($308)) + 8|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = $18;
    $312 = ((($311)) + 32|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = (($310) - ($313))|0;
    $315 = $18;
    $316 = ((($315)) + 24|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = ($314|0)<($317|0);
    $319 = $18;
    if ($318) {
     $320 = ((($319)) + 8|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = $18;
     $323 = ((($322)) + 32|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = (($321) - ($324))|0;
     $331 = $325;
    } else {
     $326 = ((($319)) + 24|0);
     $327 = HEAP32[$326>>2]|0;
     $331 = $327;
    }
    $328 = $18;
    $329 = ((($328)) + 16|0);
    $330 = HEAP32[$329>>2]|0;
    $332 = ($331|0)<($330|0);
    $333 = $18;
    do {
     if ($332) {
      $334 = ((($333)) + 16|0);
      $335 = HEAP32[$334>>2]|0;
      $357 = $335;
     } else {
      $336 = ((($333)) + 8|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = $18;
      $339 = ((($338)) + 32|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = (($337) - ($340))|0;
      $342 = $18;
      $343 = ((($342)) + 24|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = ($341|0)<($344|0);
      $346 = $18;
      if ($345) {
       $347 = ((($346)) + 8|0);
       $348 = HEAP32[$347>>2]|0;
       $349 = $18;
       $350 = ((($349)) + 32|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($348) - ($351))|0;
       $357 = $352;
       break;
      } else {
       $353 = ((($346)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $357 = $354;
       break;
      }
     }
    } while(0);
    $355 = $18;
    $356 = ((($355)) + 8|0);
    HEAP32[$356>>2] = $357;
    break L20;
    break;
   }
   case 1:  {
    $358 = $18;
    $359 = ((($358)) + 8|0);
    $360 = +HEAPF32[$359>>2];
    $361 = $18;
    $362 = ((($361)) + 32|0);
    $363 = +HEAPF32[$362>>2];
    $364 = $360 - $363;
    $365 = $18;
    $366 = ((($365)) + 24|0);
    $367 = +HEAPF32[$366>>2];
    $368 = $364 < $367;
    $369 = $18;
    if ($368) {
     $370 = ((($369)) + 8|0);
     $371 = +HEAPF32[$370>>2];
     $372 = $18;
     $373 = ((($372)) + 32|0);
     $374 = +HEAPF32[$373>>2];
     $375 = $371 - $374;
     $382 = $375;
    } else {
     $376 = ((($369)) + 24|0);
     $377 = +HEAPF32[$376>>2];
     $382 = $377;
    }
    $378 = $18;
    $379 = ((($378)) + 16|0);
    $380 = +HEAPF32[$379>>2];
    $381 = $382 < $380;
    $383 = $18;
    do {
     if ($381) {
      $384 = ((($383)) + 16|0);
      $385 = +HEAPF32[$384>>2];
      $407 = $385;
     } else {
      $386 = ((($383)) + 8|0);
      $387 = +HEAPF32[$386>>2];
      $388 = $18;
      $389 = ((($388)) + 32|0);
      $390 = +HEAPF32[$389>>2];
      $391 = $387 - $390;
      $392 = $18;
      $393 = ((($392)) + 24|0);
      $394 = +HEAPF32[$393>>2];
      $395 = $391 < $394;
      $396 = $18;
      if ($395) {
       $397 = ((($396)) + 8|0);
       $398 = +HEAPF32[$397>>2];
       $399 = $18;
       $400 = ((($399)) + 32|0);
       $401 = +HEAPF32[$400>>2];
       $402 = $398 - $401;
       $407 = $402;
       break;
      } else {
       $403 = ((($396)) + 24|0);
       $404 = +HEAPF32[$403>>2];
       $407 = $404;
       break;
      }
     }
    } while(0);
    $405 = $18;
    $406 = ((($405)) + 8|0);
    HEAPF32[$406>>2] = $407;
    break L20;
    break;
   }
   case 2:  {
    $408 = $18;
    $409 = ((($408)) + 8|0);
    $410 = +HEAPF64[$409>>3];
    $411 = $18;
    $412 = ((($411)) + 32|0);
    $413 = +HEAPF64[$412>>3];
    $414 = $410 - $413;
    $415 = $18;
    $416 = ((($415)) + 24|0);
    $417 = +HEAPF64[$416>>3];
    $418 = $414 < $417;
    $419 = $18;
    if ($418) {
     $420 = ((($419)) + 8|0);
     $421 = +HEAPF64[$420>>3];
     $422 = $18;
     $423 = ((($422)) + 32|0);
     $424 = +HEAPF64[$423>>3];
     $425 = $421 - $424;
     $432 = $425;
    } else {
     $426 = ((($419)) + 24|0);
     $427 = +HEAPF64[$426>>3];
     $432 = $427;
    }
    $428 = $18;
    $429 = ((($428)) + 16|0);
    $430 = +HEAPF64[$429>>3];
    $431 = $432 < $430;
    $433 = $18;
    do {
     if ($431) {
      $434 = ((($433)) + 16|0);
      $435 = +HEAPF64[$434>>3];
      $457 = $435;
     } else {
      $436 = ((($433)) + 8|0);
      $437 = +HEAPF64[$436>>3];
      $438 = $18;
      $439 = ((($438)) + 32|0);
      $440 = +HEAPF64[$439>>3];
      $441 = $437 - $440;
      $442 = $18;
      $443 = ((($442)) + 24|0);
      $444 = +HEAPF64[$443>>3];
      $445 = $441 < $444;
      $446 = $18;
      if ($445) {
       $447 = ((($446)) + 8|0);
       $448 = +HEAPF64[$447>>3];
       $449 = $18;
       $450 = ((($449)) + 32|0);
       $451 = +HEAPF64[$450>>3];
       $452 = $448 - $451;
       $457 = $452;
       break;
      } else {
       $453 = ((($446)) + 24|0);
       $454 = +HEAPF64[$453>>3];
       $457 = $454;
       break;
      }
     }
    } while(0);
    $455 = $18;
    $456 = ((($455)) + 8|0);
    HEAPF64[$456>>3] = $457;
    break L20;
    break;
   }
   default: {
    break L20;
   }
   }
  }
 } while(0);
 $458 = $15;
 $459 = $16;
 $460 = $24;
 $461 = ((($460)) + 80|0);
 $462 = HEAP32[$461>>2]|0;
 $463 = $24;
 $464 = ((($463)) + 672|0);
 $465 = $26;
 $466 = $27;
 ;HEAP32[$$byval_copy13>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy13+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$$byval_copy13+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$$byval_copy13+12>>2]=HEAP32[$38+12>>2]|0;
 $467 = (_nk_do_button_symbol($458,$459,$$byval_copy13,$462,0,$464,$465,$466)|0);
 $468 = ($467|0)!=(0);
 L60: do {
  if ($468) {
   $469 = $18;
   $470 = HEAP32[$469>>2]|0;
   switch ($470|0) {
   case 0:  {
    $471 = $18;
    $472 = ((($471)) + 8|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = $18;
    $475 = ((($474)) + 32|0);
    $476 = HEAP32[$475>>2]|0;
    $477 = (($473) + ($476))|0;
    $478 = $18;
    $479 = ((($478)) + 24|0);
    $480 = HEAP32[$479>>2]|0;
    $481 = ($477|0)<($480|0);
    $482 = $18;
    if ($481) {
     $483 = ((($482)) + 8|0);
     $484 = HEAP32[$483>>2]|0;
     $485 = $18;
     $486 = ((($485)) + 32|0);
     $487 = HEAP32[$486>>2]|0;
     $488 = (($484) + ($487))|0;
     $494 = $488;
    } else {
     $489 = ((($482)) + 24|0);
     $490 = HEAP32[$489>>2]|0;
     $494 = $490;
    }
    $491 = $18;
    $492 = ((($491)) + 16|0);
    $493 = HEAP32[$492>>2]|0;
    $495 = ($494|0)<($493|0);
    $496 = $18;
    do {
     if ($495) {
      $497 = ((($496)) + 16|0);
      $498 = HEAP32[$497>>2]|0;
      $520 = $498;
     } else {
      $499 = ((($496)) + 8|0);
      $500 = HEAP32[$499>>2]|0;
      $501 = $18;
      $502 = ((($501)) + 32|0);
      $503 = HEAP32[$502>>2]|0;
      $504 = (($500) + ($503))|0;
      $505 = $18;
      $506 = ((($505)) + 24|0);
      $507 = HEAP32[$506>>2]|0;
      $508 = ($504|0)<($507|0);
      $509 = $18;
      if ($508) {
       $510 = ((($509)) + 8|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = $18;
       $513 = ((($512)) + 32|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514))|0;
       $520 = $515;
       break;
      } else {
       $516 = ((($509)) + 24|0);
       $517 = HEAP32[$516>>2]|0;
       $520 = $517;
       break;
      }
     }
    } while(0);
    $518 = $18;
    $519 = ((($518)) + 8|0);
    HEAP32[$519>>2] = $520;
    break L60;
    break;
   }
   case 1:  {
    $521 = $18;
    $522 = ((($521)) + 8|0);
    $523 = +HEAPF32[$522>>2];
    $524 = $18;
    $525 = ((($524)) + 32|0);
    $526 = +HEAPF32[$525>>2];
    $527 = $523 + $526;
    $528 = $18;
    $529 = ((($528)) + 24|0);
    $530 = +HEAPF32[$529>>2];
    $531 = $527 < $530;
    $532 = $18;
    if ($531) {
     $533 = ((($532)) + 8|0);
     $534 = +HEAPF32[$533>>2];
     $535 = $18;
     $536 = ((($535)) + 32|0);
     $537 = +HEAPF32[$536>>2];
     $538 = $534 + $537;
     $545 = $538;
    } else {
     $539 = ((($532)) + 24|0);
     $540 = +HEAPF32[$539>>2];
     $545 = $540;
    }
    $541 = $18;
    $542 = ((($541)) + 16|0);
    $543 = +HEAPF32[$542>>2];
    $544 = $545 < $543;
    $546 = $18;
    do {
     if ($544) {
      $547 = ((($546)) + 16|0);
      $548 = +HEAPF32[$547>>2];
      $570 = $548;
     } else {
      $549 = ((($546)) + 8|0);
      $550 = +HEAPF32[$549>>2];
      $551 = $18;
      $552 = ((($551)) + 32|0);
      $553 = +HEAPF32[$552>>2];
      $554 = $550 + $553;
      $555 = $18;
      $556 = ((($555)) + 24|0);
      $557 = +HEAPF32[$556>>2];
      $558 = $554 < $557;
      $559 = $18;
      if ($558) {
       $560 = ((($559)) + 8|0);
       $561 = +HEAPF32[$560>>2];
       $562 = $18;
       $563 = ((($562)) + 32|0);
       $564 = +HEAPF32[$563>>2];
       $565 = $561 + $564;
       $570 = $565;
       break;
      } else {
       $566 = ((($559)) + 24|0);
       $567 = +HEAPF32[$566>>2];
       $570 = $567;
       break;
      }
     }
    } while(0);
    $568 = $18;
    $569 = ((($568)) + 8|0);
    HEAPF32[$569>>2] = $570;
    break L60;
    break;
   }
   case 2:  {
    $571 = $18;
    $572 = ((($571)) + 8|0);
    $573 = +HEAPF64[$572>>3];
    $574 = $18;
    $575 = ((($574)) + 32|0);
    $576 = +HEAPF64[$575>>3];
    $577 = $573 + $576;
    $578 = $18;
    $579 = ((($578)) + 24|0);
    $580 = +HEAPF64[$579>>3];
    $581 = $577 < $580;
    $582 = $18;
    if ($581) {
     $583 = ((($582)) + 8|0);
     $584 = +HEAPF64[$583>>3];
     $585 = $18;
     $586 = ((($585)) + 32|0);
     $587 = +HEAPF64[$586>>3];
     $588 = $584 + $587;
     $595 = $588;
    } else {
     $589 = ((($582)) + 24|0);
     $590 = +HEAPF64[$589>>3];
     $595 = $590;
    }
    $591 = $18;
    $592 = ((($591)) + 16|0);
    $593 = +HEAPF64[$592>>3];
    $594 = $595 < $593;
    $596 = $18;
    do {
     if ($594) {
      $597 = ((($596)) + 16|0);
      $598 = +HEAPF64[$597>>3];
      $620 = $598;
     } else {
      $599 = ((($596)) + 8|0);
      $600 = +HEAPF64[$599>>3];
      $601 = $18;
      $602 = ((($601)) + 32|0);
      $603 = +HEAPF64[$602>>3];
      $604 = $600 + $603;
      $605 = $18;
      $606 = ((($605)) + 24|0);
      $607 = +HEAPF64[$606>>3];
      $608 = $604 < $607;
      $609 = $18;
      if ($608) {
       $610 = ((($609)) + 8|0);
       $611 = +HEAPF64[$610>>3];
       $612 = $18;
       $613 = ((($612)) + 32|0);
       $614 = +HEAPF64[$613>>3];
       $615 = $611 + $614;
       $620 = $615;
       break;
      } else {
       $616 = ((($609)) + 24|0);
       $617 = +HEAPF64[$616>>3];
       $620 = $617;
       break;
      }
     }
    } while(0);
    $618 = $18;
    $619 = ((($618)) + 8|0);
    HEAPF64[$619>>3] = $620;
    break L60;
    break;
   }
   default: {
    break L60;
   }
   }
  }
 } while(0);
 $621 = $22;
 $622 = HEAP32[$621>>2]|0;
 $623 = ($622|0)==(1);
 $624 = $623&1;
 $29 = $624;
 $625 = $30;
 $626 = ($625|0)!=(1);
 $627 = $29;
 $628 = ($627|0)!=(0);
 $or$cond = $626 & $628;
 if ($or$cond) {
  $629 = $20;
  $630 = $35;
  $631 = $36;
  $632 = HEAP32[$631>>2]|0;
  (_nk_memcopy($629,$630,$632)|0);
  $633 = $20;
  $634 = $36;
  $635 = HEAP32[$634>>2]|0;
  $636 = (_nk_utf_len($633,$635)|0);
  $637 = $23;
  HEAP32[$637>>2] = $636;
  $638 = $36;
  $639 = HEAP32[$638>>2]|0;
  $640 = $21;
  HEAP32[$640>>2] = $639;
  $641 = $21;
  $36 = $641;
  $642 = $20;
  $35 = $642;
 }
 $643 = $28;
 $644 = $25;
 $645 = (376 + ($644<<2)|0);
 $646 = HEAP32[$645>>2]|0;
 _nk_textedit_clear_state($643,0,$646);
 $647 = $29;
 $648 = $647&255;
 $649 = $28;
 $650 = ((($649)) + 105|0);
 HEAP8[$650>>0] = $648;
 $651 = $36;
 $652 = HEAP32[$651>>2]|0;
 $653 = $28;
 $654 = ((($653)) + 12|0);
 $655 = ((($654)) + 60|0);
 HEAP32[$655>>2] = $652;
 $656 = $23;
 $657 = HEAP32[$656>>2]|0;
 $658 = $36;
 $659 = HEAP32[$658>>2]|0;
 $660 = ($657|0)<($659|0);
 if ($660) {
  $661 = $23;
  $662 = HEAP32[$661>>2]|0;
  $665 = $662;
 } else {
  $663 = $36;
  $664 = HEAP32[$663>>2]|0;
  $665 = $664;
 }
 $666 = ($665|0)<(0);
 do {
  if ($666) {
   $678 = 0;
  } else {
   $667 = $23;
   $668 = HEAP32[$667>>2]|0;
   $669 = $36;
   $670 = HEAP32[$669>>2]|0;
   $671 = ($668|0)<($670|0);
   if ($671) {
    $672 = $23;
    $673 = HEAP32[$672>>2]|0;
    $678 = $673;
    break;
   } else {
    $674 = $36;
    $675 = HEAP32[$674>>2]|0;
    $678 = $675;
    break;
   }
  }
 } while(0);
 $676 = $28;
 $677 = ((($676)) + 88|0);
 HEAP32[$677>>2] = $678;
 $679 = $36;
 $680 = HEAP32[$679>>2]|0;
 $681 = $28;
 $682 = ((($681)) + 12|0);
 $683 = ((($682)) + 44|0);
 HEAP32[$683>>2] = $680;
 $684 = $28;
 $685 = ((($684)) + 12|0);
 $686 = ((($685)) + 32|0);
 $687 = ((($686)) + 4|0);
 HEAP32[$687>>2] = 64;
 $688 = $35;
 $689 = $28;
 $690 = ((($689)) + 12|0);
 $691 = ((($690)) + 32|0);
 HEAP32[$691>>2] = $688;
 $692 = $28;
 $693 = ((($692)) + 12|0);
 $694 = ((($693)) + 56|0);
 HEAP32[$694>>2] = 64;
 $695 = $28;
 $696 = ((($695)) + 100|0);
 HEAP8[$696>>0] = 1;
 $697 = $15;
 $698 = $16;
 $699 = $25;
 $700 = (376 + ($699<<2)|0);
 $701 = HEAP32[$700>>2]|0;
 $702 = $28;
 $703 = $24;
 $704 = ((($703)) + 100|0);
 $705 = $22;
 $706 = HEAP32[$705>>2]|0;
 $707 = ($706|0)==(1);
 $708 = $26;
 $709 = $707 ? $708 : 0;
 $710 = $27;
 ;HEAP32[$$byval_copy14>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$$byval_copy14+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$$byval_copy14+12>>2]=HEAP32[$40+12>>2]|0;
 (_nk_do_edit($697,$698,$$byval_copy14,512,$701,$702,$704,$709,$710)|0);
 $711 = $28;
 $712 = ((($711)) + 12|0);
 $713 = ((($712)) + 60|0);
 $714 = HEAP32[$713>>2]|0;
 $715 = $36;
 HEAP32[$715>>2] = $714;
 $716 = $28;
 $717 = ((($716)) + 105|0);
 $718 = HEAP8[$717>>0]|0;
 $719 = $718&255;
 $29 = $719;
 $720 = $28;
 $721 = ((($720)) + 88|0);
 $722 = HEAP32[$721>>2]|0;
 $723 = $23;
 HEAP32[$723>>2] = $722;
 $724 = $29;
 $725 = ($724|0)!=(0);
 if ($725) {
  $726 = $26;
  $727 = (_nk_input_is_key_pressed($726,4)|0);
  $728 = ($727|0)!=(0);
  if ($728) {
   $729 = $29;
   $730 = ($729|0)!=(0);
   $731 = $730 ^ 1;
   $732 = $731&1;
   $29 = $732;
  }
 }
 $733 = $30;
 $734 = ($733|0)==(0);
 $735 = $29;
 $736 = ($735|0)!=(0);
 $or$cond3 = $734 | $736;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $737 = $22;
 HEAP32[$737>>2] = 0;
 $738 = $21;
 $739 = HEAP32[$738>>2]|0;
 $740 = $20;
 $741 = (($740) + ($739)|0);
 HEAP8[$741>>0] = 0;
 $742 = $18;
 $743 = HEAP32[$742>>2]|0;
 switch ($743|0) {
 case 0:  {
  $744 = $20;
  $745 = (_nk_strtoi($744,0)|0);
  $746 = $18;
  $747 = ((($746)) + 8|0);
  HEAP32[$747>>2] = $745;
  $748 = $18;
  $749 = ((($748)) + 8|0);
  $750 = HEAP32[$749>>2]|0;
  $751 = $18;
  $752 = ((($751)) + 24|0);
  $753 = HEAP32[$752>>2]|0;
  $754 = ($750|0)<($753|0);
  $755 = $18;
  if ($754) {
   $756 = ((($755)) + 8|0);
   $757 = HEAP32[$756>>2]|0;
   $763 = $757;
  } else {
   $758 = ((($755)) + 24|0);
   $759 = HEAP32[$758>>2]|0;
   $763 = $759;
  }
  $760 = $18;
  $761 = ((($760)) + 16|0);
  $762 = HEAP32[$761>>2]|0;
  $764 = ($763|0)<($762|0);
  $765 = $18;
  do {
   if ($764) {
    $766 = ((($765)) + 16|0);
    $767 = HEAP32[$766>>2]|0;
    $781 = $767;
   } else {
    $768 = ((($765)) + 8|0);
    $769 = HEAP32[$768>>2]|0;
    $770 = $18;
    $771 = ((($770)) + 24|0);
    $772 = HEAP32[$771>>2]|0;
    $773 = ($769|0)<($772|0);
    $774 = $18;
    if ($773) {
     $775 = ((($774)) + 8|0);
     $776 = HEAP32[$775>>2]|0;
     $781 = $776;
     break;
    } else {
     $777 = ((($774)) + 24|0);
     $778 = HEAP32[$777>>2]|0;
     $781 = $778;
     break;
    }
   }
  } while(0);
  $779 = $18;
  $780 = ((($779)) + 8|0);
  HEAP32[$780>>2] = $781;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $782 = $20;
  (_nk_string_float_limit($782,2)|0);
  $783 = $20;
  $784 = (+_nk_strtof($783,0));
  $785 = $18;
  $786 = ((($785)) + 8|0);
  HEAPF32[$786>>2] = $784;
  $787 = $18;
  $788 = ((($787)) + 8|0);
  $789 = +HEAPF32[$788>>2];
  $790 = $18;
  $791 = ((($790)) + 24|0);
  $792 = +HEAPF32[$791>>2];
  $793 = $789 < $792;
  $794 = $18;
  if ($793) {
   $795 = ((($794)) + 8|0);
   $796 = +HEAPF32[$795>>2];
   $803 = $796;
  } else {
   $797 = ((($794)) + 24|0);
   $798 = +HEAPF32[$797>>2];
   $803 = $798;
  }
  $799 = $18;
  $800 = ((($799)) + 16|0);
  $801 = +HEAPF32[$800>>2];
  $802 = $803 < $801;
  $804 = $18;
  do {
   if ($802) {
    $805 = ((($804)) + 16|0);
    $806 = +HEAPF32[$805>>2];
    $820 = $806;
   } else {
    $807 = ((($804)) + 8|0);
    $808 = +HEAPF32[$807>>2];
    $809 = $18;
    $810 = ((($809)) + 24|0);
    $811 = +HEAPF32[$810>>2];
    $812 = $808 < $811;
    $813 = $18;
    if ($812) {
     $814 = ((($813)) + 8|0);
     $815 = +HEAPF32[$814>>2];
     $820 = $815;
     break;
    } else {
     $816 = ((($813)) + 24|0);
     $817 = +HEAPF32[$816>>2];
     $820 = $817;
     break;
    }
   }
  } while(0);
  $818 = $18;
  $819 = ((($818)) + 8|0);
  HEAPF32[$819>>2] = $820;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $821 = $20;
  (_nk_string_float_limit($821,2)|0);
  $822 = $20;
  $823 = (+_nk_strtod($822,0));
  $824 = $18;
  $825 = ((($824)) + 8|0);
  HEAPF64[$825>>3] = $823;
  $826 = $18;
  $827 = ((($826)) + 8|0);
  $828 = +HEAPF64[$827>>3];
  $829 = $18;
  $830 = ((($829)) + 24|0);
  $831 = +HEAPF64[$830>>3];
  $832 = $828 < $831;
  $833 = $18;
  if ($832) {
   $834 = ((($833)) + 8|0);
   $835 = +HEAPF64[$834>>3];
   $842 = $835;
  } else {
   $836 = ((($833)) + 24|0);
   $837 = +HEAPF64[$836>>3];
   $842 = $837;
  }
  $838 = $18;
  $839 = ((($838)) + 16|0);
  $840 = +HEAPF64[$839>>3];
  $841 = $842 < $840;
  $843 = $18;
  do {
   if ($841) {
    $844 = ((($843)) + 16|0);
    $845 = +HEAPF64[$844>>3];
    $859 = $845;
   } else {
    $846 = ((($843)) + 8|0);
    $847 = +HEAPF64[$846>>3];
    $848 = $18;
    $849 = ((($848)) + 24|0);
    $850 = +HEAPF64[$849>>3];
    $851 = $847 < $850;
    $852 = $18;
    if ($851) {
     $853 = ((($852)) + 8|0);
     $854 = +HEAPF64[$853>>3];
     $859 = $854;
     break;
    } else {
     $855 = ((($852)) + 24|0);
     $856 = +HEAPF64[$855>>3];
     $859 = $856;
     break;
    }
   }
  } while(0);
  $857 = $18;
  $858 = ((($857)) + 8|0);
  HEAPF64[$858>>3] = $859;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _nk_itoa($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = $4;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $5;
  $9 = (($8) + 1)|0;
  $5 = $9;
  $10 = $3;
  $11 = (($10) + ($8)|0);
  HEAP8[$11>>0] = 48;
  $12 = $5;
  $13 = $3;
  $14 = (($13) + ($12)|0);
  HEAP8[$14>>0] = 0;
  $15 = $3;
  $2 = $15;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $16 = $4;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $5;
  $19 = (($18) + 1)|0;
  $5 = $19;
  $20 = $3;
  $21 = (($20) + ($18)|0);
  HEAP8[$21>>0] = 45;
  $22 = $4;
  $23 = (0 - ($22))|0;
  $4 = $23;
 }
 while(1) {
  $24 = $4;
  $25 = ($24|0)>(0);
  if (!($25)) {
   break;
  }
  $26 = $4;
  $27 = (($26|0) % 10)&-1;
  $28 = (48 + ($27))|0;
  $29 = $28&255;
  $30 = $5;
  $31 = (($30) + 1)|0;
  $5 = $31;
  $32 = $3;
  $33 = (($32) + ($30)|0);
  HEAP8[$33>>0] = $29;
  $34 = $4;
  $35 = (($34|0) / 10)&-1;
  $4 = $35;
 }
 $36 = $5;
 $37 = $3;
 $38 = (($37) + ($36)|0);
 HEAP8[$38>>0] = 0;
 $39 = $3;
 $40 = HEAP8[$39>>0]|0;
 $41 = $40 << 24 >> 24;
 $42 = ($41|0)==(45);
 if ($42) {
  $43 = $3;
  $44 = ((($43)) + 1|0);
  $3 = $44;
 }
 $45 = $3;
 _nk_strrev_ascii($45);
 $46 = $3;
 $2 = $46;
 $47 = $2;
 STACKTOP = sp;return ($47|0);
}
function _nk_dtoa($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $15 = $3;
 $9 = $15;
 $10 = 0;
 $16 = $3;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((1627|0),(1320|0),3928,(24672|0));
  // unreachable;
 }
 $18 = $3;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $2 = 0;
  $176 = $2;
  STACKTOP = sp;return ($176|0);
 }
 $20 = $4;
 $21 = $20 == 0.0;
 if ($21) {
  $22 = $3;
  HEAP8[$22>>0] = 48;
  $23 = $3;
  $24 = ((($23)) + 1|0);
  HEAP8[$24>>0] = 0;
  $25 = $3;
  $2 = $25;
  $176 = $2;
  STACKTOP = sp;return ($176|0);
 }
 $26 = $4;
 $27 = $26 < 0.0;
 $28 = $27&1;
 $10 = $28;
 $29 = $10;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $4;
  $32 = -$31;
  $4 = $32;
 }
 $33 = $4;
 $34 = (_nk_log10($33)|0);
 $7 = $34;
 $35 = $7;
 $36 = ($35|0)>=(14);
 if ($36) {
  $44 = 1;
 } else {
  $37 = $10;
  $38 = ($37|0)!=(0);
  $39 = $7;
  $40 = ($39|0)>=(9);
  $or$cond = $38 & $40;
  if ($or$cond) {
   $44 = 1;
  } else {
   $41 = $7;
   $42 = ($41|0)<=(-9);
   $44 = $42;
  }
 }
 $43 = $44&1;
 $5 = $43;
 $45 = $10;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $9;
  $48 = ((($47)) + 1|0);
  $9 = $48;
  HEAP8[$47>>0] = 45;
 }
 $49 = $5;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $7;
  $52 = ($51|0)<(0);
  if ($52) {
   $53 = $7;
   $54 = (($53) - 1)|0;
   $7 = $54;
  }
  $55 = $4;
  $56 = $7;
  $57 = (+_nk_pow(10.0,$56));
  $58 = $55 / $57;
  $4 = $58;
  $59 = $7;
  $8 = $59;
  $7 = 0;
 }
 $60 = $7;
 $61 = (+($60|0));
 $62 = $61 < 1.0;
 if ($62) {
  $7 = 0;
 }
 while(1) {
  $63 = $4;
  $64 = $63 > 9.9999999999999999E-15;
  $65 = $7;
  $66 = ($65|0)>=(0);
  $67 = $64 ? 1 : $66;
  if (!($67)) {
   break;
  }
  $68 = $7;
  $69 = (+_nk_pow(10.0,$68));
  $11 = $69;
  $70 = $11;
  $71 = $70 > 0.0;
  if ($71) {
   $72 = $4;
   $73 = $11;
   $74 = $72 / $73;
   $12 = $74;
   $75 = $12;
   $76 = (_nk_ifloord($75)|0);
   $6 = $76;
   $77 = $6;
   $78 = (+($77|0));
   $79 = $11;
   $80 = $78 * $79;
   $81 = $4;
   $82 = $81 - $80;
   $4 = $82;
   $83 = $6;
   $84 = $83&255;
   $85 = $84 << 24 >> 24;
   $86 = (48 + ($85))|0;
   $87 = $86&255;
   $88 = $9;
   $89 = ((($88)) + 1|0);
   $9 = $89;
   HEAP8[$88>>0] = $87;
  }
  $90 = $7;
  $91 = ($90|0)==(0);
  $92 = $4;
  $93 = $92 > 0.0;
  $or$cond3 = $91 & $93;
  if ($or$cond3) {
   $94 = $9;
   $95 = ((($94)) + 1|0);
   $9 = $95;
   HEAP8[$94>>0] = 46;
  }
  $96 = $7;
  $97 = (($96) + -1)|0;
  $7 = $97;
 }
 $98 = $5;
 $99 = ($98|0)!=(0);
 if ($99) {
  $100 = $9;
  $101 = ((($100)) + 1|0);
  $9 = $101;
  HEAP8[$100>>0] = 101;
  $102 = $8;
  $103 = ($102|0)>(0);
  $104 = $9;
  $105 = ((($104)) + 1|0);
  $9 = $105;
  if ($103) {
   HEAP8[$104>>0] = 43;
  } else {
   HEAP8[$104>>0] = 45;
   $106 = $8;
   $107 = (0 - ($106))|0;
   $8 = $107;
  }
  $7 = 0;
  while(1) {
   $108 = $8;
   $109 = ($108|0)>(0);
   if (!($109)) {
    break;
   }
   $110 = $8;
   $111 = (($110|0) % 10)&-1;
   $112 = $111&255;
   $113 = $112 << 24 >> 24;
   $114 = (48 + ($113))|0;
   $115 = $114&255;
   $116 = $9;
   $117 = ((($116)) + 1|0);
   $9 = $117;
   HEAP8[$116>>0] = $115;
   $118 = $8;
   $119 = (($118|0) / 10)&-1;
   $8 = $119;
   $120 = $7;
   $121 = (($120) + 1)|0;
   $7 = $121;
  }
  $122 = $7;
  $123 = $9;
  $124 = (0 - ($122))|0;
  $125 = (($123) + ($124)|0);
  $9 = $125;
  $13 = 0;
  $126 = $7;
  $127 = (($126) - 1)|0;
  $14 = $127;
  while(1) {
   $128 = $13;
   $129 = $14;
   $130 = ($128|0)<($129|0);
   if (!($130)) {
    break;
   }
   $131 = $14;
   $132 = $9;
   $133 = (($132) + ($131)|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134 << 24 >> 24;
   $136 = $13;
   $137 = $9;
   $138 = (($137) + ($136)|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139 << 24 >> 24;
   $141 = $140 ^ $135;
   $142 = $141&255;
   HEAP8[$138>>0] = $142;
   $143 = $13;
   $144 = $9;
   $145 = (($144) + ($143)|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146 << 24 >> 24;
   $148 = $14;
   $149 = $9;
   $150 = (($149) + ($148)|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151 << 24 >> 24;
   $153 = $152 ^ $147;
   $154 = $153&255;
   HEAP8[$150>>0] = $154;
   $155 = $14;
   $156 = $9;
   $157 = (($156) + ($155)|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158 << 24 >> 24;
   $160 = $13;
   $161 = $9;
   $162 = (($161) + ($160)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = $164 ^ $159;
   $166 = $165&255;
   HEAP8[$162>>0] = $166;
   $167 = $13;
   $168 = (($167) + 1)|0;
   $13 = $168;
   $169 = $14;
   $170 = (($169) + -1)|0;
   $14 = $170;
  }
  $171 = $7;
  $172 = $9;
  $173 = (($172) + ($171)|0);
  $9 = $173;
 }
 $174 = $9;
 HEAP8[$174>>0] = 0;
 $175 = $3;
 $2 = $175;
 $176 = $2;
 STACKTOP = sp;return ($176|0);
}
function _nk_string_float_limit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $5 = $6;
 while(1) {
  $7 = $5;
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)!=(0);
  if (!($9)) {
   label = 10;
   break;
  }
  $10 = $5;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(46);
  if ($13) {
   $4 = 1;
   $14 = $5;
   $15 = ((($14)) + 1|0);
   $5 = $15;
   continue;
  }
  $16 = $4;
  $17 = $3;
  $18 = (($17) + 1)|0;
  $19 = ($16|0)==($18|0);
  if ($19) {
   break;
  }
  $21 = $4;
  $22 = ($21|0)>(0);
  if ($22) {
   $23 = $4;
   $24 = (($23) + 1)|0;
   $4 = $24;
  }
  $25 = $5;
  $26 = ((($25)) + 1|0);
  $5 = $26;
 }
 if ((label|0) == 10) {
  $27 = $5;
  $28 = $2;
  $29 = $27;
  $30 = $28;
  $31 = (($29) - ($30))|0;
  STACKTOP = sp;return ($31|0);
 }
 $20 = $5;
 HEAP8[$20>>0] = 0;
 $27 = $5;
 $28 = $2;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 STACKTOP = sp;return ($31|0);
}
function _nk_property_behavior($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = +$8;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy3 = sp + 72|0;
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 24|0;
 $9 = $0;
 $10 = $1;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $10;
 $15 = ($14|0)!=(0|0);
 do {
  if ($15) {
   $16 = $11;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = $9;
    $20 = $10;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$4+12>>2]|0;
    $21 = (_nk_button_behavior($19,$$byval_copy,$20,0)|0);
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = $11;
     HEAP32[$23>>2] = 1;
     break;
    }
    $24 = $10;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;
    $25 = (_nk_input_is_mouse_click_down_in_rect($24,0,$$byval_copy1,1)|0);
    $26 = ($25|0)!=(0);
    if ($26) {
     $27 = $11;
     HEAP32[$27>>2] = 2;
     break;
    }
    $28 = $10;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$5+12>>2]|0;
    $29 = (_nk_input_is_mouse_click_down_in_rect($28,0,$$byval_copy2,1)|0);
    $30 = ($29|0)!=(0);
    if ($30) {
     $31 = $11;
     HEAP32[$31>>2] = 2;
    }
   }
  }
 } while(0);
 $32 = $11;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(2);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $9;
 $36 = $10;
 $37 = $12;
 $38 = $13;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$2+12>>2]|0;
 _nk_drag_behavior($35,$36,$$byval_copy3,$37,$38);
 $39 = $9;
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & 32;
 $42 = ($41|0)!=(0);
 if ($42) {
  STACKTOP = sp;return;
 }
 $43 = $11;
 HEAP32[$43>>2] = 0;
 STACKTOP = sp;return;
}
function _nk_draw_property($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $nk_white$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy5 = sp + 112|0;
 $$byval_copy4 = sp + 140|0;
 $$byval_copy3 = sp + 96|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 80|0;
 $nk_white$byval_copy = sp + 132|0;
 $$byval_copy = sp + 64|0;
 $16 = sp + 16|0;
 $18 = sp + 128|0;
 $19 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $20 = $12;
 $21 = $20 & 32;
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   $23 = $9;
   $24 = ((($23)) + 40|0);
   $17 = $24;
   $25 = ((($16)) + 12|0);
   $26 = $9;
   $27 = ((($26)) + 72|0);
   ;HEAP32[$25>>2]=HEAP32[$27>>2]|0;
  } else {
   $28 = $12;
   $29 = $28 & 16;
   $30 = ($29|0)!=(0);
   $31 = $9;
   if ($30) {
    $32 = ((($31)) + 20|0);
    $17 = $32;
    $33 = ((($16)) + 12|0);
    $34 = $9;
    $35 = ((($34)) + 68|0);
    ;HEAP32[$33>>2]=HEAP32[$35>>2]|0;
    break;
   } else {
    $17 = $31;
    $36 = ((($16)) + 12|0);
    $37 = $9;
    $38 = ((($37)) + 64|0);
    ;HEAP32[$36>>2]=HEAP32[$38>>2]|0;
    break;
   }
  }
 } while(0);
 $39 = $17;
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(1);
 if ($41) {
  $42 = $8;
  $43 = $10;
  $44 = $17;
  $45 = ((($44)) + 4|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$43+12>>2]|0;
  ;HEAP8[$nk_white$byval_copy>>0]=HEAP8[19725>>0]|0;HEAP8[$nk_white$byval_copy+1>>0]=HEAP8[19725+1>>0]|0;HEAP8[$nk_white$byval_copy+2>>0]=HEAP8[19725+2>>0]|0;HEAP8[$nk_white$byval_copy+3>>0]=HEAP8[19725+3>>0]|0;
  _nk_draw_image($42,$$byval_copy,$45,$nk_white$byval_copy);
  $46 = ((($16)) + 8|0);
  _nk_rgba($18,0,0,0,0);
  ;HEAP8[$46>>0]=HEAP8[$18>>0]|0;HEAP8[$46+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$18+3>>0]|0;
  _nk_vec2($19,0.0,0.0);
  ;HEAP32[$16>>2]=HEAP32[$19>>2]|0;HEAP32[$16+4>>2]=HEAP32[$19+4>>2]|0;
  $67 = $8;
  $68 = $11;
  $69 = $13;
  $70 = $14;
  $71 = $15;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$68>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$68+12>>2]|0;
  _nk_widget_text($67,$$byval_copy5,$69,$70,$16,18,$71);
  STACKTOP = sp;return;
 } else {
  $47 = ((($16)) + 8|0);
  $48 = $17;
  $49 = ((($48)) + 4|0);
  ;HEAP32[$47>>2]=HEAP32[$49>>2]|0;
  $50 = $8;
  $51 = $10;
  $52 = $9;
  $53 = ((($52)) + 88|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $17;
  $56 = ((($55)) + 4|0);
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$51>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$51+12>>2]|0;
  ;HEAP8[$$byval_copy2>>0]=HEAP8[$56>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$56+3>>0]|0;
  _nk_fill_rect($50,$$byval_copy1,$54,$$byval_copy2);
  $57 = $8;
  $58 = $10;
  $59 = $9;
  $60 = ((($59)) + 88|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $9;
  $63 = ((($62)) + 84|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $17;
  $66 = ((($65)) + 4|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$58>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$58+12>>2]|0;
  ;HEAP8[$$byval_copy4>>0]=HEAP8[$66>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$66+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$66+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$66+3>>0]|0;
  _nk_stroke_rect($57,$$byval_copy3,$61,$64,$$byval_copy4);
  _nk_vec2($19,0.0,0.0);
  ;HEAP32[$16>>2]=HEAP32[$19>>2]|0;HEAP32[$16+4>>2]=HEAP32[$19+4>>2]|0;
  $67 = $8;
  $68 = $11;
  $69 = $13;
  $70 = $14;
  $71 = $15;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$68>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$68+12>>2]|0;
  _nk_widget_text($67,$$byval_copy5,$69,$70,$16,18,$71);
  STACKTOP = sp;return;
 }
}
function _nk_strrev_ascii($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = (_nk_strlen($6)|0);
 $2 = $7;
 $8 = $2;
 $9 = (($8|0) / 2)&-1;
 $3 = $9;
 $4 = 0;
 while(1) {
  $10 = $4;
  $11 = $3;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $1;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $5 = $16;
  $17 = $2;
  $18 = (($17) - 1)|0;
  $19 = $4;
  $20 = (($18) - ($19))|0;
  $21 = $1;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $4;
  $25 = $1;
  $26 = (($25) + ($24)|0);
  HEAP8[$26>>0] = $23;
  $27 = $5;
  $28 = $2;
  $29 = (($28) - 1)|0;
  $30 = $4;
  $31 = (($29) - ($30))|0;
  $32 = $1;
  $33 = (($32) + ($31)|0);
  HEAP8[$33>>0] = $27;
  $34 = $4;
  $35 = (($34) + 1)|0;
  $4 = $35;
 }
 STACKTOP = sp;return;
}
function _nk_log10($0) {
 $0 = +$0;
 var $$sink = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = 0;
 $5 = $1;
 $6 = $5 < 0.0;
 $7 = $6 ? 1 : 0;
 $2 = $7;
 $8 = $2;
 $9 = ($8|0)!=(0);
 $10 = $1;
 $11 = -$10;
 $$sink = $9 ? $11 : $10;
 $12 = (~~(($$sink)));
 $3 = $12;
 while(1) {
  $13 = $3;
  $14 = (($13|0) / 10)&-1;
  $15 = ($14|0)>(0);
  if (!($15)) {
   break;
  }
  $16 = $3;
  $17 = (($16|0) / 10)&-1;
  $3 = $17;
  $18 = $4;
  $19 = (($18) + 1)|0;
  $4 = $19;
 }
 $20 = $2;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 }
 $22 = $4;
 $23 = (0 - ($22))|0;
 $4 = $23;
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _nk_pow($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 1.0;
 $6 = $3;
 $7 = ($6|0)>=(0);
 $8 = $7&1;
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0);
 $11 = $3;
 $12 = (0 - ($11))|0;
 $13 = $10 ? $11 : $12;
 $3 = $13;
 while(1) {
  $14 = $3;
  $15 = ($14|0)>(0);
  if (!($15)) {
   break;
  }
  $16 = $3;
  $17 = $16 & 1;
  $18 = ($17|0)==(1);
  if ($18) {
   $19 = $2;
   $20 = $4;
   $21 = $20 * $19;
   $4 = $21;
  }
  $22 = $3;
  $23 = (($22|0) / 2)&-1;
  $3 = $23;
  $24 = $2;
  $25 = $2;
  $26 = $25 * $24;
  $2 = $26;
 }
 $27 = $5;
 $28 = ($27|0)!=(0);
 $29 = $4;
 $30 = 1.0 / $29;
 $31 = $28 ? $29 : $30;
 STACKTOP = sp;return (+$31);
}
function _nk_ifloord($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (~~(($2)));
 $4 = $1;
 $5 = $4 < 0.0;
 $6 = $5 ? 1 : 0;
 $7 = (($3) - ($6))|0;
 $8 = (+($7|0));
 $1 = $8;
 $9 = $1;
 $10 = (~~(($9)));
 STACKTOP = sp;return ($10|0);
}
function _nk_drag_behavior($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0;
 var $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0.0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy4 = sp + 80|0;
 $$byval_copy3 = sp + 64|0;
 $$byval_copy2 = sp + 48|0;
 $$byval_copy = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $3;
 $8 = $4;
 $13 = $6;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $6;
  $16 = ((($15)) + 260|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0);
  $20 = $18;
 } else {
  $20 = 0;
 }
 $19 = $20&1;
 $9 = $19;
 $21 = $6;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $6;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
  $24 = (_nk_input_has_mouse_click_down_in_rect($23,0,$$byval_copy,1)|0);
  $25 = ($24|0)!=(0);
  $27 = $25;
 } else {
  $27 = 0;
 }
 $26 = $27&1;
 $10 = $26;
 $28 = $5;
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 2;
 $31 = ($30|0)!=(0);
 $32 = $5;
 if ($31) {
  HEAP32[$32>>2] = 6;
 } else {
  HEAP32[$32>>2] = 4;
 }
 $33 = $6;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$2+12>>2]|0;
 $34 = (_nk_input_is_mouse_hovering_rect($33,$$byval_copy2)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $5;
  HEAP32[$36>>2] = 18;
 }
 $37 = $9;
 $38 = ($37|0)!=(0);
 $39 = $10;
 $40 = ($39|0)!=(0);
 $or$cond = $38 & $40;
 if ($or$cond) {
  $41 = $6;
  $42 = ((($41)) + 260|0);
  $43 = ((($42)) + 64|0);
  $44 = +HEAPF32[$43>>2];
  $12 = $44;
  $45 = $12;
  $46 = $8;
  $47 = $45 * $46;
  $11 = $47;
  $48 = $7;
  $49 = HEAP32[$48>>2]|0;
  switch ($49|0) {
  case 0:  {
   $50 = $7;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $11;
   $54 = (~~(($53)));
   $55 = (($52) + ($54))|0;
   $56 = $7;
   $57 = ((($56)) + 8|0);
   HEAP32[$57>>2] = $55;
   $58 = $7;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $7;
   $62 = ((($61)) + 24|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($60|0)<($63|0);
   $65 = $7;
   if ($64) {
    $66 = ((($65)) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    $73 = $67;
   } else {
    $68 = ((($65)) + 24|0);
    $69 = HEAP32[$68>>2]|0;
    $73 = $69;
   }
   $70 = $7;
   $71 = ((($70)) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $74 = ($73|0)<($72|0);
   $75 = $7;
   do {
    if ($74) {
     $76 = ((($75)) + 16|0);
     $77 = HEAP32[$76>>2]|0;
     $91 = $77;
    } else {
     $78 = ((($75)) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $7;
     $81 = ((($80)) + 24|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($79|0)<($82|0);
     $84 = $7;
     if ($83) {
      $85 = ((($84)) + 8|0);
      $86 = HEAP32[$85>>2]|0;
      $91 = $86;
      break;
     } else {
      $87 = ((($84)) + 24|0);
      $88 = HEAP32[$87>>2]|0;
      $91 = $88;
      break;
     }
    }
   } while(0);
   $89 = $7;
   $90 = ((($89)) + 8|0);
   HEAP32[$90>>2] = $91;
   break;
  }
  case 1:  {
   $92 = $7;
   $93 = ((($92)) + 8|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $11;
   $96 = $94 + $95;
   $97 = $7;
   $98 = ((($97)) + 8|0);
   HEAPF32[$98>>2] = $96;
   $99 = $7;
   $100 = ((($99)) + 8|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $7;
   $103 = ((($102)) + 24|0);
   $104 = +HEAPF32[$103>>2];
   $105 = $101 < $104;
   $106 = $7;
   if ($105) {
    $107 = ((($106)) + 8|0);
    $108 = +HEAPF32[$107>>2];
    $115 = $108;
   } else {
    $109 = ((($106)) + 24|0);
    $110 = +HEAPF32[$109>>2];
    $115 = $110;
   }
   $111 = $7;
   $112 = ((($111)) + 16|0);
   $113 = +HEAPF32[$112>>2];
   $114 = $115 < $113;
   $116 = $7;
   do {
    if ($114) {
     $117 = ((($116)) + 16|0);
     $118 = +HEAPF32[$117>>2];
     $132 = $118;
    } else {
     $119 = ((($116)) + 8|0);
     $120 = +HEAPF32[$119>>2];
     $121 = $7;
     $122 = ((($121)) + 24|0);
     $123 = +HEAPF32[$122>>2];
     $124 = $120 < $123;
     $125 = $7;
     if ($124) {
      $126 = ((($125)) + 8|0);
      $127 = +HEAPF32[$126>>2];
      $132 = $127;
      break;
     } else {
      $128 = ((($125)) + 24|0);
      $129 = +HEAPF32[$128>>2];
      $132 = $129;
      break;
     }
    }
   } while(0);
   $130 = $7;
   $131 = ((($130)) + 8|0);
   HEAPF32[$131>>2] = $132;
   break;
  }
  case 2:  {
   $133 = $7;
   $134 = ((($133)) + 8|0);
   $135 = +HEAPF64[$134>>3];
   $136 = $11;
   $137 = $136;
   $138 = $135 + $137;
   $139 = $7;
   $140 = ((($139)) + 8|0);
   HEAPF64[$140>>3] = $138;
   $141 = $7;
   $142 = ((($141)) + 8|0);
   $143 = +HEAPF64[$142>>3];
   $144 = $7;
   $145 = ((($144)) + 24|0);
   $146 = +HEAPF64[$145>>3];
   $147 = $143 < $146;
   $148 = $7;
   if ($147) {
    $149 = ((($148)) + 8|0);
    $150 = +HEAPF64[$149>>3];
    $157 = $150;
   } else {
    $151 = ((($148)) + 24|0);
    $152 = +HEAPF64[$151>>3];
    $157 = $152;
   }
   $153 = $7;
   $154 = ((($153)) + 16|0);
   $155 = +HEAPF64[$154>>3];
   $156 = $157 < $155;
   $158 = $7;
   do {
    if ($156) {
     $159 = ((($158)) + 16|0);
     $160 = +HEAPF64[$159>>3];
     $174 = $160;
    } else {
     $161 = ((($158)) + 8|0);
     $162 = +HEAPF64[$161>>3];
     $163 = $7;
     $164 = ((($163)) + 24|0);
     $165 = +HEAPF64[$164>>3];
     $166 = $162 < $165;
     $167 = $7;
     if ($166) {
      $168 = ((($167)) + 8|0);
      $169 = +HEAPF64[$168>>3];
      $174 = $169;
      break;
     } else {
      $170 = ((($167)) + 24|0);
      $171 = +HEAPF64[$170>>3];
      $174 = $171;
      break;
     }
    }
   } while(0);
   $172 = $7;
   $173 = ((($172)) + 8|0);
   HEAPF64[$173>>3] = $174;
   break;
  }
  default: {
  }
  }
  $175 = $5;
  HEAP32[$175>>2] = 34;
 }
 $176 = $5;
 $177 = HEAP32[$176>>2]|0;
 $178 = $177 & 16;
 $179 = ($178|0)!=(0);
 if ($179) {
  $180 = $6;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$2+12>>2]|0;
  $181 = (_nk_input_is_mouse_prev_hovering_rect($180,$$byval_copy3)|0);
  $182 = ($181|0)!=(0);
  if (!($182)) {
   $183 = $5;
   $184 = HEAP32[$183>>2]|0;
   $185 = $184 | 8;
   HEAP32[$183>>2] = $185;
   STACKTOP = sp;return;
  }
 }
 $186 = $6;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$2+12>>2]|0;
 $187 = (_nk_input_is_mouse_prev_hovering_rect($186,$$byval_copy4)|0);
 $188 = ($187|0)!=(0);
 if (!($188)) {
  STACKTOP = sp;return;
 }
 $189 = $5;
 $190 = HEAP32[$189>>2]|0;
 $191 = $190 | 64;
 HEAP32[$189>>2] = $191;
 STACKTOP = sp;return;
}
function _nk_color_picker_behavior($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0;
 var $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0;
 var $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0;
 var $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0;
 var $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0;
 var $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0;
 var $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy6 = sp + 136|0;
 $$byval_copy5 = sp + 120|0;
 $$byval_copy4 = sp + 104|0;
 $$byval_copy3 = sp + 88|0;
 $$byval_copy2 = sp + 72|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 156|0;
 $14 = sp + 8|0;
 $17 = sp + 152|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = 0;
 $16 = 0;
 $18 = $7;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  ___assert_fail((18268|0),(1320|0),14945,(24699|0));
  // unreachable;
 }
 $20 = $9;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  ___assert_fail((24724|0),(1320|0),14946,(24699|0));
  // unreachable;
 }
 $22 = $10;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((24731|0),(1320|0),14947,(24699|0));
  // unreachable;
 }
 $24 = $12;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((20113|0),(1320|0),14948,(24699|0));
  // unreachable;
 }
 $26 = $12;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$26>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$26+3>>0]|0;
 _nk_color_hsva_fv($14,$$byval_copy);
 $27 = $7;
 $28 = $9;
 $29 = $13;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$28+12>>2]|0;
 $30 = (_nk_button_behavior($27,$$byval_copy1,$29,1)|0);
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $13;
  $33 = ((($32)) + 260|0);
  $34 = ((($33)) + 48|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $9;
  $37 = +HEAPF32[$36>>2];
  $38 = $35 - $37;
  $39 = $9;
  $40 = ((($39)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $41 - 1.0;
  $43 = $38 / $42;
  $44 = 1.0 < $43;
  if ($44) {
   $58 = 1.0;
  } else {
   $45 = $13;
   $46 = ((($45)) + 260|0);
   $47 = ((($46)) + 48|0);
   $48 = +HEAPF32[$47>>2];
   $49 = $9;
   $50 = +HEAPF32[$49>>2];
   $51 = $48 - $50;
   $52 = $9;
   $53 = ((($52)) + 8|0);
   $54 = +HEAPF32[$53>>2];
   $55 = $54 - 1.0;
   $56 = $51 / $55;
   $58 = $56;
  }
  $57 = 0.0 < $58;
  if ($57) {
   $59 = $13;
   $60 = ((($59)) + 260|0);
   $61 = ((($60)) + 48|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $9;
   $64 = +HEAPF32[$63>>2];
   $65 = $62 - $64;
   $66 = $9;
   $67 = ((($66)) + 8|0);
   $68 = +HEAPF32[$67>>2];
   $69 = $68 - 1.0;
   $70 = $65 / $69;
   $71 = 1.0 < $70;
   if ($71) {
    $85 = 1.0;
   } else {
    $72 = $13;
    $73 = ((($72)) + 260|0);
    $74 = ((($73)) + 48|0);
    $75 = +HEAPF32[$74>>2];
    $76 = $9;
    $77 = +HEAPF32[$76>>2];
    $78 = $75 - $77;
    $79 = $9;
    $80 = ((($79)) + 8|0);
    $81 = +HEAPF32[$80>>2];
    $82 = $81 - 1.0;
    $83 = $78 / $82;
    $85 = $83;
   }
  } else {
   $85 = 0.0;
  }
  $84 = ((($14)) + 4|0);
  HEAPF32[$84>>2] = $85;
  $86 = $13;
  $87 = ((($86)) + 260|0);
  $88 = ((($87)) + 48|0);
  $89 = ((($88)) + 4|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $9;
  $92 = ((($91)) + 4|0);
  $93 = +HEAPF32[$92>>2];
  $94 = $90 - $93;
  $95 = $9;
  $96 = ((($95)) + 12|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $97 - 1.0;
  $99 = $94 / $98;
  $100 = 1.0 < $99;
  if ($100) {
   $116 = 1.0;
  } else {
   $101 = $13;
   $102 = ((($101)) + 260|0);
   $103 = ((($102)) + 48|0);
   $104 = ((($103)) + 4|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $9;
   $107 = ((($106)) + 4|0);
   $108 = +HEAPF32[$107>>2];
   $109 = $105 - $108;
   $110 = $9;
   $111 = ((($110)) + 12|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $112 - 1.0;
   $114 = $109 / $113;
   $116 = $114;
  }
  $115 = 0.0 < $116;
  if ($115) {
   $117 = $13;
   $118 = ((($117)) + 260|0);
   $119 = ((($118)) + 48|0);
   $120 = ((($119)) + 4|0);
   $121 = +HEAPF32[$120>>2];
   $122 = $9;
   $123 = ((($122)) + 4|0);
   $124 = +HEAPF32[$123>>2];
   $125 = $121 - $124;
   $126 = $9;
   $127 = ((($126)) + 12|0);
   $128 = +HEAPF32[$127>>2];
   $129 = $128 - 1.0;
   $130 = $125 / $129;
   $131 = 1.0 < $130;
   if ($131) {
    $147 = 1.0;
   } else {
    $132 = $13;
    $133 = ((($132)) + 260|0);
    $134 = ((($133)) + 48|0);
    $135 = ((($134)) + 4|0);
    $136 = +HEAPF32[$135>>2];
    $137 = $9;
    $138 = ((($137)) + 4|0);
    $139 = +HEAPF32[$138>>2];
    $140 = $136 - $139;
    $141 = $9;
    $142 = ((($141)) + 12|0);
    $143 = +HEAPF32[$142>>2];
    $144 = $143 - 1.0;
    $145 = $140 / $144;
    $147 = $145;
   }
  } else {
   $147 = 0.0;
  }
  $146 = 1.0 - $147;
  $148 = ((($14)) + 8|0);
  HEAPF32[$148>>2] = $146;
  $16 = 1;
  $15 = 1;
 }
 $149 = $7;
 $150 = $10;
 $151 = $13;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$150>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$150+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$150+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$150+12>>2]|0;
 $152 = (_nk_button_behavior($149,$$byval_copy2,$151,1)|0);
 $153 = ($152|0)!=(0);
 if ($153) {
  $154 = $13;
  $155 = ((($154)) + 260|0);
  $156 = ((($155)) + 48|0);
  $157 = ((($156)) + 4|0);
  $158 = +HEAPF32[$157>>2];
  $159 = $10;
  $160 = ((($159)) + 4|0);
  $161 = +HEAPF32[$160>>2];
  $162 = $158 - $161;
  $163 = $10;
  $164 = ((($163)) + 12|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $165 - 1.0;
  $167 = $162 / $166;
  $168 = 1.0 < $167;
  if ($168) {
   $184 = 1.0;
  } else {
   $169 = $13;
   $170 = ((($169)) + 260|0);
   $171 = ((($170)) + 48|0);
   $172 = ((($171)) + 4|0);
   $173 = +HEAPF32[$172>>2];
   $174 = $10;
   $175 = ((($174)) + 4|0);
   $176 = +HEAPF32[$175>>2];
   $177 = $173 - $176;
   $178 = $10;
   $179 = ((($178)) + 12|0);
   $180 = +HEAPF32[$179>>2];
   $181 = $180 - 1.0;
   $182 = $177 / $181;
   $184 = $182;
  }
  $183 = 0.0 < $184;
  if ($183) {
   $185 = $13;
   $186 = ((($185)) + 260|0);
   $187 = ((($186)) + 48|0);
   $188 = ((($187)) + 4|0);
   $189 = +HEAPF32[$188>>2];
   $190 = $10;
   $191 = ((($190)) + 4|0);
   $192 = +HEAPF32[$191>>2];
   $193 = $189 - $192;
   $194 = $10;
   $195 = ((($194)) + 12|0);
   $196 = +HEAPF32[$195>>2];
   $197 = $196 - 1.0;
   $198 = $193 / $197;
   $199 = 1.0 < $198;
   if ($199) {
    $214 = 1.0;
   } else {
    $200 = $13;
    $201 = ((($200)) + 260|0);
    $202 = ((($201)) + 48|0);
    $203 = ((($202)) + 4|0);
    $204 = +HEAPF32[$203>>2];
    $205 = $10;
    $206 = ((($205)) + 4|0);
    $207 = +HEAPF32[$206>>2];
    $208 = $204 - $207;
    $209 = $10;
    $210 = ((($209)) + 12|0);
    $211 = +HEAPF32[$210>>2];
    $212 = $211 - 1.0;
    $213 = $208 / $212;
    $214 = $213;
   }
  } else {
   $214 = 0.0;
  }
  HEAPF32[$14>>2] = $214;
  $16 = 1;
  $15 = 1;
 }
 $215 = $11;
 $216 = ($215|0)!=(0|0);
 if ($216) {
  $217 = $7;
  $218 = $11;
  $219 = $13;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$218>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$218+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$218+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$218+12>>2]|0;
  $220 = (_nk_button_behavior($217,$$byval_copy3,$219,1)|0);
  $221 = ($220|0)!=(0);
  if ($221) {
   $222 = $13;
   $223 = ((($222)) + 260|0);
   $224 = ((($223)) + 48|0);
   $225 = ((($224)) + 4|0);
   $226 = +HEAPF32[$225>>2];
   $227 = $11;
   $228 = ((($227)) + 4|0);
   $229 = +HEAPF32[$228>>2];
   $230 = $226 - $229;
   $231 = $11;
   $232 = ((($231)) + 12|0);
   $233 = +HEAPF32[$232>>2];
   $234 = $233 - 1.0;
   $235 = $230 / $234;
   $236 = 1.0 < $235;
   if ($236) {
    $252 = 1.0;
   } else {
    $237 = $13;
    $238 = ((($237)) + 260|0);
    $239 = ((($238)) + 48|0);
    $240 = ((($239)) + 4|0);
    $241 = +HEAPF32[$240>>2];
    $242 = $11;
    $243 = ((($242)) + 4|0);
    $244 = +HEAPF32[$243>>2];
    $245 = $241 - $244;
    $246 = $11;
    $247 = ((($246)) + 12|0);
    $248 = +HEAPF32[$247>>2];
    $249 = $248 - 1.0;
    $250 = $245 / $249;
    $252 = $250;
   }
   $251 = 0.0 < $252;
   if ($251) {
    $253 = $13;
    $254 = ((($253)) + 260|0);
    $255 = ((($254)) + 48|0);
    $256 = ((($255)) + 4|0);
    $257 = +HEAPF32[$256>>2];
    $258 = $11;
    $259 = ((($258)) + 4|0);
    $260 = +HEAPF32[$259>>2];
    $261 = $257 - $260;
    $262 = $11;
    $263 = ((($262)) + 12|0);
    $264 = +HEAPF32[$263>>2];
    $265 = $264 - 1.0;
    $266 = $261 / $265;
    $267 = 1.0 < $266;
    if ($267) {
     $283 = 1.0;
    } else {
     $268 = $13;
     $269 = ((($268)) + 260|0);
     $270 = ((($269)) + 48|0);
     $271 = ((($270)) + 4|0);
     $272 = +HEAPF32[$271>>2];
     $273 = $11;
     $274 = ((($273)) + 4|0);
     $275 = +HEAPF32[$274>>2];
     $276 = $272 - $275;
     $277 = $11;
     $278 = ((($277)) + 12|0);
     $279 = +HEAPF32[$278>>2];
     $280 = $279 - 1.0;
     $281 = $276 / $280;
     $283 = $281;
    }
   } else {
    $283 = 0.0;
   }
   $282 = 1.0 - $283;
   $284 = ((($14)) + 12|0);
   HEAPF32[$284>>2] = $282;
   $15 = 1;
  }
 }
 $285 = $7;
 $286 = HEAP32[$285>>2]|0;
 $287 = $286 & 2;
 $288 = ($287|0)!=(0);
 $289 = $7;
 if ($288) {
  HEAP32[$289>>2] = 6;
 } else {
  HEAP32[$289>>2] = 4;
 }
 $290 = $16;
 $291 = ($290|0)!=(0);
 if ($291) {
  $292 = $12;
  _nk_hsva_fv($17,$14);
  ;HEAP8[$292>>0]=HEAP8[$17>>0]|0;HEAP8[$292+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$292+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$292+3>>0]=HEAP8[$17+3>>0]|0;
  $293 = $7;
  HEAP32[$293>>2] = 34;
 }
 $294 = $15;
 $295 = ($294|0)!=(0);
 if ($295) {
  $296 = ((($14)) + 12|0);
  $297 = +HEAPF32[$296>>2];
  $298 = $297 * 255.0;
  $299 = (~~(($298))&255);
  $300 = $12;
  $301 = ((($300)) + 3|0);
  HEAP8[$301>>0] = $299;
  $302 = $7;
  HEAP32[$302>>2] = 34;
 }
 $303 = $13;
 $304 = $8;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$304>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$304+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$304+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$304+12>>2]|0;
 $305 = (_nk_input_is_mouse_hovering_rect($303,$$byval_copy4)|0);
 $306 = ($305|0)!=(0);
 if ($306) {
  $307 = $7;
  HEAP32[$307>>2] = 18;
 }
 $308 = $7;
 $309 = HEAP32[$308>>2]|0;
 $310 = $309 & 16;
 $311 = ($310|0)!=(0);
 if ($311) {
  $312 = $13;
  $313 = $8;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$313>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$313+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$313+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$313+12>>2]|0;
  $314 = (_nk_input_is_mouse_prev_hovering_rect($312,$$byval_copy5)|0);
  $315 = ($314|0)!=(0);
  if (!($315)) {
   $316 = $7;
   $317 = HEAP32[$316>>2]|0;
   $318 = $317 | 8;
   HEAP32[$316>>2] = $318;
   $326 = $15;
   STACKTOP = sp;return ($326|0);
  }
 }
 $319 = $13;
 $320 = $8;
 ;HEAP32[$$byval_copy6>>2]=HEAP32[$320>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$320+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$320+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$320+12>>2]|0;
 $321 = (_nk_input_is_mouse_prev_hovering_rect($319,$$byval_copy6)|0);
 $322 = ($321|0)!=(0);
 if (!($322)) {
  $326 = $15;
  STACKTOP = sp;return ($326|0);
 }
 $323 = $7;
 $324 = HEAP32[$323>>2]|0;
 $325 = $324 | 64;
 HEAP32[$323>>2] = $325;
 $326 = $15;
 STACKTOP = sp;return ($326|0);
}
function _nk_draw_color_picker($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy16 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0;
 var $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0;
 var $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0;
 var $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0;
 var $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0;
 var $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $nk_draw_color_picker$black$byval_copy = 0;
 var $nk_draw_color_picker$black$byval_copy18 = 0, $nk_draw_color_picker$black$byval_copy19 = 0, $nk_draw_color_picker$black$byval_copy9 = 0, $nk_draw_color_picker$black_trans$byval_copy = 0, $nk_draw_color_picker$black_trans$byval_copy17 = 0, $nk_draw_color_picker$white$byval_copy = 0, $nk_draw_color_picker$white$byval_copy12 = 0, $nk_draw_color_picker$white$byval_copy15 = 0, $nk_draw_color_picker$white$byval_copy20 = 0, $nk_draw_color_picker$white$byval_copy21 = 0, $nk_draw_color_picker$white$byval_copy22 = 0, $nk_draw_color_picker$white$byval_copy23 = 0, $nk_draw_color_picker$white$byval_copy8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $nk_draw_color_picker$white$byval_copy23 = sp + 256|0;
 $nk_draw_color_picker$white$byval_copy22 = sp + 252|0;
 $nk_draw_color_picker$white$byval_copy21 = sp + 248|0;
 $nk_draw_color_picker$white$byval_copy20 = sp + 244|0;
 $nk_draw_color_picker$black$byval_copy19 = sp + 240|0;
 $nk_draw_color_picker$black$byval_copy18 = sp + 236|0;
 $nk_draw_color_picker$black_trans$byval_copy17 = sp + 232|0;
 $nk_draw_color_picker$black_trans$byval_copy = sp + 228|0;
 $$byval_copy16 = sp + 136|0;
 $nk_draw_color_picker$white$byval_copy15 = sp + 224|0;
 $$byval_copy14 = sp + 220|0;
 $$byval_copy13 = sp + 216|0;
 $nk_draw_color_picker$white$byval_copy12 = sp + 212|0;
 $$byval_copy11 = sp + 120|0;
 $$byval_copy10 = sp + 208|0;
 $nk_draw_color_picker$black$byval_copy9 = sp + 204|0;
 $nk_draw_color_picker$black$byval_copy = sp + 200|0;
 $nk_draw_color_picker$white$byval_copy8 = sp + 196|0;
 $nk_draw_color_picker$white$byval_copy = sp + 192|0;
 $$byval_copy7 = sp + 104|0;
 $$byval_copy6 = sp + 188|0;
 $$byval_copy5 = sp + 184|0;
 $$byval_copy4 = sp + 180|0;
 $$byval_copy3 = sp + 176|0;
 $$byval_copy2 = sp + 172|0;
 $$byval_copy1 = sp + 88|0;
 $$byval_copy = sp + 168|0;
 $10 = sp + 164|0;
 $11 = sp + 48|0;
 $14 = sp + 24|0;
 $15 = sp + 160|0;
 $17 = sp + 156|0;
 $18 = sp + 152|0;
 $19 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 7.0;
 $22 = $5;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((24382|0),(1320|0),15006,(24747|0));
  // unreachable;
 }
 $24 = $6;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  ___assert_fail((24724|0),(1320|0),15007,(24747|0));
  // unreachable;
 }
 $26 = $7;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  ___assert_fail((24731|0),(1320|0),15008,(24747|0));
  // unreachable;
 }
 ;HEAP8[$$byval_copy>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$4+3>>0]|0;
 _nk_color_hsv_fv($11,$$byval_copy);
 $13 = 0;
 while(1) {
  $28 = $13;
  $29 = ($28|0)<(6);
  if (!($29)) {
   break;
  }
  $30 = $5;
  $31 = $7;
  $32 = +HEAPF32[$31>>2];
  $33 = $7;
  $34 = ((($33)) + 4|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $13;
  $37 = (+($36|0));
  $38 = $7;
  $39 = ((($38)) + 12|0);
  $40 = +HEAPF32[$39>>2];
  $41 = $40 / 6.0;
  $42 = $37 * $41;
  $43 = $35 + $42;
  $44 = $43 + 0.5;
  $45 = $7;
  $46 = ((($45)) + 8|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $7;
  $49 = ((($48)) + 12|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $50 / 6.0;
  $52 = $51 + 0.5;
  _nk_rect($14,$32,$44,$47,$52);
  $53 = $13;
  $54 = (24768 + ($53<<2)|0);
  $55 = $13;
  $56 = (24768 + ($55<<2)|0);
  $57 = $13;
  $58 = (($57) + 1)|0;
  $59 = (24768 + ($58<<2)|0);
  $60 = $13;
  $61 = (($60) + 1)|0;
  $62 = (24768 + ($61<<2)|0);
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$14+12>>2]|0;
  ;HEAP8[$$byval_copy2>>0]=HEAP8[$54>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$54+3>>0]|0;
  ;HEAP8[$$byval_copy3>>0]=HEAP8[$56>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$56+3>>0]|0;
  ;HEAP8[$$byval_copy4>>0]=HEAP8[$59>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$59+3>>0]|0;
  ;HEAP8[$$byval_copy5>>0]=HEAP8[$62>>0]|0;HEAP8[$$byval_copy5+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$$byval_copy5+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$$byval_copy5+3>>0]=HEAP8[$62+3>>0]|0;
  _nk_fill_rect_multi_color($30,$$byval_copy1,$$byval_copy2,$$byval_copy3,$$byval_copy4,$$byval_copy5);
  $63 = $13;
  $64 = (($63) + 1)|0;
  $13 = $64;
 }
 $65 = $7;
 $66 = ((($65)) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = +HEAPF32[$11>>2];
 $69 = $6;
 $70 = ((($69)) + 12|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $68 * $71;
 $73 = $67 + $72;
 $74 = $73 + 0.5;
 $75 = (~~(($74)));
 $76 = (+($75|0));
 $12 = $76;
 $77 = $5;
 $78 = $7;
 $79 = +HEAPF32[$78>>2];
 $80 = $79 - 1.0;
 $81 = $12;
 $82 = $7;
 $83 = +HEAPF32[$82>>2];
 $84 = $7;
 $85 = ((($84)) + 8|0);
 $86 = +HEAPF32[$85>>2];
 $87 = $83 + $86;
 $88 = $87 + 2.0;
 $89 = $12;
 _nk_rgb($15,255,255,255);
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$15+3>>0]|0;
 _nk_stroke_line($77,$80,$81,$88,$89,1.0,$$byval_copy6);
 $90 = $8;
 $91 = ($90|0)!=(0|0);
 if ($91) {
  $92 = ((($4)) + 3|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = (+($93&255));
  $95 = $94 / 255.0;
  $96 = 1.0 < $95;
  if ($96) {
   $102 = 1.0;
  } else {
   $97 = ((($4)) + 3|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = (+($98&255));
   $100 = $99 / 255.0;
   $102 = $100;
  }
  $101 = 0.0 < $102;
  if ($101) {
   $103 = ((($4)) + 3|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = (+($104&255));
   $106 = $105 / 255.0;
   $107 = 1.0 < $106;
   if ($107) {
    $112 = 1.0;
   } else {
    $108 = ((($4)) + 3|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = (+($109&255));
    $111 = $110 / 255.0;
    $112 = $111;
   }
  } else {
   $112 = 0.0;
  }
  $16 = $112;
  $113 = $8;
  $114 = ((($113)) + 4|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $16;
  $117 = 1.0 - $116;
  $118 = $6;
  $119 = ((($118)) + 12|0);
  $120 = +HEAPF32[$119>>2];
  $121 = $117 * $120;
  $122 = $115 + $121;
  $123 = $122 + 0.5;
  $124 = (~~(($123)));
  $125 = (+($124|0));
  $12 = $125;
  $126 = $5;
  $127 = $8;
  ;HEAP32[$$byval_copy7>>2]=HEAP32[$127>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$127+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$127+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$127+12>>2]|0;
  ;HEAP8[$nk_draw_color_picker$white$byval_copy>>0]=HEAP8[24743>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy+1>>0]=HEAP8[24743+1>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy+2>>0]=HEAP8[24743+2>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy+3>>0]=HEAP8[24743+3>>0]|0;
  ;HEAP8[$nk_draw_color_picker$white$byval_copy8>>0]=HEAP8[24743>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy8+1>>0]=HEAP8[24743+1>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy8+2>>0]=HEAP8[24743+2>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy8+3>>0]=HEAP8[24743+3>>0]|0;
  ;HEAP8[$nk_draw_color_picker$black$byval_copy>>0]=HEAP8[24739>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy+1>>0]=HEAP8[24739+1>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy+2>>0]=HEAP8[24739+2>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy+3>>0]=HEAP8[24739+3>>0]|0;
  ;HEAP8[$nk_draw_color_picker$black$byval_copy9>>0]=HEAP8[24739>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy9+1>>0]=HEAP8[24739+1>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy9+2>>0]=HEAP8[24739+2>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy9+3>>0]=HEAP8[24739+3>>0]|0;
  _nk_fill_rect_multi_color($126,$$byval_copy7,$nk_draw_color_picker$white$byval_copy,$nk_draw_color_picker$white$byval_copy8,$nk_draw_color_picker$black$byval_copy,$nk_draw_color_picker$black$byval_copy9);
  $128 = $5;
  $129 = $8;
  $130 = +HEAPF32[$129>>2];
  $131 = $130 - 1.0;
  $132 = $12;
  $133 = $8;
  $134 = +HEAPF32[$133>>2];
  $135 = $8;
  $136 = ((($135)) + 8|0);
  $137 = +HEAPF32[$136>>2];
  $138 = $134 + $137;
  $139 = $138 + 2.0;
  $140 = $12;
  _nk_rgb($17,255,255,255);
  ;HEAP8[$$byval_copy10>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy10+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy10+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy10+3>>0]=HEAP8[$17+3>>0]|0;
  _nk_stroke_line($128,$131,$132,$139,$140,1.0,$$byval_copy10);
 }
 $141 = +HEAPF32[$11>>2];
 _nk_hsv_f($18,$141,1.0,1.0);
 ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;HEAP8[$10+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$18+3>>0]|0;
 $142 = $5;
 $143 = $6;
 ;HEAP32[$$byval_copy11>>2]=HEAP32[$143>>2]|0;HEAP32[$$byval_copy11+4>>2]=HEAP32[$143+4>>2]|0;HEAP32[$$byval_copy11+8>>2]=HEAP32[$143+8>>2]|0;HEAP32[$$byval_copy11+12>>2]=HEAP32[$143+12>>2]|0;
 ;HEAP8[$nk_draw_color_picker$white$byval_copy12>>0]=HEAP8[24743>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy12+1>>0]=HEAP8[24743+1>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy12+2>>0]=HEAP8[24743+2>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy12+3>>0]=HEAP8[24743+3>>0]|0;
 ;HEAP8[$$byval_copy13>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy13+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy13+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy13+3>>0]=HEAP8[$10+3>>0]|0;
 ;HEAP8[$$byval_copy14>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy14+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy14+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy14+3>>0]=HEAP8[$10+3>>0]|0;
 ;HEAP8[$nk_draw_color_picker$white$byval_copy15>>0]=HEAP8[24743>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy15+1>>0]=HEAP8[24743+1>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy15+2>>0]=HEAP8[24743+2>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy15+3>>0]=HEAP8[24743+3>>0]|0;
 _nk_fill_rect_multi_color($142,$$byval_copy11,$nk_draw_color_picker$white$byval_copy12,$$byval_copy13,$$byval_copy14,$nk_draw_color_picker$white$byval_copy15);
 $144 = $5;
 $145 = $6;
 ;HEAP32[$$byval_copy16>>2]=HEAP32[$145>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$145+4>>2]|0;HEAP32[$$byval_copy16+8>>2]=HEAP32[$145+8>>2]|0;HEAP32[$$byval_copy16+12>>2]=HEAP32[$145+12>>2]|0;
 ;HEAP8[$nk_draw_color_picker$black_trans$byval_copy>>0]=HEAP8[50432>>0]|0;HEAP8[$nk_draw_color_picker$black_trans$byval_copy+1>>0]=HEAP8[50432+1>>0]|0;HEAP8[$nk_draw_color_picker$black_trans$byval_copy+2>>0]=HEAP8[50432+2>>0]|0;HEAP8[$nk_draw_color_picker$black_trans$byval_copy+3>>0]=HEAP8[50432+3>>0]|0;
 ;HEAP8[$nk_draw_color_picker$black_trans$byval_copy17>>0]=HEAP8[50432>>0]|0;HEAP8[$nk_draw_color_picker$black_trans$byval_copy17+1>>0]=HEAP8[50432+1>>0]|0;HEAP8[$nk_draw_color_picker$black_trans$byval_copy17+2>>0]=HEAP8[50432+2>>0]|0;HEAP8[$nk_draw_color_picker$black_trans$byval_copy17+3>>0]=HEAP8[50432+3>>0]|0;
 ;HEAP8[$nk_draw_color_picker$black$byval_copy18>>0]=HEAP8[24739>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy18+1>>0]=HEAP8[24739+1>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy18+2>>0]=HEAP8[24739+2>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy18+3>>0]=HEAP8[24739+3>>0]|0;
 ;HEAP8[$nk_draw_color_picker$black$byval_copy19>>0]=HEAP8[24739>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy19+1>>0]=HEAP8[24739+1>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy19+2>>0]=HEAP8[24739+2>>0]|0;HEAP8[$nk_draw_color_picker$black$byval_copy19+3>>0]=HEAP8[24739+3>>0]|0;
 _nk_fill_rect_multi_color($144,$$byval_copy16,$nk_draw_color_picker$black_trans$byval_copy,$nk_draw_color_picker$black_trans$byval_copy17,$nk_draw_color_picker$black$byval_copy18,$nk_draw_color_picker$black$byval_copy19);
 $146 = ((($11)) + 4|0);
 $147 = +HEAPF32[$146>>2];
 $20 = $147;
 $148 = ((($11)) + 8|0);
 $149 = +HEAPF32[$148>>2];
 $21 = $149;
 $150 = $6;
 $151 = +HEAPF32[$150>>2];
 $152 = $20;
 $153 = $6;
 $154 = ((($153)) + 8|0);
 $155 = +HEAPF32[$154>>2];
 $156 = $152 * $155;
 $157 = $151 + $156;
 $158 = (~~(($157)));
 $159 = (+($158|0));
 HEAPF32[$19>>2] = $159;
 $160 = $6;
 $161 = ((($160)) + 4|0);
 $162 = +HEAPF32[$161>>2];
 $163 = $21;
 $164 = 1.0 - $163;
 $165 = $6;
 $166 = ((($165)) + 12|0);
 $167 = +HEAPF32[$166>>2];
 $168 = $164 * $167;
 $169 = $162 + $168;
 $170 = (~~(($169)));
 $171 = (+($170|0));
 $172 = ((($19)) + 4|0);
 HEAPF32[$172>>2] = $171;
 $173 = $5;
 $174 = +HEAPF32[$19>>2];
 $175 = $174 - 7.0;
 $176 = ((($19)) + 4|0);
 $177 = +HEAPF32[$176>>2];
 $178 = +HEAPF32[$19>>2];
 $179 = $178 - 2.0;
 $180 = ((($19)) + 4|0);
 $181 = +HEAPF32[$180>>2];
 ;HEAP8[$nk_draw_color_picker$white$byval_copy20>>0]=HEAP8[24743>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy20+1>>0]=HEAP8[24743+1>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy20+2>>0]=HEAP8[24743+2>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy20+3>>0]=HEAP8[24743+3>>0]|0;
 _nk_stroke_line($173,$175,$177,$179,$181,1.0,$nk_draw_color_picker$white$byval_copy20);
 $182 = $5;
 $183 = +HEAPF32[$19>>2];
 $184 = $183 + 7.0;
 $185 = $184 + 1.0;
 $186 = ((($19)) + 4|0);
 $187 = +HEAPF32[$186>>2];
 $188 = +HEAPF32[$19>>2];
 $189 = $188 + 3.0;
 $190 = ((($19)) + 4|0);
 $191 = +HEAPF32[$190>>2];
 ;HEAP8[$nk_draw_color_picker$white$byval_copy21>>0]=HEAP8[24743>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy21+1>>0]=HEAP8[24743+1>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy21+2>>0]=HEAP8[24743+2>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy21+3>>0]=HEAP8[24743+3>>0]|0;
 _nk_stroke_line($182,$185,$187,$189,$191,1.0,$nk_draw_color_picker$white$byval_copy21);
 $192 = $5;
 $193 = +HEAPF32[$19>>2];
 $194 = ((($19)) + 4|0);
 $195 = +HEAPF32[$194>>2];
 $196 = $195 + 7.0;
 $197 = $196 + 1.0;
 $198 = +HEAPF32[$19>>2];
 $199 = ((($19)) + 4|0);
 $200 = +HEAPF32[$199>>2];
 $201 = $200 + 3.0;
 ;HEAP8[$nk_draw_color_picker$white$byval_copy22>>0]=HEAP8[24743>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy22+1>>0]=HEAP8[24743+1>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy22+2>>0]=HEAP8[24743+2>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy22+3>>0]=HEAP8[24743+3>>0]|0;
 _nk_stroke_line($192,$193,$197,$198,$201,1.0,$nk_draw_color_picker$white$byval_copy22);
 $202 = $5;
 $203 = +HEAPF32[$19>>2];
 $204 = ((($19)) + 4|0);
 $205 = +HEAPF32[$204>>2];
 $206 = $205 - 7.0;
 $207 = +HEAPF32[$19>>2];
 $208 = ((($19)) + 4|0);
 $209 = +HEAPF32[$208>>2];
 $210 = $209 - 2.0;
 ;HEAP8[$nk_draw_color_picker$white$byval_copy23>>0]=HEAP8[24743>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy23+1>>0]=HEAP8[24743+1>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy23+2>>0]=HEAP8[24743+2>>0]|0;HEAP8[$nk_draw_color_picker$white$byval_copy23+3>>0]=HEAP8[24743+3>>0]|0;
 _nk_stroke_line($202,$203,$206,$207,$210,1.0,$nk_draw_color_picker$white$byval_copy23);
 STACKTOP = sp;return;
}
function _nk_create_table($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_nk_create_page_element($4)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  _nk_zero($8,380);
  $9 = $3;
  $1 = $9;
 } else {
  $1 = 0;
 }
 $10 = $1;
 STACKTOP = sp;return ($10|0);
}
function _nk_push_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 340|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = $3;
 $9 = $2;
 $10 = ((($9)) + 340|0);
 if ($7) {
  $19 = HEAP32[$10>>2]|0;
  $20 = ((($19)) + 368|0);
  HEAP32[$20>>2] = $8;
  $21 = $2;
  $22 = ((($21)) + 340|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $3;
  $25 = ((($24)) + 364|0);
  HEAP32[$25>>2] = $23;
  $26 = $3;
  $27 = ((($26)) + 368|0);
  HEAP32[$27>>2] = 0;
  $28 = $3;
  $29 = $2;
  $30 = ((($29)) + 340|0);
  HEAP32[$30>>2] = $28;
  $31 = $2;
  $32 = ((($31)) + 344|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = (($33) + 1)<<16>>16;
  HEAP16[$32>>1] = $34;
  $35 = $2;
  $36 = ((($35)) + 346|0);
  HEAP16[$36>>1] = 0;
  STACKTOP = sp;return;
 } else {
  HEAP32[$10>>2] = $8;
  $11 = $3;
  $12 = ((($11)) + 364|0);
  HEAP32[$12>>2] = 0;
  $13 = $3;
  $14 = ((($13)) + 368|0);
  HEAP32[$14>>2] = 0;
  $15 = $2;
  $16 = ((($15)) + 344|0);
  HEAP16[$16>>1] = 1;
  $17 = $2;
  $18 = ((($17)) + 346|0);
  HEAP16[$18>>1] = 0;
  STACKTOP = sp;return;
 }
}
function _node_editor_init($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy5 = sp + 124|0;
 $$byval_copy4 = sp + 88|0;
 $$byval_copy3 = sp + 120|0;
 $$byval_copy2 = sp + 72|0;
 $$byval_copy1 = sp + 116|0;
 $$byval_copy = sp + 56|0;
 $2 = sp + 32|0;
 $3 = sp + 112|0;
 $4 = sp + 16|0;
 $5 = sp + 108|0;
 $6 = sp;
 $7 = sp + 104|0;
 $1 = $0;
 $8 = $1;
 _memset(($8|0),0,4548)|0;
 $9 = $1;
 $10 = ((($9)) + 4484|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 4488|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 _nk_rect($2,40.0,10.0,180.0,220.0);
 _nk_rgb($3,255,0,0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$3+3>>0]|0;
 _node_editor_add($13,25052,$$byval_copy,$$byval_copy1,0,1);
 $14 = $1;
 _nk_rect($4,40.0,260.0,180.0,220.0);
 _nk_rgb($5,0,255,0);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$5+3>>0]|0;
 _node_editor_add($14,25052,$$byval_copy2,$$byval_copy3,0,1);
 $15 = $1;
 _nk_rect($6,400.0,100.0,180.0,220.0);
 _nk_rgb($7,0,0,255);
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$6+12>>2]|0;
 ;HEAP8[$$byval_copy5>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy5+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy5+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy5+3>>0]=HEAP8[$7+3>>0]|0;
 _node_editor_add($15,25059,$$byval_copy4,$$byval_copy5,2,2);
 $16 = $1;
 _node_editor_link($16,0,0,2,0);
 $17 = $1;
 _node_editor_link($17,1,0,2,1);
 $18 = $1;
 $19 = ((($18)) + 4520|0);
 HEAP32[$19>>2] = 1;
 STACKTOP = sp;return;
}
function _node_editor_link($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $12 = ((($11)) + 4496|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)<(64);
 if ($14) {
  $15 = $5;
  $16 = ((($15)) + 4496|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$16>>2] = $18;
  $19 = $5;
  $20 = ((($19)) + 2436|0);
  $21 = (($20) + ($17<<5)|0);
  $10 = $21;
  $22 = $6;
  $23 = $10;
  HEAP32[$23>>2] = $22;
  $24 = $7;
  $25 = $10;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
  $27 = $8;
  $28 = $10;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = $27;
  $30 = $9;
  $31 = $10;
  $32 = ((($31)) + 12|0);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((25067|0),(25116|0),125,(25132|0));
  // unreachable;
 }
}
function _node_editor_find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 4484|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 while(1) {
  $9 = $5;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = ($12|0)==($13|0);
  $15 = $5;
  if ($14) {
   label = 4;
   break;
  }
  $16 = ((($15)) + 68|0);
  $17 = HEAP32[$16>>2]|0;
  $5 = $17;
 }
 if ((label|0) == 4) {
  $2 = $15;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _node_editor_pop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ((($4)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 72|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = ((($11)) + 68|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 72|0);
  HEAP32[$14>>2] = $10;
 }
 $15 = $3;
 $16 = ((($15)) + 72|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $3;
  $20 = ((($19)) + 68|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = ((($22)) + 72|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 68|0);
  HEAP32[$25>>2] = $21;
 }
 $26 = $2;
 $27 = ((($26)) + 4488|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $3;
 $30 = ($28|0)==($29|0);
 if ($30) {
  $31 = $3;
  $32 = ((($31)) + 72|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  $35 = ((($34)) + 4488|0);
  HEAP32[$35>>2] = $33;
 }
 $36 = $2;
 $37 = ((($36)) + 4484|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $3;
 $40 = ($38|0)==($39|0);
 if (!($40)) {
  $46 = $3;
  $47 = ((($46)) + 68|0);
  HEAP32[$47>>2] = 0;
  $48 = $3;
  $49 = ((($48)) + 72|0);
  HEAP32[$49>>2] = 0;
  STACKTOP = sp;return;
 }
 $41 = $3;
 $42 = ((($41)) + 68|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $2;
 $45 = ((($44)) + 4484|0);
 HEAP32[$45>>2] = $43;
 $46 = $3;
 $47 = ((($46)) + 68|0);
 HEAP32[$47>>2] = 0;
 $48 = $3;
 $49 = ((($48)) + 72|0);
 HEAP32[$49>>2] = 0;
 STACKTOP = sp;return;
}
function _node_editor_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4484|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = $3;
  $9 = ((($8)) + 68|0);
  HEAP32[$9>>2] = 0;
  $10 = $3;
  $11 = ((($10)) + 72|0);
  HEAP32[$11>>2] = 0;
  $12 = $3;
  $13 = $2;
  $14 = ((($13)) + 4484|0);
  HEAP32[$14>>2] = $12;
  $15 = $3;
  $16 = $2;
  $17 = ((($16)) + 4488|0);
  HEAP32[$17>>2] = $15;
  STACKTOP = sp;return;
 }
 $18 = $2;
 $19 = ((($18)) + 4488|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = ((($21)) + 72|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = ((($23)) + 4488|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $3;
  $28 = $2;
  $29 = ((($28)) + 4488|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 68|0);
  HEAP32[$31>>2] = $27;
 }
 $32 = $3;
 $33 = ((($32)) + 68|0);
 HEAP32[$33>>2] = 0;
 $34 = $3;
 $35 = $2;
 $36 = ((($35)) + 4488|0);
 HEAP32[$36>>2] = $34;
 STACKTOP = sp;return;
}
function _node_editor_add($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp + 20|0;
 $6 = $0;
 $7 = $1;
 $8 = $4;
 $9 = $5;
 $12 = $6;
 $13 = ((($12)) + 4492|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)<(32);
 if ($15) {
  $16 = $6;
  $17 = ((($16)) + 4492|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  $22 = (($21) + (($18*76)|0)|0);
  $10 = $22;
  $23 = HEAP32[12347]|0;
  $24 = (($23) + 1)|0;
  HEAP32[12347] = $24;
  $25 = $10;
  HEAP32[$25>>2] = $23;
  $26 = $10;
  $27 = ((($26)) + 52|0);
  HEAPF32[$27>>2] = 0.0;
  $28 = $10;
  $29 = ((($28)) + 56|0);
  _nk_rgb($11,255,0,0);
  ;HEAP8[$29>>0]=HEAP8[$11>>0]|0;HEAP8[$29+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$29+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$29+3>>0]=HEAP8[$11+3>>0]|0;
  $30 = $8;
  $31 = $10;
  $32 = ((($31)) + 60|0);
  HEAP32[$32>>2] = $30;
  $33 = $9;
  $34 = $10;
  $35 = ((($34)) + 64|0);
  HEAP32[$35>>2] = $33;
  $36 = $10;
  $37 = ((($36)) + 56|0);
  ;HEAP8[$37>>0]=HEAP8[$3>>0]|0;HEAP8[$37+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$37+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$37+3>>0]=HEAP8[$3+3>>0]|0;
  $38 = $10;
  $39 = ((($38)) + 36|0);
  ;HEAP32[$39>>2]=HEAP32[$2>>2]|0;HEAP32[$39+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$39+12>>2]=HEAP32[$2+12>>2]|0;
  $40 = $10;
  $41 = ((($40)) + 4|0);
  $42 = $7;
  (_strcpy($41,$42)|0);
  $43 = $6;
  $44 = $10;
  _node_editor_push($43,$44);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((25149|0),(25116|0),107,(25201|0));
  // unreachable;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 6;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12471]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 49928;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[12471]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((26|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (27914 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 28002;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 28002;
  } else {
   $$01113 = 28002;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (29806 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (30339 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if ($81) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $162 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $162 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $163 = ($162|0)==(48);
           if ($163) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $162;$$2144$i = 1;$172 = 0;$174 = 0;$216 = $160;$218 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $174;$694 = $172;$695 = $174;$696 = $172;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $173 = ($172|0)<(0);
          $175 = ($174>>>0)<(8);
          $176 = ($172|0)==(0);
          $177 = $176 & $175;
          $178 = $173 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($172|0)<(0);
            $182 = ($174>>>0)<(14);
            $183 = ($172|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($174|0),($172|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $216;$694 = $218;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $217 = $215 ? $174 : $216;
        $219 = $215 ? $172 : $218;
        $220 = ($172|0)<(0);
        $221 = ($174>>>0)<(8);
        $222 = ($172|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $174;$227 = $172;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($217|0),($219|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$396 = $703;$397 = $705;$399 = $704;$400 = $706;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$396 = $697;$397 = 0;$399 = $698;$400 = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $398 = $395 ? $397 : $396;
        $401 = $395 ? $400 : $399;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $398;$710 = $401;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $398;$716 = $401;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($398|0),($401|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$429 = $417;$431 = $397;$432 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$429 = $709;$431 = $707;$432 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$429 = $715;$431 = $712;$432 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $430 = ($429|0)==($431|0);
        $433 = ($432|0)==($434|0);
        $435 = $430 & $433;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($432|0)>($449|0);
        $451 = ($429>>>0)>($447>>>0);
        $452 = ($432|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($432|0)<($461|0);
        $463 = ($429>>>0)<($459>>>0);
        $464 = ($432|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($429|0);
         $480 = ($429|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($429|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($429|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($429))|0;
           $492 = (1164 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($429, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($429) + -10)|0;
           $504 = (1164 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($429|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $429;
        } else {
         $510 = ($429|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (1164 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $429;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $429;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $612 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (1196 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $613 = ($612|0)==($$$5350$i|0);
          if (!($613)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $612;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 $12 = ($11|0)==(45);
 switch ($11|0) {
 case 43: case 45:  {
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$96 = $89;$98 = $90;
      while(1) {
       if ($154) {
        $97 = ($96|0)==(0);
        $99 = ($98|0)==(0);
        $100 = $97 & $99;
        if ($100) {
         break;
        } else {
         $102 = $96;$103 = $98;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$96 = $108;$98 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$115 = $108;$117 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$115 = $89;$117 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $116 = ($115|0)==(0);
     $118 = ($117|0)==(0);
     $119 = $116 & $118;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $120 = $117;$122 = $115;
     }
    } else {
     $120 = $158;$122 = $157;
    }
    $121 = ($120>>>0)<(1048576);
    $123 = ($122>>>0)<(0);
    $124 = ($120|0)==(1048576);
    $125 = $124 & $123;
    $126 = $121 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $122;$129 = $120;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $122;$140 = $120;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$153 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$153 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $150;$152 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 15]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=1204; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((29815 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_44($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 30295;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 30295;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 30295;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 30295 : (30297);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (30296);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 30295;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 30295;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 30305;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 30312;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (30313) : (30318);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (30315);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (30279 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(30347,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(30347,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 30331 : 30335;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 30339 : 30343;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 30295;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (30279 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (30295 + ($255)|0);
    $$332 = $or$cond282 ? 30295 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 30295;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_44($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _pop_arg_44($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[261]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[261]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((49912)|0));
   $$02325 = HEAP32[(49908)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((49912)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 15]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[232]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _strtox_468($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox_468($0,$1,1));
 return (+$2);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[12483]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (49972 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[12483] = $24;
     } else {
      $25 = HEAP32[(49948)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(49940)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (49972 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[12483] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(49948)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(49952)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (49972 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[12483] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(49948)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(49940)>>2] = $84;
     HEAP32[(49952)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(49936)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (50236 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(49948)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (50236 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(49936)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(49948)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(49948)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(49948)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(49952)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (49972 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[12483] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(49948)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(49940)>>2] = $$0191$i;
      HEAP32[(49952)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(49936)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (50236 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (50236 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(49940)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(49948)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (50236 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(49936)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(49948)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(49948)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(49948)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (49972 + ($425<<2)|0);
          $427 = HEAP32[12483]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[12483] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(49948)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (50236 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(49936)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(49948)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(49948)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(49940)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(49952)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(49952)>>2] = $511;
   HEAP32[(49940)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(49940)>>2] = 0;
   HEAP32[(49952)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(49944)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(49944)>>2] = $526;
  $527 = HEAP32[(49956)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(49956)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[12601]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(50412)>>2] = 4096;
  HEAP32[(50408)>>2] = 4096;
  HEAP32[(50416)>>2] = -1;
  HEAP32[(50420)>>2] = -1;
  HEAP32[(50424)>>2] = 0;
  HEAP32[(50376)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[12601] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(50412)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(50372)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(50364)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(50376)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(49956)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (50380);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(50408)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(50364)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(50372)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(50412)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(50376)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(50376)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(50364)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(50364)>>2] = $624;
  $625 = HEAP32[(50368)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(50368)>>2] = $624;
  }
  $627 = HEAP32[(49956)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(49948)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(49948)>>2] = $$748$i;
    }
    HEAP32[(50380)>>2] = $$748$i;
    HEAP32[(50384)>>2] = $$723947$i;
    HEAP32[(50392)>>2] = 0;
    $632 = HEAP32[12601]|0;
    HEAP32[(49968)>>2] = $632;
    HEAP32[(49964)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (49972 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(49956)>>2] = $646;
    HEAP32[(49944)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(50420)>>2]|0;
    HEAP32[(49960)>>2] = $652;
   } else {
    $$024370$i = (50380);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(49944)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(49956)>>2] = $676;
       HEAP32[(49944)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(50420)>>2]|0;
       HEAP32[(49960)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(49948)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(49948)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (50380);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (50380);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(49944)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(49944)>>2] = $724;
        HEAP32[(49956)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(49952)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(49940)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(49940)>>2] = $730;
         HEAP32[(49952)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (49972 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[12483]|0;
            $757 = $756 & $755;
            HEAP32[12483] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (50236 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(49936)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(49936)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(49948)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(49948)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(49948)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (49972 + ($834<<2)|0);
         $836 = HEAP32[12483]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[12483] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(49948)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (50236 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(49936)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(49936)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(49948)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(49948)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (50380);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(49956)>>2] = $944;
    HEAP32[(49944)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(50420)>>2]|0;
    HEAP32[(49960)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(50380)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(50380)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(50380)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(50380)+12>>2]|0;
    HEAP32[(50380)>>2] = $$748$i;
    HEAP32[(50384)>>2] = $$723947$i;
    HEAP32[(50392)>>2] = 0;
    HEAP32[(50388)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (49972 + ($965<<2)|0);
      $967 = HEAP32[12483]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[12483] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(49948)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (50236 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(49936)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(49936)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(49948)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(49948)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(49944)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(49944)>>2] = $1047;
   $1048 = HEAP32[(49956)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(49956)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(49948)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(49952)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(49940)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (49972 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[12483]|0;
     $38 = $37 & $36;
     HEAP32[12483] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (50236 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(49936)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(49936)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(49948)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(49948)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(49948)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(49956)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(49944)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(49944)>>2] = $123;
   HEAP32[(49956)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(49952)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(49952)>>2] = 0;
   HEAP32[(49940)>>2] = 0;
   return;
  }
  $128 = HEAP32[(49952)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(49940)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(49940)>>2] = $131;
   HEAP32[(49952)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (49972 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(49948)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[12483]|0;
     $155 = $154 & $153;
     HEAP32[12483] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(49948)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(49948)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(49948)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (50236 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(49936)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(49936)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(49948)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(49948)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(49948)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(49952)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(49940)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (49972 + ($236<<2)|0);
  $238 = HEAP32[12483]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[12483] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(49948)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (50236 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(49936)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(49936)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(49948)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(49948)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(49964)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(49964)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (50388);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(49964)>>2] = -1;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&15](a1|0,+a2,+a3);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&3](a1|0)|0;
}


function dynCall_didii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0;
  return +FUNCTION_TABLE_didii[index&15](a1|0,+a2,a3|0,a4|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&31]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function dynCall_vidiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_vidiii[index&15](a1|0,+a2,a3|0,a4|0,a5|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0; nullFunc_didii(5);return +0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b7() {
 ; nullFunc_v(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0;
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_vidiii(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,___stdout_write,___stdio_seek,___stdio_write,_sn_write,_nk_malloc,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_cleanup,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,_nk_mfree,b2,b2,b2,b2,_nk_glfw3_char_callback,b2,_nk_glfw3_clipbard_paste,b2,b2,b2,b2,_error_callback,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vidd = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_nk_gflw3_scroll_callback,b3,b3];
var FUNCTION_TABLE_ii = [b4,b4,b4,___stdio_close];
var FUNCTION_TABLE_didii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_nk_font_text_width,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_nk_glfw3_clipbard_copy,b6,b6,b6,b6,b6,b6,_windowSizeCallback,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_render,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iii = [b8,_nk_filter_decimal,_nk_filter_float,b8,b8,b8,b8,b8,b8,b8,b8,b8,_nk_filter_default,b8,b8,b8,b8,_nk_filter_hex,_nk_filter_oct,_nk_filter_binary,_nk_filter_ascii,b8,b8,b8,_nk_rect_height_compare,_nk_rect_original_order,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_vidiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_nk_font_query_font_glyph,b9,b9,b9,b9];

  return { ___muldsi3: ___muldsi3, _sbrk: _sbrk, _i64Subtract: _i64Subtract, _free: _free, _main: _main, _i64Add: _i64Add, _pthread_self: _pthread_self, _llvm_cttz_i32: _llvm_cttz_i32, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, ___muldi3: ___muldi3, _bitshift64Shl: _bitshift64Shl, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, ___errno_location: ___errno_location, ___udivmoddi4: ___udivmoddi4, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_vidd: dynCall_vidd, dynCall_ii: dynCall_ii, dynCall_didii: dynCall_didii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii, dynCall_vidiii: dynCall_vidiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_didii = Module["dynCall_didii"] = asm["dynCall_didii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vidiii = Module["dynCall_vidiii"] = asm["dynCall_vidiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



